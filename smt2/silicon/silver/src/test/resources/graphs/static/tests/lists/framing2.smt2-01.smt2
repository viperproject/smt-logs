(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-29 14:52:11
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Set<$Ref> 0)
(declare-sort Set<Edge> 0)
(declare-sort Set<$Snap> 0)
(declare-sort FramingWisdoms 0)
(declare-sort Edge 0)
(declare-sort TrClo 0)
(declare-sort $FVF<next> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<Edge>To$Snap (Set<Edge>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Edge> ($Snap) Set<Edge>)
(assert (forall ((x Set<Edge>)) (!
    (= x ($SortWrappers.$SnapToSet<Edge>($SortWrappers.Set<Edge>To$Snap x)))
    :pattern (($SortWrappers.Set<Edge>To$Snap x))
    :qid |$Snap.$SnapToSet<Edge>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Edge>To$Snap($SortWrappers.$SnapToSet<Edge> x)))
    :pattern (($SortWrappers.$SnapToSet<Edge> x))
    :qid |$Snap.Set<Edge>To$SnapToSet<Edge>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.FramingWisdomsTo$Snap (FramingWisdoms) $Snap)
(declare-fun $SortWrappers.$SnapToFramingWisdoms ($Snap) FramingWisdoms)
(assert (forall ((x FramingWisdoms)) (!
    (= x ($SortWrappers.$SnapToFramingWisdoms($SortWrappers.FramingWisdomsTo$Snap x)))
    :pattern (($SortWrappers.FramingWisdomsTo$Snap x))
    :qid |$Snap.$SnapToFramingWisdomsTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.FramingWisdomsTo$Snap($SortWrappers.$SnapToFramingWisdoms x)))
    :pattern (($SortWrappers.$SnapToFramingWisdoms x))
    :qid |$Snap.FramingWisdomsTo$SnapToFramingWisdoms|
    )))
(declare-fun $SortWrappers.EdgeTo$Snap (Edge) $Snap)
(declare-fun $SortWrappers.$SnapToEdge ($Snap) Edge)
(assert (forall ((x Edge)) (!
    (= x ($SortWrappers.$SnapToEdge($SortWrappers.EdgeTo$Snap x)))
    :pattern (($SortWrappers.EdgeTo$Snap x))
    :qid |$Snap.$SnapToEdgeTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.EdgeTo$Snap($SortWrappers.$SnapToEdge x)))
    :pattern (($SortWrappers.$SnapToEdge x))
    :qid |$Snap.EdgeTo$SnapToEdge|
    )))
(declare-fun $SortWrappers.TrCloTo$Snap (TrClo) $Snap)
(declare-fun $SortWrappers.$SnapToTrClo ($Snap) TrClo)
(assert (forall ((x TrClo)) (!
    (= x ($SortWrappers.$SnapToTrClo($SortWrappers.TrCloTo$Snap x)))
    :pattern (($SortWrappers.TrCloTo$Snap x))
    :qid |$Snap.$SnapToTrCloTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.TrCloTo$Snap($SortWrappers.$SnapToTrClo x)))
    :pattern (($SortWrappers.$SnapToTrClo x))
    :qid |$Snap.TrCloTo$SnapToTrClo|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<next>To$Snap ($FVF<next>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<next> ($Snap) $FVF<next>)
(assert (forall ((x $FVF<next>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<next>($SortWrappers.$FVF<next>To$Snap x)))
    :pattern (($SortWrappers.$FVF<next>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<next>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<next>To$Snap($SortWrappers.$SnapTo$FVF<next> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<next> x))
    :qid |$Snap.$FVF<next>To$SnapTo$FVF<next>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<Edge>) Int)
(declare-const Set_empty Set<Edge>)
(declare-fun Set_in (Edge Set<Edge>) Bool)
(declare-fun Set_singleton (Edge) Set<Edge>)
(declare-fun Set_unionone (Set<Edge> Edge) Set<Edge>)
(declare-fun Set_union (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_intersection (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_difference (Set<Edge> Set<Edge>) Set<Edge>)
(declare-fun Set_subset (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_equal (Set<Edge> Set<Edge>) Bool)
(declare-fun Set_skolem_diff (Set<Edge> Set<Edge>) Edge)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun exists_path<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_path_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun exists_spath<Bool> (Set<Edge> Set<$Ref> $Ref) Bool)
(declare-fun apply_noExit<Bool> (Set<Edge> Set<$Ref> Set<$Ref>) Bool)
(declare-fun inst_uReach<Set<Ref>> (Set<Edge> $Ref) Set<$Ref>)
(declare-fun acyclic_graph<Bool> (Set<Edge>) Bool)
(declare-fun unshared_graph<Bool> (Set<Edge>) Bool)
(declare-fun func_graph<Bool> (Set<Edge>) Bool)
(declare-fun edge<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_<Bool> (Set<Edge> $Ref $Ref) Bool)
(declare-fun edge_pred<Ref> (Edge) $Ref)
(declare-fun edge_succ<Ref> (Edge) $Ref)
(declare-fun create_edge<Edge> ($Ref $Ref) Edge)
(declare-fun create_edge_<Edge> ($Ref $Ref) Edge)
; /field_value_functions_declarations.smt2 [next: Ref]
(declare-fun $FVF.domain_next ($FVF<next>) Set<$Ref>)
(declare-fun $FVF.lookup_next ($FVF<next> $Ref) $Ref)
(declare-fun $FVF.after_next ($FVF<next> $FVF<next>) Bool)
(declare-fun $FVF.loc_next ($Ref $Ref) Bool)
(declare-fun $FVF.perm_next ($FPM $Ref) $Perm)
(declare-const $fvfTOP_next $FVF<next>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun $$ ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%limited ($Snap Set<$Ref>) Set<Edge>)
(declare-fun $$%stateless (Set<$Ref>) Bool)
(declare-fun $$%precondition ($Snap Set<$Ref>) Bool)
(declare-fun apply_TCFraming ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun apply_TCFraming%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%limited ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%stateless (Set<$Ref> Set<$Ref>) Bool)
(declare-fun is_global_sroot%precondition ($Snap Set<$Ref> Set<$Ref>) Bool)
(declare-fun acyclic_list_segment ($Snap Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%limited ($Snap Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%stateless (Set<$Ref>) Bool)
(declare-fun acyclic_list_segment%precondition ($Snap Set<$Ref>) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Edge>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Edge)) (!
  (not (Set_in o (as Set_empty  Set<Edge>)))
  :pattern ((Set_in o (as Set_empty  Set<Edge>)))
  )))
(assert (forall ((s Set<Edge>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Edge>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Edge))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Edge)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Edge) (o Edge)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Edge)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (o Edge)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Edge>) (x Edge) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (x Edge)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (o Edge)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>) (y Edge)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=
    (Set_subset a b)
    (forall ((o Edge)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Edge>) (b Set<Edge>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge<Bool> EG p s) (edge_<Bool> EG p s))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_EdgeSynonim|)))
(assert (forall ((EG Set<Edge>) (p $Ref) (s $Ref)) (!
  (= (edge_<Bool> EG p s) (Set_in (create_edge<Edge> p s) EG))
  :pattern ((Set_in (create_edge<Edge> p s) EG))
  :pattern ((edge<Bool> EG p s))
  :qid |prog.ax_Edge|)))
(assert (forall ((EG Set<Edge>) (U Set<$Ref>) (M Set<$Ref>)) (!
  (=>
    (and
      (apply_noExit<Bool> EG U M)
      (forall ((u $Ref) (v $Ref)) (!
        (=>
          (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
          (not (edge<Bool> EG u v)))
        :pattern ((edge<Bool> EG u v))
        :pattern ((Set_in u M) (Set_in v M))
        )))
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u M) (and (Set_in v U) (not (Set_in v M))))
        (not (exists_path<Bool> EG u v)))
      :pattern ((exists_path<Bool> EG u v))
      :pattern ((Set_in u M) (Set_in v M))
      )))
  :pattern ((apply_noExit<Bool> EG U M))
  :qid |prog.ax_NoExit|)))
(assert (forall ((EG Set<Edge>) (x $Ref) (v $Ref)) (!
  (= (Set_in v (inst_uReach<Set<Ref>> EG x)) (exists_path<Bool> EG x v))
  :pattern ((Set_in v (inst_uReach<Set<Ref>> EG x)))
  :pattern ((exists_path<Bool> EG x v))
  :qid |prog.ax_instantiation_uReach|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (= (exists_path<Bool> EG start end) (exists_path_<Bool> EG start end))
  :pattern ((exists_path<Bool> EG start end))
  :qid |prog.ax_Alias|)))
(assert (forall ((EG Set<Edge>) (start $Ref) (end $Ref)) (!
  (=
    (exists_path_<Bool> EG start end)
    (or
      (= start end)
      (exists ((w $Ref)) (!
        (and (edge<Bool> EG start w) (exists_path_<Bool> EG w end))
        :pattern ((edge<Bool> EG start w))
        :pattern ((exists_path_<Bool> EG w end))
        ))))
  :pattern ((exists_path<Bool> EG start end))
  :pattern ((edge<Bool> EG start end))
  :qid |prog.ax_ExistsPath|)))
(assert (forall ((EG Set<Edge>) (u $Ref) (v $Ref) (w $Ref)) (!
  (=>
    (and (exists_path_<Bool> EG u w) (exists_path_<Bool> EG w v))
    (exists_path_<Bool> EG u v))
  :pattern ((exists_path<Bool> EG u w) (exists_path<Bool> EG w v))
  :qid |prog.ax_ExistsPathTrans|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (acyclic_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref)) (!
      (or (not (edge<Bool> EG v1 v2)) (not (exists_path<Bool> EG v2 v1)))
      :pattern ((edge<Bool> EG v1 v2))
      :pattern ((exists_path<Bool> EG v2 v1))
      )))
  :pattern ((acyclic_graph<Bool> EG))
  :qid |prog.ax_AcyclicGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (unshared_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v1 v) (edge<Bool> EG v2 v)) (= v1 v2))
      :pattern ((edge<Bool> EG v1 v) (edge<Bool> EG v2 v))
      )))
  :pattern ((unshared_graph<Bool> EG))
  :qid |prog.ax_UnsharedGraph|)))
(assert (forall ((EG Set<Edge>)) (!
  (=
    (func_graph<Bool> EG)
    (forall ((v1 $Ref) (v2 $Ref) (v $Ref)) (!
      (=> (and (edge<Bool> EG v v1) (edge<Bool> EG v v2)) (= v1 v2))
      :pattern ((edge<Bool> EG v v1) (edge<Bool> EG v v2))
      )))
  :pattern ((func_graph<Bool> EG))
  :qid |prog.ax_FuncGraph|)))
(assert (forall ((EG Set<Edge>) (from Set<$Ref>) (to $Ref)) (!
  (=
    (exists_spath<Bool> EG from to)
    (exists ((f $Ref)) (!
      (and (Set_in f from) (exists_path<Bool> EG f to))
      :pattern ((Set_in f from))
      :pattern ((exists_path<Bool> EG f to))
      )))
  :pattern ((exists_spath<Bool> EG from to))
  :qid |prog.ax_ExistsSetPath|)))
(assert (forall ((g0 Set<$Ref>) (g1 Set<$Ref>)) (!
  (=>
    (Set_equal (Set_intersection g0 g1) (as Set_empty  Set<$Ref>))
    (forall ((r $Ref)) (!
      (=> (and (Set_in r g0) (Set_in r g1)) (Set_in r (as Set_empty  Set<$Ref>)))
      :pattern ((Set_in r g0) (Set_in r g1))
      )))
  :pattern ((Set_intersection g0 g1))
  :qid |prog.ax_SetIntersection|)))
(assert (forall ((g Set<Edge>) (e Edge)) (!
  (=>
    (Set_in e g)
    (= (create_edge<Edge> (edge_pred<Ref> e) (edge_succ<Ref> e)) e))
  :pattern ((Set_in e g))
  :qid |prog.ax_EdgeReverse|)))
(assert (forall ((p $Ref) (s $Ref)) (!
  (and
    (= (edge_pred<Ref> (create_edge<Edge> p s)) p)
    (= (edge_succ<Ref> (create_edge<Edge> p s)) s))
  :pattern ((create_edge<Edge> p s))
  :qid |prog.edge_injectivity|)))
; /field_value_functions_axioms.smt2 [next: Ref]
(assert (forall ((vs $FVF<next>) (ws $FVF<next>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_next vs) ($FVF.domain_next ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_next vs))
            (= ($FVF.lookup_next vs x) ($FVF.lookup_next ws x)))
          :pattern (($FVF.lookup_next vs x) ($FVF.lookup_next ws x))
          :qid |qp.$FVF<next>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<next>To$Snap vs)
              ($SortWrappers.$FVF<next>To$Snap ws)
              )
    :qid |qp.$FVF<next>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_next pm r))
    :pattern (($FVF.perm_next pm r)))))
(assert (forall ((r $Ref) (f $Ref)) (!
    (= ($FVF.loc_next f r) true)
    :pattern (($FVF.loc_next f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(declare-fun inv@12@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@13@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@11@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@14@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@20@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@21@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@25@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@26@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@33@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@34@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@37@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@38@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@56@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@57@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun inv@60@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@61@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@19@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@22@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@27@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@35@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@40@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@58@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@63@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@78@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@79@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@77@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun sm@80@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@84@00 ($Snap Set<$Ref> Set<$Ref> $Ref) $Ref)
(declare-fun img@85@00 ($Snap Set<$Ref> Set<$Ref> $Ref) Bool)
(declare-fun sm@86@00 ($Snap Set<$Ref> Set<$Ref>) $FVF<next>)
(declare-fun inv@89@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@90@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@88@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@91@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun inv@94@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@95@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@98@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@99@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun inv@103@00 ($Snap Set<$Ref> $Ref) $Ref)
(declare-fun img@104@00 ($Snap Set<$Ref> $Ref) Bool)
(declare-fun sm@96@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@101@00 ($Snap Set<$Ref>) $FVF<next>)
(declare-fun sm@106@00 ($Snap Set<$Ref>) $FVF<next>)
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (= ($$%limited s@$ refs@0@00) ($$ s@$ refs@0@00))
  :pattern (($$ s@$ refs@0@00))
  :qid |quant-u-14019|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  ($$%stateless refs@0@00)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-14020|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) (and
    (forall ((n@10@00 $Ref)) (!
      (=>
        (Set_in n@10@00 refs@0@00)
        (and
          (= (inv@12@00 s@$ refs@0@00 n@10@00) n@10@00)
          (img@13@00 s@$ refs@0@00 n@10@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) n@10@00) n@10@00))
      :qid |quant-u-14028|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@13@00 s@$ refs@0@00 r)
          (Set_in (inv@12@00 s@$ refs@0@00 r) refs@0@00))
        (= (inv@12@00 s@$ refs@0@00 r) r))
      :pattern ((inv@12@00 s@$ refs@0@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@11@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef0|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@13@00 s@$ refs@0@00 r)
          (Set_in (inv@12@00 s@$ refs@0@00 r) refs@0@00))
        (=
          ($FVF.lookup_next (sm@14@00 s@$ refs@0@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r)))
      :pattern (($FVF.lookup_next (sm@14@00 s@$ refs@0@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r))
      :qid |qp.fvfValDef1|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> s@$) r) r)
      :pattern (($FVF.lookup_next (sm@14@00 s@$ refs@0@00) r))
      :qid |qp.fvfResTrgDef2|))
    (=>
      ($$%precondition s@$ refs@0@00)
      (forall ((p $Ref) (s $Ref)) (!
        (=
          (and
            (Set_in p refs@0@00)
            (and
              (Set_in s refs@0@00)
              (= ($FVF.lookup_next (sm@14@00 s@$ refs@0@00) p) s)))
          (Set_in (create_edge<Edge> p s) result@1@00))
        :pattern ((create_edge<Edge> p s))
        )))))
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-14030|)))
(assert (forall ((s@$ $Snap) (refs@0@00 Set<$Ref>)) (!
  (let ((result@1@00 ($$%limited s@$ refs@0@00))) true)
  :pattern (($$%limited s@$ refs@0@00))
  :qid |quant-u-14031|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (=
    (apply_TCFraming%limited s@$ g0@2@00 g1@3@00)
    (apply_TCFraming s@$ g0@2@00 g1@3@00))
  :pattern ((apply_TCFraming s@$ g0@2@00 g1@3@00))
  :qid |quant-u-14021|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (apply_TCFraming%stateless g0@2@00 g1@3@00)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-14022|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (and
    (forall ((n@18@00 $Ref)) (!
      (=>
        (Set_in n@18@00 g0@2@00)
        (and
          (= (inv@20@00 s@$ g0@2@00 g1@3@00 n@18@00) n@18@00)
          (img@21@00 s@$ g0@2@00 g1@3@00 n@18@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@18@00) n@18@00))
      :qid |quant-u-14033|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@21@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@20@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@20@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n$1@24@00 $Ref)) (!
      (=>
        (Set_in n$1@24@00 g1@3@00)
        (and
          (= (inv@25@00 s@$ g0@2@00 g1@3@00 n$1@24@00) n$1@24@00)
          (img@26@00 s@$ g0@2@00 g1@3@00 n$1@24@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) n$1@24@00) n$1@24@00))
      :qid |quant-u-14036|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@26@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@25@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@25@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@25@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@32@00 $Ref)) (!
      (=>
        (Set_in n@32@00 g0@2@00)
        (and
          (= (inv@33@00 s@$ g0@2@00 g1@3@00 n@32@00) n@32@00)
          (img@34@00 s@$ g0@2@00 g1@3@00 n@32@00)))
      :pattern ((Set_in n@32@00 g0@2@00))
      :pattern ((inv@33@00 s@$ g0@2@00 g1@3@00 n@32@00))
      :pattern ((img@34@00 s@$ g0@2@00 g1@3@00 n@32@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@34@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (= (inv@33@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@33@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@36@00 $Ref)) (!
      (=>
        (Set_in n@36@00 (Set_union g0@2@00 g1@3@00))
        (and
          (= (inv@37@00 s@$ g0@2@00 g1@3@00 n@36@00) n@36@00)
          (img@38@00 s@$ g0@2@00 g1@3@00 n@36@00)))
      :pattern ((Set_in n@36@00 (Set_union g0@2@00 g1@3@00)))
      :pattern ((inv@37@00 s@$ g0@2@00 g1@3@00 n@36@00))
      :pattern ((img@38@00 s@$ g0@2@00 g1@3@00 n@36@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@38@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00)))
        (= (inv@37@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@37@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@55@00 $Ref)) (!
      (=>
        (Set_in n@55@00 g1@3@00)
        (and
          (= (inv@56@00 s@$ g0@2@00 g1@3@00 n@55@00) n@55@00)
          (img@57@00 s@$ g0@2@00 g1@3@00 n@55@00)))
      :pattern ((Set_in n@55@00 g1@3@00))
      :pattern ((inv@56@00 s@$ g0@2@00 g1@3@00 n@55@00))
      :pattern ((img@57@00 s@$ g0@2@00 g1@3@00 n@55@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@57@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@56@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (= (inv@56@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@56@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@59@00 $Ref)) (!
      (=>
        (Set_in n@59@00 (Set_union g1@3@00 g0@2@00))
        (and
          (= (inv@60@00 s@$ g0@2@00 g1@3@00 n@59@00) n@59@00)
          (img@61@00 s@$ g0@2@00 g1@3@00 n@59@00)))
      :pattern ((Set_in n@59@00 (Set_union g1@3@00 g0@2@00)))
      :pattern ((inv@60@00 s@$ g0@2@00 g1@3@00 n@59@00))
      :pattern ((img@61@00 s@$ g0@2@00 g1@3@00 n@59@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@61@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00)))
        (= (inv@60@00 s@$ g0@2@00 g1@3@00 r) r))
      :pattern ((inv@60@00 s@$ g0@2@00 g1@3@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@19@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef3|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@21@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_next (sm@22@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@22@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef4|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@22@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef5|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@21@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00))
        (=
          ($FVF.lookup_next (sm@27@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@27@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef6|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@26@00 s@$ g0@2@00 g1@3@00 r)
          (Set_in (inv@25@00 s@$ g0@2@00 g1@3@00 r) g1@3@00))
        (=
          ($FVF.lookup_next (sm@27@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r)))
      :pattern (($FVF.lookup_next (sm@27@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r))
      :qid |qp.fvfValDef7|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r) r))
      :pattern (($FVF.lookup_next (sm@27@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef8|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@35@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@34@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@34@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@35@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@35@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef12|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@34@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@21@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@35@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@35@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef9|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@33@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)
            (img@34@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@26@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@25@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@35@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r)))
      :pattern (($FVF.lookup_next (sm@35@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r))
      :qid |qp.fvfValDef10|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r) r))
      :pattern (($FVF.lookup_next (sm@35@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef11|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@40@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@38@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@38@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@40@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@40@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef19|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@38@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@21@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef16|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@37@00 s@$ g0@2@00 g1@3@00 r) (Set_union g0@2@00 g1@3@00))
            (img@38@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@26@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@25@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r)))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r))
      :qid |qp.fvfValDef17|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r) r))
      :pattern (($FVF.lookup_next (sm@40@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef18|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@58@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@56@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@57@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@56@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@57@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@58@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@58@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef35|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@56@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@57@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@21@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@58@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef32|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@56@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)
            (img@57@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@26@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@25@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@58@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r)))
      :pattern (($FVF.lookup_next (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r))
      :qid |qp.fvfValDef33|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r) r))
      :pattern (($FVF.lookup_next (sm@58@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef34|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@63@00 s@$ g0@2@00 g1@3@00)))
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r)))
        (=>
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (Set_in r ($FVF.domain_next (sm@63@00 s@$ g0@2@00 g1@3@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@63@00 s@$ g0@2@00 g1@3@00))))
      :qid |qp.fvfDomDef42|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@21@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@20@00 s@$ g0@2@00 g1@3@00 r) g0@2@00)))
        (=
          ($FVF.lookup_next (sm@63@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef39|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@60@00 s@$ g0@2@00 g1@3@00 r) (Set_union g1@3@00 g0@2@00))
            (img@61@00 s@$ g0@2@00 g1@3@00 r))
          (and
            (img@26@00 s@$ g0@2@00 g1@3@00 r)
            (Set_in (inv@25@00 s@$ g0@2@00 g1@3@00 r) g1@3@00)))
        (=
          ($FVF.lookup_next (sm@63@00 s@$ g0@2@00 g1@3@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r)))
      :pattern (($FVF.lookup_next (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r))
      :qid |qp.fvfValDef40|))
    (forall ((r $Ref)) (!
      (and
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
        ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second s@$)))))) r) r))
      :pattern (($FVF.lookup_next (sm@63@00 s@$ g0@2@00 g1@3@00) r))
      :qid |qp.fvfResTrgDef41|))
    (=>
      (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
      (and
        (Set_equal (Set_union g0@2@00 g1@3@00) (Set_union g1@3@00 g0@2@00))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and (Set_in u g0@2@00) (Set_in v g0@2@00))
            (=
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v)))
          :pattern ((Set_in u g0@2@00) (Set_in v g0@2@00))
          :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))
          :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))
          :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v))
          :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))
          :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v))
          ))
        (forall ((u $Ref) (v $Ref)) (!
          (=>
            (and (Set_in u g1@3@00) (Set_in v g1@3@00))
            (=
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v)))
          :pattern ((Set_in u g1@3@00) (Set_in v g1@3@00))
          :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v))
          :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v))
          :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v))
          :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v))
          :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v))
          ))))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-14069|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) true)
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-14070|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u g0@2@00) (Set_in v g0@2@00))
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00)
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00))))
      :pattern ((Set_in u g0@2@00) (Set_in v g0@2@00))
      :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))
      :pattern ((Set_in u g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v))
      :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))
      :pattern ((Set_in v g0@2@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@35@00 s@$ g0@2@00 g1@3@00)) g0@2@00) u v))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@40@00 s@$ g0@2@00 g1@3@00)) (Set_union g0@2@00 g1@3@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-14071|)))
(assert (forall ((s@$ $Snap) (g0@2@00 Set<$Ref>) (g1@3@00 Set<$Ref>)) (!
  (let ((result@4@00 (apply_TCFraming%limited s@$ g0@2@00 g1@3@00))) (=>
    (apply_TCFraming%precondition s@$ g0@2@00 g1@3@00)
    (forall ((u $Ref) (v $Ref)) (!
      (=>
        (and (Set_in u g1@3@00) (Set_in v g1@3@00))
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00)
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00))))
      :pattern ((Set_in u g1@3@00) (Set_in v g1@3@00))
      :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v))
      :pattern ((Set_in u g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v))
      :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v))
      :pattern ((Set_in v g1@3@00) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@58@00 s@$ g0@2@00 g1@3@00)) g1@3@00) u v))
      :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@63@00 s@$ g0@2@00 g1@3@00)) (Set_union g1@3@00 g0@2@00)) u v))
      ))))
  :pattern ((apply_TCFraming%limited s@$ g0@2@00 g1@3@00))
  :qid |quant-u-14072|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (=
    (is_global_sroot%limited s@$ g@5@00 roots@6@00)
    (is_global_sroot s@$ g@5@00 roots@6@00))
  :pattern ((is_global_sroot s@$ g@5@00 roots@6@00))
  :qid |quant-u-14023|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (is_global_sroot%stateless g@5@00 roots@6@00)
  :pattern ((is_global_sroot%limited s@$ g@5@00 roots@6@00))
  :qid |quant-u-14024|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (and
    (forall ((n$0@76@00 $Ref)) (!
      (=>
        (Set_in n$0@76@00 g@5@00)
        (and
          (= (inv@78@00 s@$ g@5@00 roots@6@00 n$0@76@00) n$0@76@00)
          (img@79@00 s@$ g@5@00 roots@6@00 n$0@76@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n$0@76@00) n$0@76@00))
      :qid |quant-u-14074|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@79@00 s@$ g@5@00 roots@6@00 r)
          (Set_in (inv@78@00 s@$ g@5@00 roots@6@00 r) g@5@00))
        (= (inv@78@00 s@$ g@5@00 roots@6@00 r) r))
      :pattern ((inv@78@00 s@$ g@5@00 roots@6@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@83@00 $Ref)) (!
      (=>
        (Set_in n@83@00 g@5@00)
        (and
          (= (inv@84@00 s@$ g@5@00 roots@6@00 n@83@00) n@83@00)
          (img@85@00 s@$ g@5@00 roots@6@00 n@83@00)))
      :pattern ((Set_in n@83@00 g@5@00))
      :pattern ((inv@84@00 s@$ g@5@00 roots@6@00 n@83@00))
      :pattern ((img@85@00 s@$ g@5@00 roots@6@00 n@83@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@85@00 s@$ g@5@00 roots@6@00 r)
          (Set_in (inv@84@00 s@$ g@5@00 roots@6@00 r) g@5@00))
        (= (inv@84@00 s@$ g@5@00 roots@6@00 r) r))
      :pattern ((inv@84@00 s@$ g@5@00 roots@6@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@77@00 s@$ g@5@00 roots@6@00) r))
      :qid |qp.fvfResTrgDef55|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (img@79@00 s@$ g@5@00 roots@6@00 r)
          (Set_in (inv@78@00 s@$ g@5@00 roots@6@00 r) g@5@00))
        (=
          ($FVF.lookup_next (sm@80@00 s@$ g@5@00 roots@6@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@80@00 s@$ g@5@00 roots@6@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef56|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@80@00 s@$ g@5@00 roots@6@00) r))
      :qid |qp.fvfResTrgDef57|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@86@00 s@$ g@5@00 roots@6@00)))
          (and
            (Set_in (inv@84@00 s@$ g@5@00 roots@6@00 r) g@5@00)
            (img@85@00 s@$ g@5@00 roots@6@00 r)))
        (=>
          (and
            (Set_in (inv@84@00 s@$ g@5@00 roots@6@00 r) g@5@00)
            (img@85@00 s@$ g@5@00 roots@6@00 r))
          (Set_in r ($FVF.domain_next (sm@86@00 s@$ g@5@00 roots@6@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@86@00 s@$ g@5@00 roots@6@00))))
      :qid |qp.fvfDomDef60|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@84@00 s@$ g@5@00 roots@6@00 r) g@5@00)
            (img@85@00 s@$ g@5@00 roots@6@00 r))
          (and
            (img@79@00 s@$ g@5@00 roots@6@00 r)
            (Set_in (inv@78@00 s@$ g@5@00 roots@6@00 r) g@5@00)))
        (=
          ($FVF.lookup_next (sm@86@00 s@$ g@5@00 roots@6@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@86@00 s@$ g@5@00 roots@6@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef58|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@86@00 s@$ g@5@00 roots@6@00) r))
      :qid |qp.fvfResTrgDef59|))
    (=>
      (is_global_sroot%precondition s@$ g@5@00 roots@6@00)
      (=
        (is_global_sroot s@$ g@5@00 roots@6@00)
        (forall ((n $Ref)) (!
          (=>
            (Set_in n g@5@00)
            (exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@86@00 s@$ g@5@00 roots@6@00)) g@5@00) roots@6@00 n))
          :pattern ((Set_in n g@5@00))
          :pattern ((exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@86@00 s@$ g@5@00 roots@6@00)) g@5@00) roots@6@00 n))
          )))))
  :pattern ((is_global_sroot s@$ g@5@00 roots@6@00))
  :qid |quant-u-14079|)))
(assert (forall ((s@$ $Snap) (g@5@00 Set<$Ref>) (roots@6@00 Set<$Ref>)) (!
  (=>
    (is_global_sroot%precondition s@$ g@5@00 roots@6@00)
    (forall ((n $Ref)) (!
      (=>
        (Set_in n g@5@00)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@86@00 s@$ g@5@00 roots@6@00)) g@5@00))
      :pattern ((Set_in n g@5@00))
      :pattern ((exists_spath<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@86@00 s@$ g@5@00 roots@6@00)) g@5@00) roots@6@00 n))
      )))
  :pattern ((is_global_sroot s@$ g@5@00 roots@6@00))
  :qid |quant-u-14080|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (= (acyclic_list_segment%limited s@$ g@8@00) (acyclic_list_segment s@$ g@8@00))
  :pattern ((acyclic_list_segment s@$ g@8@00))
  :qid |quant-u-14025|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (acyclic_list_segment%stateless g@8@00)
  :pattern ((acyclic_list_segment%limited s@$ g@8@00))
  :qid |quant-u-14026|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (and
    (forall ((n@87@00 $Ref)) (!
      (=>
        (Set_in n@87@00 g@8@00)
        (and
          (= (inv@89@00 s@$ g@8@00 n@87@00) n@87@00)
          (img@90@00 s@$ g@8@00 n@87@00)))
      :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) n@87@00) n@87@00))
      :qid |quant-u-14082|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@90@00 s@$ g@8@00 r) (Set_in (inv@89@00 s@$ g@8@00 r) g@8@00))
        (= (inv@89@00 s@$ g@8@00 r) r))
      :pattern ((inv@89@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@93@00 $Ref)) (!
      (=>
        (Set_in n@93@00 g@8@00)
        (and
          (= (inv@94@00 s@$ g@8@00 n@93@00) n@93@00)
          (img@95@00 s@$ g@8@00 n@93@00)))
      :pattern ((Set_in n@93@00 g@8@00))
      :pattern ((inv@94@00 s@$ g@8@00 n@93@00))
      :pattern ((img@95@00 s@$ g@8@00 n@93@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@95@00 s@$ g@8@00 r) (Set_in (inv@94@00 s@$ g@8@00 r) g@8@00))
        (= (inv@94@00 s@$ g@8@00 r) r))
      :pattern ((inv@94@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@97@00 $Ref)) (!
      (=>
        (Set_in n@97@00 g@8@00)
        (and
          (= (inv@98@00 s@$ g@8@00 n@97@00) n@97@00)
          (img@99@00 s@$ g@8@00 n@97@00)))
      :pattern ((Set_in n@97@00 g@8@00))
      :pattern ((inv@98@00 s@$ g@8@00 n@97@00))
      :pattern ((img@99@00 s@$ g@8@00 n@97@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@99@00 s@$ g@8@00 r) (Set_in (inv@98@00 s@$ g@8@00 r) g@8@00))
        (= (inv@98@00 s@$ g@8@00 r) r))
      :pattern ((inv@98@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((n@102@00 $Ref)) (!
      (=>
        (Set_in n@102@00 g@8@00)
        (and
          (= (inv@103@00 s@$ g@8@00 n@102@00) n@102@00)
          (img@104@00 s@$ g@8@00 n@102@00)))
      :pattern ((Set_in n@102@00 g@8@00))
      :pattern ((inv@103@00 s@$ g@8@00 n@102@00))
      :pattern ((img@104@00 s@$ g@8@00 n@102@00))
      :qid |next-invOfFct|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@104@00 s@$ g@8@00 r) (Set_in (inv@103@00 s@$ g@8@00 r) g@8@00))
        (= (inv@103@00 s@$ g@8@00 r) r))
      :pattern ((inv@103@00 s@$ g@8@00 r))
      :qid |next-fctOfInv|))
    (forall ((r $Ref)) (!
      true
      :pattern (($FVF.lookup_next (sm@88@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef61|))
    (forall ((r $Ref)) (!
      (=>
        (and (img@90@00 s@$ g@8@00 r) (Set_in (inv@89@00 s@$ g@8@00 r) g@8@00))
        (=
          ($FVF.lookup_next (sm@91@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@91@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef62|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@91@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef63|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@96@00 s@$ g@8@00)))
          (and (Set_in (inv@94@00 s@$ g@8@00 r) g@8@00) (img@95@00 s@$ g@8@00 r)))
        (=>
          (and (Set_in (inv@94@00 s@$ g@8@00 r) g@8@00) (img@95@00 s@$ g@8@00 r))
          (Set_in r ($FVF.domain_next (sm@96@00 s@$ g@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@96@00 s@$ g@8@00))))
      :qid |qp.fvfDomDef66|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@94@00 s@$ g@8@00 r) g@8@00) (img@95@00 s@$ g@8@00 r))
          (and (img@90@00 s@$ g@8@00 r) (Set_in (inv@89@00 s@$ g@8@00 r) g@8@00)))
        (=
          ($FVF.lookup_next (sm@96@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@96@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef64|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@96@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef65|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@101@00 s@$ g@8@00)))
          (and (Set_in (inv@98@00 s@$ g@8@00 r) g@8@00) (img@99@00 s@$ g@8@00 r)))
        (=>
          (and (Set_in (inv@98@00 s@$ g@8@00 r) g@8@00) (img@99@00 s@$ g@8@00 r))
          (Set_in r ($FVF.domain_next (sm@101@00 s@$ g@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@101@00 s@$ g@8@00))))
      :qid |qp.fvfDomDef71|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and (Set_in (inv@98@00 s@$ g@8@00 r) g@8@00) (img@99@00 s@$ g@8@00 r))
          (and (img@90@00 s@$ g@8@00 r) (Set_in (inv@89@00 s@$ g@8@00 r) g@8@00)))
        (=
          ($FVF.lookup_next (sm@101@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@101@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef69|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@101@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef70|))
    (forall ((r $Ref)) (!
      (and
        (=>
          (Set_in r ($FVF.domain_next (sm@106@00 s@$ g@8@00)))
          (and
            (Set_in (inv@103@00 s@$ g@8@00 r) g@8@00)
            (img@104@00 s@$ g@8@00 r)))
        (=>
          (and
            (Set_in (inv@103@00 s@$ g@8@00 r) g@8@00)
            (img@104@00 s@$ g@8@00 r))
          (Set_in r ($FVF.domain_next (sm@106@00 s@$ g@8@00)))))
      :pattern ((Set_in r ($FVF.domain_next (sm@106@00 s@$ g@8@00))))
      :qid |qp.fvfDomDef76|))
    (forall ((r $Ref)) (!
      (=>
        (and
          (and
            (Set_in (inv@103@00 s@$ g@8@00 r) g@8@00)
            (img@104@00 s@$ g@8@00 r))
          (and (img@90@00 s@$ g@8@00 r) (Set_in (inv@89@00 s@$ g@8@00 r) g@8@00)))
        (=
          ($FVF.lookup_next (sm@106@00 s@$ g@8@00) r)
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r)))
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g@8@00) r))
      :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r))
      :qid |qp.fvfValDef74|))
    (forall ((r $Ref)) (!
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second s@$))) r) r)
      :pattern (($FVF.lookup_next (sm@106@00 s@$ g@8@00) r))
      :qid |qp.fvfResTrgDef75|))
    (=>
      (acyclic_list_segment%precondition s@$ g@8@00)
      (=
        (acyclic_list_segment s@$ g@8@00)
        (and
          (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00))
          (and
            (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00))
            (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00)))))))
  :pattern ((acyclic_list_segment s@$ g@8@00))
  :qid |quant-u-14093|)))
(assert (forall ((s@$ $Snap) (g@8@00 Set<$Ref>)) (!
  (=>
    (acyclic_list_segment%precondition s@$ g@8@00)
    (and
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00)
      (=>
        (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00))
        (and
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00)
          (=>
            (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (sm@96@00 s@$ g@8@00)) g@8@00))))))
  :pattern ((acyclic_list_segment s@$ g@8@00))
  :qid |quant-u-14094|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- test_graph ----------
(declare-const g0@0@01 Set<$Ref>)
(declare-const g1@1@01 Set<$Ref>)
(declare-const g0@2@01 Set<$Ref>)
(declare-const g1@3@01 Set<$Ref>)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@4@01 $Snap)
(assert (= $t@4@01 ($Snap.combine ($Snap.first $t@4@01) ($Snap.second $t@4@01))))
(assert (= ($Snap.first $t@4@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@2@01)))
(assert (=
  ($Snap.second $t@4@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@4@01))
    ($Snap.second ($Snap.second $t@4@01)))))
(declare-const n@5@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@5@01 g0@2@01))
(declare-const sm@6@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@7@01 ($Ref) $Ref)
(declare-fun img@8@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@5@01 $Ref) (n2@5@01 $Ref)) (!
  (=>
    (and (Set_in n1@5@01 g0@2@01) (Set_in n2@5@01 g0@2@01) (= n1@5@01 n2@5@01))
    (= n1@5@01 n2@5@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@5@01 $Ref)) (!
  (=>
    (Set_in n@5@01 g0@2@01)
    (and (= (inv@7@01 n@5@01) n@5@01) (img@8@01 n@5@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) n@5@01) n@5@01))
  :qid |quant-u-14096|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)) (= (inv@7@01 r) r))
  :pattern ((inv@7@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@5@01 $Ref)) (!
  (=> (Set_in n@5@01 g0@2@01) (not (= n@5@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) n@5@01) n@5@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@9@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@7@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) r) r))
  :pattern ((inv@7@01 r))
  :qid |quant-u-14097|)))
(assert (=
  ($Snap.second ($Snap.second $t@4@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@4@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@4@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@10@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 0 | !(n$0@10@01 in g0@2@01) | live]
; [else-branch: 0 | n$0@10@01 in g0@2@01 | live]
(push) ; 4
; [then-branch: 0 | !(n$0@10@01 in g0@2@01)]
(assert (not (Set_in n$0@10@01 g0@2@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | n$0@10@01 in g0@2@01]
(assert (Set_in n$0@10@01 g0@2@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
(push) ; 5
(assert (not (and (img@8@01 n$0@10@01) (Set_in (inv@7@01 n$0@10@01) g0@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (Set_in n$0@10@01 g0@2@01)
  (and
    (Set_in n$0@10@01 g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))))
(assert (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01))))
(push) ; 3
; [then-branch: 1 | n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null | live]
; [else-branch: 1 | !(n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null) | live]
(push) ; 4
; [then-branch: 1 | n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null]
(assert (and
  (Set_in n$0@10@01 g0@2@01)
  (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef2|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
(push) ; 5
(assert (not (and (img@8@01 n$0@10@01) (Set_in (inv@7@01 n$0@10@01) g0@2@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 1 | !(n$0@10@01 in g0@2@01 && Lookup(next, sm@9@01, n$0@10@01) != Null)]
(assert (not
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
(assert (=>
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@10@01 g0@2@01)
      (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
  (and
    (Set_in n$0@10@01 g0@2@01)
    (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@9@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@9@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@10@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@10@01 g0@2@01)
      (and
        (Set_in n$0@10@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01)))
    (=>
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or
      (not
        (and
          (Set_in n$0@10@01 g0@2@01)
          (not
            (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@338@14@338@23-aux|)))
(assert (forall ((n$0@10@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@10@01 g0@2@01)
      (and
        (Set_in n$0@10@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or (Set_in n$0@10@01 g0@2@01) (not (Set_in n$0@10@01 g0@2@01)))
    (=>
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01)))
    (or
      (not
        (and
          (Set_in n$0@10@01 g0@2@01)
          (not
            (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null))))
      (and
        (Set_in n$0@10@01 g0@2@01)
        (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))))
  :pattern ((Set_in n$0@10@01 g0@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@338@14@338@23-aux|)))
(assert (forall ((n$0@10@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@10@01 g0@2@01)
      (not (= ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) g0@2@01))
  :pattern ((Set_in n$0@10@01 g0@2@01) ($FVF.loc_next ($FVF.lookup_next (as sm@9@01  $FVF<next>) n$0@10@01) n$0@10@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@338@14@338@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@4@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@4@01)))) $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@3@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01))))))))
(declare-const n$1@11@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@11@01 g1@3@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@12@01 ($Ref) $Ref)
(declare-fun img@13@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@11@01 $Ref) (n$12@11@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@11@01 g1@3@01)
      (Set_in n$12@11@01 g1@3@01)
      (= n$11@11@01 n$12@11@01))
    (= n$11@11@01 n$12@11@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@11@01 $Ref)) (!
  (=>
    (Set_in n$1@11@01 g1@3@01)
    (and (= (inv@12@01 n$1@11@01) n$1@11@01) (img@13@01 n$1@11@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n$1@11@01) n$1@11@01))
  :qid |quant-u-14099|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)) (= (inv@12@01 r) r))
  :pattern ((inv@12@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@11@01 $Ref)) (!
  (=> (Set_in n$1@11@01 g1@3@01) (not (= n$1@11@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) n$1@11@01) n$1@11@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@11@01 n@5@01)
    (=
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))))
  
  :qid |quant-u-14100|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@14@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@12@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@12@01 r))
  :qid |quant-u-14101|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@15@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 2 | !(n$2@15@01 in g1@3@01) | live]
; [else-branch: 2 | n$2@15@01 in g1@3@01 | live]
(push) ; 4
; [then-branch: 2 | !(n$2@15@01 in g1@3@01)]
(assert (not (Set_in n$2@15@01 g1@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 2 | n$2@15@01 in g1@3@01]
(assert (Set_in n$2@15@01 g1@3@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@8@01 n$2@15@01) (Set_in (inv@7@01 n$2@15@01) g0@2@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@13@01 n$2@15@01) (Set_in (inv@12@01 n$2@15@01) g1@3@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (Set_in n$2@15@01 g1@3@01)
  (and
    (Set_in n$2@15@01 g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))))
(assert (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01))))
(push) ; 3
; [then-branch: 3 | n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null | live]
; [else-branch: 3 | !(n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null) | live]
(push) ; 4
; [then-branch: 3 | n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null]
(assert (and
  (Set_in n$2@15@01 g1@3@01)
  (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
      (=
        ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef5|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@8@01 n$2@15@01) (Set_in (inv@7@01 n$2@15@01) g0@2@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@13@01 n$2@15@01) (Set_in (inv@12@01 n$2@15@01) g1@3@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 3 | !(n$2@15@01 in g1@3@01 && Lookup(next, sm@14@01, n$2@15@01) != Null)]
(assert (not
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
(assert (=>
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@15@01 g1@3@01)
      (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
  (and
    (Set_in n$2@15@01 g1@3@01)
    (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@14@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@14@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef5|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@15@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@15@01 g1@3@01)
      (and
        (Set_in n$2@15@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01)))
    (=>
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or
      (not
        (and
          (Set_in n$2@15@01 g1@3@01)
          (not
            (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@338@27@338@36-aux|)))
(assert (forall ((n$2@15@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@15@01 g1@3@01)
      (and
        (Set_in n$2@15@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or (Set_in n$2@15@01 g1@3@01) (not (Set_in n$2@15@01 g1@3@01)))
    (=>
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01)))
    (or
      (not
        (and
          (Set_in n$2@15@01 g1@3@01)
          (not
            (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null))))
      (and
        (Set_in n$2@15@01 g1@3@01)
        (not
          (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))))
  :pattern ((Set_in n$2@15@01 g1@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@338@27@338@36-aux|)))
(assert (forall ((n$2@15@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@15@01 g1@3@01)
      (not (= ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) g1@3@01))
  :pattern ((Set_in n$2@15@01 g1@3@01) ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n$2@15@01) n$2@15@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@338@27@338@36|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert (forall e: Edge ::
;     { (e in $$(g0)) }
;     { (e in ($$(g0) union $$(g1))) }
;     (e in $$(g0)) ==> (e in ($$(g0) union $$(g1))))
; [eval] (forall e: Edge :: { (e in $$(g0)) } { (e in ($$(g0) union $$(g1))) } (e in $$(g0)) ==> (e in ($$(g0) union $$(g1))))
(declare-const e@16@01 Edge)
(push) ; 3
; [eval] (e in $$(g0)) ==> (e in ($$(g0) union $$(g1)))
; [eval] (e in $$(g0))
; [eval] $$(g0)
(push) ; 4
(declare-const n@17@01 $Ref)
(push) ; 5
; [eval] (n in refs)
(assert (Set_in n@17@01 g0@2@01))
(pop) ; 5
(declare-fun inv@18@01 ($Ref) $Ref)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 5
(assert (not (forall ((n1@17@01 $Ref) (n2@17@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@17@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n1@17@01) n1@17@01))
      (and
        (Set_in n2@17@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) n2@17@01) n2@17@01))
      (= n1@17@01 n2@17@01))
    (= n1@17@01 n2@17@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@18@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-14103|)))
(push) ; 5
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r) (= r (inv@18@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14104|))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@20@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
(pop) ; 4
; Joined path conditions
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@18@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
    :pattern ((inv@18@01 r))
    :qid |quant-u-14103|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
(push) ; 4
; [then-branch: 4 | e@16@01 in $$(sm@20@01, g0@2@01) | live]
; [else-branch: 4 | !(e@16@01 in $$(sm@20@01, g0@2@01)) | live]
(push) ; 5
; [then-branch: 4 | e@16@01 in $$(sm@20@01, g0@2@01)]
(assert (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
; [eval] (e in ($$(g0) union $$(g1)))
; [eval] ($$(g0) union $$(g1))
; [eval] $$(g0)
(push) ; 6
(declare-const n@21@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@21@01 g0@2@01))
(pop) ; 7
(declare-fun inv@22@01 ($Ref) $Ref)
(declare-fun img@23@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@24@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@21@01 $Ref) (n2@21@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@21@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) n1@21@01) n1@21@01))
      (and
        (Set_in n2@21@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) n2@21@01) n2@21@01))
      (= n1@21@01 n2@21@01))
    (= n1@21@01 n2@21@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@22@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
  :pattern ((inv@22@01 r))
  :qid |quant-u-14106|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r) (= r (inv@22@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14107|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@25@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@22@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
    :pattern ((inv@22@01 r))
    :qid |quant-u-14106|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)))
; [eval] $$(g1)
(push) ; 6
(declare-const n@26@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@26@01 g1@3@01))
(pop) ; 7
(declare-fun inv@27@01 ($Ref) $Ref)
(declare-fun img@28@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@29@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@26@01 $Ref) (n2@26@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@26@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) n1@26@01) n1@26@01))
      (and
        (Set_in n2@26@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) n2@26@01) n2@26@01))
      (= n1@26@01 n2@26@01))
    (= n1@26@01 n2@26@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@27@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
  :pattern ((inv@27@01 r))
  :qid |quant-u-14109|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r) (= r (inv@27@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14110|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@30@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@27@01 r) g1@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
    :pattern ((inv@27@01 r))
    :qid |quant-u-14109|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 4 | !(e@16@01 in $$(sm@20@01, g0@2@01))]
(assert (not
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (=>
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
  (and
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@22@01 r) g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
      :pattern ((inv@22@01 r))
      :qid |quant-u-14106|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@27@01 r) g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
      :pattern ((inv@27@01 r))
      :qid |quant-u-14109|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
; Joined path conditions
(assert (or
  (not
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@17@01 $Ref)) (!
  (=>
    (Set_in n@17@01 g0@2@01)
    (and (= (inv@18@01 n@17@01) n@17@01) (img@19@01 n@17@01)))
  :pattern ((Set_in n@17@01 g0@2@01))
  :pattern ((inv@18@01 n@17@01))
  :pattern ((img@19@01 n@17@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@19@01 r) (Set_in (inv@18@01 r) g0@2@01)) (= (inv@18@01 r) r))
  :pattern ((inv@18@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r)))
    (=>
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@20@01  $FVF<next>))))
  :qid |qp.fvfDomDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@18@01 r) g0@2@01) (img@19@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@20@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@20@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@24@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@24@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef12|)))
(assert (forall ((n@21@01 $Ref)) (!
  (=>
    (Set_in n@21@01 g0@2@01)
    (and (= (inv@22@01 n@21@01) n@21@01) (img@23@01 n@21@01)))
  :pattern ((Set_in n@21@01 g0@2@01))
  :pattern ((inv@22@01 n@21@01))
  :pattern ((img@23@01 n@21@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@23@01 r) (Set_in (inv@22@01 r) g0@2@01)) (= (inv@22@01 r) r))
  :pattern ((inv@22@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r)))
    (=>
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@25@01  $FVF<next>))))
  :qid |qp.fvfDomDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@22@01 r) g0@2@01) (img@23@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@25@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@25@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@29@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef18|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@29@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef19|)))
(assert (forall ((n@26@01 $Ref)) (!
  (=>
    (Set_in n@26@01 g1@3@01)
    (and (= (inv@27@01 n@26@01) n@26@01) (img@28@01 n@26@01)))
  :pattern ((Set_in n@26@01 g1@3@01))
  :pattern ((inv@27@01 n@26@01))
  :pattern ((img@28@01 n@26@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@28@01 r) (Set_in (inv@27@01 r) g1@3@01)) (= (inv@27@01 r) r))
  :pattern ((inv@27@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r)))
    (=>
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@30@01  $FVF<next>))))
  :qid |qp.fvfDomDef23|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@27@01 r) g1@3@01) (img@28@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@30@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef21|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@30@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@18@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@14@01  $FVF<next>) r) r))
  :pattern ((inv@18@01 r))
  :qid |quant-u-14103|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((e@16@01 Edge)) (!
  (and
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
      (and
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@22@01 r) g0@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
          :pattern ((inv@22@01 r))
          :qid |quant-u-14106|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@27@01 r) g1@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
          :pattern ((inv@27@01 r))
          :qid |quant-u-14109|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01)))
    (or
      (not
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@342@12@342@71-aux|)))
(assert (forall ((e@16@01 Edge)) (!
  (and
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
      (and
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@22@01 r) g0@2@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@24@01  $FVF<next>) r) r))
          :pattern ((inv@22@01 r))
          :qid |quant-u-14106|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@27@01 r) g1@3@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@29@01  $FVF<next>) r) r))
          :pattern ((inv@27@01 r))
          :qid |quant-u-14109|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01)))
    (or
      (not
        (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@342@12@342@71-aux|)))
(assert (forall ((e@16@01 Edge)) (!
  (and
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)
    (=>
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@342@12@342@71_precondition|)))
(push) ; 3
(assert (not (forall ((e@16@01 Edge)) (!
  (=>
    (and
      (and
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)
        (=>
          (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
          (and
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01)
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
      (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
    (Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@342@12@342@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((e@16@01 Edge)) (!
  (=>
    (Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01))
    (Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :pattern ((Set_in e@16@01 ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@20@01  $FVF<next>)) g0@2@01)))
  :pattern ((Set_in e@16@01 (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@25@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@30@01  $FVF<next>)) g1@3@01))))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@342@12@342@71|)))
; [exec]
; assert ($$(g0) union $$(g1)) == $$((g0 union g1))
; [eval] ($$(g0) union $$(g1)) == $$((g0 union g1))
; [eval] ($$(g0) union $$(g1))
; [eval] $$(g0)
(push) ; 3
(declare-const n@31@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@31@01 g0@2@01))
(pop) ; 4
(declare-fun inv@32@01 ($Ref) $Ref)
(declare-fun img@33@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@34@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef26|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@31@01 $Ref) (n2@31@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@31@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) n1@31@01) n1@31@01))
      (and
        (Set_in n2@31@01 g0@2@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) n2@31@01) n2@31@01))
      (= n1@31@01 n2@31@01))
    (= n1@31@01 n2@31@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@31@01 $Ref)) (!
  (=>
    (Set_in n@31@01 g0@2@01)
    (and (= (inv@32@01 n@31@01) n@31@01) (img@33@01 n@31@01)))
  :pattern ((Set_in n@31@01 g0@2@01))
  :pattern ((inv@32@01 n@31@01))
  :pattern ((img@33@01 n@31@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@33@01 r) (Set_in (inv@32@01 r) g0@2@01)) (= (inv@32@01 r) r))
  :pattern ((inv@32@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@32@01 r) g0@2@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) r) r))
  :pattern ((inv@32@01 r))
  :qid |quant-u-14112|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r) (= r (inv@32@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14113|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@35@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r)))
    (=>
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef30|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef24|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@34@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@34@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef26|)))
(assert (forall ((n@31@01 $Ref)) (!
  (=>
    (Set_in n@31@01 g0@2@01)
    (and (= (inv@32@01 n@31@01) n@31@01) (img@33@01 n@31@01)))
  :pattern ((Set_in n@31@01 g0@2@01))
  :pattern ((inv@32@01 n@31@01))
  :pattern ((img@33@01 n@31@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@33@01 r) (Set_in (inv@32@01 r) g0@2@01)) (= (inv@32@01 r) r))
  :pattern ((inv@32@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r)))
    (=>
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@35@01  $FVF<next>))))
  :qid |qp.fvfDomDef30|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef27|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@32@01 r) g0@2@01) (img@33@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@35@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@35@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef29|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@32@01 r) g0@2@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@34@01  $FVF<next>) r) r))
    :pattern ((inv@32@01 r))
    :qid |quant-u-14112|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01)))
; [eval] $$(g1)
(push) ; 3
(declare-const n@36@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@36@01 g1@3@01))
(pop) ; 4
(declare-fun inv@37@01 ($Ref) $Ref)
(declare-fun img@38@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@39@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@36@01 $Ref) (n2@36@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@36@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) n1@36@01) n1@36@01))
      (and
        (Set_in n2@36@01 g1@3@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) n2@36@01) n2@36@01))
      (= n1@36@01 n2@36@01))
    (= n1@36@01 n2@36@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g1@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g1@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g1@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@37@01 r) g1@3@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) r) r))
  :pattern ((inv@37@01 r))
  :qid |quant-u-14115|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r) (= r (inv@37@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14116|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@40@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@39@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@39@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef33|)))
(assert (forall ((n@36@01 $Ref)) (!
  (=>
    (Set_in n@36@01 g1@3@01)
    (and (= (inv@37@01 n@36@01) n@36@01) (img@38@01 n@36@01)))
  :pattern ((Set_in n@36@01 g1@3@01))
  :pattern ((inv@37@01 n@36@01))
  :pattern ((img@38@01 n@36@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@38@01 r) (Set_in (inv@37@01 r) g1@3@01)) (= (inv@37@01 r) r))
  :pattern ((inv@37@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r)))
    (=>
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@40@01  $FVF<next>))))
  :qid |qp.fvfDomDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef34|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@37@01 r) g1@3@01) (img@38@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@40@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef35|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@40@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef36|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@37@01 r) g1@3@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@39@01  $FVF<next>) r) r))
    :pattern ((inv@37@01 r))
    :qid |quant-u-14115|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@41@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@41@01 (Set_union g0@2@01 g1@3@01)))
(pop) ; 4
(declare-fun inv@42@01 ($Ref) $Ref)
(declare-fun img@43@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@44@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@41@01 $Ref) (n2@41@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@41@01 (Set_union g0@2@01 g1@3@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) n1@41@01) n1@41@01))
      (and
        (Set_in n2@41@01 (Set_union g0@2@01 g1@3@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) n2@41@01) n2@41@01))
      (= n1@41@01 n2@41@01))
    (= n1@41@01 n2@41@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@41@01 $Ref)) (!
  (=>
    (Set_in n@41@01 (Set_union g0@2@01 g1@3@01))
    (and (= (inv@42@01 n@41@01) n@41@01) (img@43@01 n@41@01)))
  :pattern ((Set_in n@41@01 (Set_union g0@2@01 g1@3@01)))
  :pattern ((inv@42@01 n@41@01))
  :pattern ((img@43@01 n@41@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@43@01 r) (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)))
    (= (inv@42@01 r) r))
  :pattern ((inv@42@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) r) r))
  :pattern ((inv@42@01 r))
  :qid |quant-u-14118|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01))
      (img@43@01 r)
      (= r (inv@42@01 r)))
    (>
      (+
        (ite
          (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14119|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@45@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r)))
    (=>
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef44|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01))
    (=
      ($FVF.lookup_next (as sm@44@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@44@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert (forall ((n@41@01 $Ref)) (!
  (=>
    (Set_in n@41@01 (Set_union g0@2@01 g1@3@01))
    (and (= (inv@42@01 n@41@01) n@41@01) (img@43@01 n@41@01)))
  :pattern ((Set_in n@41@01 (Set_union g0@2@01 g1@3@01)))
  :pattern ((inv@42@01 n@41@01))
  :pattern ((img@43@01 n@41@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@43@01 r) (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)))
    (= (inv@42@01 r) r))
  :pattern ((inv@42@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r)))
    (=>
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@45@01  $FVF<next>))))
  :qid |qp.fvfDomDef44|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@8@01 r) (Set_in (inv@7@01 r) g0@2@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01)) (img@43@01 r))
      (and (img@13@01 r) (Set_in (inv@12@01 r) g1@3@01)))
    (=
      ($FVF.lookup_next (as sm@45@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@4@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@4@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@45@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef43|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@42@01 r) (Set_union g0@2@01 g1@3@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@44@01  $FVF<next>) r) r))
    :pattern ((inv@42@01 r))
    :qid |quant-u-14118|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01))))
(push) ; 3
(assert (not (Set_equal (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01)) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_union ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@35@01  $FVF<next>)) g0@2@01) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@40@01  $FVF<next>)) g1@3@01)) ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@45@01  $FVF<next>)) (Set_union g0@2@01 g1@3@01))))
(pop) ; 2
(pop) ; 1
; ---------- test_intersection ----------
(declare-const g0@46@01 Set<$Ref>)
(declare-const g1@47@01 Set<$Ref>)
(declare-const g0@48@01 Set<$Ref>)
(declare-const g1@49@01 Set<$Ref>)
(push) ; 1
(declare-const $t@50@01 $Snap)
(assert (= $t@50@01 ($Snap.combine ($Snap.first $t@50@01) ($Snap.second $t@50@01))))
(assert (= ($Snap.first $t@50@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@48@01)))
(assert (=
  ($Snap.second $t@50@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@50@01))
    ($Snap.second ($Snap.second $t@50@01)))))
(declare-const n@51@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@51@01 g0@48@01))
(declare-const sm@52@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@53@01 ($Ref) $Ref)
(declare-fun img@54@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@51@01 $Ref) (n2@51@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@51@01 g0@48@01)
      (Set_in n2@51@01 g0@48@01)
      (= n1@51@01 n2@51@01))
    (= n1@51@01 n2@51@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@51@01 $Ref)) (!
  (=>
    (Set_in n@51@01 g0@48@01)
    (and (= (inv@53@01 n@51@01) n@51@01) (img@54@01 n@51@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) n@51@01) n@51@01))
  :qid |quant-u-14121|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01)) (= (inv@53@01 r) r))
  :pattern ((inv@53@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@51@01 $Ref)) (!
  (=> (Set_in n@51@01 g0@48@01) (not (= n@51@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) n@51@01) n@51@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@55@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@53@01 r) g0@48@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) r) r))
  :pattern ((inv@53@01 r))
  :qid |quant-u-14122|)))
(assert (=
  ($Snap.second ($Snap.second $t@50@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@50@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@50@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@56@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 5 | !(n$0@56@01 in g0@48@01) | live]
; [else-branch: 5 | n$0@56@01 in g0@48@01 | live]
(push) ; 4
; [then-branch: 5 | !(n$0@56@01 in g0@48@01)]
(assert (not (Set_in n$0@56@01 g0@48@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 5 | n$0@56@01 in g0@48@01]
(assert (Set_in n$0@56@01 g0@48@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef46|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef47|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
(push) ; 5
(assert (not (and (img@54@01 n$0@56@01) (Set_in (inv@53@01 n$0@56@01) g0@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (=>
  (Set_in n$0@56@01 g0@48@01)
  (and
    (Set_in n$0@56@01 g0@48@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))))
(assert (or (Set_in n$0@56@01 g0@48@01) (not (Set_in n$0@56@01 g0@48@01))))
(push) ; 3
; [then-branch: 6 | n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null | live]
; [else-branch: 6 | !(n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null) | live]
(push) ; 4
; [then-branch: 6 | n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null]
(assert (and
  (Set_in n$0@56@01 g0@48@01)
  (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef46|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef47|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
(push) ; 5
(assert (not (and (img@54@01 n$0@56@01) (Set_in (inv@53@01 n$0@56@01) g0@48@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 6 | !(n$0@56@01 in g0@48@01 && Lookup(next, sm@55@01, n$0@56@01) != Null)]
(assert (not
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
(assert (=>
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@56@01 g0@48@01)
      (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
  (and
    (Set_in n$0@56@01 g0@48@01)
    (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@55@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef46|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@55@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef47|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@56@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@56@01 g0@48@01)
      (and
        (Set_in n$0@56@01 g0@48@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or (Set_in n$0@56@01 g0@48@01) (not (Set_in n$0@56@01 g0@48@01)))
    (=>
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or
      (not
        (and
          (Set_in n$0@56@01 g0@48@01)
          (not
            (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) g0@48@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@349@14@349@23-aux|)))
(assert (forall ((n$0@56@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@56@01 g0@48@01)
      (and
        (Set_in n$0@56@01 g0@48@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or (Set_in n$0@56@01 g0@48@01) (not (Set_in n$0@56@01 g0@48@01)))
    (=>
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01)))
    (or
      (not
        (and
          (Set_in n$0@56@01 g0@48@01)
          (not
            (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null))))
      (and
        (Set_in n$0@56@01 g0@48@01)
        (not
          (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))))
  :pattern ((Set_in n$0@56@01 g0@48@01) ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@349@14@349@23-aux|)))
(assert (forall ((n$0@56@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@56@01 g0@48@01)
      (not (= ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) g0@48@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) g0@48@01))
  :pattern ((Set_in n$0@56@01 g0@48@01) ($FVF.loc_next ($FVF.lookup_next (as sm@55@01  $FVF<next>) n$0@56@01) n$0@56@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@349@14@349@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@50@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@49@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))))
(declare-const n$1@57@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@57@01 g1@49@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@58@01 ($Ref) $Ref)
(declare-fun img@59@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@57@01 $Ref) (n$12@57@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@57@01 g1@49@01)
      (Set_in n$12@57@01 g1@49@01)
      (= n$11@57@01 n$12@57@01))
    (= n$11@57@01 n$12@57@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@57@01 $Ref)) (!
  (=>
    (Set_in n$1@57@01 g1@49@01)
    (and (= (inv@58@01 n$1@57@01) n$1@57@01) (img@59@01 n$1@57@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) n$1@57@01) n$1@57@01))
  :qid |quant-u-14124|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01)) (= (inv@58@01 r) r))
  :pattern ((inv@58@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@57@01 $Ref)) (!
  (=> (Set_in n$1@57@01 g1@49@01) (not (= n$1@57@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) n$1@57@01) n$1@57@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@57@01 n@51@01)
    (=
      (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))))
  
  :qid |quant-u-14125|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@60@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@58@01 r) g1@49@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) r) r))
  :pattern ((inv@58@01 r))
  :qid |quant-u-14126|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@61@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 7 | !(n$2@61@01 in g1@49@01) | live]
; [else-branch: 7 | n$2@61@01 in g1@49@01 | live]
(push) ; 4
; [then-branch: 7 | !(n$2@61@01 in g1@49@01)]
(assert (not (Set_in n$2@61@01 g1@49@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 7 | n$2@61@01 in g1@49@01]
(assert (Set_in n$2@61@01 g1@49@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef50|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@54@01 n$2@61@01) (Set_in (inv@53@01 n$2@61@01) g0@48@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@59@01 n$2@61@01) (Set_in (inv@58@01 n$2@61@01) g1@49@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=>
  (Set_in n$2@61@01 g1@49@01)
  (and
    (Set_in n$2@61@01 g1@49@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))))
(assert (or (Set_in n$2@61@01 g1@49@01) (not (Set_in n$2@61@01 g1@49@01))))
(push) ; 3
; [then-branch: 8 | n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null | live]
; [else-branch: 8 | !(n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null) | live]
(push) ; 4
; [then-branch: 8 | n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null]
(assert (and
  (Set_in n$2@61@01 g1@49@01)
  (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
      (=
        ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef50|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@54@01 n$2@61@01) (Set_in (inv@53@01 n$2@61@01) g0@48@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@59@01 n$2@61@01) (Set_in (inv@58@01 n$2@61@01) g1@49@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 8 | !(n$2@61@01 in g1@49@01 && Lookup(next, sm@60@01, n$2@61@01) != Null)]
(assert (not
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
(assert (=>
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@61@01 g1@49@01)
      (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
  (and
    (Set_in n$2@61@01 g1@49@01)
    (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@54@01 r) (Set_in (inv@53@01 r) g0@48@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@59@01 r) (Set_in (inv@58@01 r) g1@49@01))
    (=
      ($FVF.lookup_next (as sm@60@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@50@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@60@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef50|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@61@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@61@01 g1@49@01)
      (and
        (Set_in n$2@61@01 g1@49@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or (Set_in n$2@61@01 g1@49@01) (not (Set_in n$2@61@01 g1@49@01)))
    (=>
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or
      (not
        (and
          (Set_in n$2@61@01 g1@49@01)
          (not
            (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@349@27@349@36-aux|)))
(assert (forall ((n$2@61@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@61@01 g1@49@01)
      (and
        (Set_in n$2@61@01 g1@49@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or (Set_in n$2@61@01 g1@49@01) (not (Set_in n$2@61@01 g1@49@01)))
    (=>
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01)))
    (or
      (not
        (and
          (Set_in n$2@61@01 g1@49@01)
          (not
            (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null))))
      (and
        (Set_in n$2@61@01 g1@49@01)
        (not
          (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))))
  :pattern ((Set_in n$2@61@01 g1@49@01) ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@349@27@349@36-aux|)))
(assert (forall ((n$2@61@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@61@01 g1@49@01)
      (not (= ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) g1@49@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) g1@49@01))
  :pattern ((Set_in n$2@61@01 g1@49@01) ($FVF.loc_next ($FVF.lookup_next (as sm@60@01  $FVF<next>) n$2@61@01) n$2@61@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@349@27@349@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@50@01))))))
  $Snap.unit))
; [eval] (g0 intersection g1) == Set[Ref]()
; [eval] (g0 intersection g1)
; [eval] Set[Ref]()
(assert (Set_equal (Set_intersection g0@48@01 g1@49@01) (as Set_empty  Set<$Ref>)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; assert (forall r: Ref ::
;     { (r in g0), (r in g1) }
;     (r in g0) ==> !((r in g1))) &&
;   (forall r$0: Ref ::
;     { (r$0 in g0), (r$0 in g1) }
;     (r$0 in g1) ==> !((r$0 in g0)))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@62@01 $Ref)
(push) ; 3
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 4
; [then-branch: 9 | r@62@01 in g0@48@01 | live]
; [else-branch: 9 | !(r@62@01 in g0@48@01) | live]
(push) ; 5
; [then-branch: 9 | r@62@01 in g0@48@01]
(assert (Set_in r@62@01 g0@48@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(r@62@01 in g0@48@01)]
(assert (not (Set_in r@62@01 g0@48@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@62@01 g0@48@01)) (Set_in r@62@01 g0@48@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@62@01 $Ref)) (!
  (or (not (Set_in r@62@01 g0@48@01)) (Set_in r@62@01 g0@48@01))
  :pattern ((Set_in r@62@01 g0@48@01) (Set_in r@62@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@355@12@355@32-aux|)))
(push) ; 3
(assert (not (forall ((r@62@01 $Ref)) (!
  (=> (Set_in r@62@01 g0@48@01) (not (Set_in r@62@01 g1@49@01)))
  :pattern ((Set_in r@62@01 g0@48@01) (Set_in r@62@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@355@12@355@32|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((r@62@01 $Ref)) (!
  (=> (Set_in r@62@01 g0@48@01) (not (Set_in r@62@01 g1@49@01)))
  :pattern ((Set_in r@62@01 g0@48@01) (Set_in r@62@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@355@12@355@32|)))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@63@01 $Ref)
(push) ; 3
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 4
; [then-branch: 10 | r$0@63@01 in g1@49@01 | live]
; [else-branch: 10 | !(r$0@63@01 in g1@49@01) | live]
(push) ; 5
; [then-branch: 10 | r$0@63@01 in g1@49@01]
(assert (Set_in r$0@63@01 g1@49@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 5
(push) ; 5
; [else-branch: 10 | !(r$0@63@01 in g1@49@01)]
(assert (not (Set_in r$0@63@01 g1@49@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@63@01 g1@49@01)) (Set_in r$0@63@01 g1@49@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@63@01 $Ref)) (!
  (or (not (Set_in r$0@63@01 g1@49@01)) (Set_in r$0@63@01 g1@49@01))
  :pattern ((Set_in r$0@63@01 g0@48@01) (Set_in r$0@63@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@355@12@355@32-aux|)))
(push) ; 3
(assert (not (forall ((r$0@63@01 $Ref)) (!
  (=> (Set_in r$0@63@01 g1@49@01) (not (Set_in r$0@63@01 g0@48@01)))
  :pattern ((Set_in r$0@63@01 g0@48@01) (Set_in r$0@63@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@355@12@355@32|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((r$0@63@01 $Ref)) (!
  (=> (Set_in r$0@63@01 g1@49@01) (not (Set_in r$0@63@01 g0@48@01)))
  :pattern ((Set_in r$0@63@01 g0@48@01) (Set_in r$0@63@01 g1@49@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@355@12@355@32|)))
(pop) ; 2
(pop) ; 1
; ---------- test_disjoint ----------
(declare-const g0@64@01 Set<$Ref>)
(declare-const g1@65@01 Set<$Ref>)
(declare-const g0@66@01 Set<$Ref>)
(declare-const g1@67@01 Set<$Ref>)
(push) ; 1
(declare-const $t@68@01 $Snap)
(assert (= $t@68@01 ($Snap.combine ($Snap.first $t@68@01) ($Snap.second $t@68@01))))
(assert (= ($Snap.first $t@68@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@66@01)))
(assert (=
  ($Snap.second $t@68@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@68@01))
    ($Snap.second ($Snap.second $t@68@01)))))
(declare-const n@69@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@69@01 g0@66@01))
(declare-const sm@70@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@71@01 ($Ref) $Ref)
(declare-fun img@72@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@69@01 $Ref) (n2@69@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@69@01 g0@66@01)
      (Set_in n2@69@01 g0@66@01)
      (= n1@69@01 n2@69@01))
    (= n1@69@01 n2@69@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@69@01 $Ref)) (!
  (=>
    (Set_in n@69@01 g0@66@01)
    (and (= (inv@71@01 n@69@01) n@69@01) (img@72@01 n@69@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) n@69@01) n@69@01))
  :qid |quant-u-14128|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)) (= (inv@71@01 r) r))
  :pattern ((inv@71@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@69@01 $Ref)) (!
  (=> (Set_in n@69@01 g0@66@01) (not (= n@69@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) n@69@01) n@69@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@73@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@71@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) r) r))
  :pattern ((inv@71@01 r))
  :qid |quant-u-14129|)))
(assert (=
  ($Snap.second ($Snap.second $t@68@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@68@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@68@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@74@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 11 | !(n$0@74@01 in g0@66@01) | live]
; [else-branch: 11 | n$0@74@01 in g0@66@01 | live]
(push) ; 4
; [then-branch: 11 | !(n$0@74@01 in g0@66@01)]
(assert (not (Set_in n$0@74@01 g0@66@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 11 | n$0@74@01 in g0@66@01]
(assert (Set_in n$0@74@01 g0@66@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef53|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
(push) ; 5
(assert (not (and (img@72@01 n$0@74@01) (Set_in (inv@71@01 n$0@74@01) g0@66@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (=>
  (Set_in n$0@74@01 g0@66@01)
  (and
    (Set_in n$0@74@01 g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))))
(assert (or (Set_in n$0@74@01 g0@66@01) (not (Set_in n$0@74@01 g0@66@01))))
(push) ; 3
; [then-branch: 12 | n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null | live]
; [else-branch: 12 | !(n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null) | live]
(push) ; 4
; [then-branch: 12 | n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null]
(assert (and
  (Set_in n$0@74@01 g0@66@01)
  (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef52|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef53|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
(push) ; 5
(assert (not (and (img@72@01 n$0@74@01) (Set_in (inv@71@01 n$0@74@01) g0@66@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 12 | !(n$0@74@01 in g0@66@01 && Lookup(next, sm@73@01, n$0@74@01) != Null)]
(assert (not
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
(assert (=>
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@74@01 g0@66@01)
      (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
  (and
    (Set_in n$0@74@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@73@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef52|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@73@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@74@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@74@01 g0@66@01)
      (and
        (Set_in n$0@74@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or (Set_in n$0@74@01 g0@66@01) (not (Set_in n$0@74@01 g0@66@01)))
    (=>
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or
      (not
        (and
          (Set_in n$0@74@01 g0@66@01)
          (not
            (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) g0@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@373@14@373@23-aux|)))
(assert (forall ((n$0@74@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@74@01 g0@66@01)
      (and
        (Set_in n$0@74@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or (Set_in n$0@74@01 g0@66@01) (not (Set_in n$0@74@01 g0@66@01)))
    (=>
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01)))
    (or
      (not
        (and
          (Set_in n$0@74@01 g0@66@01)
          (not
            (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null))))
      (and
        (Set_in n$0@74@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))))
  :pattern ((Set_in n$0@74@01 g0@66@01) ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@373@14@373@23-aux|)))
(assert (forall ((n$0@74@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@74@01 g0@66@01)
      (not (= ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) g0@66@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) g0@66@01))
  :pattern ((Set_in n$0@74@01 g0@66@01) ($FVF.loc_next ($FVF.lookup_next (as sm@73@01  $FVF<next>) n$0@74@01) n$0@74@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@373@14@373@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@68@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@68@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@68@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@67@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))))
(declare-const n$1@75@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@75@01 g1@67@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@76@01 ($Ref) $Ref)
(declare-fun img@77@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@75@01 $Ref) (n$12@75@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@75@01 g1@67@01)
      (Set_in n$12@75@01 g1@67@01)
      (= n$11@75@01 n$12@75@01))
    (= n$11@75@01 n$12@75@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@75@01 $Ref)) (!
  (=>
    (Set_in n$1@75@01 g1@67@01)
    (and (= (inv@76@01 n$1@75@01) n$1@75@01) (img@77@01 n$1@75@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) n$1@75@01) n$1@75@01))
  :qid |quant-u-14131|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)) (= (inv@76@01 r) r))
  :pattern ((inv@76@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@75@01 $Ref)) (!
  (=> (Set_in n$1@75@01 g1@67@01) (not (= n$1@75@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) n$1@75@01) n$1@75@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@75@01 n@69@01)
    (=
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))))
  
  :qid |quant-u-14132|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@78@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@76@01 r) g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@76@01 r))
  :qid |quant-u-14133|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@79@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 13 | !(n$2@79@01 in g1@67@01) | live]
; [else-branch: 13 | n$2@79@01 in g1@67@01 | live]
(push) ; 4
; [then-branch: 13 | !(n$2@79@01 in g1@67@01)]
(assert (not (Set_in n$2@79@01 g1@67@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 13 | n$2@79@01 in g1@67@01]
(assert (Set_in n$2@79@01 g1@67@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef56|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$2@79@01) (Set_in (inv@71@01 n$2@79@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$2@79@01) (Set_in (inv@76@01 n$2@79@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (Set_in n$2@79@01 g1@67@01)
  (and
    (Set_in n$2@79@01 g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))))
(assert (or (Set_in n$2@79@01 g1@67@01) (not (Set_in n$2@79@01 g1@67@01))))
(push) ; 3
; [then-branch: 14 | n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null | live]
; [else-branch: 14 | !(n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null) | live]
(push) ; 4
; [then-branch: 14 | n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null]
(assert (and
  (Set_in n$2@79@01 g1@67@01)
  (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef56|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$2@79@01) (Set_in (inv@71@01 n$2@79@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$2@79@01) (Set_in (inv@76@01 n$2@79@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 14 | !(n$2@79@01 in g1@67@01 && Lookup(next, sm@78@01, n$2@79@01) != Null)]
(assert (not
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
(assert (=>
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@79@01 g1@67@01)
      (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
  (and
    (Set_in n$2@79@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@78@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@78@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef56|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@79@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@79@01 g1@67@01)
      (and
        (Set_in n$2@79@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or (Set_in n$2@79@01 g1@67@01) (not (Set_in n$2@79@01 g1@67@01)))
    (=>
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or
      (not
        (and
          (Set_in n$2@79@01 g1@67@01)
          (not
            (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@373@27@373@36-aux|)))
(assert (forall ((n$2@79@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@79@01 g1@67@01)
      (and
        (Set_in n$2@79@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or (Set_in n$2@79@01 g1@67@01) (not (Set_in n$2@79@01 g1@67@01)))
    (=>
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01)))
    (or
      (not
        (and
          (Set_in n$2@79@01 g1@67@01)
          (not
            (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null))))
      (and
        (Set_in n$2@79@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))))
  :pattern ((Set_in n$2@79@01 g1@67@01) ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@373@27@373@36-aux|)))
(assert (forall ((n$2@79@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@79@01 g1@67@01)
      (not (= ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g1@67@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) g1@67@01))
  :pattern ((Set_in n$2@79@01 g1@67@01) ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n$2@79@01) n$2@79@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@373@27@373@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01))))))
  $Snap.unit))
; [eval] (g0 intersection g1) == Set[Ref]()
; [eval] (g0 intersection g1)
; [eval] Set[Ref]()
(assert (Set_equal (Set_intersection g0@66@01 g1@67@01) (as Set_empty  Set<$Ref>)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@80@01 $Snap)
(assert (= $t@80@01 ($Snap.combine ($Snap.first $t@80@01) ($Snap.second $t@80@01))))
(assert (= ($Snap.first $t@80@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@66@01 g1@67@01))))
(assert (=
  ($Snap.second $t@80@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@80@01))
    ($Snap.second ($Snap.second $t@80@01)))))
(declare-const n$3@81@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@81@01 (Set_union g0@66@01 g1@67@01)))
(declare-const sm@82@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@83@01 ($Ref) $Ref)
(declare-fun img@84@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@81@01 $Ref) (n$32@81@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@81@01 (Set_union g0@66@01 g1@67@01))
      (Set_in n$32@81@01 (Set_union g0@66@01 g1@67@01))
      (= n$31@81@01 n$32@81@01))
    (= n$31@81@01 n$32@81@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@81@01 $Ref)) (!
  (=>
    (Set_in n$3@81@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@83@01 n$3@81@01) n$3@81@01) (img@84@01 n$3@81@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) n$3@81@01) n$3@81@01))
  :qid |quant-u-14135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@83@01 r) r))
  :pattern ((inv@83@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@81@01 $Ref)) (!
  (=>
    (Set_in n$3@81@01 (Set_union g0@66@01 g1@67@01))
    (not (= n$3@81@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) n$3@81@01) n$3@81@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@85@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
  :pattern ((inv@83@01 r))
  :qid |quant-u-14136|)))
(assert (=
  ($Snap.second ($Snap.second $t@80@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@80@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@80@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@86@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 15 | !(n$4@86@01 in g0@66@01 ∪ g1@67@01) | live]
; [else-branch: 15 | n$4@86@01 in g0@66@01 ∪ g1@67@01 | live]
(push) ; 5
; [then-branch: 15 | !(n$4@86@01 in g0@66@01 ∪ g1@67@01)]
(assert (not (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 15 | n$4@86@01 in g0@66@01 ∪ g1@67@01]
(assert (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
      (=
        ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01))
(push) ; 6
(assert (not (and
  (img@84@01 n$4@86@01)
  (Set_in (inv@83@01 n$4@86@01) (Set_union g0@66@01 g1@67@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
  (and
    (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01))))
(assert (or
  (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
  (not (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01)))))
(push) ; 4
; [then-branch: 16 | n$4@86@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@85@01, n$4@86@01) != Null | live]
; [else-branch: 16 | !(n$4@86@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@85@01, n$4@86@01) != Null) | live]
(push) ; 5
; [then-branch: 16 | n$4@86@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@85@01, n$4@86@01) != Null]
(assert (and
  (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
  (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
      (=
        ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01))
(push) ; 6
(assert (not (and
  (img@84@01 n$4@86@01)
  (Set_in (inv@83@01 n$4@86@01) (Set_union g0@66@01 g1@67@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 16 | !(n$4@86@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@85@01, n$4@86@01) != Null)]
(assert (not
  (and
    (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (and
    (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))
  (and
    (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
      (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))))
  (and
    (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@85@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@85@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef59|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@86@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01)))
    (or
      (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01)))
    (or
      (not
        (and
          (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
          (not
            (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))))
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) (Set_union g0@66@01 g1@67@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@86@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01)))
    (or
      (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01)))
    (or
      (not
        (and
          (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
          (not
            (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null))))
      (and
        (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))))
  :pattern ((Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@86@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01))
      (not (= ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in n$4@86@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n$4@86@01) n$4@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@80@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g1) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v))
(declare-const u@87@01 $Ref)
(declare-const v@88@01 $Ref)
(push) ; 3
; [eval] (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && (v in g1)
; [eval] (u in g0)
(push) ; 4
; [then-branch: 17 | !(u@87@01 in g0@66@01) | live]
; [else-branch: 17 | u@87@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 17 | !(u@87@01 in g0@66@01)]
(assert (not (Set_in u@87@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 17 | u@87@01 in g0@66@01]
(assert (Set_in u@87@01 g0@66@01))
; [eval] (v in g1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in u@87@01 g0@66@01) (not (Set_in u@87@01 g0@66@01))))
(push) ; 4
; [then-branch: 18 | u@87@01 in g0@66@01 && v@88@01 in g1@67@01 | live]
; [else-branch: 18 | !(u@87@01 in g0@66@01 && v@88@01 in g1@67@01) | live]
(push) ; 5
; [then-branch: 18 | u@87@01 in g0@66@01 && v@88@01 in g1@67@01]
(assert (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01)))
; [eval] !exists_path($$((g0 union g1)), u, v)
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@89@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@89@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@90@01 ($Ref) $Ref)
(declare-fun img@91@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@89@01 $Ref) (n2@89@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@89@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n1@89@01) n1@89@01))
      (and
        (Set_in n2@89@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n2@89@01) n2@89@01))
      (= n1@89@01 n2@89@01))
    (= n1@89@01 n2@89@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@91@01 r) (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
  :pattern ((inv@90@01 r))
  :qid |quant-u-14138|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
      (img@91@01 r)
      (= r (inv@90@01 r)))
    (>
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14139|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@92@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@91@01 r) (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
    :pattern ((inv@90@01 r))
    :qid |quant-u-14138|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 18 | !(u@87@01 in g0@66@01 && v@88@01 in g1@67@01)]
(assert (not (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@91@01 r) (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
(assert (=>
  (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
  (and
    (Set_in u@87@01 g0@66@01)
    (Set_in v@88@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
      :pattern ((inv@90@01 r))
      :qid |quant-u-14138|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01)))
  (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@89@01 $Ref)) (!
  (=>
    (Set_in n@89@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@90@01 n@89@01) n@89@01) (img@91@01 n@89@01)))
  :pattern ((Set_in n@89@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@90@01 n@89@01))
  :pattern ((img@91@01 n@89@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@91@01 r) (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@90@01 r) r))
  :pattern ((inv@90@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r)))
    (=>
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@92@01  $FVF<next>))))
  :qid |qp.fvfDomDef62|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01)) (img@91@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@92@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef60|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@92@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef61|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@87@01 $Ref) (v@88@01 $Ref)) (!
  (and
    (or (Set_in u@87@01 g0@66@01) (not (Set_in u@87@01 g0@66@01)))
    (=>
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
      (and
        (Set_in u@87@01 g0@66@01)
        (Set_in v@88@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
          :pattern ((inv@90@01 r))
          :qid |quant-u-14138|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01)))
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))))
  :pattern ((Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@87@01 $Ref) (v@88@01 $Ref)) (!
  (and
    (or (Set_in u@87@01 g0@66@01) (not (Set_in u@87@01 g0@66@01)))
    (=>
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
      (and
        (Set_in u@87@01 g0@66@01)
        (Set_in v@88@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
          :pattern ((inv@90@01 r))
          :qid |quant-u-14138|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01)))
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))))
  :pattern ((Set_in u@87@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@87@01 $Ref) (v@88@01 $Ref)) (!
  (and
    (or (Set_in u@87@01 g0@66@01) (not (Set_in u@87@01 g0@66@01)))
    (=>
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
      (and
        (Set_in u@87@01 g0@66@01)
        (Set_in v@88@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
          :pattern ((inv@90@01 r))
          :qid |quant-u-14138|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01)))
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))))
  :pattern ((Set_in v@88@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@87@01 $Ref) (v@88@01 $Ref)) (!
  (and
    (or (Set_in u@87@01 g0@66@01) (not (Set_in u@87@01 g0@66@01)))
    (=>
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
      (and
        (Set_in u@87@01 g0@66@01)
        (Set_in v@88@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@90@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
          :pattern ((inv@90@01 r))
          :qid |quant-u-14138|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01)))
      (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@87@01 $Ref) (v@88@01 $Ref)) (!
  (=>
    (and (Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01)))
  :pattern ((Set_in u@87@01 g0@66@01) (Set_in v@88@01 g1@67@01))
  :pattern ((Set_in u@87@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01))
  :pattern ((Set_in v@88@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@92@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@87@01 v@88@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g0) } { (u in g0), exists_path($$(g0), u, v) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g0), exists_path($$(g0), u, v) } { (v in g0), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@93@01 $Ref)
(declare-const v@94@01 $Ref)
(push) ; 3
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v))
; [eval] (u in g0)
(push) ; 4
; [then-branch: 19 | !(u@93@01 in g0@66@01) | live]
; [else-branch: 19 | u@93@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 19 | !(u@93@01 in g0@66@01)]
(assert (not (Set_in u@93@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 19 | u@93@01 in g0@66@01]
(assert (Set_in u@93@01 g0@66@01))
; [eval] (v in g0)
(push) ; 6
; [then-branch: 20 | !(v@94@01 in g0@66@01) | live]
; [else-branch: 20 | v@94@01 in g0@66@01 | live]
(push) ; 7
; [then-branch: 20 | !(v@94@01 in g0@66@01)]
(assert (not (Set_in v@94@01 g0@66@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 20 | v@94@01 in g0@66@01]
(assert (Set_in v@94@01 g0@66@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@95@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@95@01 g0@66@01))
(pop) ; 9
(declare-fun inv@96@01 ($Ref) $Ref)
(declare-fun img@97@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@95@01 $Ref) (n2@95@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@95@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n1@95@01) n1@95@01))
      (and
        (Set_in n2@95@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) n2@95@01) n2@95@01))
      (= n1@95@01 n2@95@01))
    (= n1@95@01 n2@95@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@95@01 $Ref)) (!
  (=>
    (Set_in n@95@01 g0@66@01)
    (and (= (inv@96@01 n@95@01) n@95@01) (img@97@01 n@95@01)))
  :pattern ((Set_in n@95@01 g0@66@01))
  :pattern ((inv@96@01 n@95@01))
  :pattern ((img@97@01 n@95@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@97@01 r) (Set_in (inv@96@01 r) g0@66@01)) (= (inv@96@01 r) r))
  :pattern ((inv@96@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@96@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
  :pattern ((inv@96@01 r))
  :qid |quant-u-14141|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r) (= r (inv@96@01 r)))
    (>
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14142|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@98@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r)))
    (=>
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@95@01 $Ref)) (!
  (=>
    (Set_in n@95@01 g0@66@01)
    (and (= (inv@96@01 n@95@01) n@95@01) (img@97@01 n@95@01)))
  :pattern ((Set_in n@95@01 g0@66@01))
  :pattern ((inv@96@01 n@95@01))
  :pattern ((img@97@01 n@95@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@97@01 r) (Set_in (inv@96@01 r) g0@66@01)) (= (inv@96@01 r) r))
  :pattern ((inv@96@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r)))
    (=>
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@96@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
    :pattern ((inv@96@01 r))
    :qid |quant-u-14141|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((n@95@01 $Ref)) (!
  (=>
    (Set_in n@95@01 g0@66@01)
    (and (= (inv@96@01 n@95@01) n@95@01) (img@97@01 n@95@01)))
  :pattern ((Set_in n@95@01 g0@66@01))
  :pattern ((inv@96@01 n@95@01))
  :pattern ((img@97@01 n@95@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@97@01 r) (Set_in (inv@96@01 r) g0@66@01)) (= (inv@96@01 r) r))
  :pattern ((inv@96@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r)))
    (=>
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in v@94@01 g0@66@01)
  (and
    (Set_in v@94@01 g0@66@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@96@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
      :pattern ((inv@96@01 r))
      :qid |quant-u-14141|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((n@95@01 $Ref)) (!
  (=>
    (Set_in n@95@01 g0@66@01)
    (and (= (inv@96@01 n@95@01) n@95@01) (img@97@01 n@95@01)))
  :pattern ((Set_in n@95@01 g0@66@01))
  :pattern ((inv@96@01 n@95@01))
  :pattern ((img@97@01 n@95@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@97@01 r) (Set_in (inv@96@01 r) g0@66@01)) (= (inv@96@01 r) r))
  :pattern ((inv@96@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r)))
    (=>
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (=>
  (Set_in u@93@01 g0@66@01)
  (and
    (Set_in u@93@01 g0@66@01)
    (=>
      (Set_in v@94@01 g0@66@01)
      (and
        (Set_in v@94@01 g0@66@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@96@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
          :pattern ((inv@96@01 r))
          :qid |quant-u-14141|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01))))))
(assert (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01))))
(push) ; 4
; [then-branch: 21 | u@93@01 in g0@66@01 && v@94@01 in g0@66@01 && exists_path[Bool]($$(sm@98@01, g0@66@01), u@93@01, v@94@01) | live]
; [else-branch: 21 | !(u@93@01 in g0@66@01 && v@94@01 in g0@66@01 && exists_path[Bool]($$(sm@98@01, g0@66@01), u@93@01, v@94@01)) | live]
(push) ; 5
; [then-branch: 21 | u@93@01 in g0@66@01 && v@94@01 in g0@66@01 && exists_path[Bool]($$(sm@98@01, g0@66@01), u@93@01, v@94@01)]
(assert (and
  (Set_in u@93@01 g0@66@01)
  (and
    (Set_in v@94@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@99@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@99@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@100@01 ($Ref) $Ref)
(declare-fun img@101@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@102@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@102@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@99@01 $Ref) (n2@99@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@99@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) n1@99@01) n1@99@01))
      (and
        (Set_in n2@99@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) n2@99@01) n2@99@01))
      (= n1@99@01 n2@99@01))
    (= n1@99@01 n2@99@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@101@01 r) (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
  :pattern ((inv@100@01 r))
  :qid |quant-u-14144|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
      (img@101@01 r)
      (= r (inv@100@01 r)))
    (>
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14145|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@103@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@103@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@102@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@101@01 r) (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@103@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
    :pattern ((inv@100@01 r))
    :qid |quant-u-14144|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 21 | !(u@93@01 in g0@66@01 && v@94@01 in g0@66@01 && exists_path[Bool]($$(sm@98@01, g0@66@01), u@93@01, v@94@01))]
(assert (not
  (and
    (Set_in u@93@01 g0@66@01)
    (and
      (Set_in v@94@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@102@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@101@01 r) (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@103@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
(assert (=>
  (and
    (Set_in u@93@01 g0@66@01)
    (and
      (Set_in v@94@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
  (and
    (Set_in u@93@01 g0@66@01)
    (Set_in v@94@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
      :pattern ((inv@100@01 r))
      :qid |quant-u-14144|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
  (and
    (Set_in u@93@01 g0@66@01)
    (and
      (Set_in v@94@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@95@01 $Ref)) (!
  (=>
    (Set_in n@95@01 g0@66@01)
    (and (= (inv@96@01 n@95@01) n@95@01) (img@97@01 n@95@01)))
  :pattern ((Set_in n@95@01 g0@66@01))
  :pattern ((inv@96@01 n@95@01))
  :pattern ((img@97@01 n@95@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@97@01 r) (Set_in (inv@96@01 r) g0@66@01)) (= (inv@96@01 r) r))
  :pattern ((inv@96@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r)))
    (=>
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@98@01  $FVF<next>))))
  :qid |qp.fvfDomDef65|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@96@01 r) g0@66@01) (img@97@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@98@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef63|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@98@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef64|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@102@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@102@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef67|)))
(assert (forall ((n@99@01 $Ref)) (!
  (=>
    (Set_in n@99@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@100@01 n@99@01) n@99@01) (img@101@01 n@99@01)))
  :pattern ((Set_in n@99@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@100@01 n@99@01))
  :pattern ((img@101@01 n@99@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@101@01 r) (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@100@01 r) r))
  :pattern ((inv@100@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r)))
    (=>
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@103@01  $FVF<next>))))
  :qid |qp.fvfDomDef70|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01)) (img@101@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@103@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef68|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@103@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef69|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((Set_in u@93@01 g0@66@01) (Set_in v@94@01 g0@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((Set_in u@93@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((Set_in u@93@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((Set_in v@94@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((Set_in v@94@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (and
    (=>
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in u@93@01 g0@66@01)
        (=>
          (Set_in v@94@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@96@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@85@01  $FVF<next>) r) r))
              :pattern ((inv@96@01 r))
              :qid |quant-u-14141|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@94@01 g0@66@01) (not (Set_in v@94@01 g0@66@01)))))
    (or (Set_in u@93@01 g0@66@01) (not (Set_in u@93@01 g0@66@01)))
    (=>
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
      (and
        (Set_in u@93@01 g0@66@01)
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@100@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@102@01  $FVF<next>) r) r))
          :pattern ((inv@100@01 r))
          :qid |quant-u-14144|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@93@01 g0@66@01)
          (and
            (Set_in v@94@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))))
      (and
        (Set_in u@93@01 g0@66@01)
        (and
          (Set_in v@94@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@93@01 $Ref) (v@94@01 $Ref)) (!
  (=>
    (and
      (Set_in u@93@01 g0@66@01)
      (and
        (Set_in v@94@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :pattern ((Set_in u@93@01 g0@66@01) (Set_in v@94@01 g0@66@01))
  :pattern ((Set_in u@93@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))
  :pattern ((Set_in u@93@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :pattern ((Set_in v@94@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))
  :pattern ((Set_in v@94@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@98@01  $FVF<next>)) g0@66@01) u@93@01 v@94@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@103@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@93@01 v@94@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@80@01)))))
  $Snap.unit))
; [eval] (forall u: Ref, v: Ref :: { (u in g1), (v in g1) } { (u in g1), exists_path($$(g0), u, v) } { (u in g1), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$(g0), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@104@01 $Ref)
(declare-const v@105@01 $Ref)
(push) ; 3
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v))
; [eval] (u in g1)
(push) ; 4
; [then-branch: 22 | !(u@104@01 in g1@67@01) | live]
; [else-branch: 22 | u@104@01 in g1@67@01 | live]
(push) ; 5
; [then-branch: 22 | !(u@104@01 in g1@67@01)]
(assert (not (Set_in u@104@01 g1@67@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 22 | u@104@01 in g1@67@01]
(assert (Set_in u@104@01 g1@67@01))
; [eval] (v in g1)
(push) ; 6
; [then-branch: 23 | !(v@105@01 in g1@67@01) | live]
; [else-branch: 23 | v@105@01 in g1@67@01 | live]
(push) ; 7
; [then-branch: 23 | !(v@105@01 in g1@67@01)]
(assert (not (Set_in v@105@01 g1@67@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 23 | v@105@01 in g1@67@01]
(assert (Set_in v@105@01 g1@67@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@106@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@106@01 g0@66@01))
(pop) ; 9
(declare-fun inv@107@01 ($Ref) $Ref)
(declare-fun img@108@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@109@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@106@01 $Ref) (n2@106@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@106@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) n1@106@01) n1@106@01))
      (and
        (Set_in n2@106@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) n2@106@01) n2@106@01))
      (= n1@106@01 n2@106@01))
    (= n1@106@01 n2@106@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g0@66@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g0@66@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g0@66@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@107@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
  :pattern ((inv@107@01 r))
  :qid |quant-u-14147|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r) (= r (inv@107@01 r)))
    (>
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14148|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@110@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@110@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g0@66@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g0@66@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g0@66@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@110@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@107@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
    :pattern ((inv@107@01 r))
    :qid |quant-u-14147|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g0@66@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g0@66@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g0@66@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@110@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in v@105@01 g1@67@01)
  (and
    (Set_in v@105@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@107@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
      :pattern ((inv@107@01 r))
      :qid |quant-u-14147|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g0@66@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g0@66@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g0@66@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@110@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (Set_in u@104@01 g1@67@01)
  (and
    (Set_in u@104@01 g1@67@01)
    (=>
      (Set_in v@105@01 g1@67@01)
      (and
        (Set_in v@105@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@107@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
          :pattern ((inv@107@01 r))
          :qid |quant-u-14147|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01))))))
(assert (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01))))
(push) ; 4
; [then-branch: 24 | u@104@01 in g1@67@01 && v@105@01 in g1@67@01 && exists_path[Bool]($$(sm@110@01, g0@66@01), u@104@01, v@105@01) | live]
; [else-branch: 24 | !(u@104@01 in g1@67@01 && v@105@01 in g1@67@01 && exists_path[Bool]($$(sm@110@01, g0@66@01), u@104@01, v@105@01)) | live]
(push) ; 5
; [then-branch: 24 | u@104@01 in g1@67@01 && v@105@01 in g1@67@01 && exists_path[Bool]($$(sm@110@01, g0@66@01), u@104@01, v@105@01)]
(assert (and
  (Set_in u@104@01 g1@67@01)
  (and
    (Set_in v@105@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@111@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@111@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@112@01 ($Ref) $Ref)
(declare-fun img@113@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@114@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@111@01 $Ref) (n2@111@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@111@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) n1@111@01) n1@111@01))
      (and
        (Set_in n2@111@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) n2@111@01) n2@111@01))
      (= n1@111@01 n2@111@01))
    (= n1@111@01 n2@111@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@113@01 r) (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
  :pattern ((inv@112@01 r))
  :qid |quant-u-14150|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
      (img@113@01 r)
      (= r (inv@112@01 r)))
    (>
      (ite
        (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14151|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(declare-const sm@115@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@113@01 r) (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
    :pattern ((inv@112@01 r))
    :qid |quant-u-14150|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 24 | !(u@104@01 in g1@67@01 && v@105@01 in g1@67@01 && exists_path[Bool]($$(sm@110@01, g0@66@01), u@104@01, v@105@01))]
(assert (not
  (and
    (Set_in u@104@01 g1@67@01)
    (and
      (Set_in v@105@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@113@01 r) (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
(assert (=>
  (and
    (Set_in u@104@01 g1@67@01)
    (and
      (Set_in v@105@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
  (and
    (Set_in u@104@01 g1@67@01)
    (Set_in v@105@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
      :pattern ((inv@112@01 r))
      :qid |quant-u-14150|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
  (and
    (Set_in u@104@01 g1@67@01)
    (and
      (Set_in v@105@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@109@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef71|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@109@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef72|)))
(assert (forall ((n@106@01 $Ref)) (!
  (=>
    (Set_in n@106@01 g0@66@01)
    (and (= (inv@107@01 n@106@01) n@106@01) (img@108@01 n@106@01)))
  :pattern ((Set_in n@106@01 g0@66@01))
  :pattern ((inv@107@01 n@106@01))
  :pattern ((img@108@01 n@106@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@108@01 r) (Set_in (inv@107@01 r) g0@66@01)) (= (inv@107@01 r) r))
  :pattern ((inv@107@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r)))
    (=>
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@110@01  $FVF<next>))))
  :qid |qp.fvfDomDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@107@01 r) g0@66@01) (img@108@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@110@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@110@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@114@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@114@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (forall ((n@111@01 $Ref)) (!
  (=>
    (Set_in n@111@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@112@01 n@111@01) n@111@01) (img@113@01 n@111@01)))
  :pattern ((Set_in n@111@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@112@01 n@111@01))
  :pattern ((img@113@01 n@111@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@113@01 r) (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@112@01 r) r))
  :pattern ((inv@112@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r)))
    (=>
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@115@01  $FVF<next>))))
  :qid |qp.fvfDomDef80|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01)) (img@113@01 r))
      (and (img@84@01 r) (Set_in (inv@83@01 r) (Set_union g0@66@01 g1@67@01))))
    (=
      ($FVF.lookup_next (as sm@115@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r)))
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@80@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@115@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef79|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((Set_in u@104@01 g1@67@01) (Set_in v@105@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((Set_in u@104@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((Set_in u@104@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((Set_in v@105@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((Set_in v@105@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (and
    (=>
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in u@104@01 g1@67@01)
        (=>
          (Set_in v@105@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@107@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@109@01  $FVF<next>) r) r))
              :pattern ((inv@107@01 r))
              :qid |quant-u-14147|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@105@01 g1@67@01) (not (Set_in v@105@01 g1@67@01)))))
    (or (Set_in u@104@01 g1@67@01) (not (Set_in u@104@01 g1@67@01)))
    (=>
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
      (and
        (Set_in u@104@01 g1@67@01)
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@112@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@114@01  $FVF<next>) r) r))
          :pattern ((inv@112@01 r))
          :qid |quant-u-14150|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@104@01 g1@67@01)
          (and
            (Set_in v@105@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))))
      (and
        (Set_in u@104@01 g1@67@01)
        (and
          (Set_in v@105@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@104@01 $Ref) (v@105@01 $Ref)) (!
  (=>
    (and
      (Set_in u@104@01 g1@67@01)
      (and
        (Set_in v@105@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :pattern ((Set_in u@104@01 g1@67@01) (Set_in v@105@01 g1@67@01))
  :pattern ((Set_in u@104@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))
  :pattern ((Set_in u@104@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :pattern ((Set_in v@105@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))
  :pattern ((Set_in v@105@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@110@01  $FVF<next>)) g0@66@01) u@104@01 v@105@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@115@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@104@01 v@105@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_noExit($$((g0 union g1)), (g0 union g1), g0)
(declare-const $t@116@01 $Snap)
(assert (= $t@116@01 $Snap.unit))
; [eval] apply_noExit($$((g0 union g1)), (g0 union g1), g0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@117@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@117@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 4
(declare-fun inv@118@01 ($Ref) $Ref)
(declare-fun img@119@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@117@01 $Ref) (n2@117@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@117@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n1@117@01) n1@117@01))
      (and
        (Set_in n2@117@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) n2@117@01) n2@117@01))
      (= n1@117@01 n2@117@01))
    (= n1@117@01 n2@117@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@117@01 $Ref)) (!
  (=>
    (Set_in n@117@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@118@01 n@117@01) n@117@01) (img@119@01 n@117@01)))
  :pattern ((Set_in n@117@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@118@01 n@117@01))
  :pattern ((img@119@01 n@117@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@119@01 r) (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@118@01 r) r))
  :pattern ((inv@118@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
  :pattern ((inv@118@01 r))
  :qid |quant-u-14153|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01))
      (img@119@01 r)
      (= r (inv@118@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14154|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@120@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r)))
    (=>
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r))
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>))))
  :qid |qp.fvfDomDef84|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@117@01 $Ref)) (!
  (=>
    (Set_in n@117@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@118@01 n@117@01) n@117@01) (img@119@01 n@117@01)))
  :pattern ((Set_in n@117@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@118@01 n@117@01))
  :pattern ((img@119@01 n@117@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@119@01 r) (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@118@01 r) r))
  :pattern ((inv@118@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r)))
    (=>
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r))
      (Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@120@01  $FVF<next>))))
  :qid |qp.fvfDomDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef81|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01)) (img@119@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@120@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@120@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef83|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@118@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@78@01  $FVF<next>) r) r))
    :pattern ((inv@118@01 r))
    :qid |quant-u-14153|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
; [eval] (g0 union g1)
(assert (apply_noExit<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@120@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) (Set_union g0@66@01 g1@67@01) g0@66@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@121@01 $Snap)
(assert (= $t@121@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(set-option :timeout 0)
(push) ; 3
; [eval] !((null in g0))
; [eval] (null in g0)
(declare-const n@122@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@122@01 g0@66@01))
(pop) ; 4
(declare-fun inv@123@01 ($Ref) $Ref)
(declare-fun img@124@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@125@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@125@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@125@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@125@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@125@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@125@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef87|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@122@01 $Ref) (n2@122@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@122@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@125@01  $FVF<next>) n1@122@01) n1@122@01))
      (and
        (Set_in n2@122@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@125@01  $FVF<next>) n2@122@01) n2@122@01))
      (= n1@122@01 n2@122@01))
    (= n1@122@01 n2@122@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@122@01 $Ref)) (!
  (=>
    (Set_in n@122@01 g0@66@01)
    (and (= (inv@123@01 n@122@01) n@122@01) (img@124@01 n@122@01)))
  :pattern ((Set_in n@122@01 g0@66@01))
  :pattern ((inv@123@01 n@122@01))
  :pattern ((img@124@01 n@122@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@124@01 r) (Set_in (inv@123@01 r) g0@66@01)) (= (inv@123@01 r) r))
  :pattern ((inv@123@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@123@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@125@01  $FVF<next>) r) r))
  :pattern ((inv@123@01 r))
  :qid |quant-u-14156|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r) (= r (inv@123@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14157|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@126@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@126@01  $FVF<next>)))
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r)))
    (=>
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r))
      (Set_in r ($FVF.domain_next (as sm@126@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@126@01  $FVF<next>))))
  :qid |qp.fvfDomDef91|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef90|)))
; [eval] (forall n$0: Ref ::(n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@127@01 $Ref)
(push) ; 4
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 5
; [then-branch: 25 | !(n$0@127@01 in g0@66@01) | live]
; [else-branch: 25 | n$0@127@01 in g0@66@01 | live]
(push) ; 6
; [then-branch: 25 | !(n$0@127@01 in g0@66@01)]
(assert (not (Set_in n$0@127@01 g0@66@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 25 | n$0@127@01 in g0@66@01]
(assert (Set_in n$0@127@01 g0@66@01))
; [eval] n$0.next != null
(declare-const sm@128@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(declare-const pm@129@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@129@01  $FPM) r)
    (+
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resPrmSumDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resTrgDef96|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) n$0@127@01))
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_next (as pm@129@01  $FPM) n$0@127@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@129@01  $FPM) r)
    (+
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resPrmSumDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resTrgDef96|)))
(assert (=>
  (Set_in n$0@127@01 g0@66@01)
  (and
    (Set_in n$0@127@01 g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) n$0@127@01))))
(assert (or (Set_in n$0@127@01 g0@66@01) (not (Set_in n$0@127@01 g0@66@01))))
(push) ; 5
; [then-branch: 26 | n$0@127@01 in g0@66@01 && Lookup(next, sm@128@01, n$0@127@01) != Null | live]
; [else-branch: 26 | !(n$0@127@01 in g0@66@01 && Lookup(next, sm@128@01, n$0@127@01) != Null) | live]
(push) ; 6
; [then-branch: 26 | n$0@127@01 in g0@66@01 && Lookup(next, sm@128@01, n$0@127@01) != Null]
(assert (and
  (Set_in n$0@127@01 g0@66@01)
  (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef92|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef94|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) n$0@127@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$0@127@01) (Set_in (inv@71@01 n$0@127@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$0@127@01) (Set_in (inv@76@01 n$0@127@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 26 | !(n$0@127@01 in g0@66@01 && Lookup(next, sm@128@01, n$0@127@01) != Null)]
(assert (not
  (and
    (Set_in n$0@127@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (=>
  (and
    (Set_in n$0@127@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null)))
  (and
    (Set_in n$0@127@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) n$0@127@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@127@01 g0@66@01)
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null))))
  (and
    (Set_in n$0@127@01 g0@66@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@129@01  $FPM) r)
    (+
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resPrmSumDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resTrgDef96|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@127@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@127@01 g0@66@01)
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) g0@66@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@127@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@127@01 g0@66@01)
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) g0@66@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|)))
; [eval] !((null in g1))
; [eval] (null in g1)
(declare-const n$1@130@01 $Ref)
(push) ; 4
; [eval] (n$1 in g1)
(assert (Set_in n$1@130@01 g1@67@01))
(pop) ; 4
(declare-fun inv@131@01 ($Ref) $Ref)
(declare-fun img@132@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@133@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@130@01 $Ref) (n$12@130@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@130@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$11@130@01) n$11@130@01))
      (and
        (Set_in n$12@130@01 g1@67@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) n$12@130@01) n$12@130@01))
      (= n$11@130@01 n$12@130@01))
    (= n$11@130@01 n$12@130@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@130@01 $Ref)) (!
  (=>
    (Set_in n$1@130@01 g1@67@01)
    (and (= (inv@131@01 n$1@130@01) n$1@130@01) (img@132@01 n$1@130@01)))
  :pattern ((Set_in n$1@130@01 g1@67@01))
  :pattern ((inv@131@01 n$1@130@01))
  :pattern ((img@132@01 n$1@130@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@132@01 r) (Set_in (inv@131@01 r) g1@67@01)) (= (inv@131@01 r) r))
  :pattern ((inv@131@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@131@01 r) g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) r) r))
  :pattern ((inv@131@01 r))
  :qid |quant-u-14159|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r) (= r (inv@131@01 r)))
    (>
      (+
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14160|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@134@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r)))
    (=>
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r))
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
; [eval] (forall n$2: Ref ::(n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@135@01 $Ref)
(push) ; 4
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 5
; [then-branch: 27 | !(n$2@135@01 in g1@67@01) | live]
; [else-branch: 27 | n$2@135@01 in g1@67@01 | live]
(push) ; 6
; [then-branch: 27 | !(n$2@135@01 in g1@67@01)]
(assert (not (Set_in n$2@135@01 g1@67@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 27 | n$2@135@01 in g1@67@01]
(assert (Set_in n$2@135@01 g1@67@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef92|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef94|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) n$2@135@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$2@135@01) (Set_in (inv@71@01 n$2@135@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$2@135@01) (Set_in (inv@76@01 n$2@135@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (=>
  (Set_in n$2@135@01 g1@67@01)
  (and
    (Set_in n$2@135@01 g1@67@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) n$2@135@01))))
(assert (or (Set_in n$2@135@01 g1@67@01) (not (Set_in n$2@135@01 g1@67@01))))
(push) ; 5
; [then-branch: 28 | n$2@135@01 in g1@67@01 && Lookup(next, sm@128@01, n$2@135@01) != Null | live]
; [else-branch: 28 | !(n$2@135@01 in g1@67@01 && Lookup(next, sm@128@01, n$2@135@01) != Null) | live]
(push) ; 6
; [then-branch: 28 | n$2@135@01 in g1@67@01 && Lookup(next, sm@128@01, n$2@135@01) != Null]
(assert (and
  (Set_in n$2@135@01 g1@67@01)
  (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef92|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef94|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) n$2@135@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$2@135@01) (Set_in (inv@71@01 n$2@135@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$2@135@01) (Set_in (inv@76@01 n$2@135@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 28 | !(n$2@135@01 in g1@67@01 && Lookup(next, sm@128@01, n$2@135@01) != Null)]
(assert (not
  (and
    (Set_in n$2@135@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (=>
  (and
    (Set_in n$2@135@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null)))
  (and
    (Set_in n$2@135@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) n$2@135@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@135@01 g1@67@01)
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null))))
  (and
    (Set_in n$2@135@01 g1@67@01)
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$2@135@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@135@01 g1@67@01)
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) g1@67@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@135@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@135@01 g1@67@01)
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) g1@67@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@67@01 g0@66@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@67@01 g0@66@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@126@01  $FVF<next>))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>))
          ($Snap.combine $Snap.unit $Snap.unit)))))) g0@66@01 g1@67@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@125@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@125@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@125@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@125@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@125@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef87|)))
(assert (forall ((n@122@01 $Ref)) (!
  (=>
    (Set_in n@122@01 g0@66@01)
    (and (= (inv@123@01 n@122@01) n@122@01) (img@124@01 n@122@01)))
  :pattern ((Set_in n@122@01 g0@66@01))
  :pattern ((inv@123@01 n@122@01))
  :pattern ((img@124@01 n@122@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@124@01 r) (Set_in (inv@123@01 r) g0@66@01)) (= (inv@123@01 r) r))
  :pattern ((inv@123@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@126@01  $FVF<next>)))
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r)))
    (=>
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r))
      (Set_in r ($FVF.domain_next (as sm@126@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@126@01  $FVF<next>))))
  :qid |qp.fvfDomDef91|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@123@01 r) g0@66@01) (img@124@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@126@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@126@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@129@01  $FPM) r)
    (+
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resPrmSumDef95|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@129@01  $FPM) r))
  :qid |qp.resTrgDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@133@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef98|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@133@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef99|)))
(assert (forall ((n$1@130@01 $Ref)) (!
  (=>
    (Set_in n$1@130@01 g1@67@01)
    (and (= (inv@131@01 n$1@130@01) n$1@130@01) (img@132@01 n$1@130@01)))
  :pattern ((Set_in n$1@130@01 g1@67@01))
  :pattern ((inv@131@01 n$1@130@01))
  :pattern ((img@132@01 n$1@130@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@132@01 r) (Set_in (inv@131@01 r) g1@67@01)) (= (inv@131@01 r) r))
  :pattern ((inv@131@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r)))
    (=>
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r))
      (Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@134@01  $FVF<next>))))
  :qid |qp.fvfDomDef103|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@131@01 r) g1@67@01) (img@132@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@134@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef101|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@134@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef102|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@123@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@125@01  $FVF<next>) r) r))
    :pattern ((inv@123@01 r))
    :qid |quant-u-14156|))
  (forall ((n$0@127@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@127@01 g0@66@01)
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$0@127@01) g0@66@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@131@01 r) g1@67@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@133@01  $FVF<next>) r) r))
    :pattern ((inv@131@01 r))
    :qid |quant-u-14159|))
  (forall ((n$2@135@01 $Ref)) (!
    (=>
      (and
        (Set_in n$2@135@01 g1@67@01)
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$2@135@01) g1@67@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|))
  (Set_equal (Set_intersection g1@67@01 g0@66@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@126@01  $FVF<next>))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>))
            ($Snap.combine $Snap.unit $Snap.unit)))))) g0@66@01 g1@67@01)))
(assert (apply_TCFraming ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@126@01  $FVF<next>))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$FVF<next>To$Snap (as sm@134@01  $FVF<next>))
          ($Snap.combine $Snap.unit $Snap.unit)))))) g0@66@01 g1@67@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g0@66@01 g1@67@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@66@01 g1@67@01))))
(declare-const n$3@136@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$3@136@01 (Set_union g0@66@01 g1@67@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@137@01 ($Ref) $Ref)
(declare-fun img@138@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@136@01 $Ref) (n$32@136@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@136@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$31@136@01) n$31@136@01))
      (and
        (Set_in n$32@136@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$32@136@01) n$32@136@01))
      (= n$31@136@01 n$32@136@01))
    (= n$31@136@01 n$32@136@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@136@01 $Ref)) (!
  (=>
    (Set_in n$3@136@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@137@01 n$3@136@01) n$3@136@01) (img@138@01 n$3@136@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$3@136@01) n$3@136@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@138@01 r) (Set_in (inv@137@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@137@01 r) r))
  :pattern ((inv@137@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@137@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
  :pattern ((inv@137@01 r))
  :qid |quant-u-14162|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@139@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@137@01 r) (Set_union g0@66@01 g1@67@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    ($Perm.min
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@140@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@137@01 r) (Set_union g0@66@01 g1@67@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    ($Perm.min
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@139@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
        $Perm.Write
        $Perm.No)
      (pTaken@139@01 r))
    $Perm.No)
  
  :qid |quant-u-14164|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@137@01 r) (Set_union g0@66@01 g1@67@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    (= (- $Perm.Write (pTaken@139@01 r)) $Perm.No))
  
  :qid |quant-u-14165|))))
(check-sat)
; unknown
(pop) ; 3
; 0.16s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
        $Perm.Write
        $Perm.No)
      (pTaken@140@01 r))
    $Perm.No)
  
  :qid |quant-u-14166|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@137@01 r) (Set_union g0@66@01 g1@67@01))
      (img@138@01 r)
      (= r (inv@137@01 r)))
    (= (- (- $Perm.Write (pTaken@139@01 r)) (pTaken@140@01 r)) $Perm.No))
  
  :qid |quant-u-14167|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$4: Ref :: { (n$4.next in (g0 union g1)) } { (n$4 in (g0 union g1)), n$4.next } (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1)))
(declare-const n$4@141@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g0 union g1)) && n$4.next != null ==> (n$4.next in (g0 union g1))
; [eval] (n$4 in (g0 union g1)) && n$4.next != null
; [eval] (n$4 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 29 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01) | live]
; [else-branch: 29 | n$4@141@01 in g0@66@01 ∪ g1@67@01 | live]
(push) ; 5
; [then-branch: 29 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01)]
(assert (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 29 | n$4@141@01 in g0@66@01 ∪ g1@67@01]
(assert (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef92|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef94|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$4@141@01) (Set_in (inv@71@01 n$4@141@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$4@141@01) (Set_in (inv@76@01 n$4@141@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (=>
  (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))))
(assert (or
  (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
  (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)))))
(push) ; 4
; [then-branch: 30 | n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@128@01, n$4@141@01) != Null | live]
; [else-branch: 30 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@128@01, n$4@141@01) != Null) | live]
(push) ; 5
; [then-branch: 30 | n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@128@01, n$4@141@01) != Null]
(assert (and
  (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
  (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null))))
; [eval] (n$4.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
    :qid |qp.fvfValDef92|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
      (=
        ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef94|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@72@01 n$4@141@01) (Set_in (inv@71@01 n$4@141@01) g0@66@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@77@01 n$4@141@01) (Set_in (inv@76@01 n$4@141@01) g1@67@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 30 | !(n$4@141@01 in g0@66@01 ∪ g1@67@01 && Lookup(next, sm@128@01, n$4@141@01) != Null)]
(assert (not
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
(assert (=>
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null))))
  (and
    (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
    (not (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef92|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@128@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@128@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef94|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@141@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (not
        (and
          (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
          (not
            (=
              ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01)
              $Ref.null))))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31-aux|)))
(assert (forall ((n$4@141@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))))
    (=>
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01)))
    (or
      (not
        (and
          (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
          (not
            (=
              ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01)
              $Ref.null))))
      (and
        (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
        (not
          (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))))
  :pattern ((Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@141@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$4@141@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01))
      (not
        (= ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in n$4@141@01 (Set_union g0@66@01 g1@67@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n$4@141@01) n$4@141@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@378@13@378@31|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g1) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v))
(declare-const u@142@01 $Ref)
(declare-const v@143@01 $Ref)
(push) ; 3
; [eval] (u in g0) && (v in g1) ==> !exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && (v in g1)
; [eval] (u in g0)
(push) ; 4
; [then-branch: 31 | !(u@142@01 in g0@66@01) | live]
; [else-branch: 31 | u@142@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 31 | !(u@142@01 in g0@66@01)]
(assert (not (Set_in u@142@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 31 | u@142@01 in g0@66@01]
(assert (Set_in u@142@01 g0@66@01))
; [eval] (v in g1)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01))))
(push) ; 4
; [then-branch: 32 | u@142@01 in g0@66@01 && v@143@01 in g1@67@01 | live]
; [else-branch: 32 | !(u@142@01 in g0@66@01 && v@143@01 in g1@67@01) | live]
(push) ; 5
; [then-branch: 32 | u@142@01 in g0@66@01 && v@143@01 in g1@67@01]
(assert (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
; [eval] !exists_path($$((g0 union g1)), u, v)
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@144@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@145@01 ($Ref) $Ref)
(declare-fun img@146@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@144@01 $Ref) (n2@144@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@144@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n1@144@01) n1@144@01))
      (and
        (Set_in n2@144@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n2@144@01) n2@144@01))
      (= n1@144@01 n2@144@01))
    (= n1@144@01 n2@144@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
  :pattern ((inv@145@01 r))
  :qid |quant-u-14169|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
      (img@146@01 r)
      (= r (inv@145@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14170|))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(declare-const sm@147@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef107|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
    :pattern ((inv@145@01 r))
    :qid |quant-u-14169|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 32 | !(u@142@01 in g0@66@01 && v@143@01 in g1@67@01)]
(assert (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
(assert (=>
  (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  (and
    (Set_in u@142@01 g0@66@01)
    (Set_in v@143@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
      :pattern ((inv@145@01 r))
      :qid |quant-u-14169|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
  (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@144@01 $Ref)) (!
  (=>
    (Set_in n@144@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@145@01 n@144@01) n@144@01) (img@146@01 n@144@01)))
  :pattern ((Set_in n@144@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@145@01 n@144@01))
  :pattern ((img@146@01 n@144@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@146@01 r) (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@145@01 r) r))
  :pattern ((inv@145@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r)))
    (=>
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@147@01  $FVF<next>))))
  :qid |qp.fvfDomDef107|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01)) (img@146@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@147@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@147@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef106|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-14169|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-14169|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-14169|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (and
    (or (Set_in u@142@01 g0@66@01) (not (Set_in u@142@01 g0@66@01)))
    (=>
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
      (and
        (Set_in u@142@01 g0@66@01)
        (Set_in v@143@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@145@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
          :pattern ((inv@145@01 r))
          :qid |quant-u-14169|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91-aux|)))
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (=>
    (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91_precondition|)))
(push) ; 3
(assert (not (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (=>
    (and
      (=>
        (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
      (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01)))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01)))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91|))))
(check-sat)
; unsat
(pop) ; 3
; 0.03s
; (get-info :all-statistics)
(assert (forall ((u@142@01 $Ref) (v@143@01 $Ref)) (!
  (=>
    (and (Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
    (not
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01)))
  :pattern ((Set_in u@142@01 g0@66@01) (Set_in v@143@01 g1@67@01))
  :pattern ((Set_in u@142@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((Set_in v@143@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@147@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@142@01 v@143@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@379@13@379@91|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g0), (v in g0) } { (u in g0), exists_path($$(g0), u, v) } { (u in g0), exists_path($$((g0 union g1)), u, v) } { (v in g0), exists_path($$(g0), u, v) } { (v in g0), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@148@01 $Ref)
(declare-const v@149@01 $Ref)
(push) ; 3
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g0) && ((v in g0) && exists_path($$(g0), u, v))
; [eval] (u in g0)
(push) ; 4
; [then-branch: 33 | !(u@148@01 in g0@66@01) | live]
; [else-branch: 33 | u@148@01 in g0@66@01 | live]
(push) ; 5
; [then-branch: 33 | !(u@148@01 in g0@66@01)]
(assert (not (Set_in u@148@01 g0@66@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 33 | u@148@01 in g0@66@01]
(assert (Set_in u@148@01 g0@66@01))
; [eval] (v in g0)
(push) ; 6
; [then-branch: 34 | !(v@149@01 in g0@66@01) | live]
; [else-branch: 34 | v@149@01 in g0@66@01 | live]
(push) ; 7
; [then-branch: 34 | !(v@149@01 in g0@66@01)]
(assert (not (Set_in v@149@01 g0@66@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 34 | v@149@01 in g0@66@01]
(assert (Set_in v@149@01 g0@66@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@150@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@150@01 g0@66@01))
(pop) ; 9
(declare-fun inv@151@01 ($Ref) $Ref)
(declare-fun img@152@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@150@01 $Ref) (n2@150@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@150@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n1@150@01) n1@150@01))
      (and
        (Set_in n2@150@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) n2@150@01) n2@150@01))
      (= n1@150@01 n2@150@01))
    (= n1@150@01 n2@150@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@151@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
  :pattern ((inv@151@01 r))
  :qid |quant-u-14172|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r) (= r (inv@151@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14173|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const sm@153@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@151@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
    :pattern ((inv@151@01 r))
    :qid |quant-u-14172|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert (=>
  (Set_in v@149@01 g0@66@01)
  (and
    (Set_in v@149@01 g0@66@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@151@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
      :pattern ((inv@151@01 r))
      :qid |quant-u-14172|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert (=>
  (Set_in u@148@01 g0@66@01)
  (and
    (Set_in u@148@01 g0@66@01)
    (=>
      (Set_in v@149@01 g0@66@01)
      (and
        (Set_in v@149@01 g0@66@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@151@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
          :pattern ((inv@151@01 r))
          :qid |quant-u-14172|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01))))))
(assert (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01))))
(push) ; 4
; [then-branch: 35 | u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01) | live]
; [else-branch: 35 | !(u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01)) | live]
(push) ; 5
; [then-branch: 35 | u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01)]
(assert (and
  (Set_in u@148@01 g0@66@01)
  (and
    (Set_in v@149@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@154@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@155@01 ($Ref) $Ref)
(declare-fun img@156@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@157@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef114|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@154@01 $Ref) (n2@154@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@154@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) n1@154@01) n1@154@01))
      (and
        (Set_in n2@154@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) n2@154@01) n2@154@01))
      (= n1@154@01 n2@154@01))
    (= n1@154@01 n2@154@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
  :pattern ((inv@155@01 r))
  :qid |quant-u-14175|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
      (img@156@01 r)
      (= r (inv@155@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14176|))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(declare-const sm@158@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef118|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef114|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
    :pattern ((inv@155@01 r))
    :qid |quant-u-14175|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 35 | !(u@148@01 in g0@66@01 && v@149@01 in g0@66@01 && exists_path[Bool]($$(sm@153@01, g0@66@01), u@148@01, v@149@01))]
(assert (not
  (and
    (Set_in u@148@01 g0@66@01)
    (and
      (Set_in v@149@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef114|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef117|)))
(assert (=>
  (and
    (Set_in u@148@01 g0@66@01)
    (and
      (Set_in v@149@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
  (and
    (Set_in u@148@01 g0@66@01)
    (Set_in v@149@01 g0@66@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
      :pattern ((inv@155@01 r))
      :qid |quant-u-14175|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
  (and
    (Set_in u@148@01 g0@66@01)
    (and
      (Set_in v@149@01 g0@66@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@150@01 $Ref)) (!
  (=>
    (Set_in n@150@01 g0@66@01)
    (and (= (inv@151@01 n@150@01) n@150@01) (img@152@01 n@150@01)))
  :pattern ((Set_in n@150@01 g0@66@01))
  :pattern ((inv@151@01 n@150@01))
  :pattern ((img@152@01 n@150@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@152@01 r) (Set_in (inv@151@01 r) g0@66@01)) (= (inv@151@01 r) r))
  :pattern ((inv@151@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r)))
    (=>
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@153@01  $FVF<next>))))
  :qid |qp.fvfDomDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@151@01 r) g0@66@01) (img@152@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@153@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef109|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@153@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef110|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@157@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef113|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@157@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef114|)))
(assert (forall ((n@154@01 $Ref)) (!
  (=>
    (Set_in n@154@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@155@01 n@154@01) n@154@01) (img@156@01 n@154@01)))
  :pattern ((Set_in n@154@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@155@01 n@154@01))
  :pattern ((img@156@01 n@154@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@156@01 r) (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@155@01 r) r))
  :pattern ((inv@155@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r)))
    (=>
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@158@01  $FVF<next>))))
  :qid |qp.fvfDomDef118|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef115|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01)) (img@156@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@158@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef116|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@158@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef117|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in u@148@01 g0@66@01)
        (=>
          (Set_in v@149@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@151@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@128@01  $FVF<next>) r) r))
              :pattern ((inv@151@01 r))
              :qid |quant-u-14172|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@149@01 g0@66@01) (not (Set_in v@149@01 g0@66@01)))))
    (or (Set_in u@148@01 g0@66@01) (not (Set_in u@148@01 g0@66@01)))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      (and
        (Set_in u@148@01 g0@66@01)
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@155@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@157@01  $FVF<next>) r) r))
          :pattern ((inv@155@01 r))
          :qid |quant-u-14175|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@148@01 g0@66@01)
          (and
            (Set_in v@149@01 g0@66@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117-aux|)))
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (and
    (=>
      (and (Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))
    (=>
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117_precondition|)))
(push) ; 3
(assert (not (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (and (Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01))
        (=>
          (and
            (Set_in u@148@01 g0@66@01)
            (and
              (Set_in v@149@01 g0@66@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
      (and
        (Set_in u@148@01 g0@66@01)
        (and
          (Set_in v@149@01 g0@66@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117|))))
(check-sat)
; unsat
(pop) ; 3
; 0.09s
; (get-info :all-statistics)
(assert (forall ((u@148@01 $Ref) (v@149@01 $Ref)) (!
  (=>
    (and
      (Set_in u@148@01 g0@66@01)
      (and
        (Set_in v@149@01 g0@66@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (Set_in v@149@01 g0@66@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in u@148@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((Set_in v@149@01 g0@66@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@153@01  $FVF<next>)) g0@66@01) u@148@01 v@149@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@158@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@148@01 v@149@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@380@13@380@117|)))
; [eval] (forall u: Ref, v: Ref :: { (u in g1), (v in g1) } { (u in g1), exists_path($$(g0), u, v) } { (u in g1), exists_path($$((g0 union g1)), u, v) } { (v in g1), exists_path($$(g0), u, v) } { (v in g1), exists_path($$((g0 union g1)), u, v) } { exists_path($$(g0), u, v) } { exists_path($$((g0 union g1)), u, v) } (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v))
(declare-const u@159@01 $Ref)
(declare-const v@160@01 $Ref)
(push) ; 3
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v)) ==> exists_path($$((g0 union g1)), u, v)
; [eval] (u in g1) && ((v in g1) && exists_path($$(g0), u, v))
; [eval] (u in g1)
(push) ; 4
; [then-branch: 36 | !(u@159@01 in g1@67@01) | live]
; [else-branch: 36 | u@159@01 in g1@67@01 | live]
(push) ; 5
; [then-branch: 36 | !(u@159@01 in g1@67@01)]
(assert (not (Set_in u@159@01 g1@67@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 36 | u@159@01 in g1@67@01]
(assert (Set_in u@159@01 g1@67@01))
; [eval] (v in g1)
(push) ; 6
; [then-branch: 37 | !(v@160@01 in g1@67@01) | live]
; [else-branch: 37 | v@160@01 in g1@67@01 | live]
(push) ; 7
; [then-branch: 37 | !(v@160@01 in g1@67@01)]
(assert (not (Set_in v@160@01 g1@67@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 37 | v@160@01 in g1@67@01]
(assert (Set_in v@160@01 g1@67@01))
; [eval] exists_path($$(g0), u, v)
; [eval] $$(g0)
(push) ; 8
(declare-const n@161@01 $Ref)
(push) ; 9
; [eval] (n in refs)
(assert (Set_in n@161@01 g0@66@01))
(pop) ; 9
(declare-fun inv@162@01 ($Ref) $Ref)
(declare-fun img@163@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@164@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef121|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((n1@161@01 $Ref) (n2@161@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@161@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) n1@161@01) n1@161@01))
      (and
        (Set_in n2@161@01 g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) n2@161@01) n2@161@01))
      (= n1@161@01 n2@161@01))
    (= n1@161@01 n2@161@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@162@01 r) g0@66@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
  :pattern ((inv@162@01 r))
  :qid |quant-u-14178|)))
(push) ; 9
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r) (= r (inv@162@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14179|))))
(check-sat)
; unsat
(pop) ; 9
; 0.01s
; (get-info :all-statistics)
(declare-const sm@165@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef125|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef124|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef121|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef124|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@162@01 r) g0@66@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
    :pattern ((inv@162@01 r))
    :qid |quant-u-14178|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef121|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef124|)))
(assert (=>
  (Set_in v@160@01 g1@67@01)
  (and
    (Set_in v@160@01 g1@67@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@162@01 r) g0@66@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
      :pattern ((inv@162@01 r))
      :qid |quant-u-14178|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))))
(assert (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef121|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef124|)))
(assert (=>
  (Set_in u@159@01 g1@67@01)
  (and
    (Set_in u@159@01 g1@67@01)
    (=>
      (Set_in v@160@01 g1@67@01)
      (and
        (Set_in v@160@01 g1@67@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@162@01 r) g0@66@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
          :pattern ((inv@162@01 r))
          :qid |quant-u-14178|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
    (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01))))))
(assert (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01))))
(push) ; 4
; [then-branch: 38 | u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01) | live]
; [else-branch: 38 | !(u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01)) | live]
(push) ; 5
; [then-branch: 38 | u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01)]
(assert (and
  (Set_in u@159@01 g1@67@01)
  (and
    (Set_in v@160@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
; [eval] exists_path($$((g0 union g1)), u, v)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 6
(declare-const n@166@01 $Ref)
(push) ; 7
; [eval] (n in refs)
(assert (Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
(pop) ; 7
(declare-fun inv@167@01 ($Ref) $Ref)
(declare-fun img@168@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@169@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
; Check receiver injectivity
(push) ; 7
(assert (not (forall ((n1@166@01 $Ref) (n2@166@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@166@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) n1@166@01) n1@166@01))
      (and
        (Set_in n2@166@01 (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) n2@166@01) n2@166@01))
      (= n1@166@01 n2@166@01))
    (= n1@166@01 n2@166@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
  :pattern ((inv@167@01 r))
  :qid |quant-u-14181|)))
(push) ; 7
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
      (img@168@01 r)
      (= r (inv@167@01 r)))
    (>
      (+
        (ite
          (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14182|))))
(check-sat)
; unsat
(pop) ; 7
; 0.01s
; (get-info :all-statistics)
(declare-const sm@170@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef132|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef131|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))
(pop) ; 6
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef131|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
    :pattern ((inv@167@01 r))
    :qid |quant-u-14181|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 38 | !(u@159@01 in g1@67@01 && v@160@01 in g1@67@01 && exists_path[Bool]($$(sm@165@01, g0@66@01), u@159@01, v@160@01))]
(assert (not
  (and
    (Set_in u@159@01 g1@67@01)
    (and
      (Set_in v@160@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef131|)))
(assert (=>
  (and
    (Set_in u@159@01 g1@67@01)
    (and
      (Set_in v@160@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
  (and
    (Set_in u@159@01 g1@67@01)
    (Set_in v@160@01 g1@67@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
      :pattern ((inv@167@01 r))
      :qid |quant-u-14181|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
  (and
    (Set_in u@159@01 g1@67@01)
    (and
      (Set_in v@160@01 g1@67@01)
      (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef119|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@164@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef120|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@164@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef121|)))
(assert (forall ((n@161@01 $Ref)) (!
  (=>
    (Set_in n@161@01 g0@66@01)
    (and (= (inv@162@01 n@161@01) n@161@01) (img@163@01 n@161@01)))
  :pattern ((Set_in n@161@01 g0@66@01))
  :pattern ((inv@162@01 n@161@01))
  :pattern ((img@163@01 n@161@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=> (and (img@163@01 r) (Set_in (inv@162@01 r) g0@66@01)) (= (inv@162@01 r) r))
  :pattern ((inv@162@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r)))
    (=>
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@165@01  $FVF<next>))))
  :qid |qp.fvfDomDef125|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef122|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@162@01 r) g0@66@01) (img@163@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@165@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef123|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@165@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef124|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef126|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01))
    (=
      ($FVF.lookup_next (as sm@169@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef127|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@169@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef128|)))
(assert (forall ((n@166@01 $Ref)) (!
  (=>
    (Set_in n@166@01 (Set_union g0@66@01 g1@67@01))
    (and (= (inv@167@01 n@166@01) n@166@01) (img@168@01 n@166@01)))
  :pattern ((Set_in n@166@01 (Set_union g0@66@01 g1@67@01)))
  :pattern ((inv@167@01 n@166@01))
  :pattern ((img@168@01 n@166@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@168@01 r) (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)))
    (= (inv@167@01 r) r))
  :pattern ((inv@167@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r)))
    (=>
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@170@01  $FVF<next>))))
  :qid |qp.fvfDomDef132|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@72@01 r) (Set_in (inv@71@01 r) g0@66@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r))
  :qid |qp.fvfValDef129|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01)) (img@168@01 r))
      (and (img@77@01 r) (Set_in (inv@76@01 r) g1@67@01)))
    (=
      ($FVF.lookup_next (as sm@170@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r))
  :qid |qp.fvfValDef130|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@68@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@68@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@170@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef131|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in u@159@01 g1@67@01)
        (=>
          (Set_in v@160@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (forall ((r $Ref)) (!
              (=>
                (Set_in (inv@162@01 r) g0@66@01)
                ($FVF.loc_next ($FVF.lookup_next (as sm@164@01  $FVF<next>) r) r))
              :pattern ((inv@162@01 r))
              :qid |quant-u-14178|))
            ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01)))
        (or (Set_in v@160@01 g1@67@01) (not (Set_in v@160@01 g1@67@01)))))
    (or (Set_in u@159@01 g1@67@01) (not (Set_in u@159@01 g1@67@01)))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      (and
        (Set_in u@159@01 g1@67@01)
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@167@01 r) (Set_union g0@66@01 g1@67@01))
            ($FVF.loc_next ($FVF.lookup_next (as sm@169@01  $FVF<next>) r) r))
          :pattern ((inv@167@01 r))
          :qid |quant-u-14181|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
    (or
      (not
        (and
          (Set_in u@159@01 g1@67@01)
          (and
            (Set_in v@160@01 g1@67@01)
            (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117-aux|)))
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (and
    (=>
      (and (Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))
    (=>
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
      ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117_precondition|)))
(push) ; 3
(assert (not (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (=>
    (and
      (and
        (=>
          (and (Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01))
        (=>
          (and
            (Set_in u@159@01 g1@67@01)
            (and
              (Set_in v@160@01 g1@67@01)
              (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
          ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01))))
      (and
        (Set_in u@159@01 g1@67@01)
        (and
          (Set_in v@160@01 g1@67@01)
          (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((u@159@01 $Ref) (v@160@01 $Ref)) (!
  (=>
    (and
      (Set_in u@159@01 g1@67@01)
      (and
        (Set_in v@160@01 g1@67@01)
        (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01)))
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (Set_in v@160@01 g1@67@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in u@159@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((Set_in v@160@01 g1@67@01) (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@165@01  $FVF<next>)) g0@66@01) u@159@01 v@160@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@170@01  $FVF<next>)) (Set_union g0@66@01 g1@67@01)) u@159@01 v@160@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@381@13@381@117|)))
(pop) ; 2
(pop) ; 1
; ---------- test_framing_sets ----------
(declare-const g0@171@01 Set<$Ref>)
(declare-const g1@172@01 Set<$Ref>)
(declare-const x0@173@01 $Ref)
(declare-const y0@174@01 $Ref)
(declare-const x1@175@01 $Ref)
(declare-const y1@176@01 $Ref)
(declare-const x@177@01 $Ref)
(declare-const g0@178@01 Set<$Ref>)
(declare-const g1@179@01 Set<$Ref>)
(declare-const x0@180@01 $Ref)
(declare-const y0@181@01 $Ref)
(declare-const x1@182@01 $Ref)
(declare-const y1@183@01 $Ref)
(declare-const x@184@01 $Ref)
(push) ; 1
(declare-const $t@185@01 $Snap)
(assert (= $t@185@01 ($Snap.combine ($Snap.first $t@185@01) ($Snap.second $t@185@01))))
(assert (= ($Snap.first $t@185@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@178@01)))
(assert (=
  ($Snap.second $t@185@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@185@01))
    ($Snap.second ($Snap.second $t@185@01)))))
(declare-const n@186@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@186@01 g0@178@01))
(declare-const sm@187@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@188@01 ($Ref) $Ref)
(declare-fun img@189@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@186@01 $Ref) (n2@186@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@186@01 g0@178@01)
      (Set_in n2@186@01 g0@178@01)
      (= n1@186@01 n2@186@01))
    (= n1@186@01 n2@186@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@186@01 $Ref)) (!
  (=>
    (Set_in n@186@01 g0@178@01)
    (and (= (inv@188@01 n@186@01) n@186@01) (img@189@01 n@186@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) n@186@01) n@186@01))
  :qid |quant-u-14184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (= (inv@188@01 r) r))
  :pattern ((inv@188@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@186@01 $Ref)) (!
  (=> (Set_in n@186@01 g0@178@01) (not (= n@186@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) n@186@01) n@186@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@190@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef135|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@188@01 r) g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) r) r))
  :pattern ((inv@188@01 r))
  :qid |quant-u-14185|)))
(assert (=
  ($Snap.second ($Snap.second $t@185@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@185@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@185@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@191@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 39 | !(n$0@191@01 in g0@178@01) | live]
; [else-branch: 39 | n$0@191@01 in g0@178@01 | live]
(push) ; 4
; [then-branch: 39 | !(n$0@191@01 in g0@178@01)]
(assert (not (Set_in n$0@191@01 g0@178@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 39 | n$0@191@01 in g0@178@01]
(assert (Set_in n$0@191@01 g0@178@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef134|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef135|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
(push) ; 5
(assert (not (and (img@189@01 n$0@191@01) (Set_in (inv@188@01 n$0@191@01) g0@178@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef135|)))
(assert (=>
  (Set_in n$0@191@01 g0@178@01)
  (and
    (Set_in n$0@191@01 g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))))
(assert (or (Set_in n$0@191@01 g0@178@01) (not (Set_in n$0@191@01 g0@178@01))))
(push) ; 3
; [then-branch: 40 | n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null | live]
; [else-branch: 40 | !(n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null) | live]
(push) ; 4
; [then-branch: 40 | n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null]
(assert (and
  (Set_in n$0@191@01 g0@178@01)
  (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef134|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef135|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
(push) ; 5
(assert (not (and (img@189@01 n$0@191@01) (Set_in (inv@188@01 n$0@191@01) g0@178@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 40 | !(n$0@191@01 in g0@178@01 && Lookup(next, sm@190@01, n$0@191@01) != Null)]
(assert (not
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef135|)))
(assert (=>
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@191@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))))
  (and
    (Set_in n$0@191@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@190@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef134|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@190@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef135|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@191@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@191@01 g0@178@01)
      (and
        (Set_in n$0@191@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or (Set_in n$0@191@01 g0@178@01) (not (Set_in n$0@191@01 g0@178@01)))
    (=>
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or
      (not
        (and
          (Set_in n$0@191@01 g0@178@01)
          (not
            (=
              ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01)
              $Ref.null))))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) g0@178@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@395@14@395@23-aux|)))
(assert (forall ((n$0@191@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@191@01 g0@178@01)
      (and
        (Set_in n$0@191@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or (Set_in n$0@191@01 g0@178@01) (not (Set_in n$0@191@01 g0@178@01)))
    (=>
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01)))
    (or
      (not
        (and
          (Set_in n$0@191@01 g0@178@01)
          (not
            (=
              ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01)
              $Ref.null))))
      (and
        (Set_in n$0@191@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))))
  :pattern ((Set_in n$0@191@01 g0@178@01) ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@395@14@395@23-aux|)))
(assert (forall ((n$0@191@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@191@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) g0@178@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) g0@178@01))
  :pattern ((Set_in n$0@191@01 g0@178@01) ($FVF.loc_next ($FVF.lookup_next (as sm@190@01  $FVF<next>) n$0@191@01) n$0@191@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@395@14@395@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@185@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@179@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
(declare-const n$1@192@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@192@01 g1@179@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@193@01 ($Ref) $Ref)
(declare-fun img@194@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@192@01 $Ref) (n$12@192@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@192@01 g1@179@01)
      (Set_in n$12@192@01 g1@179@01)
      (= n$11@192@01 n$12@192@01))
    (= n$11@192@01 n$12@192@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@192@01 $Ref)) (!
  (=>
    (Set_in n$1@192@01 g1@179@01)
    (and (= (inv@193@01 n$1@192@01) n$1@192@01) (img@194@01 n$1@192@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) n$1@192@01) n$1@192@01))
  :qid |quant-u-14187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (= (inv@193@01 r) r))
  :pattern ((inv@193@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@192@01 $Ref)) (!
  (=> (Set_in n$1@192@01 g1@179@01) (not (= n$1@192@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) n$1@192@01) n$1@192@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@192@01 n@186@01)
    (=
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))))
  
  :qid |quant-u-14188|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(declare-const sm@195@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef138|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@193@01 r) g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) r) r))
  :pattern ((inv@193@01 r))
  :qid |quant-u-14189|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@196@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 41 | !(n$2@196@01 in g1@179@01) | live]
; [else-branch: 41 | n$2@196@01 in g1@179@01 | live]
(push) ; 4
; [then-branch: 41 | !(n$2@196@01 in g1@179@01)]
(assert (not (Set_in n$2@196@01 g1@179@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 41 | n$2@196@01 in g1@179@01]
(assert (Set_in n$2@196@01 g1@179@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef136|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef137|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef138|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$2@196@01) (Set_in (inv@188@01 n$2@196@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$2@196@01) (Set_in (inv@193@01 n$2@196@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef138|)))
(assert (=>
  (Set_in n$2@196@01 g1@179@01)
  (and
    (Set_in n$2@196@01 g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))))
(assert (or (Set_in n$2@196@01 g1@179@01) (not (Set_in n$2@196@01 g1@179@01))))
(push) ; 3
; [then-branch: 42 | n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null | live]
; [else-branch: 42 | !(n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null) | live]
(push) ; 4
; [then-branch: 42 | n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null]
(assert (and
  (Set_in n$2@196@01 g1@179@01)
  (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef136|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef137|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef138|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$2@196@01) (Set_in (inv@188@01 n$2@196@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$2@196@01) (Set_in (inv@193@01 n$2@196@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 42 | !(n$2@196@01 in g1@179@01 && Lookup(next, sm@195@01, n$2@196@01) != Null)]
(assert (not
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef138|)))
(assert (=>
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@196@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))))
  (and
    (Set_in n$2@196@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef136|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@195@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef137|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@195@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef138|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@196@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@196@01 g1@179@01)
      (and
        (Set_in n$2@196@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or (Set_in n$2@196@01 g1@179@01) (not (Set_in n$2@196@01 g1@179@01)))
    (=>
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or
      (not
        (and
          (Set_in n$2@196@01 g1@179@01)
          (not
            (=
              ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01)
              $Ref.null))))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@396@14@396@23-aux|)))
(assert (forall ((n$2@196@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@196@01 g1@179@01)
      (and
        (Set_in n$2@196@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or (Set_in n$2@196@01 g1@179@01) (not (Set_in n$2@196@01 g1@179@01)))
    (=>
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01)))
    (or
      (not
        (and
          (Set_in n$2@196@01 g1@179@01)
          (not
            (=
              ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01)
              $Ref.null))))
      (and
        (Set_in n$2@196@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))))
  :pattern ((Set_in n$2@196@01 g1@179@01) ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@396@14@396@23-aux|)))
(assert (forall ((n$2@196@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@196@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) g1@179@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) g1@179@01))
  :pattern ((Set_in n$2@196@01 g1@179@01) ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n$2@196@01) n$2@196@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@396@14@396@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@180@01 g0@178@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
  $Snap.unit))
; [eval] (y0 in g0)
(assert (Set_in y0@181@01 g0@178@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@182@01 g1@179@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
  $Snap.unit))
; [eval] (y1 in g1)
(assert (Set_in y1@183@01 g1@179@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@197@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 43 | r@197@01 in g0@178@01 | live]
; [else-branch: 43 | !(r@197@01 in g0@178@01) | live]
(push) ; 4
; [then-branch: 43 | r@197@01 in g0@178@01]
(assert (Set_in r@197@01 g0@178@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 43 | !(r@197@01 in g0@178@01)]
(assert (not (Set_in r@197@01 g0@178@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@197@01 g0@178@01)) (Set_in r@197@01 g0@178@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@197@01 $Ref)) (!
  (or (not (Set_in r@197@01 g0@178@01)) (Set_in r@197@01 g0@178@01))
  :pattern ((Set_in r@197@01 g0@178@01) (Set_in r@197@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@399@14@399@34-aux|)))
(assert (forall ((r@197@01 $Ref)) (!
  (=> (Set_in r@197@01 g0@178@01) (not (Set_in r@197@01 g1@179@01)))
  :pattern ((Set_in r@197@01 g0@178@01) (Set_in r@197@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@399@14@399@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@198@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 44 | r$0@198@01 in g1@179@01 | live]
; [else-branch: 44 | !(r$0@198@01 in g1@179@01) | live]
(push) ; 4
; [then-branch: 44 | r$0@198@01 in g1@179@01]
(assert (Set_in r$0@198@01 g1@179@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 44 | !(r$0@198@01 in g1@179@01)]
(assert (not (Set_in r$0@198@01 g1@179@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@198@01 g1@179@01)) (Set_in r$0@198@01 g1@179@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@198@01 $Ref)) (!
  (or (not (Set_in r$0@198@01 g1@179@01)) (Set_in r$0@198@01 g1@179@01))
  :pattern ((Set_in r$0@198@01 g0@178@01) (Set_in r$0@198@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@399@14@399@34-aux|)))
(assert (forall ((r$0@198@01 $Ref)) (!
  (=> (Set_in r$0@198@01 g1@179@01) (not (Set_in r$0@198@01 g0@178@01)))
  :pattern ((Set_in r$0@198@01 g0@178@01) (Set_in r$0@198@01 g1@179@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@399@14@399@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
  $Snap.unit))
; [eval] exists_path($$(g0), x0, y0)
; [eval] $$(g0)
(push) ; 2
(declare-const n@199@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@199@01 g0@178@01))
(pop) ; 3
(declare-fun inv@200@01 ($Ref) $Ref)
(declare-fun img@201@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@199@01 $Ref) (n2@199@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@199@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n1@199@01) n1@199@01))
      (and
        (Set_in n2@199@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) n2@199@01) n2@199@01))
      (= n1@199@01 n2@199@01))
    (= n1@199@01 n2@199@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g0@178@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g0@178@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@201@01 r) (Set_in (inv@200@01 r) g0@178@01))
    (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@200@01 r) g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) r) r))
  :pattern ((inv@200@01 r))
  :qid |quant-u-14191|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r) (= r (inv@200@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14192|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@202@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) g0@178@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@199@01 $Ref)) (!
  (=>
    (Set_in n@199@01 g0@178@01)
    (and (= (inv@200@01 n@199@01) n@199@01) (img@201@01 n@199@01)))
  :pattern ((Set_in n@199@01 g0@178@01))
  :pattern ((inv@200@01 n@199@01))
  :pattern ((img@201@01 n@199@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@201@01 r) (Set_in (inv@200@01 r) g0@178@01))
    (= (inv@200@01 r) r))
  :pattern ((inv@200@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r)))
    (=>
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@202@01  $FVF<next>))))
  :qid |qp.fvfDomDef142|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef139|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@200@01 r) g0@178@01) (img@201@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@202@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef140|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@202@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef141|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@200@01 r) g0@178@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@195@01  $FVF<next>) r) r))
    :pattern ((inv@200@01 r))
    :qid |quant-u-14191|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) g0@178@01)))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@202@01  $FVF<next>)) g0@178@01) x0@180@01 y0@181@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))))))))))
  $Snap.unit))
; [eval] exists_path($$(g1), x1, y1)
; [eval] $$(g1)
(push) ; 2
(declare-const n@203@01 $Ref)
(push) ; 3
; [eval] (n in refs)
(assert (Set_in n@203@01 g1@179@01))
(pop) ; 3
(declare-fun inv@204@01 ($Ref) $Ref)
(declare-fun img@205@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@206@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef145|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@203@01 $Ref) (n2@203@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@203@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) n1@203@01) n1@203@01))
      (and
        (Set_in n2@203@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) n2@203@01) n2@203@01))
      (= n1@203@01 n2@203@01))
    (= n1@203@01 n2@203@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g1@179@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g1@179@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@205@01 r) (Set_in (inv@204@01 r) g1@179@01))
    (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@204@01 r) g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) r) r))
  :pattern ((inv@204@01 r))
  :qid |quant-u-14194|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r) (= r (inv@204@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14195|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@207@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>))))
  :qid |qp.fvfDomDef149|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@207@01  $FVF<next>)) g1@179@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef143|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@206@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef144|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@206@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef145|)))
(assert (forall ((n@203@01 $Ref)) (!
  (=>
    (Set_in n@203@01 g1@179@01)
    (and (= (inv@204@01 n@203@01) n@203@01) (img@205@01 n@203@01)))
  :pattern ((Set_in n@203@01 g1@179@01))
  :pattern ((inv@204@01 n@203@01))
  :pattern ((img@205@01 n@203@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@205@01 r) (Set_in (inv@204@01 r) g1@179@01))
    (= (inv@204@01 r) r))
  :pattern ((inv@204@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r)))
    (=>
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@207@01  $FVF<next>))))
  :qid |qp.fvfDomDef149|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef146|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@204@01 r) g1@179@01) (img@205@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@207@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef147|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@207@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef148|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@204@01 r) g1@179@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@206@01  $FVF<next>) r) r))
    :pattern ((inv@204@01 r))
    :qid |quant-u-14194|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@207@01  $FVF<next>)) g1@179@01)))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@207@01  $FVF<next>)) g1@179@01) x1@182@01 y1@183@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@208@01 $Snap)
(assert (= $t@208@01 ($Snap.combine ($Snap.first $t@208@01) ($Snap.second $t@208@01))))
(assert (= ($Snap.first $t@208@01) $Snap.unit))
; [eval] !((null in (g1 union g0)))
; [eval] (null in (g1 union g0))
; [eval] (g1 union g0)
(assert (not (Set_in $Ref.null (Set_union g1@179@01 g0@178@01))))
(assert (=
  ($Snap.second $t@208@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@208@01))
    ($Snap.second ($Snap.second $t@208@01)))))
(declare-const n$3@209@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g1 union g0))
; [eval] (g1 union g0)
(assert (Set_in n$3@209@01 (Set_union g1@179@01 g0@178@01)))
(declare-const sm@210@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@211@01 ($Ref) $Ref)
(declare-fun img@212@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@209@01 $Ref) (n$32@209@01 $Ref)) (!
  (=>
    (and
      (Set_in n$31@209@01 (Set_union g1@179@01 g0@178@01))
      (Set_in n$32@209@01 (Set_union g1@179@01 g0@178@01))
      (= n$31@209@01 n$32@209@01))
    (= n$31@209@01 n$32@209@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@209@01 $Ref)) (!
  (=>
    (Set_in n$3@209@01 (Set_union g1@179@01 g0@178@01))
    (and (= (inv@211@01 n$3@209@01) n$3@209@01) (img@212@01 n$3@209@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) n$3@209@01) n$3@209@01))
  :qid |quant-u-14197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (= (inv@211@01 r) r))
  :pattern ((inv@211@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$3@209@01 $Ref)) (!
  (=>
    (Set_in n$3@209@01 (Set_union g1@179@01 g0@178@01))
    (not (= n$3@209@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) n$3@209@01) n$3@209@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@213@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) r) r))
  :pattern ((inv@211@01 r))
  :qid |quant-u-14198|)))
(assert (=
  ($Snap.second ($Snap.second $t@208@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@208@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@208@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@208@01))) $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4.next in (g1 union g0)) } { (n$4 in (g1 union g0)), n$4.next } (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0)))
(declare-const n$4@214@01 $Ref)
(push) ; 3
; [eval] (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0))
; [eval] (n$4 in (g1 union g0)) && n$4.next != null
; [eval] (n$4 in (g1 union g0))
; [eval] (g1 union g0)
(push) ; 4
; [then-branch: 45 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01) | live]
; [else-branch: 45 | n$4@214@01 in g1@179@01 ∪ g0@178@01 | live]
(push) ; 5
; [then-branch: 45 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01)]
(assert (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 45 | n$4@214@01 in g1@179@01 ∪ g0@178@01]
(assert (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
      (=
        ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
    :qid |qp.fvfValDef151|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef152|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
(push) ; 6
(assert (not (and
  (img@212@01 n$4@214@01)
  (Set_in (inv@211@01 n$4@214@01) (Set_union g1@179@01 g0@178@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (=>
  (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))))
(assert (or
  (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
  (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)))))
(push) ; 4
; [then-branch: 46 | n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null | live]
; [else-branch: 46 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null) | live]
(push) ; 5
; [then-branch: 46 | n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null]
(assert (and
  (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
  (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))))
; [eval] (n$4.next in (g1 union g0))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
      (=
        ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
    :qid |qp.fvfValDef151|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef152|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
(push) ; 6
(assert (not (and
  (img@212@01 n$4@214@01)
  (Set_in (inv@211@01 n$4@214@01) (Set_union g1@179@01 g0@178@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g1 union g0)
(pop) ; 5
(push) ; 5
; [else-branch: 46 | !(n$4@214@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@213@01, n$4@214@01) != Null)]
(assert (not
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
(assert (=>
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))))
  (and
    (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@213@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef151|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@213@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef152|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (not
        (and
          (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01)
              $Ref.null))))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) (Set_union g1@179@01 g0@178@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31-aux|)))
(assert (forall ((n$4@214@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01)))
    (or
      (not
        (and
          (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01)
              $Ref.null))))
      (and
        (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))))
  :pattern ((Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31-aux|)))
(assert (forall ((n$4@214@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in n$4@214@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n$4@214@01) n$4@214@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@208@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
; [eval] exists_path($$((g0 union g1)), x1, y1)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@215@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@215@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@216@01 ($Ref) $Ref)
(declare-fun img@217@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@215@01 $Ref) (n2@215@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@215@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n1@215@01) n1@215@01))
      (and
        (Set_in n2@215@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) n2@215@01) n2@215@01))
      (= n1@215@01 n2@215@01))
    (= n1@215@01 n2@215@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@217@01 r) (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) r) r))
  :pattern ((inv@216@01 r))
  :qid |quant-u-14200|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
      (img@217@01 r)
      (= r (inv@216@01 r)))
    (>
      (ite
        (and
          (img@212@01 r)
          (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14201|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@218@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r)))
    (=>
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@218@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@218@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@215@01 $Ref)) (!
  (=>
    (Set_in n@215@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@216@01 n@215@01) n@215@01) (img@217@01 n@215@01)))
  :pattern ((Set_in n@215@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@216@01 n@215@01))
  :pattern ((img@217@01 n@215@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@217@01 r) (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@216@01 r) r))
  :pattern ((inv@216@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r)))
    (=>
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@218@01  $FVF<next>))))
  :qid |qp.fvfDomDef155|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
        (img@217@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@218@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef153|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@218@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef154|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@216@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@213@01  $FVF<next>) r) r))
    :pattern ((inv@216@01 r))
    :qid |quant-u-14200|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@218@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@218@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x1@182@01 y1@183@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@208@01))))
  $Snap.unit))
; [eval] exists_path($$((g0 union g1)), x0, y0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@219@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@219@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@220@01 ($Ref) $Ref)
(declare-fun img@221@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@222@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@219@01 $Ref) (n2@219@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@219@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n1@219@01) n1@219@01))
      (and
        (Set_in n2@219@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) n2@219@01) n2@219@01))
      (= n1@219@01 n2@219@01))
    (= n1@219@01 n2@219@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@219@01 $Ref)) (!
  (=>
    (Set_in n@219@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@220@01 n@219@01) n@219@01) (img@221@01 n@219@01)))
  :pattern ((Set_in n@219@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@220@01 n@219@01))
  :pattern ((img@221@01 n@219@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@220@01 r) r))
  :pattern ((inv@220@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) r) r))
  :pattern ((inv@220@01 r))
  :qid |quant-u-14203|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
      (img@221@01 r)
      (= r (inv@220@01 r)))
    (>
      (ite
        (and
          (img@212@01 r)
          (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14204|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@223@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r)))
    (=>
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@223@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@212@01 r) (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@222@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef156|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@222@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef157|)))
(assert (forall ((n@219@01 $Ref)) (!
  (=>
    (Set_in n@219@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@220@01 n@219@01) n@219@01) (img@221@01 n@219@01)))
  :pattern ((Set_in n@219@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@220@01 n@219@01))
  :pattern ((img@221@01 n@219@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@221@01 r) (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@220@01 r) r))
  :pattern ((inv@220@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r)))
    (=>
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@223@01  $FVF<next>))))
  :qid |qp.fvfDomDef160|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
        (img@221@01 r))
      (and
        (img@212@01 r)
        (Set_in (inv@211@01 r) (Set_union g1@179@01 g0@178@01))))
    (=
      ($FVF.lookup_next (as sm@223@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r)))
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r))
  :qid |qp.fvfValDef158|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@208@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@223@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef159|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@220@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@222@01  $FVF<next>) r) r))
    :pattern ((inv@220@01 r))
    :qid |quant-u-14203|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@223@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@223@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x0@180@01 y0@181@01))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@224@01 $Snap)
(assert (= $t@224@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
; [eval] !((null in g0))
; [eval] (null in g0)
(declare-const n@225@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@225@01 g0@178@01))
(pop) ; 4
(declare-fun inv@226@01 ($Ref) $Ref)
(declare-fun img@227@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@228@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef163|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@225@01 $Ref) (n2@225@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@225@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) n1@225@01) n1@225@01))
      (and
        (Set_in n2@225@01 g0@178@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) n2@225@01) n2@225@01))
      (= n1@225@01 n2@225@01))
    (= n1@225@01 n2@225@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g0@178@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g0@178@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@227@01 r) (Set_in (inv@226@01 r) g0@178@01))
    (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@226@01 r) g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
  :pattern ((inv@226@01 r))
  :qid |quant-u-14206|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r) (= r (inv@226@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14207|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@229@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef167|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef166|)))
; [eval] (forall n$0: Ref ::(n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@230@01 $Ref)
(push) ; 4
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 5
; [then-branch: 47 | !(n$0@230@01 in g0@178@01) | live]
; [else-branch: 47 | n$0@230@01 in g0@178@01 | live]
(push) ; 6
; [then-branch: 47 | !(n$0@230@01 in g0@178@01)]
(assert (not (Set_in n$0@230@01 g0@178@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 47 | n$0@230@01 in g0@178@01]
(assert (Set_in n$0@230@01 g0@178@01))
; [eval] n$0.next != null
(declare-const sm@231@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(declare-const pm@232@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@232@01  $FPM) r)
    (+
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resTrgDef172|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) n$0@230@01))
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_next (as pm@232@01  $FPM) n$0@230@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@232@01  $FPM) r)
    (+
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resTrgDef172|)))
(assert (=>
  (Set_in n$0@230@01 g0@178@01)
  (and
    (Set_in n$0@230@01 g0@178@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) n$0@230@01))))
(assert (or (Set_in n$0@230@01 g0@178@01) (not (Set_in n$0@230@01 g0@178@01))))
(push) ; 5
; [then-branch: 48 | n$0@230@01 in g0@178@01 && Lookup(next, sm@231@01, n$0@230@01) != Null | live]
; [else-branch: 48 | !(n$0@230@01 in g0@178@01 && Lookup(next, sm@231@01, n$0@230@01) != Null) | live]
(push) ; 6
; [then-branch: 48 | n$0@230@01 in g0@178@01 && Lookup(next, sm@231@01, n$0@230@01) != Null]
(assert (and
  (Set_in n$0@230@01 g0@178@01)
  (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef168|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef169|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef170|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) n$0@230@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$0@230@01) (Set_in (inv@188@01 n$0@230@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$0@230@01) (Set_in (inv@193@01 n$0@230@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 48 | !(n$0@230@01 in g0@178@01 && Lookup(next, sm@231@01, n$0@230@01) != Null)]
(assert (not
  (and
    (Set_in n$0@230@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (=>
  (and
    (Set_in n$0@230@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null)))
  (and
    (Set_in n$0@230@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) n$0@230@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@230@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null))))
  (and
    (Set_in n$0@230@01 g0@178@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@232@01  $FPM) r)
    (+
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resTrgDef172|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@230@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@230@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) g0@178@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@230@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@230@01 g0@178@01)
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) g0@178@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|)))
; [eval] !((null in g1))
; [eval] (null in g1)
(declare-const n$1@233@01 $Ref)
(push) ; 4
; [eval] (n$1 in g1)
(assert (Set_in n$1@233@01 g1@179@01))
(pop) ; 4
(declare-fun inv@234@01 ($Ref) $Ref)
(declare-fun img@235@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@236@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef175|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@233@01 $Ref) (n$12@233@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@233@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@236@01  $FVF<next>) n$11@233@01) n$11@233@01))
      (and
        (Set_in n$12@233@01 g1@179@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@236@01  $FVF<next>) n$12@233@01) n$12@233@01))
      (= n$11@233@01 n$12@233@01))
    (= n$11@233@01 n$12@233@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@233@01 $Ref)) (!
  (=>
    (Set_in n$1@233@01 g1@179@01)
    (and (= (inv@234@01 n$1@233@01) n$1@233@01) (img@235@01 n$1@233@01)))
  :pattern ((Set_in n$1@233@01 g1@179@01))
  :pattern ((inv@234@01 n$1@233@01))
  :pattern ((img@235@01 n$1@233@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@235@01 r) (Set_in (inv@234@01 r) g1@179@01))
    (= (inv@234@01 r) r))
  :pattern ((inv@234@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@234@01 r) g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@236@01  $FVF<next>) r) r))
  :pattern ((inv@234@01 r))
  :qid |quant-u-14209|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r) (= r (inv@234@01 r)))
    (>
      (+
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14210|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@237@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@237@01  $FVF<next>)))
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r)))
    (=>
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r))
      (Set_in r ($FVF.domain_next (as sm@237@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@237@01  $FVF<next>))))
  :qid |qp.fvfDomDef179|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@237@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@237@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@237@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@237@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@237@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef178|)))
; [eval] (forall n$2: Ref ::(n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@238@01 $Ref)
(push) ; 4
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 5
; [then-branch: 49 | !(n$2@238@01 in g1@179@01) | live]
; [else-branch: 49 | n$2@238@01 in g1@179@01 | live]
(push) ; 6
; [then-branch: 49 | !(n$2@238@01 in g1@179@01)]
(assert (not (Set_in n$2@238@01 g1@179@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 49 | n$2@238@01 in g1@179@01]
(assert (Set_in n$2@238@01 g1@179@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef168|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef169|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef170|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) n$2@238@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$2@238@01) (Set_in (inv@188@01 n$2@238@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$2@238@01) (Set_in (inv@193@01 n$2@238@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (=>
  (Set_in n$2@238@01 g1@179@01)
  (and
    (Set_in n$2@238@01 g1@179@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) n$2@238@01))))
(assert (or (Set_in n$2@238@01 g1@179@01) (not (Set_in n$2@238@01 g1@179@01))))
(push) ; 5
; [then-branch: 50 | n$2@238@01 in g1@179@01 && Lookup(next, sm@231@01, n$2@238@01) != Null | live]
; [else-branch: 50 | !(n$2@238@01 in g1@179@01 && Lookup(next, sm@231@01, n$2@238@01) != Null) | live]
(push) ; 6
; [then-branch: 50 | n$2@238@01 in g1@179@01 && Lookup(next, sm@231@01, n$2@238@01) != Null]
(assert (and
  (Set_in n$2@238@01 g1@179@01)
  (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef168|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef169|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef170|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) n$2@238@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$2@238@01) (Set_in (inv@188@01 n$2@238@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$2@238@01) (Set_in (inv@193@01 n$2@238@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 50 | !(n$2@238@01 in g1@179@01 && Lookup(next, sm@231@01, n$2@238@01) != Null)]
(assert (not
  (and
    (Set_in n$2@238@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (=>
  (and
    (Set_in n$2@238@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null)))
  (and
    (Set_in n$2@238@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) n$2@238@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@238@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null))))
  (and
    (Set_in n$2@238@01 g1@179@01)
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$2@238@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@238@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) g1@179@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@238@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@238@01 g1@179@01)
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) g1@179@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@179@01 g0@178@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@179@01 g0@178@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$FVF<next>To$Snap (as sm@237@01  $FVF<next>))
          ($Snap.combine $Snap.unit $Snap.unit)))))) g0@178@01 g1@179@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef161|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@228@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef162|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@228@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef163|)))
(assert (forall ((n@225@01 $Ref)) (!
  (=>
    (Set_in n@225@01 g0@178@01)
    (and (= (inv@226@01 n@225@01) n@225@01) (img@227@01 n@225@01)))
  :pattern ((Set_in n@225@01 g0@178@01))
  :pattern ((inv@226@01 n@225@01))
  :pattern ((img@227@01 n@225@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@227@01 r) (Set_in (inv@226@01 r) g0@178@01))
    (= (inv@226@01 r) r))
  :pattern ((inv@226@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r)))
    (=>
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@229@01  $FVF<next>))))
  :qid |qp.fvfDomDef167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef164|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@226@01 r) g0@178@01) (img@227@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@229@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef165|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@229@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef166|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@232@01  $FPM) r)
    (+
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resPrmSumDef171|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@232@01  $FPM) r))
  :qid |qp.resTrgDef172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef173|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@236@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef174|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@236@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef175|)))
(assert (forall ((n$1@233@01 $Ref)) (!
  (=>
    (Set_in n$1@233@01 g1@179@01)
    (and (= (inv@234@01 n$1@233@01) n$1@233@01) (img@235@01 n$1@233@01)))
  :pattern ((Set_in n$1@233@01 g1@179@01))
  :pattern ((inv@234@01 n$1@233@01))
  :pattern ((img@235@01 n$1@233@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@235@01 r) (Set_in (inv@234@01 r) g1@179@01))
    (= (inv@234@01 r) r))
  :pattern ((inv@234@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@237@01  $FVF<next>)))
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r)))
    (=>
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r))
      (Set_in r ($FVF.domain_next (as sm@237@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@237@01  $FVF<next>))))
  :qid |qp.fvfDomDef179|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@237@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@237@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef176|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@234@01 r) g1@179@01) (img@235@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@237@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@237@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef177|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@237@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef178|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@226@01 r) g0@178@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@228@01  $FVF<next>) r) r))
    :pattern ((inv@226@01 r))
    :qid |quant-u-14206|))
  (forall ((n$0@230@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@230@01 g0@178@01)
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$0@230@01) g0@178@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@234@01 r) g1@179@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@236@01  $FVF<next>) r) r))
    :pattern ((inv@234@01 r))
    :qid |quant-u-14209|))
  (forall ((n$2@238@01 $Ref)) (!
    (=>
      (and
        (Set_in n$2@238@01 g1@179@01)
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$2@238@01) g1@179@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|))
  (Set_equal (Set_intersection g1@179@01 g0@178@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$FVF<next>To$Snap (as sm@237@01  $FVF<next>))
            ($Snap.combine $Snap.unit $Snap.unit)))))) g0@178@01 g1@179@01)))
(assert (apply_TCFraming ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@229@01  $FVF<next>))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$FVF<next>To$Snap (as sm@237@01  $FVF<next>))
          ($Snap.combine $Snap.unit $Snap.unit)))))) g0@178@01 g1@179@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [eval] !((null in (g1 union g0)))
; [eval] (null in (g1 union g0))
; [eval] (g1 union g0)
(set-option :timeout 0)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g1@179@01 g0@178@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g1@179@01 g0@178@01))))
(declare-const n$3@239@01 $Ref)
(push) ; 3
; [eval] (n$3 in (g1 union g0))
; [eval] (g1 union g0)
(assert (Set_in n$3@239@01 (Set_union g1@179@01 g0@178@01)))
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@240@01 ($Ref) $Ref)
(declare-fun img@241@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$31@239@01 $Ref) (n$32@239@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$31@239@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$31@239@01) n$31@239@01))
      (and
        (Set_in n$32@239@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$32@239@01) n$32@239@01))
      (= n$31@239@01 n$32@239@01))
    (= n$31@239@01 n$32@239@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$3@239@01 $Ref)) (!
  (=>
    (Set_in n$3@239@01 (Set_union g1@179@01 g0@178@01))
    (and (= (inv@240@01 n$3@239@01) n$3@239@01) (img@241@01 n$3@239@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$3@239@01) n$3@239@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@241@01 r) (Set_in (inv@240@01 r) (Set_union g1@179@01 g0@178@01)))
    (= (inv@240@01 r) r))
  :pattern ((inv@240@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@240@01 r) (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r))
  :pattern ((inv@240@01 r))
  :qid |quant-u-14212|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@242@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@240@01 r) (Set_union g1@179@01 g0@178@01))
      (img@241@01 r)
      (= r (inv@240@01 r)))
    ($Perm.min
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@243@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@240@01 r) (Set_union g1@179@01 g0@178@01))
      (img@241@01 r)
      (= r (inv@240@01 r)))
    ($Perm.min
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@242@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
        $Perm.Write
        $Perm.No)
      (pTaken@242@01 r))
    $Perm.No)
  
  :qid |quant-u-14214|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@240@01 r) (Set_union g1@179@01 g0@178@01))
      (img@241@01 r)
      (= r (inv@240@01 r)))
    (= (- $Perm.Write (pTaken@242@01 r)) $Perm.No))
  
  :qid |quant-u-14215|))))
(check-sat)
; unknown
(pop) ; 3
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
        $Perm.Write
        $Perm.No)
      (pTaken@243@01 r))
    $Perm.No)
  
  :qid |quant-u-14216|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@240@01 r) (Set_union g1@179@01 g0@178@01))
      (img@241@01 r)
      (= r (inv@240@01 r)))
    (= (- (- $Perm.Write (pTaken@242@01 r)) (pTaken@243@01 r)) $Perm.No))
  
  :qid |quant-u-14217|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$4: Ref :: { (n$4.next in (g1 union g0)) } { (n$4 in (g1 union g0)), n$4.next } (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0)))
(declare-const n$4@244@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$4 in (g1 union g0)) && n$4.next != null ==> (n$4.next in (g1 union g0))
; [eval] (n$4 in (g1 union g0)) && n$4.next != null
; [eval] (n$4 in (g1 union g0))
; [eval] (g1 union g0)
(push) ; 4
; [then-branch: 51 | !(n$4@244@01 in g1@179@01 ∪ g0@178@01) | live]
; [else-branch: 51 | n$4@244@01 in g1@179@01 ∪ g0@178@01 | live]
(push) ; 5
; [then-branch: 51 | !(n$4@244@01 in g1@179@01 ∪ g0@178@01)]
(assert (not (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 51 | n$4@244@01 in g1@179@01 ∪ g0@178@01]
(assert (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01)))
; [eval] n$4.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef168|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef169|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef170|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$4@244@01) (Set_in (inv@188@01 n$4@244@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$4@244@01) (Set_in (inv@193@01 n$4@244@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (=>
  (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
  (and
    (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))))
(assert (or
  (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
  (not (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01)))))
(push) ; 4
; [then-branch: 52 | n$4@244@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@231@01, n$4@244@01) != Null | live]
; [else-branch: 52 | !(n$4@244@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@231@01, n$4@244@01) != Null) | live]
(push) ; 5
; [then-branch: 52 | n$4@244@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@231@01, n$4@244@01) != Null]
(assert (and
  (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
  (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null))))
; [eval] (n$4.next in (g1 union g0))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
    :qid |qp.fvfValDef168|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
      (=
        ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
    :qid |qp.fvfValDef169|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef170|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@189@01 n$4@244@01) (Set_in (inv@188@01 n$4@244@01) g0@178@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@194@01 n$4@244@01) (Set_in (inv@193@01 n$4@244@01) g1@179@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
; [eval] (g1 union g0)
(pop) ; 5
(push) ; 5
; [else-branch: 52 | !(n$4@244@01 in g1@179@01 ∪ g0@178@01 && Lookup(next, sm@231@01, n$4@244@01) != Null)]
(assert (not
  (and
    (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
(assert (=>
  (and
    (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))
  (and
    (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null))))
  (and
    (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
    (not (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef168|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@231@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef169|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@231@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef170|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@244@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01)))
    (or
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01)))
    (or
      (not
        (and
          (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01)
              $Ref.null))))
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) (Set_union g1@179@01 g0@178@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31-aux|)))
(assert (forall ((n$4@244@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01)))
    (or
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (not (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))))
    (=>
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01)))
    (or
      (not
        (and
          (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
          (not
            (=
              ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01)
              $Ref.null))))
      (and
        (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
        (not
          (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))))
  :pattern ((Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31-aux|)))
(push) ; 3
(assert (not (forall ((n$4@244@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$4@244@01 $Ref)) (!
  (=>
    (and
      (Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01))
      (not
        (= ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) (Set_union g1@179@01 g0@178@01)))
  :pattern ((Set_in n$4@244@01 (Set_union g1@179@01 g0@178@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n$4@244@01) n$4@244@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@403@13@403@31|)))
; [eval] exists_path($$((g0 union g1)), x1, y1)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@245@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@245@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@246@01 ($Ref) $Ref)
(declare-fun img@247@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@245@01 $Ref) (n2@245@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@245@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n1@245@01) n1@245@01))
      (and
        (Set_in n2@245@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) n2@245@01) n2@245@01))
      (= n1@245@01 n2@245@01))
    (= n1@245@01 n2@245@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@245@01 $Ref)) (!
  (=>
    (Set_in n@245@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@246@01 n@245@01) n@245@01) (img@247@01 n@245@01)))
  :pattern ((Set_in n@245@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@246@01 n@245@01))
  :pattern ((img@247@01 n@245@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@247@01 r) (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@246@01 r) r))
  :pattern ((inv@246@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r))
  :pattern ((inv@246@01 r))
  :qid |quant-u-14219|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
      (img@247@01 r)
      (= r (inv@246@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14220|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@248@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r)))
    (=>
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r))
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>))))
  :qid |qp.fvfDomDef183|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@245@01 $Ref)) (!
  (=>
    (Set_in n@245@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@246@01 n@245@01) n@245@01) (img@247@01 n@245@01)))
  :pattern ((Set_in n@245@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@246@01 n@245@01))
  :pattern ((img@247@01 n@245@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@247@01 r) (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@246@01 r) r))
  :pattern ((inv@246@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r)))
    (=>
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r))
      (Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@248@01  $FVF<next>))))
  :qid |qp.fvfDomDef183|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef180|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
        (img@247@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@248@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef181|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@248@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef182|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@246@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@231@01  $FVF<next>) r) r))
    :pattern ((inv@246@01 r))
    :qid |quant-u-14219|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(push) ; 3
(assert (not (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x1@182@01 y1@183@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.32s
; (get-info :all-statistics)
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@248@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x1@182@01 y1@183@01))
; [eval] exists_path($$((g0 union g1)), x0, y0)
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@249@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@249@01 (Set_union g0@178@01 g1@179@01)))
(pop) ; 4
(declare-fun inv@250@01 ($Ref) $Ref)
(declare-fun img@251@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@252@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@249@01 $Ref) (n2@249@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@249@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) n1@249@01) n1@249@01))
      (and
        (Set_in n2@249@01 (Set_union g0@178@01 g1@179@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) n2@249@01) n2@249@01))
      (= n1@249@01 n2@249@01))
    (= n1@249@01 n2@249@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@249@01 $Ref)) (!
  (=>
    (Set_in n@249@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@250@01 n@249@01) n@249@01) (img@251@01 n@249@01)))
  :pattern ((Set_in n@249@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@250@01 n@249@01))
  :pattern ((img@251@01 n@249@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@251@01 r) (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@250@01 r) r))
  :pattern ((inv@250@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) r) r))
  :pattern ((inv@250@01 r))
  :qid |quant-u-14222|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
      (img@251@01 r)
      (= r (inv@250@01 r)))
    (>
      (+
        (ite
          (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14223|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@253@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@253@01  $FVF<next>)))
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r)))
    (=>
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r))
      (Set_in r ($FVF.domain_next (as sm@253@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@253@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@253@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@253@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@253@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@253@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@253@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@253@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01))
    (=
      ($FVF.lookup_next (as sm@252@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef185|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@252@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef186|)))
(assert (forall ((n@249@01 $Ref)) (!
  (=>
    (Set_in n@249@01 (Set_union g0@178@01 g1@179@01))
    (and (= (inv@250@01 n@249@01) n@249@01) (img@251@01 n@249@01)))
  :pattern ((Set_in n@249@01 (Set_union g0@178@01 g1@179@01)))
  :pattern ((inv@250@01 n@249@01))
  :pattern ((img@251@01 n@249@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@251@01 r) (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01)))
    (= (inv@250@01 r) r))
  :pattern ((inv@250@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@253@01  $FVF<next>)))
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r)))
    (=>
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r))
      (Set_in r ($FVF.domain_next (as sm@253@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@253@01  $FVF<next>))))
  :qid |qp.fvfDomDef190|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r))
      (and (img@189@01 r) (Set_in (inv@188@01 r) g0@178@01)))
    (=
      ($FVF.lookup_next (as sm@253@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r)))
  :pattern (($FVF.lookup_next (as sm@253@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r))
  :qid |qp.fvfValDef187|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
        (img@251@01 r))
      (and (img@194@01 r) (Set_in (inv@193@01 r) g1@179@01)))
    (=
      ($FVF.lookup_next (as sm@253@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@253@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r))
  :qid |qp.fvfValDef188|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@185@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@185@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@253@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef189|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@250@01 r) (Set_union g0@178@01 g1@179@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@252@01  $FVF<next>) r) r))
    :pattern ((inv@250@01 r))
    :qid |quant-u-14222|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@253@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01))))
(push) ; 3
(assert (not (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@253@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x0@180@01 y0@181@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.63s
; (get-info :all-statistics)
(assert (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@253@01  $FVF<next>)) (Set_union g0@178@01 g1@179@01)) x0@180@01 y0@181@01))
(pop) ; 2
(pop) ; 1
; ---------- test_union ----------
(declare-const g0@254@01 Set<$Ref>)
(declare-const g1@255@01 Set<$Ref>)
(declare-const x0@256@01 $Ref)
(declare-const x1@257@01 $Ref)
(declare-const x@258@01 $Ref)
(declare-const g0@259@01 Set<$Ref>)
(declare-const g1@260@01 Set<$Ref>)
(declare-const x0@261@01 $Ref)
(declare-const x1@262@01 $Ref)
(declare-const x@263@01 $Ref)
(push) ; 1
(declare-const $t@264@01 $Snap)
(assert (= $t@264@01 ($Snap.combine ($Snap.first $t@264@01) ($Snap.second $t@264@01))))
(assert (= ($Snap.first $t@264@01) $Snap.unit))
; [eval] !((null in g0))
; [eval] (null in g0)
(assert (not (Set_in $Ref.null g0@259@01)))
(assert (=
  ($Snap.second $t@264@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@264@01))
    ($Snap.second ($Snap.second $t@264@01)))))
(declare-const n@265@01 $Ref)
(push) ; 2
; [eval] (n in g0)
(assert (Set_in n@265@01 g0@259@01))
(declare-const sm@266@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@267@01 ($Ref) $Ref)
(declare-fun img@268@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n1@265@01 $Ref) (n2@265@01 $Ref)) (!
  (=>
    (and
      (Set_in n1@265@01 g0@259@01)
      (Set_in n2@265@01 g0@259@01)
      (= n1@265@01 n2@265@01))
    (= n1@265@01 n2@265@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@265@01 $Ref)) (!
  (=>
    (Set_in n@265@01 g0@259@01)
    (and (= (inv@267@01 n@265@01) n@265@01) (img@268@01 n@265@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) n@265@01) n@265@01))
  :qid |quant-u-14225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (= (inv@267@01 r) r))
  :pattern ((inv@267@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n@265@01 $Ref)) (!
  (=> (Set_in n@265@01 g0@259@01) (not (= n@265@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) n@265@01) n@265@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@269@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@267@01 r) g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) r) r))
  :pattern ((inv@267@01 r))
  :qid |quant-u-14226|)))
(assert (=
  ($Snap.second ($Snap.second $t@264@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@264@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@264@01))) $Snap.unit))
; [eval] (forall n$0: Ref :: { (n$0.next in g0) } { (n$0 in g0), n$0.next } (n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@270@01 $Ref)
(push) ; 2
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 3
; [then-branch: 53 | !(n$0@270@01 in g0@259@01) | live]
; [else-branch: 53 | n$0@270@01 in g0@259@01 | live]
(push) ; 4
; [then-branch: 53 | !(n$0@270@01 in g0@259@01)]
(assert (not (Set_in n$0@270@01 g0@259@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 53 | n$0@270@01 in g0@259@01]
(assert (Set_in n$0@270@01 g0@259@01))
; [eval] n$0.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef192|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef193|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01))
(push) ; 5
(assert (not (and (img@268@01 n$0@270@01) (Set_in (inv@267@01 n$0@270@01) g0@259@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert (=>
  (Set_in n$0@270@01 g0@259@01)
  (and
    (Set_in n$0@270@01 g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01))))
(assert (or (Set_in n$0@270@01 g0@259@01) (not (Set_in n$0@270@01 g0@259@01))))
(push) ; 3
; [then-branch: 54 | n$0@270@01 in g0@259@01 && Lookup(next, sm@269@01, n$0@270@01) != Null | live]
; [else-branch: 54 | !(n$0@270@01 in g0@259@01 && Lookup(next, sm@269@01, n$0@270@01) != Null) | live]
(push) ; 4
; [then-branch: 54 | n$0@270@01 in g0@259@01 && Lookup(next, sm@269@01, n$0@270@01) != Null]
(assert (and
  (Set_in n$0@270@01 g0@259@01)
  (not (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef192|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef193|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01))
(push) ; 5
(assert (not (and (img@268@01 n$0@270@01) (Set_in (inv@267@01 n$0@270@01) g0@259@01))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 54 | !(n$0@270@01 in g0@259@01 && Lookup(next, sm@269@01, n$0@270@01) != Null)]
(assert (not
  (and
    (Set_in n$0@270@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
(assert (=>
  (and
    (Set_in n$0@270@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))
  (and
    (Set_in n$0@270@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@270@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null))))
  (and
    (Set_in n$0@270@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@269@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef192|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@269@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef193|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$0@270@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@270@01 g0@259@01)
      (and
        (Set_in n$0@270@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01)))
    (or (Set_in n$0@270@01 g0@259@01) (not (Set_in n$0@270@01 g0@259@01)))
    (=>
      (and
        (Set_in n$0@270@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))
      (and
        (Set_in n$0@270@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01)))
    (or
      (not
        (and
          (Set_in n$0@270@01 g0@259@01)
          (not
            (=
              ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01)
              $Ref.null))))
      (and
        (Set_in n$0@270@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) g0@259@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@411@14@411@23-aux|)))
(assert (forall ((n$0@270@01 $Ref)) (!
  (and
    (=>
      (Set_in n$0@270@01 g0@259@01)
      (and
        (Set_in n$0@270@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01)))
    (or (Set_in n$0@270@01 g0@259@01) (not (Set_in n$0@270@01 g0@259@01)))
    (=>
      (and
        (Set_in n$0@270@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))
      (and
        (Set_in n$0@270@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01)))
    (or
      (not
        (and
          (Set_in n$0@270@01 g0@259@01)
          (not
            (=
              ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01)
              $Ref.null))))
      (and
        (Set_in n$0@270@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))))
  :pattern ((Set_in n$0@270@01 g0@259@01) ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@411@14@411@23-aux|)))
(assert (forall ((n$0@270@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@270@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) g0@259@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) g0@259@01))
  :pattern ((Set_in n$0@270@01 g0@259@01) ($FVF.loc_next ($FVF.lookup_next (as sm@269@01  $FVF<next>) n$0@270@01) n$0@270@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@411@14@411@23|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@264@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
  $Snap.unit))
; [eval] !((null in g1))
; [eval] (null in g1)
(assert (not (Set_in $Ref.null g1@260@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))
(declare-const n$1@271@01 $Ref)
(push) ; 2
; [eval] (n$1 in g1)
(assert (Set_in n$1@271@01 g1@260@01))
; Definitional axioms for snapshot map values
(pop) ; 2
(declare-fun inv@272@01 ($Ref) $Ref)
(declare-fun img@273@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((n$11@271@01 $Ref) (n$12@271@01 $Ref)) (!
  (=>
    (and
      (Set_in n$11@271@01 g1@260@01)
      (Set_in n$12@271@01 g1@260@01)
      (= n$11@271@01 n$12@271@01))
    (= n$11@271@01 n$12@271@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@271@01 $Ref)) (!
  (=>
    (Set_in n$1@271@01 g1@260@01)
    (and (= (inv@272@01 n$1@271@01) n$1@271@01) (img@273@01 n$1@271@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) n$1@271@01) n$1@271@01))
  :qid |quant-u-14228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (= (inv@272@01 r) r))
  :pattern ((inv@272@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$1@271@01 $Ref)) (!
  (=> (Set_in n$1@271@01 g1@260@01) (not (= n$1@271@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) n$1@271@01) n$1@271@01))
  :qid |next-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (= n$1@271@01 n@265@01)
    (=
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))))
  
  :qid |quant-u-14229|))))
(check-sat)
; unknown
(pop) ; 2
; 0.01s
; (get-info :all-statistics)
(declare-const sm@274@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@272@01 r) g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@272@01 r))
  :qid |quant-u-14230|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
  $Snap.unit))
; [eval] (forall n$2: Ref :: { (n$2.next in g1) } { (n$2 in g1), n$2.next } (n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@275@01 $Ref)
(set-option :timeout 0)
(push) ; 2
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 3
; [then-branch: 55 | !(n$2@275@01 in g1@260@01) | live]
; [else-branch: 55 | n$2@275@01 in g1@260@01 | live]
(push) ; 4
; [then-branch: 55 | !(n$2@275@01 in g1@260@01)]
(assert (not (Set_in n$2@275@01 g1@260@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 55 | n$2@275@01 in g1@260@01]
(assert (Set_in n$2@275@01 g1@260@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef194|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef195|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef196|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$2@275@01) (Set_in (inv@267@01 n$2@275@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$2@275@01) (Set_in (inv@272@01 n$2@275@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (=>
  (Set_in n$2@275@01 g1@260@01)
  (and
    (Set_in n$2@275@01 g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01))))
(assert (or (Set_in n$2@275@01 g1@260@01) (not (Set_in n$2@275@01 g1@260@01))))
(push) ; 3
; [then-branch: 56 | n$2@275@01 in g1@260@01 && Lookup(next, sm@274@01, n$2@275@01) != Null | live]
; [else-branch: 56 | !(n$2@275@01 in g1@260@01 && Lookup(next, sm@274@01, n$2@275@01) != Null) | live]
(push) ; 4
; [then-branch: 56 | n$2@275@01 in g1@260@01 && Lookup(next, sm@274@01, n$2@275@01) != Null]
(assert (and
  (Set_in n$2@275@01 g1@260@01)
  (not (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef194|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef195|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef196|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$2@275@01) (Set_in (inv@267@01 n$2@275@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$2@275@01) (Set_in (inv@272@01 n$2@275@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 56 | !(n$2@275@01 in g1@260@01 && Lookup(next, sm@274@01, n$2@275@01) != Null)]
(assert (not
  (and
    (Set_in n$2@275@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
(assert (=>
  (and
    (Set_in n$2@275@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))
  (and
    (Set_in n$2@275@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@275@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null))))
  (and
    (Set_in n$2@275@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef194|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@274@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef195|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@274@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef196|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$2@275@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@275@01 g1@260@01)
      (and
        (Set_in n$2@275@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01)))
    (or (Set_in n$2@275@01 g1@260@01) (not (Set_in n$2@275@01 g1@260@01)))
    (=>
      (and
        (Set_in n$2@275@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))
      (and
        (Set_in n$2@275@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01)))
    (or
      (not
        (and
          (Set_in n$2@275@01 g1@260@01)
          (not
            (=
              ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01)
              $Ref.null))))
      (and
        (Set_in n$2@275@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@411@27@411@36-aux|)))
(assert (forall ((n$2@275@01 $Ref)) (!
  (and
    (=>
      (Set_in n$2@275@01 g1@260@01)
      (and
        (Set_in n$2@275@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01)))
    (or (Set_in n$2@275@01 g1@260@01) (not (Set_in n$2@275@01 g1@260@01)))
    (=>
      (and
        (Set_in n$2@275@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))
      (and
        (Set_in n$2@275@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01)))
    (or
      (not
        (and
          (Set_in n$2@275@01 g1@260@01)
          (not
            (=
              ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01)
              $Ref.null))))
      (and
        (Set_in n$2@275@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))))
  :pattern ((Set_in n$2@275@01 g1@260@01) ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@411@27@411@36-aux|)))
(assert (forall ((n$2@275@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@275@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) g1@260@01))
  :pattern ((Set_in ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) g1@260@01))
  :pattern ((Set_in n$2@275@01 g1@260@01) ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n$2@275@01) n$2@275@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@411@27@411@36|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))
  $Snap.unit))
; [eval] (x0 in g0)
(assert (Set_in x0@261@01 g0@259@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))
  $Snap.unit))
; [eval] (x1 in g1)
(assert (Set_in x1@262@01 g1@260@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))
  $Snap.unit))
; [eval] (forall r: Ref :: { (r in g0), (r in g1) } (r in g0) ==> !((r in g1)))
(declare-const r@276@01 $Ref)
(push) ; 2
; [eval] (r in g0) ==> !((r in g1))
; [eval] (r in g0)
(push) ; 3
; [then-branch: 57 | r@276@01 in g0@259@01 | live]
; [else-branch: 57 | !(r@276@01 in g0@259@01) | live]
(push) ; 4
; [then-branch: 57 | r@276@01 in g0@259@01]
(assert (Set_in r@276@01 g0@259@01))
; [eval] !((r in g1))
; [eval] (r in g1)
(pop) ; 4
(push) ; 4
; [else-branch: 57 | !(r@276@01 in g0@259@01)]
(assert (not (Set_in r@276@01 g0@259@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r@276@01 g0@259@01)) (Set_in r@276@01 g0@259@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r@276@01 $Ref)) (!
  (or (not (Set_in r@276@01 g0@259@01)) (Set_in r@276@01 g0@259@01))
  :pattern ((Set_in r@276@01 g0@259@01) (Set_in r@276@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@414@14@414@34-aux|)))
(assert (forall ((r@276@01 $Ref)) (!
  (=> (Set_in r@276@01 g0@259@01) (not (Set_in r@276@01 g1@260@01)))
  :pattern ((Set_in r@276@01 g0@259@01) (Set_in r@276@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@414@14@414@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))
  $Snap.unit))
; [eval] (forall r$0: Ref :: { (r$0 in g0), (r$0 in g1) } (r$0 in g1) ==> !((r$0 in g0)))
(declare-const r$0@277@01 $Ref)
(push) ; 2
; [eval] (r$0 in g1) ==> !((r$0 in g0))
; [eval] (r$0 in g1)
(push) ; 3
; [then-branch: 58 | r$0@277@01 in g1@260@01 | live]
; [else-branch: 58 | !(r$0@277@01 in g1@260@01) | live]
(push) ; 4
; [then-branch: 58 | r$0@277@01 in g1@260@01]
(assert (Set_in r$0@277@01 g1@260@01))
; [eval] !((r$0 in g0))
; [eval] (r$0 in g0)
(pop) ; 4
(push) ; 4
; [else-branch: 58 | !(r$0@277@01 in g1@260@01)]
(assert (not (Set_in r$0@277@01 g1@260@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$0@277@01 g1@260@01)) (Set_in r$0@277@01 g1@260@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$0@277@01 $Ref)) (!
  (or (not (Set_in r$0@277@01 g1@260@01)) (Set_in r$0@277@01 g1@260@01))
  :pattern ((Set_in r$0@277@01 g0@259@01) (Set_in r$0@277@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@414@14@414@34-aux|)))
(assert (forall ((r$0@277@01 $Ref)) (!
  (=> (Set_in r$0@277@01 g1@260@01) (not (Set_in r$0@277@01 g0@259@01)))
  :pattern ((Set_in r$0@277@01 g0@259@01) (Set_in r$0@277@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@414@14@414@34|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))
  $Snap.unit))
; [eval] (forall n$3: Ref :: { (n$3 in g0) } { exists_path($$(g0), x0, n$3) } (n$3 in g0) ==> exists_path($$(g0), x0, n$3))
(declare-const n$3@278@01 $Ref)
(push) ; 2
; [eval] (n$3 in g0) ==> exists_path($$(g0), x0, n$3)
; [eval] (n$3 in g0)
(push) ; 3
; [then-branch: 59 | n$3@278@01 in g0@259@01 | live]
; [else-branch: 59 | !(n$3@278@01 in g0@259@01) | live]
(push) ; 4
; [then-branch: 59 | n$3@278@01 in g0@259@01]
(assert (Set_in n$3@278@01 g0@259@01))
; [eval] exists_path($$(g0), x0, n$3)
; [eval] $$(g0)
(push) ; 5
(declare-const n@279@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@279@01 g0@259@01))
(pop) ; 6
(declare-fun inv@280@01 ($Ref) $Ref)
(declare-fun img@281@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@279@01 $Ref) (n2@279@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@279@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n1@279@01) n1@279@01))
      (and
        (Set_in n2@279@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n2@279@01) n2@279@01))
      (= n1@279@01 n2@279@01))
    (= n1@279@01 n2@279@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@279@01 $Ref)) (!
  (=>
    (Set_in n@279@01 g0@259@01)
    (and (= (inv@280@01 n@279@01) n@279@01) (img@281@01 n@279@01)))
  :pattern ((Set_in n@279@01 g0@259@01))
  :pattern ((inv@280@01 n@279@01))
  :pattern ((img@281@01 n@279@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@281@01 r) (Set_in (inv@280@01 r) g0@259@01))
    (= (inv@280@01 r) r))
  :pattern ((inv@280@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@280@01 r) g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@280@01 r))
  :qid |quant-u-14232|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r) (= r (inv@280@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14233|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@282@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r)))
    (=>
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef200|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@279@01 $Ref)) (!
  (=>
    (Set_in n@279@01 g0@259@01)
    (and (= (inv@280@01 n@279@01) n@279@01) (img@281@01 n@279@01)))
  :pattern ((Set_in n@279@01 g0@259@01))
  :pattern ((inv@280@01 n@279@01))
  :pattern ((img@281@01 n@279@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@281@01 r) (Set_in (inv@280@01 r) g0@259@01))
    (= (inv@280@01 r) r))
  :pattern ((inv@280@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r)))
    (=>
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@280@01 r) g0@259@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
    :pattern ((inv@280@01 r))
    :qid |quant-u-14232|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 59 | !(n$3@278@01 in g0@259@01)]
(assert (not (Set_in n$3@278@01 g0@259@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@279@01 $Ref)) (!
  (=>
    (Set_in n@279@01 g0@259@01)
    (and (= (inv@280@01 n@279@01) n@279@01) (img@281@01 n@279@01)))
  :pattern ((Set_in n@279@01 g0@259@01))
  :pattern ((inv@280@01 n@279@01))
  :pattern ((img@281@01 n@279@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@281@01 r) (Set_in (inv@280@01 r) g0@259@01))
    (= (inv@280@01 r) r))
  :pattern ((inv@280@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r)))
    (=>
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
(assert (=>
  (Set_in n$3@278@01 g0@259@01)
  (and
    (Set_in n$3@278@01 g0@259@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@280@01 r) g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
      :pattern ((inv@280@01 r))
      :qid |quant-u-14232|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01))))
; Joined path conditions
(assert (or (not (Set_in n$3@278@01 g0@259@01)) (Set_in n$3@278@01 g0@259@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@279@01 $Ref)) (!
  (=>
    (Set_in n@279@01 g0@259@01)
    (and (= (inv@280@01 n@279@01) n@279@01) (img@281@01 n@279@01)))
  :pattern ((Set_in n@279@01 g0@259@01))
  :pattern ((inv@280@01 n@279@01))
  :pattern ((img@281@01 n@279@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@281@01 r) (Set_in (inv@280@01 r) g0@259@01))
    (= (inv@280@01 r) r))
  :pattern ((inv@280@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r)))
    (=>
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@282@01  $FVF<next>))))
  :qid |qp.fvfDomDef200|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@280@01 r) g0@259@01) (img@281@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@282@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef198|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@282@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef199|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$3@278@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@278@01 g0@259@01)
      (and
        (Set_in n$3@278@01 g0@259@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@280@01 r) g0@259@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
          :pattern ((inv@280@01 r))
          :qid |quant-u-14232|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01)))
    (or (not (Set_in n$3@278@01 g0@259@01)) (Set_in n$3@278@01 g0@259@01)))
  :pattern ((Set_in n$3@278@01 g0@259@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@415@14@415@35-aux|)))
(assert (forall ((n$3@278@01 $Ref)) (!
  (and
    (=>
      (Set_in n$3@278@01 g0@259@01)
      (and
        (Set_in n$3@278@01 g0@259@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@280@01 r) g0@259@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
          :pattern ((inv@280@01 r))
          :qid |quant-u-14232|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01)))
    (or (not (Set_in n$3@278@01 g0@259@01)) (Set_in n$3@278@01 g0@259@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01) x0@261@01 n$3@278@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@415@14@415@35-aux|)))
(assert (forall ((n$3@278@01 $Ref)) (!
  (=>
    (Set_in n$3@278@01 g0@259@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01) x0@261@01 n$3@278@01))
  :pattern ((Set_in n$3@278@01 g0@259@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@282@01  $FVF<next>)) g0@259@01) x0@261@01 n$3@278@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@415@14@415@35|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))))
  $Snap.unit))
; [eval] (forall n$4: Ref :: { (n$4 in g1) } { exists_path($$(g1), x1, n$4) } (n$4 in g1) ==> exists_path($$(g1), x1, n$4))
(declare-const n$4@283@01 $Ref)
(push) ; 2
; [eval] (n$4 in g1) ==> exists_path($$(g1), x1, n$4)
; [eval] (n$4 in g1)
(push) ; 3
; [then-branch: 60 | n$4@283@01 in g1@260@01 | live]
; [else-branch: 60 | !(n$4@283@01 in g1@260@01) | live]
(push) ; 4
; [then-branch: 60 | n$4@283@01 in g1@260@01]
(assert (Set_in n$4@283@01 g1@260@01))
; [eval] exists_path($$(g1), x1, n$4)
; [eval] $$(g1)
(push) ; 5
(declare-const n@284@01 $Ref)
(push) ; 6
; [eval] (n in refs)
(assert (Set_in n@284@01 g1@260@01))
(pop) ; 6
(declare-fun inv@285@01 ($Ref) $Ref)
(declare-fun img@286@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 6
(assert (not (forall ((n1@284@01 $Ref) (n2@284@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@284@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n1@284@01) n1@284@01))
      (and
        (Set_in n2@284@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n2@284@01) n2@284@01))
      (= n1@284@01 n2@284@01))
    (= n1@284@01 n2@284@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g1@260@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g1@260@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@286@01 r) (Set_in (inv@285@01 r) g1@260@01))
    (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@285@01 r) g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@285@01 r))
  :qid |quant-u-14235|)))
(push) ; 6
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r) (= r (inv@285@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14236|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@287@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef204|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef203|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01))
(pop) ; 5
; Joined path conditions
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g1@260@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g1@260@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@286@01 r) (Set_in (inv@285@01 r) g1@260@01))
    (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef203|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@285@01 r) g1@260@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
    :pattern ((inv@285@01 r))
    :qid |quant-u-14235|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 60 | !(n$4@283@01 in g1@260@01)]
(assert (not (Set_in n$4@283@01 g1@260@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g1@260@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g1@260@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@286@01 r) (Set_in (inv@285@01 r) g1@260@01))
    (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef203|)))
(assert (=>
  (Set_in n$4@283@01 g1@260@01)
  (and
    (Set_in n$4@283@01 g1@260@01)
    (forall ((r $Ref)) (!
      (=>
        (Set_in (inv@285@01 r) g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
      :pattern ((inv@285@01 r))
      :qid |quant-u-14235|))
    ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01))))
; Joined path conditions
(assert (or (not (Set_in n$4@283@01 g1@260@01)) (Set_in n$4@283@01 g1@260@01)))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((n@284@01 $Ref)) (!
  (=>
    (Set_in n@284@01 g1@260@01)
    (and (= (inv@285@01 n@284@01) n@284@01) (img@286@01 n@284@01)))
  :pattern ((Set_in n@284@01 g1@260@01))
  :pattern ((inv@285@01 n@284@01))
  :pattern ((img@286@01 n@284@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@286@01 r) (Set_in (inv@285@01 r) g1@260@01))
    (= (inv@285@01 r) r))
  :pattern ((inv@285@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r)))
    (=>
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@287@01  $FVF<next>))))
  :qid |qp.fvfDomDef204|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef201|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@285@01 r) g1@260@01) (img@286@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@287@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef202|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@287@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef203|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$4@283@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@283@01 g1@260@01)
      (and
        (Set_in n$4@283@01 g1@260@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@285@01 r) g1@260@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
          :pattern ((inv@285@01 r))
          :qid |quant-u-14235|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01)))
    (or (not (Set_in n$4@283@01 g1@260@01)) (Set_in n$4@283@01 g1@260@01)))
  :pattern ((Set_in n$4@283@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@416@14@416@35-aux|)))
(assert (forall ((n$4@283@01 $Ref)) (!
  (and
    (=>
      (Set_in n$4@283@01 g1@260@01)
      (and
        (Set_in n$4@283@01 g1@260@01)
        (forall ((r $Ref)) (!
          (=>
            (Set_in (inv@285@01 r) g1@260@01)
            ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
          :pattern ((inv@285@01 r))
          :qid |quant-u-14235|))
        ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01)))
    (or (not (Set_in n$4@283@01 g1@260@01)) (Set_in n$4@283@01 g1@260@01)))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01) x1@262@01 n$4@283@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@416@14@416@35-aux|)))
(assert (forall ((n$4@283@01 $Ref)) (!
  (=>
    (Set_in n$4@283@01 g1@260@01)
    (exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01) x1@262@01 n$4@283@01))
  :pattern ((Set_in n$4@283@01 g1@260@01))
  :pattern ((exists_path<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@287@01  $FVF<next>)) g1@260@01) x1@262@01 n$4@283@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@416@14@416@35|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))))
  $Snap.unit))
; [eval] acyclic_list_segment(g0)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@288@01 $Ref)
(push) ; 3
; [eval] (n in g)
(assert (Set_in n@288@01 g0@259@01))
(pop) ; 3
(declare-fun inv@289@01 ($Ref) $Ref)
(declare-fun img@290@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@288@01 $Ref) (n2@288@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@288@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n1@288@01) n1@288@01))
      (and
        (Set_in n2@288@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) n2@288@01) n2@288@01))
      (= n1@288@01 n2@288@01))
    (= n1@288@01 n2@288@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@288@01 $Ref)) (!
  (=>
    (Set_in n@288@01 g0@259@01)
    (and (= (inv@289@01 n@288@01) n@288@01) (img@290@01 n@288@01)))
  :pattern ((Set_in n@288@01 g0@259@01))
  :pattern ((inv@289@01 n@288@01))
  :pattern ((img@290@01 n@288@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@290@01 r) (Set_in (inv@289@01 r) g0@259@01))
    (= (inv@289@01 r) r))
  :pattern ((inv@289@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@289@01 r) g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
  :pattern ((inv@289@01 r))
  :qid |quant-u-14238|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r) (= r (inv@289@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14239|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@291@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@291@01  $FVF<next>)))
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r)))
    (=>
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r))
      (Set_in r ($FVF.domain_next (as sm@291@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@291@01  $FVF<next>))))
  :qid |qp.fvfDomDef208|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@291@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@291@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@291@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@291@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@291@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef207|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@292@01 $Ref)
(push) ; 3
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 4
; [then-branch: 61 | !(n$0@292@01 in g0@259@01) | live]
; [else-branch: 61 | n$0@292@01 in g0@259@01 | live]
(push) ; 5
; [then-branch: 61 | !(n$0@292@01 in g0@259@01)]
(assert (not (Set_in n$0@292@01 g0@259@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 61 | n$0@292@01 in g0@259@01]
(assert (Set_in n$0@292@01 g0@259@01))
; [eval] n$0.next != null
(declare-const sm@293@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef211|)))
(declare-const pm@294@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@294@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resPrmSumDef212|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resTrgDef213|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) n$0@292@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@294@01  $FPM) n$0@292@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef211|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@294@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resPrmSumDef212|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resTrgDef213|)))
(assert (=>
  (Set_in n$0@292@01 g0@259@01)
  (and
    (Set_in n$0@292@01 g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) n$0@292@01))))
(assert (or (Set_in n$0@292@01 g0@259@01) (not (Set_in n$0@292@01 g0@259@01))))
(push) ; 4
; [then-branch: 62 | n$0@292@01 in g0@259@01 && Lookup(next, sm@293@01, n$0@292@01) != Null | live]
; [else-branch: 62 | !(n$0@292@01 in g0@259@01 && Lookup(next, sm@293@01, n$0@292@01) != Null) | live]
(push) ; 5
; [then-branch: 62 | n$0@292@01 in g0@259@01 && Lookup(next, sm@293@01, n$0@292@01) != Null]
(assert (and
  (Set_in n$0@292@01 g0@259@01)
  (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef209|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef210|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef211|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) n$0@292@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$0@292@01) (Set_in (inv@267@01 n$0@292@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$0@292@01) (Set_in (inv@272@01 n$0@292@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 62 | !(n$0@292@01 in g0@259@01 && Lookup(next, sm@293@01, n$0@292@01) != Null)]
(assert (not
  (and
    (Set_in n$0@292@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef211|)))
(assert (=>
  (and
    (Set_in n$0@292@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null)))
  (and
    (Set_in n$0@292@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) n$0@292@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@292@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null))))
  (and
    (Set_in n$0@292@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef211|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@294@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resPrmSumDef212|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resTrgDef213|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$0@292@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@292@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) g0@259@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@292@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@292@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) g0@259@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@291@01  $FVF<next>))
    $Snap.unit)) g0@259@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@288@01 $Ref)) (!
  (=>
    (Set_in n@288@01 g0@259@01)
    (and (= (inv@289@01 n@288@01) n@288@01) (img@290@01 n@288@01)))
  :pattern ((Set_in n@288@01 g0@259@01))
  :pattern ((inv@289@01 n@288@01))
  :pattern ((img@290@01 n@288@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@290@01 r) (Set_in (inv@289@01 r) g0@259@01))
    (= (inv@289@01 r) r))
  :pattern ((inv@289@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@291@01  $FVF<next>)))
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r)))
    (=>
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r))
      (Set_in r ($FVF.domain_next (as sm@291@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@291@01  $FVF<next>))))
  :qid |qp.fvfDomDef208|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@291@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@291@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef205|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@289@01 r) g0@259@01) (img@290@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@291@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@291@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef206|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@291@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef207|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef209|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@293@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef210|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@293@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef211|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@294@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resPrmSumDef212|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@294@01  $FPM) r))
  :qid |qp.resTrgDef213|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@289@01 r) g0@259@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@274@01  $FVF<next>) r) r))
    :pattern ((inv@289@01 r))
    :qid |quant-u-14238|))
  (forall ((n$0@292@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@292@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@293@01  $FVF<next>) n$0@292@01) g0@259@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@291@01  $FVF<next>))
      $Snap.unit)) g0@259@01)))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@291@01  $FVF<next>))
    $Snap.unit)) g0@259@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))))))))))
  $Snap.unit))
; [eval] acyclic_list_segment(g1)
(push) ; 2
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@295@01 $Ref)
(push) ; 3
; [eval] (n in g)
(assert (Set_in n@295@01 g1@260@01))
(pop) ; 3
(declare-fun inv@296@01 ($Ref) $Ref)
(declare-fun img@297@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n1@295@01 $Ref) (n2@295@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@295@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n1@295@01) n1@295@01))
      (and
        (Set_in n2@295@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) n2@295@01) n2@295@01))
      (= n1@295@01 n2@295@01))
    (= n1@295@01 n2@295@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g1@260@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g1@260@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@297@01 r) (Set_in (inv@296@01 r) g1@260@01))
    (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@296@01 r) g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
  :pattern ((inv@296@01 r))
  :qid |quant-u-14241|)))
(push) ; 3
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r) (= r (inv@296@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14242|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@298@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@298@01  $FVF<next>)))
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r))
      (Set_in r ($FVF.domain_next (as sm@298@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@298@01  $FVF<next>))))
  :qid |qp.fvfDomDef217|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef216|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@299@01 $Ref)
(push) ; 3
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 4
; [then-branch: 63 | !(n$0@299@01 in g1@260@01) | live]
; [else-branch: 63 | n$0@299@01 in g1@260@01 | live]
(push) ; 5
; [then-branch: 63 | !(n$0@299@01 in g1@260@01)]
(assert (not (Set_in n$0@299@01 g1@260@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 63 | n$0@299@01 in g1@260@01]
(assert (Set_in n$0@299@01 g1@260@01))
; [eval] n$0.next != null
(declare-const sm@300@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef220|)))
(declare-const pm@301@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@301@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef221|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef222|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) n$0@299@01))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_next (as pm@301@01  $FPM) n$0@299@01))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef220|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@301@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef221|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef222|)))
(assert (=>
  (Set_in n$0@299@01 g1@260@01)
  (and
    (Set_in n$0@299@01 g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) n$0@299@01))))
(assert (or (Set_in n$0@299@01 g1@260@01) (not (Set_in n$0@299@01 g1@260@01))))
(push) ; 4
; [then-branch: 64 | n$0@299@01 in g1@260@01 && Lookup(next, sm@300@01, n$0@299@01) != Null | live]
; [else-branch: 64 | !(n$0@299@01 in g1@260@01 && Lookup(next, sm@300@01, n$0@299@01) != Null) | live]
(push) ; 5
; [then-branch: 64 | n$0@299@01 in g1@260@01 && Lookup(next, sm@300@01, n$0@299@01) != Null]
(assert (and
  (Set_in n$0@299@01 g1@260@01)
  (not (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null))))
; [eval] (n$0.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef218|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef219|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef220|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) n$0@299@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$0@299@01) (Set_in (inv@267@01 n$0@299@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$0@299@01) (Set_in (inv@272@01 n$0@299@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(push) ; 5
; [else-branch: 64 | !(n$0@299@01 in g1@260@01 && Lookup(next, sm@300@01, n$0@299@01) != Null)]
(assert (not
  (and
    (Set_in n$0@299@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef220|)))
(assert (=>
  (and
    (Set_in n$0@299@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null)))
  (and
    (Set_in n$0@299@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) n$0@299@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@299@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null))))
  (and
    (Set_in n$0@299@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null)))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef220|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@301@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef221|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef222|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 3
(assert (not (forall ((n$0@299@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@299@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) g1@260@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@299@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@299@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) g1@260@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@298@01  $FVF<next>))
    $Snap.unit)) g1@260@01))
(pop) ; 2
; Joined path conditions
(assert (forall ((n@295@01 $Ref)) (!
  (=>
    (Set_in n@295@01 g1@260@01)
    (and (= (inv@296@01 n@295@01) n@295@01) (img@297@01 n@295@01)))
  :pattern ((Set_in n@295@01 g1@260@01))
  :pattern ((inv@296@01 n@295@01))
  :pattern ((img@297@01 n@295@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@297@01 r) (Set_in (inv@296@01 r) g1@260@01))
    (= (inv@296@01 r) r))
  :pattern ((inv@296@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@298@01  $FVF<next>)))
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r)))
    (=>
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r))
      (Set_in r ($FVF.domain_next (as sm@298@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@298@01  $FVF<next>))))
  :qid |qp.fvfDomDef217|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef214|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@296@01 r) g1@260@01) (img@297@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@298@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef215|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@298@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef216|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef218|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@300@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef219|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@300@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef220|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@301@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef221|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@301@01  $FPM) r))
  :qid |qp.resTrgDef222|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@296@01 r) g1@260@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@293@01  $FVF<next>) r) r))
    :pattern ((inv@296@01 r))
    :qid |quant-u-14241|))
  (forall ((n$0@299@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@299@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@300@01  $FVF<next>) n$0@299@01) g1@260@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@298@01  $FVF<next>))
      $Snap.unit)) g1@260@01)))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@298@01  $FVF<next>))
    $Snap.unit)) g1@260@01))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@302@01 $Snap)
(assert (= $t@302@01 ($Snap.combine ($Snap.first $t@302@01) ($Snap.second $t@302@01))))
(assert (= ($Snap.first $t@302@01) $Snap.unit))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(assert (not (Set_in $Ref.null (Set_union g0@259@01 g1@260@01))))
(assert (=
  ($Snap.second $t@302@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@302@01))
    ($Snap.second ($Snap.second $t@302@01)))))
(declare-const n$5@303@01 $Ref)
(push) ; 3
; [eval] (n$5 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$5@303@01 (Set_union g0@259@01 g1@260@01)))
(declare-const sm@304@01 $FVF<next>)
; Definitional axioms for snapshot map values
(pop) ; 3
(declare-fun inv@305@01 ($Ref) $Ref)
(declare-fun img@306@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$51@303@01 $Ref) (n$52@303@01 $Ref)) (!
  (=>
    (and
      (Set_in n$51@303@01 (Set_union g0@259@01 g1@260@01))
      (Set_in n$52@303@01 (Set_union g0@259@01 g1@260@01))
      (= n$51@303@01 n$52@303@01))
    (= n$51@303@01 n$52@303@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@303@01 $Ref)) (!
  (=>
    (Set_in n$5@303@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@305@01 n$5@303@01) n$5@303@01) (img@306@01 n$5@303@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$5@303@01) n$5@303@01))
  :qid |quant-u-14244|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@305@01 r) r))
  :pattern ((inv@305@01 r))
  :qid |next-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((n$5@303@01 $Ref)) (!
  (=>
    (Set_in n$5@303@01 (Set_union g0@259@01 g1@260@01))
    (not (= n$5@303@01 $Ref.null)))
  :pattern (($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$5@303@01) n$5@303@01))
  :qid |next-permImpliesNonNull|)))
(declare-const sm@307@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef225|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) r) r))
  :pattern ((inv@305@01 r))
  :qid |quant-u-14245|)))
(assert (=
  ($Snap.second ($Snap.second $t@302@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@302@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@302@01))) $Snap.unit))
; [eval] (forall n$6: Ref :: { (n$6.next in (g0 union g1)) } { (n$6 in (g0 union g1)), n$6.next } (n$6 in (g0 union g1)) && n$6.next != null ==> (n$6.next in (g0 union g1)))
(declare-const n$6@308@01 $Ref)
(push) ; 3
; [eval] (n$6 in (g0 union g1)) && n$6.next != null ==> (n$6.next in (g0 union g1))
; [eval] (n$6 in (g0 union g1)) && n$6.next != null
; [eval] (n$6 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 65 | !(n$6@308@01 in g0@259@01 ∪ g1@260@01) | live]
; [else-branch: 65 | n$6@308@01 in g0@259@01 ∪ g1@260@01 | live]
(push) ; 5
; [then-branch: 65 | !(n$6@308@01 in g0@259@01 ∪ g1@260@01)]
(assert (not (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 65 | n$6@308@01 in g0@259@01 ∪ g1@260@01]
(assert (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01)))
; [eval] n$6.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@306@01 r)
        (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
      (=
        ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
    :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
    :qid |qp.fvfValDef224|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef225|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01))
(push) ; 6
(assert (not (and
  (img@306@01 n$6@308@01)
  (Set_in (inv@305@01 n$6@308@01) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef225|)))
(assert (=>
  (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
  (and
    (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01))))
(assert (or
  (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
  (not (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01)))))
(push) ; 4
; [then-branch: 66 | n$6@308@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@307@01, n$6@308@01) != Null | live]
; [else-branch: 66 | !(n$6@308@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@307@01, n$6@308@01) != Null) | live]
(push) ; 5
; [then-branch: 66 | n$6@308@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@307@01, n$6@308@01) != Null]
(assert (and
  (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
  (not (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null))))
; [eval] (n$6.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@306@01 r)
        (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
      (=
        ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
    :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
    :qid |qp.fvfValDef224|))
  (forall ((r $Ref)) (!
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
    :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef225|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01))
(push) ; 6
(assert (not (and
  (img@306@01 n$6@308@01)
  (Set_in (inv@305@01 n$6@308@01) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 66 | !(n$6@308@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@307@01, n$6@308@01) != Null)]
(assert (not
  (and
    (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef225|)))
(assert (=>
  (and
    (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))
  (and
    (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null))))
  (and
    (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@307@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef224|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@307@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef225|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@308@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01)))
    (or
      (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
      (not (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))))
    (=>
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01)))
    (or
      (not
        (and
          (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
          (not
            (=
              ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01)
              $Ref.null))))
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) (Set_union g0@259@01 g1@260@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31-aux|)))
(assert (forall ((n$6@308@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01)))
    (or
      (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
      (not (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))))
    (=>
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01)))
    (or
      (not
        (and
          (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
          (not
            (=
              ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01)
              $Ref.null))))
      (and
        (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))))
  :pattern ((Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31-aux|)))
(assert (forall ((n$6@308@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) (Set_union g0@259@01 g1@260@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) (Set_union g0@259@01 g1@260@01)))
  :pattern ((Set_in n$6@308@01 (Set_union g0@259@01 g1@260@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$6@308@01) n$6@308@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@302@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@302@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@302@01))))
  $Snap.unit))
; [eval] is_global_sroot((g0 union g1), Set(x0, x1))
; [eval] (g0 union g1)
; [eval] Set(x0, x1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@309@01 $Ref)
(push) ; 4
; [eval] (n$0 in g)
(assert (Set_in n$0@309@01 (Set_union g0@259@01 g1@260@01)))
(pop) ; 4
(declare-fun inv@310@01 ($Ref) $Ref)
(declare-fun img@311@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@309@01 $Ref) (n$02@309@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@309@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$01@309@01) n$01@309@01))
      (and
        (Set_in n$02@309@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) n$02@309@01) n$02@309@01))
      (= n$01@309@01 n$02@309@01))
    (= n$01@309@01 n$02@309@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@309@01 $Ref)) (!
  (=>
    (Set_in n$0@309@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@310@01 n$0@309@01) n$0@309@01) (img@311@01 n$0@309@01)))
  :pattern ((Set_in n$0@309@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@310@01 n$0@309@01))
  :pattern ((img@311@01 n$0@309@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@310@01 r) r))
  :pattern ((inv@310@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) r) r))
  :pattern ((inv@310@01 r))
  :qid |quant-u-14247|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
      (img@311@01 r)
      (= r (inv@310@01 r)))
    (>
      (ite
        (and
          (img@306@01 r)
          (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14248|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@312@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))
      (and
        (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
        (img@311@01 r)))
    (=>
      (and
        (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
        (img@311@01 r))
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>))))
  :qid |qp.fvfDomDef228|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
        (img@311@01 r))
      (and
        (img@306@01 r)
        (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01))))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@313@01 $Ref)
(push) ; 4
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 67 | !(n$1@313@01 in g0@259@01 ∪ g1@260@01) | live]
; [else-branch: 67 | n$1@313@01 in g0@259@01 ∪ g1@260@01 | live]
(push) ; 6
; [then-branch: 67 | !(n$1@313@01 in g0@259@01 ∪ g1@260@01)]
(assert (not (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 67 | n$1@313@01 in g0@259@01 ∪ g1@260@01]
(assert (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01)))
; [eval] n$1.next != null
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) n$1@313@01))
(push) ; 7
(assert (not (and
  (img@306@01 n$1@313@01)
  (Set_in (inv@305@01 n$1@313@01) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
  (and
    (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) n$1@313@01))))
(assert (or
  (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
  (not (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01)))))
(push) ; 5
; [then-branch: 68 | n$1@313@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$1@313@01) != Null | live]
; [else-branch: 68 | !(n$1@313@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$1@313@01) != Null) | live]
(push) ; 6
; [then-branch: 68 | n$1@313@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$1@313@01) != Null]
(assert (and
  (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
  (not
    (=
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
      $Ref.null))))
; [eval] (n$1.next in g)
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) n$1@313@01))
(push) ; 7
(assert (not (and
  (img@306@01 n$1@313@01)
  (Set_in (inv@305@01 n$1@313@01) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 68 | !(n$1@313@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$1@313@01) != Null)]
(assert (not
  (and
    (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
        $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
        $Ref.null)))
  (and
    (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
        $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) n$1@313@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
          $Ref.null))))
  (and
    (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
        $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@313@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) (Set_union g0@259@01 g1@260@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@305@14@305@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$1@313@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) (Set_union g0@259@01 g1@260@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@305@14@305@22|)))
; [eval] (roots subset g)
(push) ; 4
(assert (not (Set_subset (Set_unionone (Set_singleton x0@261@01) x1@262@01) (Set_union g0@259@01 g1@260@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_subset (Set_unionone (Set_singleton x0@261@01) x1@262@01) (Set_union g0@259@01 g1@260@01)))
(assert (is_global_sroot%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@259@01 g1@260@01) (Set_unionone (Set_singleton x0@261@01) x1@262@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n$0@309@01 $Ref)) (!
  (=>
    (Set_in n$0@309@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@310@01 n$0@309@01) n$0@309@01) (img@311@01 n$0@309@01)))
  :pattern ((Set_in n$0@309@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@310@01 n$0@309@01))
  :pattern ((img@311@01 n$0@309@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@311@01 r) (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@310@01 r) r))
  :pattern ((inv@310@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))
      (and
        (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
        (img@311@01 r)))
    (=>
      (and
        (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
        (img@311@01 r))
      (Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@312@01  $FVF<next>))))
  :qid |qp.fvfDomDef228|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
        (img@311@01 r))
      (and
        (img@306@01 r)
        (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01))))
    (=
      ($FVF.lookup_next (as sm@312@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef226|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@312@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef227|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@310@01 r) (Set_union g0@259@01 g1@260@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@307@01  $FVF<next>) r) r))
    :pattern ((inv@310@01 r))
    :qid |quant-u-14247|))
  (forall ((n$1@313@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@313@01 (Set_union g0@259@01 g1@260@01))
        (not
          (=
            ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01)
            $Ref.null)))
      (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$1@313@01) (Set_union g0@259@01 g1@260@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@305@14@305@22|))
  (Set_subset (Set_unionone (Set_singleton x0@261@01) x1@262@01) (Set_union g0@259@01 g1@260@01))
  (is_global_sroot%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@259@01 g1@260@01) (Set_unionone (Set_singleton x0@261@01) x1@262@01))))
(assert (is_global_sroot ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@312@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@259@01 g1@260@01) (Set_unionone (Set_singleton x0@261@01) x1@262@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))
  $Snap.unit))
; [eval] acyclic_list_segment((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n@314@01 $Ref)
(push) ; 4
; [eval] (n in g)
(assert (Set_in n@314@01 (Set_union g0@259@01 g1@260@01)))
(pop) ; 4
(declare-fun inv@315@01 ($Ref) $Ref)
(declare-fun img@316@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@317@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef230|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@314@01 $Ref) (n2@314@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@314@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n1@314@01) n1@314@01))
      (and
        (Set_in n2@314@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) n2@314@01) n2@314@01))
      (= n1@314@01 n2@314@01))
    (= n1@314@01 n2@314@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@314@01 $Ref)) (!
  (=>
    (Set_in n@314@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@315@01 n@314@01) n@314@01) (img@316@01 n@314@01)))
  :pattern ((Set_in n@314@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@315@01 n@314@01))
  :pattern ((img@316@01 n@314@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@315@01 r) r))
  :pattern ((inv@315@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) r) r))
  :pattern ((inv@315@01 r))
  :qid |quant-u-14250|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
      (img@316@01 r)
      (= r (inv@315@01 r)))
    (>
      (ite
        (and
          (img@306@01 r)
          (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
        $Perm.Write
        $Perm.No)
      $Perm.No))
  
  :qid |quant-u-14251|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@318@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))
      (and
        (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
        (img@316@01 r)))
    (=>
      (and
        (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
        (img@316@01 r))
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>))))
  :qid |qp.fvfDomDef233|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
        (img@316@01 r))
      (and
        (img@306@01 r)
        (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01))))
    (=
      ($FVF.lookup_next (as sm@318@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
; [eval] (forall n$0: Ref ::(n$0 in g) && n$0.next != null ==> (n$0.next in g))
(declare-const n$0@319@01 $Ref)
(push) ; 4
; [eval] (n$0 in g) && n$0.next != null ==> (n$0.next in g)
; [eval] (n$0 in g) && n$0.next != null
; [eval] (n$0 in g)
(push) ; 5
; [then-branch: 69 | !(n$0@319@01 in g0@259@01 ∪ g1@260@01) | live]
; [else-branch: 69 | n$0@319@01 in g0@259@01 ∪ g1@260@01 | live]
(push) ; 6
; [then-branch: 69 | !(n$0@319@01 in g0@259@01 ∪ g1@260@01)]
(assert (not (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 69 | n$0@319@01 in g0@259@01 ∪ g1@260@01]
(assert (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01)))
; [eval] n$0.next != null
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) n$0@319@01))
(push) ; 7
(assert (not (and
  (img@306@01 n$0@319@01)
  (Set_in (inv@305@01 n$0@319@01) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
  (and
    (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) n$0@319@01))))
(assert (or
  (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
  (not (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01)))))
(push) ; 5
; [then-branch: 70 | n$0@319@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$0@319@01) != Null | live]
; [else-branch: 70 | !(n$0@319@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$0@319@01) != Null) | live]
(push) ; 6
; [then-branch: 70 | n$0@319@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$0@319@01) != Null]
(assert (and
  (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
  (not
    (=
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
      $Ref.null))))
; [eval] (n$0.next in g)
(assert ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) n$0@319@01))
(push) ; 7
(assert (not (and
  (img@306@01 n$0@319@01)
  (Set_in (inv@305@01 n$0@319@01) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 70 | !(n$0@319@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, First:(Second:($t@302@01)), n$0@319@01) != Null)]
(assert (not
  (and
    (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
        $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
        $Ref.null)))
  (and
    (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
        $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) n$0@319@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
          $Ref.null))))
  (and
    (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
    (not
      (=
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
        $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@319@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) (Set_union g0@259@01 g1@260@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@319@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
      (not
        (=
          ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
          $Ref.null)))
    (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) (Set_union g0@259@01 g1@260@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|)))
(assert (acyclic_list_segment%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>))
    $Snap.unit)) (Set_union g0@259@01 g1@260@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@306@01 r) (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@317@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef229|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@317@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef230|)))
(assert (forall ((n@314@01 $Ref)) (!
  (=>
    (Set_in n@314@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@315@01 n@314@01) n@314@01) (img@316@01 n@314@01)))
  :pattern ((Set_in n@314@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@315@01 n@314@01))
  :pattern ((img@316@01 n@314@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@316@01 r) (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@315@01 r) r))
  :pattern ((inv@315@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))
      (and
        (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
        (img@316@01 r)))
    (=>
      (and
        (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
        (img@316@01 r))
      (Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@318@01  $FVF<next>))))
  :qid |qp.fvfDomDef233|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
        (img@316@01 r))
      (and
        (img@306@01 r)
        (Set_in (inv@305@01 r) (Set_union g0@259@01 g1@260@01))))
    (=
      ($FVF.lookup_next (as sm@318@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r)))
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r))
  :qid |qp.fvfValDef231|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) r) r)
  :pattern (($FVF.lookup_next (as sm@318@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef232|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@315@01 r) (Set_union g0@259@01 g1@260@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@317@01  $FVF<next>) r) r))
    :pattern ((inv@315@01 r))
    :qid |quant-u-14250|))
  (forall ((n$0@319@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@319@01 (Set_union g0@259@01 g1@260@01))
        (not
          (=
            ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01)
            $Ref.null)))
      (Set_in ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@302@01))) n$0@319@01) (Set_union g0@259@01 g1@260@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@312@14@312@22|))
  (acyclic_list_segment%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>))
      $Snap.unit)) (Set_union g0@259@01 g1@260@01))))
(assert (acyclic_list_segment ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@318@01  $FVF<next>))
    $Snap.unit)) (Set_union g0@259@01 g1@260@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))
  $Snap.unit))
; [eval] (forall r$1: Ref :: { (r$1 in g0), (r$1 in g1) } (r$1 in g0) ==> !((r$1 in g1)))
(declare-const r$1@320@01 $Ref)
(push) ; 3
; [eval] (r$1 in g0) ==> !((r$1 in g1))
; [eval] (r$1 in g0)
(push) ; 4
; [then-branch: 71 | r$1@320@01 in g0@259@01 | live]
; [else-branch: 71 | !(r$1@320@01 in g0@259@01) | live]
(push) ; 5
; [then-branch: 71 | r$1@320@01 in g0@259@01]
(assert (Set_in r$1@320@01 g0@259@01))
; [eval] !((r$1 in g1))
; [eval] (r$1 in g1)
(pop) ; 5
(push) ; 5
; [else-branch: 71 | !(r$1@320@01 in g0@259@01)]
(assert (not (Set_in r$1@320@01 g0@259@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$1@320@01 g0@259@01)) (Set_in r$1@320@01 g0@259@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$1@320@01 $Ref)) (!
  (or (not (Set_in r$1@320@01 g0@259@01)) (Set_in r$1@320@01 g0@259@01))
  :pattern ((Set_in r$1@320@01 g0@259@01) (Set_in r$1@320@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@427@13@427@33-aux|)))
(assert (forall ((r$1@320@01 $Ref)) (!
  (=> (Set_in r$1@320@01 g0@259@01) (not (Set_in r$1@320@01 g1@260@01)))
  :pattern ((Set_in r$1@320@01 g0@259@01) (Set_in r$1@320@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@427@13@427@33|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@302@01))))))
  $Snap.unit))
; [eval] (forall r$2: Ref :: { (r$2 in g0), (r$2 in g1) } (r$2 in g1) ==> !((r$2 in g0)))
(declare-const r$2@321@01 $Ref)
(push) ; 3
; [eval] (r$2 in g1) ==> !((r$2 in g0))
; [eval] (r$2 in g1)
(push) ; 4
; [then-branch: 72 | r$2@321@01 in g1@260@01 | live]
; [else-branch: 72 | !(r$2@321@01 in g1@260@01) | live]
(push) ; 5
; [then-branch: 72 | r$2@321@01 in g1@260@01]
(assert (Set_in r$2@321@01 g1@260@01))
; [eval] !((r$2 in g0))
; [eval] (r$2 in g0)
(pop) ; 5
(push) ; 5
; [else-branch: 72 | !(r$2@321@01 in g1@260@01)]
(assert (not (Set_in r$2@321@01 g1@260@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Set_in r$2@321@01 g1@260@01)) (Set_in r$2@321@01 g1@260@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((r$2@321@01 $Ref)) (!
  (or (not (Set_in r$2@321@01 g1@260@01)) (Set_in r$2@321@01 g1@260@01))
  :pattern ((Set_in r$2@321@01 g0@259@01) (Set_in r$2@321@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@427@13@427@33-aux|)))
(assert (forall ((r$2@321@01 $Ref)) (!
  (=> (Set_in r$2@321@01 g1@260@01) (not (Set_in r$2@321@01 g0@259@01)))
  :pattern ((Set_in r$2@321@01 g0@259@01) (Set_in r$2@321@01 g1@260@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@427@13@427@33|)))
(pop) ; 2
(push) ; 2
; [exec]
; inhale apply_TCFraming(g0, g1)
(declare-const $t@322@01 $Snap)
(assert (= $t@322@01 $Snap.unit))
; [eval] apply_TCFraming(g0, g1)
(push) ; 3
; [eval] !((null in g0))
; [eval] (null in g0)
(declare-const n@323@01 $Ref)
(push) ; 4
; [eval] (n in g0)
(assert (Set_in n@323@01 g0@259@01))
(pop) ; 4
(declare-fun inv@324@01 ($Ref) $Ref)
(declare-fun img@325@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@323@01 $Ref) (n2@323@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@323@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) n1@323@01) n1@323@01))
      (and
        (Set_in n2@323@01 g0@259@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) n2@323@01) n2@323@01))
      (= n1@323@01 n2@323@01))
    (= n1@323@01 n2@323@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@323@01 $Ref)) (!
  (=>
    (Set_in n@323@01 g0@259@01)
    (and (= (inv@324@01 n@323@01) n@323@01) (img@325@01 n@323@01)))
  :pattern ((Set_in n@323@01 g0@259@01))
  :pattern ((inv@324@01 n@323@01))
  :pattern ((img@325@01 n@323@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@325@01 r) (Set_in (inv@324@01 r) g0@259@01))
    (= (inv@324@01 r) r))
  :pattern ((inv@324@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@324@01 r) g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) r) r))
  :pattern ((inv@324@01 r))
  :qid |quant-u-14253|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r) (= r (inv@324@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14254|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@326@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r)))
    (=>
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r))
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>))))
  :qid |qp.fvfDomDef237|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef236|)))
; [eval] (forall n$0: Ref ::(n$0 in g0) && n$0.next != null ==> (n$0.next in g0))
(declare-const n$0@327@01 $Ref)
(push) ; 4
; [eval] (n$0 in g0) && n$0.next != null ==> (n$0.next in g0)
; [eval] (n$0 in g0) && n$0.next != null
; [eval] (n$0 in g0)
(push) ; 5
; [then-branch: 73 | !(n$0@327@01 in g0@259@01) | live]
; [else-branch: 73 | n$0@327@01 in g0@259@01 | live]
(push) ; 6
; [then-branch: 73 | !(n$0@327@01 in g0@259@01)]
(assert (not (Set_in n$0@327@01 g0@259@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 73 | n$0@327@01 in g0@259@01]
(assert (Set_in n$0@327@01 g0@259@01))
; [eval] n$0.next != null
(declare-const sm@328@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(declare-const pm@329@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef242|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) n$0@327@01))
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_next (as pm@329@01  $FPM) n$0@327@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef242|)))
(assert (=>
  (Set_in n$0@327@01 g0@259@01)
  (and
    (Set_in n$0@327@01 g0@259@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) n$0@327@01))))
(assert (or (Set_in n$0@327@01 g0@259@01) (not (Set_in n$0@327@01 g0@259@01))))
(push) ; 5
; [then-branch: 74 | n$0@327@01 in g0@259@01 && Lookup(next, sm@328@01, n$0@327@01) != Null | live]
; [else-branch: 74 | !(n$0@327@01 in g0@259@01 && Lookup(next, sm@328@01, n$0@327@01) != Null) | live]
(push) ; 6
; [then-branch: 74 | n$0@327@01 in g0@259@01 && Lookup(next, sm@328@01, n$0@327@01) != Null]
(assert (and
  (Set_in n$0@327@01 g0@259@01)
  (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null))))
; [eval] (n$0.next in g0)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef238|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef239|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef240|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) n$0@327@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$0@327@01) (Set_in (inv@267@01 n$0@327@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$0@327@01) (Set_in (inv@272@01 n$0@327@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 74 | !(n$0@327@01 in g0@259@01 && Lookup(next, sm@328@01, n$0@327@01) != Null)]
(assert (not
  (and
    (Set_in n$0@327@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (=>
  (and
    (Set_in n$0@327@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null)))
  (and
    (Set_in n$0@327@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) n$0@327@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$0@327@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null))))
  (and
    (Set_in n$0@327@01 g0@259@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef242|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$0@327@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@327@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) g0@259@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$0@327@01 $Ref)) (!
  (=>
    (and
      (Set_in n$0@327@01 g0@259@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) g0@259@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|)))
; [eval] !((null in g1))
; [eval] (null in g1)
(declare-const n$1@330@01 $Ref)
(push) ; 4
; [eval] (n$1 in g1)
(assert (Set_in n$1@330@01 g1@260@01))
(pop) ; 4
(declare-fun inv@331@01 ($Ref) $Ref)
(declare-fun img@332@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@333@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$11@330@01 $Ref) (n$12@330@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$11@330@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@333@01  $FVF<next>) n$11@330@01) n$11@330@01))
      (and
        (Set_in n$12@330@01 g1@260@01)
        ($FVF.loc_next ($FVF.lookup_next (as sm@333@01  $FVF<next>) n$12@330@01) n$12@330@01))
      (= n$11@330@01 n$12@330@01))
    (= n$11@330@01 n$12@330@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$1@330@01 $Ref)) (!
  (=>
    (Set_in n$1@330@01 g1@260@01)
    (and (= (inv@331@01 n$1@330@01) n$1@330@01) (img@332@01 n$1@330@01)))
  :pattern ((Set_in n$1@330@01 g1@260@01))
  :pattern ((inv@331@01 n$1@330@01))
  :pattern ((img@332@01 n$1@330@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@332@01 r) (Set_in (inv@331@01 r) g1@260@01))
    (= (inv@331@01 r) r))
  :pattern ((inv@331@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@331@01 r) g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@333@01  $FVF<next>) r) r))
  :pattern ((inv@331@01 r))
  :qid |quant-u-14256|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r) (= r (inv@331@01 r)))
    (>
      (+
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14257|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@334@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r)))
    (=>
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r))
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>))))
  :qid |qp.fvfDomDef249|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef248|)))
; [eval] (forall n$2: Ref ::(n$2 in g1) && n$2.next != null ==> (n$2.next in g1))
(declare-const n$2@335@01 $Ref)
(push) ; 4
; [eval] (n$2 in g1) && n$2.next != null ==> (n$2.next in g1)
; [eval] (n$2 in g1) && n$2.next != null
; [eval] (n$2 in g1)
(push) ; 5
; [then-branch: 75 | !(n$2@335@01 in g1@260@01) | live]
; [else-branch: 75 | n$2@335@01 in g1@260@01 | live]
(push) ; 6
; [then-branch: 75 | !(n$2@335@01 in g1@260@01)]
(assert (not (Set_in n$2@335@01 g1@260@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 75 | n$2@335@01 in g1@260@01]
(assert (Set_in n$2@335@01 g1@260@01))
; [eval] n$2.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef238|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef239|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef240|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) n$2@335@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$2@335@01) (Set_in (inv@267@01 n$2@335@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$2@335@01) (Set_in (inv@272@01 n$2@335@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (=>
  (Set_in n$2@335@01 g1@260@01)
  (and
    (Set_in n$2@335@01 g1@260@01)
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) n$2@335@01))))
(assert (or (Set_in n$2@335@01 g1@260@01) (not (Set_in n$2@335@01 g1@260@01))))
(push) ; 5
; [then-branch: 76 | n$2@335@01 in g1@260@01 && Lookup(next, sm@328@01, n$2@335@01) != Null | live]
; [else-branch: 76 | !(n$2@335@01 in g1@260@01 && Lookup(next, sm@328@01, n$2@335@01) != Null) | live]
(push) ; 6
; [then-branch: 76 | n$2@335@01 in g1@260@01 && Lookup(next, sm@328@01, n$2@335@01) != Null]
(assert (and
  (Set_in n$2@335@01 g1@260@01)
  (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null))))
; [eval] (n$2.next in g1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef238|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef239|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef240|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) n$2@335@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$2@335@01) (Set_in (inv@267@01 n$2@335@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$2@335@01) (Set_in (inv@272@01 n$2@335@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 76 | !(n$2@335@01 in g1@260@01 && Lookup(next, sm@328@01, n$2@335@01) != Null)]
(assert (not
  (and
    (Set_in n$2@335@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (=>
  (and
    (Set_in n$2@335@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null)))
  (and
    (Set_in n$2@335@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) n$2@335@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$2@335@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null))))
  (and
    (Set_in n$2@335@01 g1@260@01)
    (not (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$2@335@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@335@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) g1@260@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((n$2@335@01 $Ref)) (!
  (=>
    (and
      (Set_in n$2@335@01 g1@260@01)
      (not
        (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) g1@260@01))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|)))
; [eval] (g1 intersection g0) == Set[Ref]()
; [eval] (g1 intersection g0)
; [eval] Set[Ref]()
(push) ; 4
(assert (not (Set_equal (Set_intersection g1@260@01 g0@259@01) (as Set_empty  Set<$Ref>))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (Set_equal (Set_intersection g1@260@01 g0@259@01) (as Set_empty  Set<$Ref>)))
(assert (apply_TCFraming%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>))
          ($Snap.combine $Snap.unit $Snap.unit)))))) g0@259@01 g1@260@01))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@323@01 $Ref)) (!
  (=>
    (Set_in n@323@01 g0@259@01)
    (and (= (inv@324@01 n@323@01) n@323@01) (img@325@01 n@323@01)))
  :pattern ((Set_in n@323@01 g0@259@01))
  :pattern ((inv@324@01 n@323@01))
  :pattern ((img@325@01 n@323@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@325@01 r) (Set_in (inv@324@01 r) g0@259@01))
    (= (inv@324@01 r) r))
  :pattern ((inv@324@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r)))
    (=>
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r))
      (Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@326@01  $FVF<next>))))
  :qid |qp.fvfDomDef237|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef234|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@324@01 r) g0@259@01) (img@325@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@326@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef235|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@326@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef236|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef238|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@328@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef239|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@328@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef240|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@329@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resPrmSumDef241|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@329@01  $FPM) r))
  :qid |qp.resTrgDef242|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef243|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@333@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef244|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@333@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef245|)))
(assert (forall ((n$1@330@01 $Ref)) (!
  (=>
    (Set_in n$1@330@01 g1@260@01)
    (and (= (inv@331@01 n$1@330@01) n$1@330@01) (img@332@01 n$1@330@01)))
  :pattern ((Set_in n$1@330@01 g1@260@01))
  :pattern ((inv@331@01 n$1@330@01))
  :pattern ((img@332@01 n$1@330@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@332@01 r) (Set_in (inv@331@01 r) g1@260@01))
    (= (inv@331@01 r) r))
  :pattern ((inv@331@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r)))
    (=>
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r))
      (Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@334@01  $FVF<next>))))
  :qid |qp.fvfDomDef249|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef246|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and (Set_in (inv@331@01 r) g1@260@01) (img@332@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@334@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef247|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r))
  :pattern (($FVF.lookup_next (as sm@334@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef248|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@324@01 r) g0@259@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@300@01  $FVF<next>) r) r))
    :pattern ((inv@324@01 r))
    :qid |quant-u-14253|))
  (forall ((n$0@327@01 $Ref)) (!
    (=>
      (and
        (Set_in n$0@327@01 g0@259@01)
        (not
          (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$0@327@01) g0@259@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@14@359@23|))
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@331@01 r) g1@260@01)
      ($FVF.loc_next ($FVF.lookup_next (as sm@333@01  $FVF<next>) r) r))
    :pattern ((inv@331@01 r))
    :qid |quant-u-14256|))
  (forall ((n$2@335@01 $Ref)) (!
    (=>
      (and
        (Set_in n$2@335@01 g1@260@01)
        (not
          (= ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@328@01  $FVF<next>) n$2@335@01) g1@260@01))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@359@27@359@36|))
  (Set_equal (Set_intersection g1@260@01 g0@259@01) (as Set_empty  Set<$Ref>))
  (apply_TCFraming%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>))
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          $Snap.unit
          ($Snap.combine
            ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>))
            ($Snap.combine $Snap.unit $Snap.unit)))))) g0@259@01 g1@260@01)))
(assert (apply_TCFraming ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@326@01  $FVF<next>))
    ($Snap.combine
      $Snap.unit
      ($Snap.combine
        $Snap.unit
        ($Snap.combine
          ($SortWrappers.$FVF<next>To$Snap (as sm@334@01  $FVF<next>))
          ($Snap.combine $Snap.unit $Snap.unit)))))) g0@259@01 g1@260@01))
; State saturation: after inhale
(set-option :timeout 20)
(check-sat)
; unknown
; [exec]
; assert acyclic_graph($$((g0 union g1)))
; [eval] acyclic_graph($$((g0 union g1)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(set-option :timeout 0)
(push) ; 3
(declare-const n@336@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@336@01 (Set_union g0@259@01 g1@260@01)))
(pop) ; 4
(declare-fun inv@337@01 ($Ref) $Ref)
(declare-fun img@338@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@336@01 $Ref) (n2@336@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@336@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n1@336@01) n1@336@01))
      (and
        (Set_in n2@336@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) n2@336@01) n2@336@01))
      (= n1@336@01 n2@336@01))
    (= n1@336@01 n2@336@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@336@01 $Ref)) (!
  (=>
    (Set_in n@336@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@337@01 n@336@01) n@336@01) (img@338@01 n@336@01)))
  :pattern ((Set_in n@336@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@337@01 n@336@01))
  :pattern ((img@338@01 n@336@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@338@01 r) (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@337@01 r) r))
  :pattern ((inv@337@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
  :pattern ((inv@337@01 r))
  :qid |quant-u-14259|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
      (img@338@01 r)
      (= r (inv@337@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14260|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@339@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@339@01  $FVF<next>)))
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r)))
    (=>
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r))
      (Set_in r ($FVF.domain_next (as sm@339@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@339@01  $FVF<next>))))
  :qid |qp.fvfDomDef253|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@339@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@339@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@339@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@339@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@339@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@339@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n@336@01 $Ref)) (!
  (=>
    (Set_in n@336@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@337@01 n@336@01) n@336@01) (img@338@01 n@336@01)))
  :pattern ((Set_in n@336@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@337@01 n@336@01))
  :pattern ((img@338@01 n@336@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@338@01 r) (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@337@01 r) r))
  :pattern ((inv@337@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@339@01  $FVF<next>)))
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r)))
    (=>
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r))
      (Set_in r ($FVF.domain_next (as sm@339@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@339@01  $FVF<next>))))
  :qid |qp.fvfDomDef253|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@339@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@339@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef250|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
        (img@338@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@339@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@339@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef251|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@339@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef252|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@337@01 r) (Set_union g0@259@01 g1@260@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@328@01  $FVF<next>) r) r))
    :pattern ((inv@337@01 r))
    :qid |quant-u-14259|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@339@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01))))
(push) ; 3
(assert (not (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@339@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.63s
; (get-info :all-statistics)
(assert (acyclic_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@339@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01))))
; [exec]
; assert func_graph($$((g0 union g1)))
; [eval] func_graph($$((g0 union g1)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@340@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@340@01 (Set_union g0@259@01 g1@260@01)))
(pop) ; 4
(declare-fun inv@341@01 ($Ref) $Ref)
(declare-fun img@342@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@343@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef254|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef256|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@340@01 $Ref) (n2@340@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@340@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n1@340@01) n1@340@01))
      (and
        (Set_in n2@340@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) n2@340@01) n2@340@01))
      (= n1@340@01 n2@340@01))
    (= n1@340@01 n2@340@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@340@01 $Ref)) (!
  (=>
    (Set_in n@340@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@341@01 n@340@01) n@340@01) (img@342@01 n@340@01)))
  :pattern ((Set_in n@340@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@341@01 n@340@01))
  :pattern ((img@342@01 n@340@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@342@01 r) (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@341@01 r) r))
  :pattern ((inv@341@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) r) r))
  :pattern ((inv@341@01 r))
  :qid |quant-u-14262|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
      (img@342@01 r)
      (= r (inv@341@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14263|))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(declare-const sm@344@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r)))
    (=>
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef260|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef259|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef254|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@343@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef255|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@343@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef256|)))
(assert (forall ((n@340@01 $Ref)) (!
  (=>
    (Set_in n@340@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@341@01 n@340@01) n@340@01) (img@342@01 n@340@01)))
  :pattern ((Set_in n@340@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@341@01 n@340@01))
  :pattern ((img@342@01 n@340@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@342@01 r) (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@341@01 r) r))
  :pattern ((inv@341@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r)))
    (=>
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r))
      (Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@344@01  $FVF<next>))))
  :qid |qp.fvfDomDef260|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef257|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
        (img@342@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@344@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef258|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@344@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef259|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@341@01 r) (Set_union g0@259@01 g1@260@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@343@01  $FVF<next>) r) r))
    :pattern ((inv@341@01 r))
    :qid |quant-u-14262|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01))))
(push) ; 3
(assert (not (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (func_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@344@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01))))
; [exec]
; assert unshared_graph($$((g0 union g1)))
; [eval] unshared_graph($$((g0 union g1)))
; [eval] $$((g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(declare-const n@345@01 $Ref)
(push) ; 4
; [eval] (n in refs)
(assert (Set_in n@345@01 (Set_union g0@259@01 g1@260@01)))
(pop) ; 4
(declare-fun inv@346@01 ($Ref) $Ref)
(declare-fun img@347@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(declare-const sm@348@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef263|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n1@345@01 $Ref) (n2@345@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n1@345@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@348@01  $FVF<next>) n1@345@01) n1@345@01))
      (and
        (Set_in n2@345@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@348@01  $FVF<next>) n2@345@01) n2@345@01))
      (= n1@345@01 n2@345@01))
    (= n1@345@01 n2@345@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@347@01 r) (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@348@01  $FVF<next>) r) r))
  :pattern ((inv@346@01 r))
  :qid |quant-u-14265|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
      (img@347@01 r)
      (= r (inv@346@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14266|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@349@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@349@01  $FVF<next>)))
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r)))
    (=>
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r))
      (Set_in r ($FVF.domain_next (as sm@349@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@349@01  $FVF<next>))))
  :qid |qp.fvfDomDef267|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@349@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@349@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@349@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@349@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef265|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@349@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef266|)))
(assert ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@349@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef261|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@348@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef262|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@348@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef263|)))
(assert (forall ((n@345@01 $Ref)) (!
  (=>
    (Set_in n@345@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@346@01 n@345@01) n@345@01) (img@347@01 n@345@01)))
  :pattern ((Set_in n@345@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@346@01 n@345@01))
  :pattern ((img@347@01 n@345@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@347@01 r) (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@346@01 r) r))
  :pattern ((inv@346@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@349@01  $FVF<next>)))
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r)))
    (=>
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r))
      (Set_in r ($FVF.domain_next (as sm@349@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@349@01  $FVF<next>))))
  :qid |qp.fvfDomDef267|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@349@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@349@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef264|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
        (img@347@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@349@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@349@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef265|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@349@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef266|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@346@01 r) (Set_union g0@259@01 g1@260@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@348@01  $FVF<next>) r) r))
    :pattern ((inv@346@01 r))
    :qid |quant-u-14265|))
  ($$%precondition ($SortWrappers.$FVF<next>To$Snap (as sm@349@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01))))
(push) ; 3
(assert (not (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@349@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 3
; 2.40s
; (get-info :all-statistics)
(assert (unshared_graph<Bool> ($$ ($SortWrappers.$FVF<next>To$Snap (as sm@349@01  $FVF<next>)) (Set_union g0@259@01 g1@260@01))))
; [eval] !((null in (g0 union g1)))
; [eval] (null in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 3
(assert (not (not (Set_in $Ref.null (Set_union g0@259@01 g1@260@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(assert (not (Set_in $Ref.null (Set_union g0@259@01 g1@260@01))))
(declare-const n$5@350@01 $Ref)
(push) ; 3
; [eval] (n$5 in (g0 union g1))
; [eval] (g0 union g1)
(assert (Set_in n$5@350@01 (Set_union g0@259@01 g1@260@01)))
(declare-const sm@351@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@351@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@351@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef268|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@351@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@351@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@351@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef270|)))
(pop) ; 3
(declare-fun inv@352@01 ($Ref) $Ref)
(declare-fun img@353@01 ($Ref) Bool)
; Nested auxiliary terms: globals
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@351@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@351@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef268|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@351@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@351@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef269|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@351@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef270|)))
; Nested auxiliary terms: non-globals
(declare-const sm@354@01 $FVF<next>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((n$51@350@01 $Ref) (n$52@350@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$51@350@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$51@350@01) n$51@350@01))
      (and
        (Set_in n$52@350@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$52@350@01) n$52@350@01))
      (= n$51@350@01 n$52@350@01))
    (= n$51@350@01 n$52@350@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$5@350@01 $Ref)) (!
  (=>
    (Set_in n$5@350@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@352@01 n$5@350@01) n$5@350@01) (img@353@01 n$5@350@01)))
  :pattern (($FVF.loc_next ($FVF.lookup_next (as sm@351@01  $FVF<next>) n$5@350@01) n$5@350@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@353@01 r) (Set_in (inv@352@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@352@01 r) r))
  :pattern ((inv@352@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@352@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) r) r))
  :pattern ((inv@352@01 r))
  :qid |quant-u-14268|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@355@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@352@01 r) (Set_union g0@259@01 g1@260@01))
      (img@353@01 r)
      (= r (inv@352@01 r)))
    ($Perm.min
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@356@01 ((r $Ref)) $Perm
  (ite
    (and
      (Set_in (inv@352@01 r) (Set_union g0@259@01 g1@260@01))
      (img@353@01 r)
      (= r (inv@352@01 r)))
    ($Perm.min
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@355@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (pTaken@355@01 r))
    $Perm.No)
  
  :qid |quant-u-14270|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@352@01 r) (Set_union g0@259@01 g1@260@01))
      (img@353@01 r)
      (= r (inv@352@01 r)))
    (= (- $Perm.Write (pTaken@355@01 r)) $Perm.No))
  
  :qid |quant-u-14271|))))
(check-sat)
; unknown
(pop) ; 3
; 0.50s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)
      (pTaken@356@01 r))
    $Perm.No)
  
  :qid |quant-u-14272|))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@352@01 r) (Set_union g0@259@01 g1@260@01))
      (img@353@01 r)
      (= r (inv@352@01 r)))
    (= (- (- $Perm.Write (pTaken@355@01 r)) (pTaken@356@01 r)) $Perm.No))
  
  :qid |quant-u-14273|))))
(check-sat)
; unsat
(pop) ; 3
; 0.01s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall n$6: Ref :: { (n$6.next in (g0 union g1)) } { (n$6 in (g0 union g1)), n$6.next } (n$6 in (g0 union g1)) && n$6.next != null ==> (n$6.next in (g0 union g1)))
(declare-const n$6@357@01 $Ref)
(set-option :timeout 0)
(push) ; 3
; [eval] (n$6 in (g0 union g1)) && n$6.next != null ==> (n$6.next in (g0 union g1))
; [eval] (n$6 in (g0 union g1)) && n$6.next != null
; [eval] (n$6 in (g0 union g1))
; [eval] (g0 union g1)
(push) ; 4
; [then-branch: 77 | !(n$6@357@01 in g0@259@01 ∪ g1@260@01) | live]
; [else-branch: 77 | n$6@357@01 in g0@259@01 ∪ g1@260@01 | live]
(push) ; 5
; [then-branch: 77 | !(n$6@357@01 in g0@259@01 ∪ g1@260@01)]
(assert (not (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))))
(pop) ; 5
(push) ; 5
; [else-branch: 77 | n$6@357@01 in g0@259@01 ∪ g1@260@01]
(assert (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01)))
; [eval] n$6.next != null
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef271|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef272|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef273|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$6@357@01) (Set_in (inv@267@01 n$6@357@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$6@357@01) (Set_in (inv@272@01 n$6@357@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.01s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (=>
  (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
  (and
    (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))))
(assert (or
  (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
  (not (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01)))))
(push) ; 4
; [then-branch: 78 | n$6@357@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@354@01, n$6@357@01) != Null | live]
; [else-branch: 78 | !(n$6@357@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@354@01, n$6@357@01) != Null) | live]
(push) ; 5
; [then-branch: 78 | n$6@357@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@354@01, n$6@357@01) != Null]
(assert (and
  (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
  (not (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null))))
; [eval] (n$6.next in (g0 union g1))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef271|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef272|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef273|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$6@357@01) (Set_in (inv@267@01 n$6@357@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$6@357@01) (Set_in (inv@272@01 n$6@357@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.02s
; (get-info :all-statistics)
; [eval] (g0 union g1)
(pop) ; 5
(push) ; 5
; [else-branch: 78 | !(n$6@357@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@354@01, n$6@357@01) != Null)]
(assert (not
  (and
    (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
(assert (=>
  (and
    (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))
  (and
    (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null))))
  (and
    (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))))
; Definitional axioms for snapshot map values
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef271|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@354@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef272|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@354@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef273|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((n$6@357@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01)))
    (or
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (not (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))))
    (=>
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01)))
    (or
      (not
        (and
          (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
          (not
            (=
              ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01)
              $Ref.null))))
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))))
  :pattern ((Set_in ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) (Set_union g0@259@01 g1@260@01)))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31-aux|)))
(assert (forall ((n$6@357@01 $Ref)) (!
  (and
    (=>
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01)))
    (or
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (not (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))))
    (=>
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01)))
    (or
      (not
        (and
          (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
          (not
            (=
              ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01)
              $Ref.null))))
      (and
        (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))))
  :pattern ((Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31-aux|)))
(push) ; 3
(assert (not (forall ((n$6@357@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) (Set_union g0@259@01 g1@260@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) (Set_union g0@259@01 g1@260@01)))
  :pattern ((Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31|))))
(check-sat)
; unsat
(pop) ; 3
; 0.02s
; (get-info :all-statistics)
(assert (forall ((n$6@357@01 $Ref)) (!
  (=>
    (and
      (Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) (Set_union g0@259@01 g1@260@01)))
  :pattern ((Set_in ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) (Set_union g0@259@01 g1@260@01)))
  :pattern ((Set_in n$6@357@01 (Set_union g0@259@01 g1@260@01)) ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$6@357@01) n$6@357@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@421@13@421@31|)))
; [eval] is_global_sroot((g0 union g1), Set(x0, x1))
; [eval] (g0 union g1)
; [eval] Set(x0, x1)
(push) ; 3
; [eval] !((null in g))
; [eval] (null in g)
(declare-const n$0@358@01 $Ref)
(push) ; 4
; [eval] (n$0 in g)
(assert (Set_in n$0@358@01 (Set_union g0@259@01 g1@260@01)))
(pop) ; 4
(declare-fun inv@359@01 ($Ref) $Ref)
(declare-fun img@360@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((n$01@358@01 $Ref) (n$02@358@01 $Ref)) (!
  (=>
    (and
      (and
        (Set_in n$01@358@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$01@358@01) n$01@358@01))
      (and
        (Set_in n$02@358@01 (Set_union g0@259@01 g1@260@01))
        ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) n$02@358@01) n$02@358@01))
      (= n$01@358@01 n$02@358@01))
    (= n$01@358@01 n$02@358@01))
  
  :qid |next-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((n$0@358@01 $Ref)) (!
  (=>
    (Set_in n$0@358@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@359@01 n$0@358@01) n$0@358@01) (img@360@01 n$0@358@01)))
  :pattern ((Set_in n$0@358@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@359@01 n$0@358@01))
  :pattern ((img@360@01 n$0@358@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@360@01 r) (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@359@01 r) r))
  :pattern ((inv@359@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) r) r))
  :pattern ((inv@359@01 r))
  :qid |quant-u-14275|)))
(push) ; 4
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
      (img@360@01 r)
      (= r (inv@359@01 r)))
    (>
      (+
        (ite
          (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
          $Perm.Write
          $Perm.No)
        (ite
          (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
          $Perm.Write
          $Perm.No))
      $Perm.No))
  
  :qid |quant-u-14276|))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(declare-const sm@361@01 $FVF<next>)
; Definitional axioms for snapshot map domain
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@361@01  $FVF<next>)))
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r)))
    (=>
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r))
      (Set_in r ($FVF.domain_next (as sm@361@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@361@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@361@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@361@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@361@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@361@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@361@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
; [eval] (forall n$1: Ref ::(n$1 in g) && n$1.next != null ==> (n$1.next in g))
(declare-const n$1@362@01 $Ref)
(push) ; 4
; [eval] (n$1 in g) && n$1.next != null ==> (n$1.next in g)
; [eval] (n$1 in g) && n$1.next != null
; [eval] (n$1 in g)
(push) ; 5
; [then-branch: 79 | !(n$1@362@01 in g0@259@01 ∪ g1@260@01) | live]
; [else-branch: 79 | n$1@362@01 in g0@259@01 ∪ g1@260@01 | live]
(push) ; 6
; [then-branch: 79 | !(n$1@362@01 in g0@259@01 ∪ g1@260@01)]
(assert (not (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))))
(pop) ; 6
(push) ; 6
; [else-branch: 79 | n$1@362@01 in g0@259@01 ∪ g1@260@01]
(assert (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01)))
; [eval] n$1.next != null
(declare-const sm@363@01 $FVF<next>)
; Definitional axioms for snapshot map domain
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef280|)))
(declare-const pm@364@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@364@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resPrmSumDef281|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resTrgDef282|)))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) n$1@362@01))
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_next (as pm@364@01  $FPM) n$1@362@01))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef280|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@364@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resPrmSumDef281|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resTrgDef282|)))
(assert (=>
  (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
  (and
    (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
    ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) n$1@362@01))))
(assert (or
  (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
  (not (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01)))))
(push) ; 5
; [then-branch: 80 | n$1@362@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@363@01, n$1@362@01) != Null | live]
; [else-branch: 80 | !(n$1@362@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@363@01, n$1@362@01) != Null) | live]
(push) ; 6
; [then-branch: 80 | n$1@362@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@363@01, n$1@362@01) != Null]
(assert (and
  (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
  (not (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null))))
; [eval] (n$1.next in g)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
      (=
        ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
    :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
    :qid |qp.fvfValDef278|))
  (forall ((r $Ref)) (!
    (=>
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
      (=
        ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
        ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
    :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
    :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
    :qid |qp.fvfValDef279|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
      ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
    :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
    :qid |qp.fvfResTrgDef280|))))
(assert ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) n$1@362@01))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (and (img@268@01 n$1@362@01) (Set_in (inv@267@01 n$1@362@01) g0@259@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and (img@273@01 n$1@362@01) (Set_in (inv@272@01 n$1@362@01) g1@260@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.02s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 80 | !(n$1@362@01 in g0@259@01 ∪ g1@260@01 && Lookup(next, sm@363@01, n$1@362@01) != Null)]
(assert (not
  (and
    (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null)))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef280|)))
(assert (=>
  (and
    (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null)))
  (and
    (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null))
    ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) n$1@362@01))))
; Joined path conditions
(assert (or
  (not
    (and
      (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null))))
  (and
    (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
    (not (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null)))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef280|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@364@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resPrmSumDef281|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resTrgDef282|)))
; Nested auxiliary terms: non-globals (aux)
(push) ; 4
(assert (not (forall ((n$1@362@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) (Set_union g0@259@01 g1@260@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@305@14@305@22|))))
(check-sat)
; unsat
(pop) ; 4
; 0.02s
; (get-info :all-statistics)
(assert (forall ((n$1@362@01 $Ref)) (!
  (=>
    (and
      (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
      (not
        (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null)))
    (Set_in ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) (Set_union g0@259@01 g1@260@01)))
  
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@305@14@305@22|)))
; [eval] (roots subset g)
(push) ; 4
(assert (not (Set_subset (Set_unionone (Set_singleton x0@261@01) x1@262@01) (Set_union g0@259@01 g1@260@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.01s
; (get-info :all-statistics)
(assert (Set_subset (Set_unionone (Set_singleton x0@261@01) x1@262@01) (Set_union g0@259@01 g1@260@01)))
(assert (is_global_sroot%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@361@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@259@01 g1@260@01) (Set_unionone (Set_singleton x0@261@01) x1@262@01)))
(pop) ; 3
; Joined path conditions
(assert (forall ((n$0@358@01 $Ref)) (!
  (=>
    (Set_in n$0@358@01 (Set_union g0@259@01 g1@260@01))
    (and (= (inv@359@01 n$0@358@01) n$0@358@01) (img@360@01 n$0@358@01)))
  :pattern ((Set_in n$0@358@01 (Set_union g0@259@01 g1@260@01)))
  :pattern ((inv@359@01 n$0@358@01))
  :pattern ((img@360@01 n$0@358@01))
  :qid |next-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@360@01 r) (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01)))
    (= (inv@359@01 r) r))
  :pattern ((inv@359@01 r))
  :qid |next-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (and
    (=>
      (Set_in r ($FVF.domain_next (as sm@361@01  $FVF<next>)))
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r)))
    (=>
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r))
      (Set_in r ($FVF.domain_next (as sm@361@01  $FVF<next>)))))
  :pattern ((Set_in r ($FVF.domain_next (as sm@361@01  $FVF<next>))))
  :qid |qp.fvfDomDef277|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r))
      (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01)))
    (=
      ($FVF.lookup_next (as sm@361@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@361@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef274|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (and
        (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
        (img@360@01 r))
      (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01)))
    (=
      ($FVF.lookup_next (as sm@361@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@361@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef275|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@361@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef276|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r))
  :qid |qp.fvfValDef278|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
    (=
      ($FVF.lookup_next (as sm@363@01  $FVF<next>) r)
      ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r)))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :pattern (($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r))
  :qid |qp.fvfValDef279|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.lookup_next (as sm@363@01  $FVF<next>) r))
  :qid |qp.fvfResTrgDef280|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_next (as pm@364@01  $FPM) r)
    (+
      (ite
        (and (img@268@01 r) (Set_in (inv@267@01 r) g0@259@01))
        $Perm.Write
        $Perm.No)
      (ite
        (and (img@273@01 r) (Set_in (inv@272@01 r) g1@260@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resPrmSumDef281|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_next ($FVF.lookup_next (as sm@363@01  $FVF<next>) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second $t@264@01))) r) r)
    ($FVF.loc_next ($FVF.lookup_next ($SortWrappers.$SnapTo$FVF<next> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@264@01)))))) r) r))
  :pattern (($FVF.perm_next (as pm@364@01  $FPM) r))
  :qid |qp.resTrgDef282|)))
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (Set_in (inv@359@01 r) (Set_union g0@259@01 g1@260@01))
      ($FVF.loc_next ($FVF.lookup_next (as sm@354@01  $FVF<next>) r) r))
    :pattern ((inv@359@01 r))
    :qid |quant-u-14275|))
  (forall ((n$1@362@01 $Ref)) (!
    (=>
      (and
        (Set_in n$1@362@01 (Set_union g0@259@01 g1@260@01))
        (not
          (= ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) $Ref.null)))
      (Set_in ($FVF.lookup_next (as sm@363@01  $FVF<next>) n$1@362@01) (Set_union g0@259@01 g1@260@01)))
    
    :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/graphs/static/tests/lists/framing2.vpr@305@14@305@22|))
  (Set_subset (Set_unionone (Set_singleton x0@261@01) x1@262@01) (Set_union g0@259@01 g1@260@01))
  (is_global_sroot%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($SortWrappers.$FVF<next>To$Snap (as sm@361@01  $FVF<next>))
      ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@259@01 g1@260@01) (Set_unionone (Set_singleton x0@261@01) x1@262@01))))
(push) ; 3
(assert (not (is_global_sroot ($Snap.combine
  $Snap.unit
  ($Snap.combine
    ($SortWrappers.$FVF<next>To$Snap (as sm@361@01  $FVF<next>))
    ($Snap.combine $Snap.unit $Snap.unit))) (Set_union g0@259@01 g1@260@01) (Set_unionone (Set_singleton x0@261@01) x1@262@01))))
(check-sat)
