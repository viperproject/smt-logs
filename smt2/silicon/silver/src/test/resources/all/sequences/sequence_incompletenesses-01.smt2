(get-info :version)
; (:version "4.12.1")
; Started: 2025-01-13 17:44:19
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<Seq<Int>> 0)
(declare-sort Seq<Int> 0)
(declare-sort Set<Seq<Seq<Int>>> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort Array_ 0)
(declare-sort $FVF<val> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<Seq<Int>>To$Snap (Seq<Seq<Int>>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Seq<Int>> ($Snap) Seq<Seq<Int>>)
(assert (forall ((x Seq<Seq<Int>>)) (!
    (= x ($SortWrappers.$SnapToSeq<Seq<Int>>($SortWrappers.Seq<Seq<Int>>To$Snap x)))
    :pattern (($SortWrappers.Seq<Seq<Int>>To$Snap x))
    :qid |$Snap.$SnapToSeq<Seq<Int>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Seq<Int>>To$Snap($SortWrappers.$SnapToSeq<Seq<Int>> x)))
    :pattern (($SortWrappers.$SnapToSeq<Seq<Int>> x))
    :qid |$Snap.Seq<Seq<Int>>To$SnapToSeq<Seq<Int>>|
    )))
(declare-fun $SortWrappers.Seq<Int>To$Snap (Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<Int> ($Snap) Seq<Int>)
(assert (forall ((x Seq<Int>)) (!
    (= x ($SortWrappers.$SnapToSeq<Int>($SortWrappers.Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.Seq<Int>To$Snap x))
    :qid |$Snap.$SnapToSeq<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<Int>To$Snap($SortWrappers.$SnapToSeq<Int> x)))
    :pattern (($SortWrappers.$SnapToSeq<Int> x))
    :qid |$Snap.Seq<Int>To$SnapToSeq<Int>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<Seq<Int>>>To$Snap (Set<Seq<Seq<Int>>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<Seq<Int>>> ($Snap) Set<Seq<Seq<Int>>>)
(assert (forall ((x Set<Seq<Seq<Int>>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<Seq<Int>>>($SortWrappers.Set<Seq<Seq<Int>>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<Seq<Int>>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<Seq<Int>>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<Seq<Int>>>To$Snap($SortWrappers.$SnapToSet<Seq<Seq<Int>>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<Seq<Int>>> x))
    :qid |$Snap.Set<Seq<Seq<Int>>>To$SnapToSet<Seq<Seq<Int>>>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Array_To$Snap (Array_) $Snap)
(declare-fun $SortWrappers.$SnapToArray_ ($Snap) Array_)
(assert (forall ((x Array_)) (!
    (= x ($SortWrappers.$SnapToArray_($SortWrappers.Array_To$Snap x)))
    :pattern (($SortWrappers.Array_To$Snap x))
    :qid |$Snap.$SnapToArray_To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Array_To$Snap($SortWrappers.$SnapToArray_ x)))
    :pattern (($SortWrappers.$SnapToArray_ x))
    :qid |$Snap.Array_To$SnapToArray_|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<val>To$Snap ($FVF<val>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<val> ($Snap) $FVF<val>)
(assert (forall ((x $FVF<val>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<val>($SortWrappers.$FVF<val>To$Snap x)))
    :pattern (($SortWrappers.$FVF<val>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<val>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<val>To$Snap($SortWrappers.$SnapTo$FVF<val> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<val> x))
    :qid |$Snap.$FVF<val>To$SnapTo$FVF<val>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<Seq<Seq<Int>>>) Int)
(declare-const Set_empty Set<Seq<Seq<Int>>>)
(declare-fun Set_in (Seq<Seq<Int>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_singleton (Seq<Seq<Int>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_unionone (Set<Seq<Seq<Int>>> Seq<Seq<Int>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_union (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_intersection (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_difference (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Set<Seq<Seq<Int>>>)
(declare-fun Set_subset (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_equal (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<Seq<Int>>> Set<Seq<Seq<Int>>>) Seq<Seq<Int>>)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<Seq<Int>>) Int)
(declare-const Seq_empty Seq<Seq<Int>>)
(declare-fun Seq_singleton (Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_append (Seq<Seq<Int>> Seq<Seq<Int>>) Seq<Seq<Int>>)
(declare-fun Seq_index (Seq<Seq<Int>> Int) Seq<Int>)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<Seq<Int>> Int Seq<Int>) Seq<Seq<Int>>)
(declare-fun Seq_take (Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun Seq_drop (Seq<Seq<Int>> Int) Seq<Seq<Int>>)
(declare-fun Seq_contains (Seq<Seq<Int>> Seq<Int>) Bool)
(declare-fun Seq_contains_trigger (Seq<Seq<Int>> Seq<Int>) Bool)
(declare-fun Seq_skolem (Seq<Seq<Int>> Seq<Int>) Int)
(declare-fun Seq_equal (Seq<Seq<Int>> Seq<Seq<Int>>) Bool)
(declare-fun Seq_skolem_diff (Seq<Seq<Int>> Seq<Seq<Int>>) Int)
(declare-fun Seq_length (Seq<Int>) Int)
(declare-const Seq_empty Seq<Int>)
(declare-fun Seq_singleton (Int) Seq<Int>)
(declare-fun Seq_append (Seq<Int> Seq<Int>) Seq<Int>)
(declare-fun Seq_index (Seq<Int> Int) Int)
(declare-fun Seq_update (Seq<Int> Int Int) Seq<Int>)
(declare-fun Seq_take (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_drop (Seq<Int> Int) Seq<Int>)
(declare-fun Seq_contains (Seq<Int> Int) Bool)
(declare-fun Seq_contains_trigger (Seq<Int> Int) Bool)
(declare-fun Seq_skolem (Seq<Int> Int) Int)
(declare-fun Seq_equal (Seq<Int> Seq<Int>) Bool)
(declare-fun Seq_skolem_diff (Seq<Int> Seq<Int>) Int)
(declare-fun Seq_range (Int Int) Seq<Int>)
(declare-fun len<Int> (Array_) Int)
(declare-fun slot<Ref> (Array_ Int) $Ref)
(declare-fun slotToArray<Array> ($Ref) Array_)
(declare-fun slotToIndex<Int> ($Ref) Int)
; /field_value_functions_declarations.smt2 [val: Seq[Seq[Int]]]
(declare-fun $FVF.domain_val ($FVF<val>) Set<$Ref>)
(declare-fun $FVF.lookup_val ($FVF<val> $Ref) Seq<Seq<Int>>)
(declare-fun $FVF.after_val ($FVF<val> $FVF<val>) Bool)
(declare-fun $FVF.loc_val (Seq<Seq<Int>> $Ref) Bool)
(declare-fun $FVF.perm_val ($FPM $Ref) $Perm)
(declare-const $fvfTOP_val $FVF<val>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun valid ($Snap Seq<Int> Int Bool) Bool)
(declare-fun valid%limited ($Snap Seq<Int> Int Bool) Bool)
(declare-fun valid%stateless (Seq<Int> Int Bool) Bool)
(declare-fun valid%precondition ($Snap Seq<Int> Int Bool) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<Seq<Int>>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Seq<Int>>)) 0))
(assert (forall ((s Seq<Seq<Int>>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Seq<Int>)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (not (= s1 (as Seq_empty  Seq<Seq<Int>>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Seq<Int>>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Seq<Int>>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Seq<Int>)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Seq<Int>>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Seq<Int>>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (v Seq<Int>)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Seq<Int>>) (i Int) (v Seq<Int>) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (t Seq<Seq<Int>>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Seq<Int>>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Seq<Int>>) (x Seq<Int>)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Seq<Int>>) (x Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Seq<Int>>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Seq<Int>>) (s1 Seq<Seq<Int>>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Seq<Int>>) (b Seq<Seq<Int>>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Seq<Int>) (y Seq<Int>)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Seq<Int>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<Int>)) 0))
(assert (forall ((s Seq<Int>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (not (= s1 (as Seq_empty  Seq<Int>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<Int>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e Int)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<Int>)))
      (and
        (not (= s1 (as Seq_empty  Seq<Int>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (i Int) (v Int) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<Int>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (t Seq<Int>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<Int>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<Int>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<Int>) (x Int)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<Int>) (x Int) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<Int>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<Int>) (s1 Seq<Int>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<Int>) (b Seq<Int>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x Int) (y Int)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((min_ Int) (max Int)) (!
  (and
    (=> (< min_ max) (= (Seq_length (Seq_range min_ max)) (- max min_)))
    (=> (<= max min_) (= (Seq_length (Seq_range min_ max)) 0)))
  :pattern ((Seq_length (Seq_range min_ max)))
  :qid |$Seq[Int]_prog.ranged_seq_length|)))
(assert (forall ((min_ Int) (max Int) (j Int)) (!
  (=>
    (and (<= 0 j) (< j (- max min_)))
    (= (Seq_index (Seq_range min_ max) j) (+ min_ j)))
  :pattern ((Seq_index (Seq_range min_ max) j))
  :qid |$Seq[Int]_prog.ranged_seq_index|)))
(assert (forall ((min_ Int) (max Int) (v Int)) (!
  (= (Seq_contains (Seq_range min_ max) v) (and (<= min_ v) (< v max)))
  :pattern ((Seq_contains (Seq_range min_ max) v))
  :qid |$Seq[Int]_prog.ranged_seq_contains|)))
(assert (forall ((s Set<Seq<Seq<Int>>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<Seq<Int>>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<Seq<Int>>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<Seq<Int>>>)))
  )))
(assert (forall ((s Set<Seq<Seq<Int>>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<Seq<Int>>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<Seq<Int>>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<Seq<Int>>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<Seq<Int>>) (o Seq<Seq<Int>>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<Seq<Int>>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (x Seq<Seq<Int>>) (o Seq<Seq<Int>>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (x Seq<Seq<Int>>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (x Seq<Seq<Int>>) (y Seq<Seq<Int>>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (x Seq<Seq<Int>>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (x Seq<Seq<Int>>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>) (o Seq<Seq<Int>>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>) (y Seq<Seq<Int>>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>) (y Seq<Seq<Int>>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>) (o Seq<Seq<Int>>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>) (o Seq<Seq<Int>>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>) (y Seq<Seq<Int>>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<Seq<Int>>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<Seq<Int>>>) (b Set<Seq<Seq<Int>>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((_a Array_) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (len<Int> _a)))
    (and
      (= (slotToArray<Array> (slot<Ref> _a i)) _a)
      (= (slotToIndex<Int> (slot<Ref> _a i)) i)))
  :pattern ((len<Int> _a) (slot<Ref> _a i))
  :pattern ((len<Int> _a) (slotToArray<Array> (slot<Ref> _a i)))
  :pattern ((len<Int> _a) (slotToIndex<Int> (slot<Ref> _a i)))
  :pattern ((slotToArray<Array> (slot<Ref> _a i)))
  :pattern ((slotToIndex<Int> (slot<Ref> _a i)))
  :qid |prog.injectivity|)))
(assert (forall ((_a Array_)) (!
  (>= (len<Int> _a) 0)
  :pattern ((len<Int> _a))
  :qid |prog.lenPositive|)))
; /field_value_functions_axioms.smt2 [val: Seq[Seq[Int]]]
(assert (forall ((vs $FVF<val>) (ws $FVF<val>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_val vs) ($FVF.domain_val ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_val vs))
            (= ($FVF.lookup_val vs x) ($FVF.lookup_val ws x)))
          :pattern (($FVF.lookup_val vs x) ($FVF.lookup_val ws x))
          :qid |qp.$FVF<val>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<val>To$Snap vs)
              ($SortWrappers.$FVF<val>To$Snap ws)
              )
    :qid |qp.$FVF<val>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_val pm r))
    :pattern (($FVF.perm_val pm r)))))
(assert (forall ((r $Ref) (f Seq<Seq<Int>>)) (!
    (= ($FVF.loc_val f r) true)
    :pattern (($FVF.loc_val f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (s@0@00 Seq<Int>) (lenTiles@1@00 Int) (isStart@2@00 Bool)) (!
  (=
    (valid%limited s@$ s@0@00 lenTiles@1@00 isStart@2@00)
    (valid s@$ s@0@00 lenTiles@1@00 isStart@2@00))
  :pattern ((valid s@$ s@0@00 lenTiles@1@00 isStart@2@00))
  :qid |quant-u-22528|)))
(assert (forall ((s@$ $Snap) (s@0@00 Seq<Int>) (lenTiles@1@00 Int) (isStart@2@00 Bool)) (!
  (valid%stateless s@0@00 lenTiles@1@00 isStart@2@00)
  :pattern ((valid%limited s@$ s@0@00 lenTiles@1@00 isStart@2@00))
  :qid |quant-u-22529|)))
(assert (forall ((s@$ $Snap) (s@0@00 Seq<Int>) (lenTiles@1@00 Int) (isStart@2@00 Bool)) (!
  (=>
    (valid%precondition s@$ s@0@00 lenTiles@1@00 isStart@2@00)
    (=
      (valid s@$ s@0@00 lenTiles@1@00 isStart@2@00)
      (ite
        (= (Seq_length s@0@00) 0)
        (= lenTiles@1@00 0)
        (ite
          (= (Seq_length s@0@00) 1)
          (and
            (= lenTiles@1@00 (Seq_index s@0@00 0))
            (ite
              isStart@2@00
              (or (= (Seq_index s@0@00 0) 0) (>= (Seq_index s@0@00 0) 3))
              (>= (Seq_index s@0@00 0) 3)))
          (and
            (ite
              isStart@2@00
              (or (= (Seq_index s@0@00 0) 0) (>= (Seq_index s@0@00 0) 3))
              (>= (Seq_index s@0@00 0) 3))
            (and
              (> (Seq_index s@0@00 1) 0)
              (valid%limited $Snap.unit (Seq_drop s@0@00 2) (-
                (- lenTiles@1@00 (Seq_index s@0@00 1))
                (Seq_index s@0@00 0)) false)))))))
  :pattern ((valid s@$ s@0@00 lenTiles@1@00 isStart@2@00))
  :qid |quant-u-22530|)))
(assert (forall ((s@$ $Snap) (s@0@00 Seq<Int>) (lenTiles@1@00 Int) (isStart@2@00 Bool)) (!
  (=>
    (valid%precondition s@$ s@0@00 lenTiles@1@00 isStart@2@00)
    (ite
      (= (Seq_length s@0@00) 0)
      true
      (ite
        (= (Seq_length s@0@00) 1)
        true
        (=>
          (and
            (ite
              isStart@2@00
              (or (= (Seq_index s@0@00 0) 0) (>= (Seq_index s@0@00 0) 3))
              (>= (Seq_index s@0@00 0) 3))
            (> (Seq_index s@0@00 1) 0))
          (valid%precondition $Snap.unit (Seq_drop s@0@00 2) (-
            (- lenTiles@1@00 (Seq_index s@0@00 1))
            (Seq_index s@0@00 0)) false)))))
  :pattern ((valid s@$ s@0@00 lenTiles@1@00 isStart@2@00))
  :qid |quant-u-22531|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- colourings0 ----------
(declare-const a@0@01 Array_)
(declare-const a@1@01 Array_)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@2@01 $Snap)
(assert (= $t@2@01 ($Snap.combine ($Snap.first $t@2@01) ($Snap.second $t@2@01))))
(assert (= ($Snap.first $t@2@01) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (= (len<Int> a@1@01) 51))
(declare-const i@3@01 Int)
(push) ; 2
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 0 | !(0 <= i@3@01) | live]
; [else-branch: 0 | 0 <= i@3@01 | live]
(push) ; 4
; [then-branch: 0 | !(0 <= i@3@01)]
(assert (not (<= 0 i@3@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 0 | 0 <= i@3@01]
(assert (<= 0 i@3@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@3@01) (not (<= 0 i@3@01))))
(assert (and (<= 0 i@3@01) (< i@3@01 (len<Int> a@1@01))))
; [eval] slot(a, i)
(pop) ; 2
(declare-fun inv@4@01 ($Ref) Int)
(declare-fun img@5@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@3@01 Int)) (!
  (=>
    (and (<= 0 i@3@01) (< i@3@01 (len<Int> a@1@01)))
    (or (<= 0 i@3@01) (not (<= 0 i@3@01))))
  :pattern ((slot<Ref> a@1@01 i@3@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@3@01 Int) (i2@3@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@3@01) (< i1@3@01 (len<Int> a@1@01)))
      (and (<= 0 i2@3@01) (< i2@3@01 (len<Int> a@1@01)))
      (= (slot<Ref> a@1@01 i1@3@01) (slot<Ref> a@1@01 i2@3@01)))
    (= i1@3@01 i2@3@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@3@01 Int)) (!
  (=>
    (and (<= 0 i@3@01) (< i@3@01 (len<Int> a@1@01)))
    (and
      (= (inv@4@01 (slot<Ref> a@1@01 i@3@01)) i@3@01)
      (img@5@01 (slot<Ref> a@1@01 i@3@01))))
  :pattern ((slot<Ref> a@1@01 i@3@01))
  :qid |quant-u-22533|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@5@01 r)
      (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
    (= (slot<Ref> a@1@01 (inv@4@01 r)) r))
  :pattern ((inv@4@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@3@01 Int)) (!
  (=>
    (and (<= 0 i@3@01) (< i@3@01 (len<Int> a@1@01)))
    (not (= (slot<Ref> a@1@01 i@3@01) $Ref.null)))
  :pattern ((slot<Ref> a@1@01 i@3@01))
  :qid |val-permImpliesNonNull|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; slot(a, 0).val := Seq(Seq[Int]())
; [eval] slot(a, 0)
; [eval] Seq(Seq[Int]())
; [eval] Seq[Int]()
(assert (= (Seq_length (Seq_singleton (as Seq_empty  Seq<Int>))) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@6@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@1@01 0))
    ($Perm.min
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@6@01 r))
    $Perm.No)
  
  :qid |quant-u-22535|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@6@01 r) $Perm.No)
  
  :qid |quant-u-22536|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r (slot<Ref> a@1@01 0)) (= (- $Perm.Write (pTaken@6@01 r)) $Perm.No))
  
  :qid |quant-u-22537|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@7@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@7@01  $FVF<val>) (slot<Ref> a@1@01 0))
  (Seq_singleton (as Seq_empty  Seq<Int>))))
; [exec]
; slot(a, 1).val := Seq(Seq(0, 1))
; [eval] slot(a, 1)
; [eval] Seq(Seq(0, 1))
; [eval] Seq(0, 1)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 1))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
  1))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@1@01 0) (slot<Ref> a@1@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@8@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@1@01 1))
    ($Perm.min
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (- $Perm.Write (pTaken@6@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@9@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@1@01 1))
    ($Perm.min
      (ite (= r (slot<Ref> a@1@01 0)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@8@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (- $Perm.Write (pTaken@6@01 r))
        $Perm.No)
      (pTaken@8@01 r))
    $Perm.No)
  
  :qid |quant-u-22539|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@8@01 r) $Perm.No)
  
  :qid |quant-u-22540|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r (slot<Ref> a@1@01 1)) (= (- $Perm.Write (pTaken@8@01 r)) $Perm.No))
  
  :qid |quant-u-22541|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@10@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@10@01  $FVF<val>) (slot<Ref> a@1@01 1))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
; [exec]
; assert valid(Seq[Int](), 0, false)
; [eval] valid(Seq[Int](), 0, false)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(pop) ; 3
; Joined path conditions
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(push) ; 3
(assert (not (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 1).val[j], 1, true) }
;     0 <= j && j < |slot(a, 1).val| ==>
;     slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
; [eval] (forall j: Int :: { valid(slot(a, 1).val[j], 1, true) } 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
(declare-const j@11@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] 0 <= j && j < |slot(a, 1).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 1 | !(0 <= j@11@01) | live]
; [else-branch: 1 | 0 <= j@11@01 | live]
(push) ; 5
; [then-branch: 1 | !(0 <= j@11@01)]
(assert (not (<= 0 j@11@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1 | 0 <= j@11@01]
(assert (<= 0 j@11@01))
; [eval] j < |slot(a, 1).val|
; [eval] |slot(a, 1).val|
; [eval] slot(a, 1)
(declare-const sm@12@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 1))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 0))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@5@01 r)
        (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
  :qid |qp.fvfValDef2|)))
(declare-const pm@13@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@13@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@1@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@1@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@13@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@13@01  $FPM) (slot<Ref> a@1@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 1))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 0))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@5@01 r)
        (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@13@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@1@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@1@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@13@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
(assert (or (<= 0 j@11@01) (not (<= 0 j@11@01))))
(push) ; 4
; [then-branch: 2 | 0 <= j@11@01 && j@11@01 < |Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))| | live]
; [else-branch: 2 | !(0 <= j@11@01 && j@11@01 < |Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))|) | live]
(push) ; 5
; [then-branch: 2 | 0 <= j@11@01 && j@11@01 < |Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))|]
(assert (and
  (<= 0 j@11@01)
  (<
    j@11@01
    (Seq_length ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))))))
; [eval] slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j] == Seq(0, 1)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@1@01 1))
      (=
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@1@01 0))
      (=
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
    :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
    :qid |qp.fvfValDef2|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite (= (slot<Ref> a@1@01 1) (slot<Ref> a@1@01 1)) $Perm.Write $Perm.No)
      (ite (= (slot<Ref> a@1@01 1) (slot<Ref> a@1@01 0)) $Perm.Write $Perm.No))
    (ite
      (and
        (img@5@01 (slot<Ref> a@1@01 1))
        (and
          (<= 0 (inv@4@01 (slot<Ref> a@1@01 1)))
          (< (inv@4@01 (slot<Ref> a@1@01 1)) (len<Int> a@1@01))))
      (-
        (- $Perm.Write (pTaken@6@01 (slot<Ref> a@1@01 1)))
        (pTaken@8@01 (slot<Ref> a@1@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@11@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(0, 1)
(push) ; 6
; [then-branch: 3 | !(Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))[j@11@01] === [0] ++ [1]) | live]
; [else-branch: 3 | Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))[j@11@01] === [0] ++ [1] | live]
(push) ; 7
; [then-branch: 3 | !(Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))[j@11@01] === [0] ++ [1])]
(assert (not
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
      j@11@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 3 | Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))[j@11@01] === [0] ++ [1]]
(assert (Seq_equal
  (Seq_index
    ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
    j@11@01)
  (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
; [eval] valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@1@01 1))
      (=
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@1@01 0))
      (=
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
    :qid |qp.fvfValDef1|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
    :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
    :qid |qp.fvfValDef2|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite (= (slot<Ref> a@1@01 1) (slot<Ref> a@1@01 1)) $Perm.Write $Perm.No)
      (ite (= (slot<Ref> a@1@01 1) (slot<Ref> a@1@01 0)) $Perm.Write $Perm.No))
    (ite
      (and
        (img@5@01 (slot<Ref> a@1@01 1))
        (and
          (<= 0 (inv@4@01 (slot<Ref> a@1@01 1)))
          (< (inv@4@01 (slot<Ref> a@1@01 1)) (len<Int> a@1@01))))
      (-
        (- $Perm.Write (pTaken@6@01 (slot<Ref> a@1@01 1)))
        (pTaken@8@01 (slot<Ref> a@1@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (>= j@11@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
  j@11@01) 1 true))
(pop) ; 8
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
  j@11@01) 1 true))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 1))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 0))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@5@01 r)
        (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (=>
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
      j@11@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (and
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
        j@11@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
      j@11@01) 1 true))))
(assert (or
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
      j@11@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (not
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
        j@11@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))
(pop) ; 5
(push) ; 5
; [else-branch: 2 | !(0 <= j@11@01 && j@11@01 < |Lookup(val, sm@12@01, slot[Ref](a@1@01, 1))|)]
(assert (not
  (and
    (<= 0 j@11@01)
    (<
      j@11@01
      (Seq_length
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 1))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 0))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@5@01 r)
        (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (=>
  (and
    (<= 0 j@11@01)
    (<
      j@11@01
      (Seq_length
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))
  (and
    (<= 0 j@11@01)
    (<
      j@11@01
      (Seq_length
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))))
    (=>
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (and
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
            j@11@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01) 1 true)))
    (or
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (not
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
            j@11@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@11@01)
      (<
        j@11@01
        (Seq_length
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))))))
  (and
    (<= 0 j@11@01)
    (<
      j@11@01
      (Seq_length
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 1))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@10@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@10@01  $FVF<val>) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@1@01 0))
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@7@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@7@01  $FVF<val>) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@5@01 r)
        (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r)))
  :pattern (($FVF.lookup_val (as sm@12@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@2@01)) r))
  :qid |qp.fvfValDef2|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@13@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@1@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@1@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@5@01 r)
          (and (<= 0 (inv@4@01 r)) (< (inv@4@01 r) (len<Int> a@1@01))))
        (- (- $Perm.Write (pTaken@6@01 r)) (pTaken@8@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@13@01  $FPM) r))
  :qid |qp.resPrmSumDef3|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@11@01 Int)) (!
  (and
    (or (<= 0 j@11@01) (not (<= 0 j@11@01)))
    (=>
      (and
        (<= 0 j@11@01)
        (<
          j@11@01
          (Seq_length
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))
      (and
        (<= 0 j@11@01)
        (<
          j@11@01
          (Seq_length
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))))
        (=>
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
              j@11@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (and
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
                j@11@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
            (valid%precondition $Snap.unit (Seq_index
              ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
              j@11@01) 1 true)))
        (or
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
              j@11@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (not
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
                j@11@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))))
    (or
      (not
        (and
          (<= 0 j@11@01)
          (<
            j@11@01
            (Seq_length
              ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))))))
      (and
        (<= 0 j@11@01)
        (<
          j@11@01
          (Seq_length
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
    j@11@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@49@10@50@71-aux|)))
(assert (forall ((j@11@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@11@01)
        (<
          j@11@01
          (Seq_length
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
      j@11@01) 1 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
    j@11@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@49@10@50@71_precondition|)))
(push) ; 3
(assert (not (forall ((j@11@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (<= 0 j@11@01)
            (<
              j@11@01
              (Seq_length
                ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
              j@11@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01) 1 true))
      (and
        (<= 0 j@11@01)
        (<
          j@11@01
          (Seq_length
            ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
        j@11@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
    j@11@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@49@10@50@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@11@01 Int)) (!
  (=>
    (and
      (<= 0 j@11@01)
      (<
        j@11@01
        (Seq_length
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1)))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
          j@11@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
        j@11@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@12@01  $FVF<val>) (slot<Ref> a@1@01 1))
    j@11@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@49@10@50@71|)))
(pop) ; 2
(pop) ; 1
; ---------- colourings1 ----------
(declare-const a@14@01 Array_)
(declare-const a@15@01 Array_)
(push) ; 1
(declare-const $t@16@01 $Snap)
(assert (= $t@16@01 ($Snap.combine ($Snap.first $t@16@01) ($Snap.second $t@16@01))))
(assert (= ($Snap.first $t@16@01) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (= (len<Int> a@15@01) 51))
(declare-const i@17@01 Int)
(push) ; 2
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 4 | !(0 <= i@17@01) | live]
; [else-branch: 4 | 0 <= i@17@01 | live]
(push) ; 4
; [then-branch: 4 | !(0 <= i@17@01)]
(assert (not (<= 0 i@17@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 4 | 0 <= i@17@01]
(assert (<= 0 i@17@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@17@01) (not (<= 0 i@17@01))))
(assert (and (<= 0 i@17@01) (< i@17@01 (len<Int> a@15@01))))
; [eval] slot(a, i)
(pop) ; 2
(declare-fun inv@18@01 ($Ref) Int)
(declare-fun img@19@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@17@01 Int)) (!
  (=>
    (and (<= 0 i@17@01) (< i@17@01 (len<Int> a@15@01)))
    (or (<= 0 i@17@01) (not (<= 0 i@17@01))))
  :pattern ((slot<Ref> a@15@01 i@17@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@17@01 Int) (i2@17@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@17@01) (< i1@17@01 (len<Int> a@15@01)))
      (and (<= 0 i2@17@01) (< i2@17@01 (len<Int> a@15@01)))
      (= (slot<Ref> a@15@01 i1@17@01) (slot<Ref> a@15@01 i2@17@01)))
    (= i1@17@01 i2@17@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@17@01 Int)) (!
  (=>
    (and (<= 0 i@17@01) (< i@17@01 (len<Int> a@15@01)))
    (and
      (= (inv@18@01 (slot<Ref> a@15@01 i@17@01)) i@17@01)
      (img@19@01 (slot<Ref> a@15@01 i@17@01))))
  :pattern ((slot<Ref> a@15@01 i@17@01))
  :qid |quant-u-22543|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@19@01 r)
      (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
    (= (slot<Ref> a@15@01 (inv@18@01 r)) r))
  :pattern ((inv@18@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@17@01 Int)) (!
  (=>
    (and (<= 0 i@17@01) (< i@17@01 (len<Int> a@15@01)))
    (not (= (slot<Ref> a@15@01 i@17@01) $Ref.null)))
  :pattern ((slot<Ref> a@15@01 i@17@01))
  :qid |val-permImpliesNonNull|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var n: Int
(declare-const n@20@01 Int)
; [exec]
; slot(a, 0).val := Seq(Seq[Int]())
; [eval] slot(a, 0)
; [eval] Seq(Seq[Int]())
; [eval] Seq[Int]()
(assert (= (Seq_length (Seq_singleton (as Seq_empty  Seq<Int>))) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@21@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 0))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@21@01 r))
    $Perm.No)
  
  :qid |quant-u-22545|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@21@01 r) $Perm.No)
  
  :qid |quant-u-22546|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r (slot<Ref> a@15@01 0)) (= (- $Perm.Write (pTaken@21@01 r)) $Perm.No))
  
  :qid |quant-u-22547|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@22@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@22@01  $FVF<val>) (slot<Ref> a@15@01 0))
  (Seq_singleton (as Seq_empty  Seq<Int>))))
; [exec]
; slot(a, 1).val := Seq(Seq(0, 1))
; [eval] slot(a, 1)
; [eval] Seq(Seq(0, 1))
; [eval] Seq(0, 1)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 1))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
  1))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 0) (slot<Ref> a@15@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@23@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 1))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@24@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 1))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@23@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- $Perm.Write (pTaken@21@01 r))
        $Perm.No)
      (pTaken@23@01 r))
    $Perm.No)
  
  :qid |quant-u-22549|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@23@01 r) $Perm.No)
  
  :qid |quant-u-22550|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r (slot<Ref> a@15@01 1)) (= (- $Perm.Write (pTaken@23@01 r)) $Perm.No))
  
  :qid |quant-u-22551|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@25@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@25@01  $FVF<val>) (slot<Ref> a@15@01 1))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
; [exec]
; assert valid(Seq[Int](), 0, false)
; [eval] valid(Seq[Int](), 0, false)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(pop) ; 3
; Joined path conditions
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(push) ; 3
(assert (not (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
; [exec]
; assert Seq(0, 1)[2..] == Seq[Int]()
; [eval] Seq(0, 1)[2..] == Seq[Int]()
; [eval] Seq(0, 1)[2..]
; [eval] Seq(0, 1)
; [eval] Seq[Int]()
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 1)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 1)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 1).val[j], 1, true) }
;     0 <= j && j < |slot(a, 1).val| ==>
;     slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
; [eval] (forall j: Int :: { valid(slot(a, 1).val[j], 1, true) } 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
(declare-const j@26@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] 0 <= j && j < |slot(a, 1).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 5 | !(0 <= j@26@01) | live]
; [else-branch: 5 | 0 <= j@26@01 | live]
(push) ; 5
; [then-branch: 5 | !(0 <= j@26@01)]
(assert (not (<= 0 j@26@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 5 | 0 <= j@26@01]
(assert (<= 0 j@26@01))
; [eval] j < |slot(a, 1).val|
; [eval] |slot(a, 1).val|
; [eval] slot(a, 1)
(declare-const sm@27@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef6|)))
(declare-const pm@28@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@28@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@28@01  $FPM) r))
  :qid |qp.resPrmSumDef7|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@28@01  $FPM) (slot<Ref> a@15@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@28@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@28@01  $FPM) r))
  :qid |qp.resPrmSumDef7|)))
(assert (or (<= 0 j@26@01) (not (<= 0 j@26@01))))
(push) ; 4
; [then-branch: 6 | 0 <= j@26@01 && j@26@01 < |Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))| | live]
; [else-branch: 6 | !(0 <= j@26@01 && j@26@01 < |Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))|) | live]
(push) ; 5
; [then-branch: 6 | 0 <= j@26@01 && j@26@01 < |Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))|]
(assert (and
  (<= 0 j@26@01)
  (<
    j@26@01
    (Seq_length ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))))))
; [eval] slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j] == Seq(0, 1)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 1))
      (=
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 0))
      (=
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
    :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
    :qid |qp.fvfValDef6|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
      (ite (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
    (ite
      (and
        (img@19@01 (slot<Ref> a@15@01 1))
        (and
          (<= 0 (inv@18@01 (slot<Ref> a@15@01 1)))
          (< (inv@18@01 (slot<Ref> a@15@01 1)) (len<Int> a@15@01))))
      (-
        (- $Perm.Write (pTaken@21@01 (slot<Ref> a@15@01 1)))
        (pTaken@23@01 (slot<Ref> a@15@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@26@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(0, 1)
(push) ; 6
; [then-branch: 7 | !(Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))[j@26@01] === [0] ++ [1]) | live]
; [else-branch: 7 | Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))[j@26@01] === [0] ++ [1] | live]
(push) ; 7
; [then-branch: 7 | !(Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))[j@26@01] === [0] ++ [1])]
(assert (not
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
      j@26@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 7 | Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))[j@26@01] === [0] ++ [1]]
(assert (Seq_equal
  (Seq_index
    ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
    j@26@01)
  (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
; [eval] valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 1))
      (=
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
    :qid |qp.fvfValDef4|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 0))
      (=
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
    :qid |qp.fvfValDef5|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
    :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
    :qid |qp.fvfValDef6|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
      (ite (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
    (ite
      (and
        (img@19@01 (slot<Ref> a@15@01 1))
        (and
          (<= 0 (inv@18@01 (slot<Ref> a@15@01 1)))
          (< (inv@18@01 (slot<Ref> a@15@01 1)) (len<Int> a@15@01))))
      (-
        (- $Perm.Write (pTaken@21@01 (slot<Ref> a@15@01 1)))
        (pTaken@23@01 (slot<Ref> a@15@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (>= j@26@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
  j@26@01) 1 true))
(pop) ; 8
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
  j@26@01) 1 true))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef6|)))
(assert (=>
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
      j@26@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (and
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
        j@26@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
      j@26@01) 1 true))))
(assert (or
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
      j@26@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (not
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
        j@26@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))
(pop) ; 5
(push) ; 5
; [else-branch: 6 | !(0 <= j@26@01 && j@26@01 < |Lookup(val, sm@27@01, slot[Ref](a@15@01, 1))|)]
(assert (not
  (and
    (<= 0 j@26@01)
    (<
      j@26@01
      (Seq_length
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef6|)))
(assert (=>
  (and
    (<= 0 j@26@01)
    (<
      j@26@01
      (Seq_length
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))
  (and
    (<= 0 j@26@01)
    (<
      j@26@01
      (Seq_length
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))))
    (=>
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (and
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
            j@26@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01) 1 true)))
    (or
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (not
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
            j@26@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@26@01)
      (<
        j@26@01
        (Seq_length
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))))))
  (and
    (<= 0 j@26@01)
    (<
      j@26@01
      (Seq_length
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef5|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@27@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@28@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@28@01  $FPM) r))
  :qid |qp.resPrmSumDef7|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@26@01 Int)) (!
  (and
    (or (<= 0 j@26@01) (not (<= 0 j@26@01)))
    (=>
      (and
        (<= 0 j@26@01)
        (<
          j@26@01
          (Seq_length
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))
      (and
        (<= 0 j@26@01)
        (<
          j@26@01
          (Seq_length
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))))
        (=>
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
              j@26@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (and
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
                j@26@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
            (valid%precondition $Snap.unit (Seq_index
              ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
              j@26@01) 1 true)))
        (or
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
              j@26@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (not
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
                j@26@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))))
    (or
      (not
        (and
          (<= 0 j@26@01)
          (<
            j@26@01
            (Seq_length
              ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))))))
      (and
        (<= 0 j@26@01)
        (<
          j@26@01
          (Seq_length
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
    j@26@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@67@10@68@71-aux|)))
(assert (forall ((j@26@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@26@01)
        (<
          j@26@01
          (Seq_length
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
      j@26@01) 1 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
    j@26@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@67@10@68@71_precondition|)))
(push) ; 3
(assert (not (forall ((j@26@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (<= 0 j@26@01)
            (<
              j@26@01
              (Seq_length
                ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
              j@26@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01) 1 true))
      (and
        (<= 0 j@26@01)
        (<
          j@26@01
          (Seq_length
            ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
        j@26@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
    j@26@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@67@10@68@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@26@01 Int)) (!
  (=>
    (and
      (<= 0 j@26@01)
      (<
        j@26@01
        (Seq_length
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1)))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
          j@26@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
        j@26@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@27@01  $FVF<val>) (slot<Ref> a@15@01 1))
    j@26@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@67@10@68@71|)))
; [exec]
; slot(a, 2).val := Seq(Seq(0, 2))
; [eval] slot(a, 2)
; [eval] Seq(Seq(0, 2))
; [eval] Seq(0, 2)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 2))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 2))))
  1))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 0) (slot<Ref> a@15@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@29@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 2))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@30@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 2))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@29@01 r)))
    $Perm.No))
(define-fun pTaken@31@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 2))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@29@01 r)) (pTaken@30@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
        $Perm.No)
      (pTaken@29@01 r))
    $Perm.No)
  
  :qid |quant-u-22553|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@29@01 r) $Perm.No)
  
  :qid |quant-u-22554|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r (slot<Ref> a@15@01 2)) (= (- $Perm.Write (pTaken@29@01 r)) $Perm.No))
  
  :qid |quant-u-22555|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@32@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@32@01  $FVF<val>) (slot<Ref> a@15@01 2))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 2)))))
; [exec]
; assert Seq(0, 2)[2..] == Seq[Int]()
; [eval] Seq(0, 2)[2..] == Seq[Int]()
; [eval] Seq(0, 2)[2..]
; [eval] Seq(0, 2)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 2)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 2)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 2).val[j], 2, true) }
;     0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true))
; [eval] (forall j: Int :: { valid(slot(a, 2).val[j], 2, true) } 0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true))
(declare-const j@33@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true)
; [eval] 0 <= j && j < |slot(a, 2).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 8 | !(0 <= j@33@01) | live]
; [else-branch: 8 | 0 <= j@33@01 | live]
(push) ; 5
; [then-branch: 8 | !(0 <= j@33@01)]
(assert (not (<= 0 j@33@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 8 | 0 <= j@33@01]
(assert (<= 0 j@33@01))
; [eval] j < |slot(a, 2).val|
; [eval] |slot(a, 2).val|
; [eval] slot(a, 2)
(declare-const sm@34@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef11|)))
(declare-const pm@35@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@35@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@35@01  $FPM) r))
  :qid |qp.resPrmSumDef12|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@35@01  $FPM) (slot<Ref> a@15@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@35@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@35@01  $FPM) r))
  :qid |qp.resPrmSumDef12|)))
(assert (or (<= 0 j@33@01) (not (<= 0 j@33@01))))
(push) ; 4
; [then-branch: 9 | 0 <= j@33@01 && j@33@01 < |Lookup(val, sm@34@01, slot[Ref](a@15@01, 2))| | live]
; [else-branch: 9 | !(0 <= j@33@01 && j@33@01 < |Lookup(val, sm@34@01, slot[Ref](a@15@01, 2))|) | live]
(push) ; 5
; [then-branch: 9 | 0 <= j@33@01 && j@33@01 < |Lookup(val, sm@34@01, slot[Ref](a@15@01, 2))|]
(assert (and
  (<= 0 j@33@01)
  (<
    j@33@01
    (Seq_length ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))))))
; [eval] valid(slot(a, 2).val[j], 2, true)
; [eval] slot(a, 2).val[j]
; [eval] slot(a, 2)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 2))
      (=
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
    :qid |qp.fvfValDef8|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 0))
      (=
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
    :qid |qp.fvfValDef9|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 1))
      (=
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
    :qid |qp.fvfValDef10|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (<
          $Perm.No
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
    :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
    :qid |qp.fvfValDef11|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (= (slot<Ref> a@15@01 2) (slot<Ref> a@15@01 2))
          $Perm.Write
          $Perm.No)
        (ite
          (= (slot<Ref> a@15@01 2) (slot<Ref> a@15@01 0))
          $Perm.Write
          $Perm.No))
      (ite (= (slot<Ref> a@15@01 2) (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
    (ite
      (and
        (img@19@01 (slot<Ref> a@15@01 2))
        (and
          (<= 0 (inv@18@01 (slot<Ref> a@15@01 2)))
          (< (inv@18@01 (slot<Ref> a@15@01 2)) (len<Int> a@15@01))))
      (-
        (-
          (- $Perm.Write (pTaken@21@01 (slot<Ref> a@15@01 2)))
          (pTaken@23@01 (slot<Ref> a@15@01 2)))
        (pTaken@29@01 (slot<Ref> a@15@01 2)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@33@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
  j@33@01) 2 true))
(pop) ; 6
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
  j@33@01) 2 true))
(pop) ; 5
(push) ; 5
; [else-branch: 9 | !(0 <= j@33@01 && j@33@01 < |Lookup(val, sm@34@01, slot[Ref](a@15@01, 2))|)]
(assert (not
  (and
    (<= 0 j@33@01)
    (<
      j@33@01
      (Seq_length
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef11|)))
(assert (=>
  (and
    (<= 0 j@33@01)
    (<
      j@33@01
      (Seq_length
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))
  (and
    (<= 0 j@33@01)
    (<
      j@33@01
      (Seq_length
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
      j@33@01) 2 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@33@01)
      (<
        j@33@01
        (Seq_length
          ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))))))
  (and
    (<= 0 j@33@01)
    (<
      j@33@01
      (Seq_length
        ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef8|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef10|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@34@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef11|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@35@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@35@01  $FPM) r))
  :qid |qp.resPrmSumDef12|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@33@01 Int)) (!
  (and
    (or (<= 0 j@33@01) (not (<= 0 j@33@01)))
    (=>
      (and
        (<= 0 j@33@01)
        (<
          j@33@01
          (Seq_length
            ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))
      (and
        (<= 0 j@33@01)
        (<
          j@33@01
          (Seq_length
            ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
          j@33@01) 2 true)))
    (or
      (not
        (and
          (<= 0 j@33@01)
          (<
            j@33@01
            (Seq_length
              ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))))))
      (and
        (<= 0 j@33@01)
        (<
          j@33@01
          (Seq_length
            ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
    j@33@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@72@10@73@37-aux|)))
(assert (forall ((j@33@01 Int)) (!
  (=>
    (and
      (<= 0 j@33@01)
      (<
        j@33@01
        (Seq_length
          ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
      j@33@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
    j@33@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@72@10@73@37_precondition|)))
(push) ; 3
(assert (not (forall ((j@33@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 j@33@01)
          (<
            j@33@01
            (Seq_length
              ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
          j@33@01) 2 true))
      (and
        (<= 0 j@33@01)
        (<
          j@33@01
          (Seq_length
            ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
      j@33@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
    j@33@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@72@10@73@37|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@33@01 Int)) (!
  (=>
    (and
      (<= 0 j@33@01)
      (<
        j@33@01
        (Seq_length
          ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2)))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
      j@33@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@34@01  $FVF<val>) (slot<Ref> a@15@01 2))
    j@33@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@72@10@73@37|)))
; [exec]
; slot(a, 3).val := Seq(Seq(0, 3), Seq(3))
; [eval] slot(a, 3)
; [eval] Seq(Seq(0, 3), Seq(3))
; [eval] Seq(0, 3)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 3))) 2))
; [eval] Seq(3)
(assert (= (Seq_length (Seq_singleton 3)) 1))
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 3)))
      (Seq_singleton (Seq_singleton 3))))
  2))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 2) (slot<Ref> a@15@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 0) (slot<Ref> a@15@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@36@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 3))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@37@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@36@01 r)))
    $Perm.No))
(define-fun pTaken@38@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@36@01 r)) (pTaken@37@01 r)))
    $Perm.No))
(define-fun pTaken@39@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
      (- (- (- $Perm.Write (pTaken@36@01 r)) (pTaken@37@01 r)) (pTaken@38@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
          (pTaken@29@01 r))
        $Perm.No)
      (pTaken@36@01 r))
    $Perm.No)
  
  :qid |quant-u-22557|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@36@01 r) $Perm.No)
  
  :qid |quant-u-22558|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=> (= r (slot<Ref> a@15@01 3)) (= (- $Perm.Write (pTaken@36@01 r)) $Perm.No))
  
  :qid |quant-u-22559|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@40@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@40@01  $FVF<val>) (slot<Ref> a@15@01 3))
  (Seq_append
    (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 3)))
    (Seq_singleton (Seq_singleton 3)))))
; [exec]
; assert Seq(0, 3)[2..] == Seq[Int]()
; [eval] Seq(0, 3)[2..] == Seq[Int]()
; [eval] Seq(0, 3)[2..]
; [eval] Seq(0, 3)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 3)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 3)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 3).val[j], 3, true) }
;     0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true))
; [eval] (forall j: Int :: { valid(slot(a, 3).val[j], 3, true) } 0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true))
(declare-const j@41@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true)
; [eval] 0 <= j && j < |slot(a, 3).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 10 | !(0 <= j@41@01) | live]
; [else-branch: 10 | 0 <= j@41@01 | live]
(push) ; 5
; [then-branch: 10 | !(0 <= j@41@01)]
(assert (not (<= 0 j@41@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 10 | 0 <= j@41@01]
(assert (<= 0 j@41@01))
; [eval] j < |slot(a, 3).val|
; [eval] |slot(a, 3).val|
; [eval] slot(a, 3)
(declare-const sm@42@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(declare-const pm@43@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@43@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@15@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@43@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@43@01  $FPM) (slot<Ref> a@15@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@43@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@15@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@43@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
(assert (or (<= 0 j@41@01) (not (<= 0 j@41@01))))
(push) ; 4
; [then-branch: 11 | 0 <= j@41@01 && j@41@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, 3))| | live]
; [else-branch: 11 | !(0 <= j@41@01 && j@41@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, 3))|) | live]
(push) ; 5
; [then-branch: 11 | 0 <= j@41@01 && j@41@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, 3))|]
(assert (and
  (<= 0 j@41@01)
  (<
    j@41@01
    (Seq_length ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))))))
; [eval] valid(slot(a, 3).val[j], 3, true)
; [eval] slot(a, 3).val[j]
; [eval] slot(a, 3)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 3))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 1))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 0))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 2))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
    :qid |qp.fvfValDef16|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
              (pTaken@29@01 r))
            (pTaken@36@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
    :qid |qp.fvfValDef17|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@15@01 3) (slot<Ref> a@15@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@15@01 3) (slot<Ref> a@15@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@15@01 3) (slot<Ref> a@15@01 0))
          $Perm.Write
          $Perm.No))
      (ite (= (slot<Ref> a@15@01 3) (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No))
    (ite
      (and
        (img@19@01 (slot<Ref> a@15@01 3))
        (and
          (<= 0 (inv@18@01 (slot<Ref> a@15@01 3)))
          (< (inv@18@01 (slot<Ref> a@15@01 3)) (len<Int> a@15@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@21@01 (slot<Ref> a@15@01 3)))
            (pTaken@23@01 (slot<Ref> a@15@01 3)))
          (pTaken@29@01 (slot<Ref> a@15@01 3)))
        (pTaken@36@01 (slot<Ref> a@15@01 3)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@41@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
  j@41@01) 3 true))
(pop) ; 6
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
  j@41@01) 3 true))
(pop) ; 5
(push) ; 5
; [else-branch: 11 | !(0 <= j@41@01 && j@41@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, 3))|)]
(assert (not
  (and
    (<= 0 j@41@01)
    (<
      j@41@01
      (Seq_length
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (=>
  (and
    (<= 0 j@41@01)
    (<
      j@41@01
      (Seq_length
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))
  (and
    (<= 0 j@41@01)
    (<
      j@41@01
      (Seq_length
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
      j@41@01) 3 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@41@01)
      (<
        j@41@01
        (Seq_length
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))))))
  (and
    (<= 0 j@41@01)
    (<
      j@41@01
      (Seq_length
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@43@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@15@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@43@01  $FPM) r))
  :qid |qp.resPrmSumDef18|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@41@01 Int)) (!
  (and
    (or (<= 0 j@41@01) (not (<= 0 j@41@01)))
    (=>
      (and
        (<= 0 j@41@01)
        (<
          j@41@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))
      (and
        (<= 0 j@41@01)
        (<
          j@41@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
          j@41@01) 3 true)))
    (or
      (not
        (and
          (<= 0 j@41@01)
          (<
            j@41@01
            (Seq_length
              ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))))))
      (and
        (<= 0 j@41@01)
        (<
          j@41@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
    j@41@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@77@10@78@37-aux|)))
(assert (forall ((j@41@01 Int)) (!
  (=>
    (and
      (<= 0 j@41@01)
      (<
        j@41@01
        (Seq_length
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
      j@41@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
    j@41@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@77@10@78@37_precondition|)))
(push) ; 3
(assert (not (forall ((j@41@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 j@41@01)
          (<
            j@41@01
            (Seq_length
              ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
          j@41@01) 3 true))
      (and
        (<= 0 j@41@01)
        (<
          j@41@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
      j@41@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
    j@41@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@77@10@78@37|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@41@01 Int)) (!
  (=>
    (and
      (<= 0 j@41@01)
      (<
        j@41@01
        (Seq_length
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3)))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
      j@41@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 3))
    j@41@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@77@10@78@37|)))
; [exec]
; n := 4
(declare-const i@44@01 Int)
(declare-const oldSoln@45@01 Seq<Int>)
(declare-const n@46@01 Int)
(declare-const soln@47@01 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@48@01 $Snap)
(assert (= $t@48@01 ($Snap.combine ($Snap.first $t@48@01) ($Snap.second $t@48@01))))
(assert (= ($Snap.first $t@48@01) $Snap.unit))
; [eval] 4 <= n
(assert (<= 4 n@46@01))
(assert (=
  ($Snap.second $t@48@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@48@01))
    ($Snap.second ($Snap.second $t@48@01)))))
(assert (= ($Snap.first ($Snap.second $t@48@01)) $Snap.unit))
; [eval] n <= 51
(assert (<= n@46@01 51))
(assert (=
  ($Snap.second ($Snap.second $t@48@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@48@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@48@01))) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@48@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))))
(declare-const i@49@01 Int)
(push) ; 4
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 5
; [then-branch: 12 | !(0 <= i@49@01) | live]
; [else-branch: 12 | 0 <= i@49@01 | live]
(push) ; 6
; [then-branch: 12 | !(0 <= i@49@01)]
(assert (not (<= 0 i@49@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 12 | 0 <= i@49@01]
(assert (<= 0 i@49@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@49@01) (not (<= 0 i@49@01))))
(assert (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01))))
; [eval] slot(a, i)
(pop) ; 4
(declare-fun inv@50@01 ($Ref) Int)
(declare-fun img@51@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@49@01 Int)) (!
  (=>
    (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01)))
    (or (<= 0 i@49@01) (not (<= 0 i@49@01))))
  :pattern ((slot<Ref> a@15@01 i@49@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@49@01 Int) (i2@49@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@49@01) (< i1@49@01 (len<Int> a@15@01)))
      (and (<= 0 i2@49@01) (< i2@49@01 (len<Int> a@15@01)))
      (= (slot<Ref> a@15@01 i1@49@01) (slot<Ref> a@15@01 i2@49@01)))
    (= i1@49@01 i2@49@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@49@01 Int)) (!
  (=>
    (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01)))
    (and
      (= (inv@50@01 (slot<Ref> a@15@01 i@49@01)) i@49@01)
      (img@51@01 (slot<Ref> a@15@01 i@49@01))))
  :pattern ((slot<Ref> a@15@01 i@49@01))
  :qid |quant-u-22561|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@51@01 r)
      (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
    (= (slot<Ref> a@15@01 (inv@50@01 r)) r))
  :pattern ((inv@50@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@49@01 Int)) (!
  (=>
    (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01)))
    (not (= (slot<Ref> a@15@01 i@49@01) $Ref.null)))
  :pattern ((slot<Ref> a@15@01 i@49@01))
  :qid |val-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))
  $Snap.unit))
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@52@01 Int)
(declare-const j@53@01 Int)
(push) ; 4
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 5
; [then-branch: 13 | !(0 <= m@52@01) | live]
; [else-branch: 13 | 0 <= m@52@01 | live]
(push) ; 6
; [then-branch: 13 | !(0 <= m@52@01)]
(assert (not (<= 0 m@52@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 13 | 0 <= m@52@01]
(assert (<= 0 m@52@01))
; [eval] m < n
(push) ; 7
; [then-branch: 14 | !(m@52@01 < n@46@01) | live]
; [else-branch: 14 | m@52@01 < n@46@01 | live]
(push) ; 8
; [then-branch: 14 | !(m@52@01 < n@46@01)]
(assert (not (< m@52@01 n@46@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 14 | m@52@01 < n@46@01]
(assert (< m@52@01 n@46@01))
; [eval] 0 <= j
(push) ; 9
; [then-branch: 15 | !(0 <= j@53@01) | live]
; [else-branch: 15 | 0 <= j@53@01 | live]
(push) ; 10
; [then-branch: 15 | !(0 <= j@53@01)]
(assert (not (<= 0 j@53@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 15 | 0 <= j@53@01]
(assert (<= 0 j@53@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(push) ; 11
(assert (not (and
  (img@51@01 (slot<Ref> a@15@01 m@52@01))
  (and
    (<= 0 (inv@50@01 (slot<Ref> a@15@01 m@52@01)))
    (< (inv@50@01 (slot<Ref> a@15@01 m@52@01)) (len<Int> a@15@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@53@01) (not (<= 0 j@53@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (< m@52@01 n@46@01)
  (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01))))))
(assert (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 m@52@01)
  (and
    (<= 0 m@52@01)
    (=>
      (< m@52@01 n@46@01)
      (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
    (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01))))))
(assert (or (<= 0 m@52@01) (not (<= 0 m@52@01))))
(push) ; 5
; [then-branch: 16 | 0 <= m@52@01 && m@52@01 < n@46@01 && 0 <= j@53@01 && j@53@01 < |Lookup(val, First:(Second:(Second:(Second:($t@48@01)))), slot[Ref](a@15@01, m@52@01))| | live]
; [else-branch: 16 | !(0 <= m@52@01 && m@52@01 < n@46@01 && 0 <= j@53@01 && j@53@01 < |Lookup(val, First:(Second:(Second:(Second:($t@48@01)))), slot[Ref](a@15@01, m@52@01))|) | live]
(push) ; 6
; [then-branch: 16 | 0 <= m@52@01 && m@52@01 < n@46@01 && 0 <= j@53@01 && j@53@01 < |Lookup(val, First:(Second:(Second:(Second:($t@48@01)))), slot[Ref](a@15@01, m@52@01))|]
(assert (and
  (<= 0 m@52@01)
  (and
    (< m@52@01 n@46@01)
    (and
      (<= 0 j@53@01)
      (<
        j@53@01
        (Seq_length
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(push) ; 7
(assert (not (and
  (img@51@01 (slot<Ref> a@15@01 m@52@01))
  (and
    (<= 0 (inv@50@01 (slot<Ref> a@15@01 m@52@01)))
    (< (inv@50@01 (slot<Ref> a@15@01 m@52@01)) (len<Int> a@15@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@53@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
  j@53@01) m@52@01 true))
(pop) ; 7
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
  j@53@01) m@52@01 true))
(pop) ; 6
(push) ; 6
; [else-branch: 16 | !(0 <= m@52@01 && m@52@01 < n@46@01 && 0 <= j@53@01 && j@53@01 < |Lookup(val, First:(Second:(Second:(Second:($t@48@01)))), slot[Ref](a@15@01, m@52@01))|)]
(assert (not
  (and
    (<= 0 m@52@01)
    (and
      (< m@52@01 n@46@01)
      (and
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 m@52@01)
    (and
      (< m@52@01 n@46@01)
      (and
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
  (and
    (<= 0 m@52@01)
    (< m@52@01 n@46@01)
    (<= 0 j@53@01)
    (<
      j@53@01
      (Seq_length
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
      j@53@01) m@52@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@52@01)
      (and
        (< m@52@01 n@46@01)
        (and
          (<= 0 j@53@01)
          (<
            j@53@01
            (Seq_length
              ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
  (and
    (<= 0 m@52@01)
    (and
      (< m@52@01 n@46@01)
      (and
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (and
    (=>
      (<= 0 m@52@01)
      (and
        (<= 0 m@52@01)
        (=>
          (< m@52@01 n@46@01)
          (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
        (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01)))))
    (or (<= 0 m@52@01) (not (<= 0 m@52@01)))
    (=>
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
      (and
        (<= 0 m@52@01)
        (< m@52@01 n@46@01)
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
          j@53@01) m@52@01 true)))
    (or
      (not
        (and
          (<= 0 m@52@01)
          (and
            (< m@52@01 n@46@01)
            (and
              (<= 0 j@53@01)
              (<
                j@53@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (and
    (=>
      (<= 0 m@52@01)
      (and
        (<= 0 m@52@01)
        (=>
          (< m@52@01 n@46@01)
          (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
        (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01)))))
    (or (<= 0 m@52@01) (not (<= 0 m@52@01)))
    (=>
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
      (and
        (<= 0 m@52@01)
        (< m@52@01 n@46@01)
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
          j@53@01) m@52@01 true)))
    (or
      (not
        (and
          (<= 0 m@52@01)
          (and
            (< m@52@01 n@46@01)
            (and
              (<= 0 j@53@01)
              (<
                j@53@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (and
    (=>
      (<= 0 m@52@01)
      (and
        (<= 0 m@52@01)
        (=>
          (< m@52@01 n@46@01)
          (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
        (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01)))))
    (or (<= 0 m@52@01) (not (<= 0 m@52@01)))
    (=>
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
      (and
        (<= 0 m@52@01)
        (< m@52@01 n@46@01)
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
          j@53@01) m@52@01 true)))
    (or
      (not
        (and
          (<= 0 m@52@01)
          (and
            (< m@52@01 n@46@01)
            (and
              (<= 0 j@53@01)
              (<
                j@53@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (=>
    (and
      (<= 0 m@52@01)
      (and
        (< m@52@01 n@46@01)
        (and
          (<= 0 j@53@01)
          (<
            j@53@01
            (Seq_length
              ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
      j@53@01) m@52@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39|)))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] 4 <= n
; [eval] n <= 51
; [eval] len(a) == 51
; [eval] len(a)
(declare-const i@54@01 Int)
(push) ; 4
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 5
; [then-branch: 17 | !(0 <= i@54@01) | live]
; [else-branch: 17 | 0 <= i@54@01 | live]
(push) ; 6
; [then-branch: 17 | !(0 <= i@54@01)]
(assert (not (<= 0 i@54@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 17 | 0 <= i@54@01]
(assert (<= 0 i@54@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@54@01) (not (<= 0 i@54@01))))
(assert (and (<= 0 i@54@01) (< i@54@01 (len<Int> a@15@01))))
; [eval] slot(a, i)
(pop) ; 4
(declare-fun inv@55@01 ($Ref) Int)
(declare-fun img@56@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@54@01 Int)) (!
  (=>
    (and (<= 0 i@54@01) (< i@54@01 (len<Int> a@15@01)))
    (or (<= 0 i@54@01) (not (<= 0 i@54@01))))
  :pattern ((slot<Ref> a@15@01 i@54@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@54@01 Int) (i2@54@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@54@01) (< i1@54@01 (len<Int> a@15@01)))
      (and (<= 0 i2@54@01) (< i2@54@01 (len<Int> a@15@01)))
      (= (slot<Ref> a@15@01 i1@54@01) (slot<Ref> a@15@01 i2@54@01)))
    (= i1@54@01 i2@54@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@54@01 Int)) (!
  (=>
    (and (<= 0 i@54@01) (< i@54@01 (len<Int> a@15@01)))
    (and
      (= (inv@55@01 (slot<Ref> a@15@01 i@54@01)) i@54@01)
      (img@56@01 (slot<Ref> a@15@01 i@54@01))))
  :pattern ((slot<Ref> a@15@01 i@54@01))
  :qid |val-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@56@01 r)
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01))))
    (= (slot<Ref> a@15@01 (inv@55@01 r)) r))
  :pattern ((inv@55@01 r))
  :qid |val-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@57@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    ($Perm.min
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@58@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 3)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@57@01 r)))
    $Perm.No))
(define-fun pTaken@59@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r)))
    $Perm.No))
(define-fun pTaken@60@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No)
      (- (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r)) (pTaken@59@01 r)))
    $Perm.No))
(define-fun pTaken@61@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r))
          (pTaken@59@01 r))
        (pTaken@60@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r))
        $Perm.No)
      (pTaken@57@01 r))
    $Perm.No)
  
  :qid |quant-u-22564|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    (= (- $Perm.Write (pTaken@57@01 r)) $Perm.No))
  
  :qid |quant-u-22565|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@15@01 3) (slot<Ref> a@15@01 3)) $Perm.Write $Perm.No)
    (pTaken@58@01 (slot<Ref> a@15@01 3)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    (= (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r)) $Perm.No))
  
  :qid |quant-u-22567|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@15@01 1) (slot<Ref> a@15@01 1)) $Perm.Write $Perm.No)
    (pTaken@59@01 (slot<Ref> a@15@01 1)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    (=
      (- (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r)) (pTaken@59@01 r))
      $Perm.No))
  
  :qid |quant-u-22569|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@15@01 0) (slot<Ref> a@15@01 0)) $Perm.Write $Perm.No)
    (pTaken@60@01 (slot<Ref> a@15@01 0)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r))
          (pTaken@59@01 r))
        (pTaken@60@01 r))
      $Perm.No))
  
  :qid |quant-u-22571|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@15@01 2) (slot<Ref> a@15@01 2)) $Perm.Write $Perm.No)
    (pTaken@61@01 (slot<Ref> a@15@01 2)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@55@01 r)) (< (inv@55@01 r) (len<Int> a@15@01)))
      (img@56@01 r)
      (= r (slot<Ref> a@15@01 (inv@55@01 r))))
    (=
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@57@01 r)) (pTaken@58@01 r))
            (pTaken@59@01 r))
          (pTaken@60@01 r))
        (pTaken@61@01 r))
      $Perm.No))
  
  :qid |quant-u-22573|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@62@01 Int)
(declare-const j@63@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 5
; [then-branch: 18 | !(0 <= m@62@01) | live]
; [else-branch: 18 | 0 <= m@62@01 | live]
(push) ; 6
; [then-branch: 18 | !(0 <= m@62@01)]
(assert (not (<= 0 m@62@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 18 | 0 <= m@62@01]
(assert (<= 0 m@62@01))
; [eval] m < n
(push) ; 7
; [then-branch: 19 | !(m@62@01 < 4) | live]
; [else-branch: 19 | m@62@01 < 4 | live]
(push) ; 8
; [then-branch: 19 | !(m@62@01 < 4)]
(assert (not (< m@62@01 4)))
(pop) ; 8
(push) ; 8
; [else-branch: 19 | m@62@01 < 4]
(assert (< m@62@01 4))
; [eval] 0 <= j
(push) ; 9
; [then-branch: 20 | !(0 <= j@63@01) | live]
; [else-branch: 20 | 0 <= j@63@01 | live]
(push) ; 10
; [then-branch: 20 | !(0 <= j@63@01)]
(assert (not (<= 0 j@63@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 20 | 0 <= j@63@01]
(assert (<= 0 j@63@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 3))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 1))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 0))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 2))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
    :qid |qp.fvfValDef16|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
              (pTaken@29@01 r))
            (pTaken@36@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
    :qid |qp.fvfValDef17|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@19@01 (slot<Ref> a@15@01 m@62@01))
        (and
          (<= 0 (inv@18@01 (slot<Ref> a@15@01 m@62@01)))
          (< (inv@18@01 (slot<Ref> a@15@01 m@62@01)) (len<Int> a@15@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@21@01 (slot<Ref> a@15@01 m@62@01)))
            (pTaken@23@01 (slot<Ref> a@15@01 m@62@01)))
          (pTaken@29@01 (slot<Ref> a@15@01 m@62@01)))
        (pTaken@36@01 (slot<Ref> a@15@01 m@62@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (or (<= 0 j@63@01) (not (<= 0 j@63@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (=> (< m@62@01 4) (and (< m@62@01 4) (or (<= 0 j@63@01) (not (<= 0 j@63@01))))))
(assert (or (< m@62@01 4) (not (< m@62@01 4))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (=>
  (<= 0 m@62@01)
  (and
    (<= 0 m@62@01)
    (=>
      (< m@62@01 4)
      (and (< m@62@01 4) (or (<= 0 j@63@01) (not (<= 0 j@63@01)))))
    (or (< m@62@01 4) (not (< m@62@01 4))))))
(assert (or (<= 0 m@62@01) (not (<= 0 m@62@01))))
(push) ; 5
; [then-branch: 21 | 0 <= m@62@01 && m@62@01 < 4 && 0 <= j@63@01 && j@63@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, m@62@01))| | live]
; [else-branch: 21 | !(0 <= m@62@01 && m@62@01 < 4 && 0 <= j@63@01 && j@63@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, m@62@01))|) | live]
(push) ; 6
; [then-branch: 21 | 0 <= m@62@01 && m@62@01 < 4 && 0 <= j@63@01 && j@63@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, m@62@01))|]
(assert (and
  (<= 0 m@62@01)
  (and
    (< m@62@01 4)
    (and
      (<= 0 j@63@01)
      (<
        j@63@01
        (Seq_length
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 3))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
    :qid |qp.fvfValDef13|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 1))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
    :qid |qp.fvfValDef14|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 0))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
    :qid |qp.fvfValDef15|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 2))
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
    :qid |qp.fvfValDef16|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@19@01 r)
          (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
              (pTaken@29@01 r))
            (pTaken@36@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
    :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
    :qid |qp.fvfValDef17|))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@15@01 m@62@01) (slot<Ref> a@15@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@19@01 (slot<Ref> a@15@01 m@62@01))
        (and
          (<= 0 (inv@18@01 (slot<Ref> a@15@01 m@62@01)))
          (< (inv@18@01 (slot<Ref> a@15@01 m@62@01)) (len<Int> a@15@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@21@01 (slot<Ref> a@15@01 m@62@01)))
            (pTaken@23@01 (slot<Ref> a@15@01 m@62@01)))
          (pTaken@29@01 (slot<Ref> a@15@01 m@62@01)))
        (pTaken@36@01 (slot<Ref> a@15@01 m@62@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@63@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
  j@63@01) m@62@01 true))
(pop) ; 7
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
  j@63@01) m@62@01 true))
(pop) ; 6
(push) ; 6
; [else-branch: 21 | !(0 <= m@62@01 && m@62@01 < 4 && 0 <= j@63@01 && j@63@01 < |Lookup(val, sm@42@01, slot[Ref](a@15@01, m@62@01))|)]
(assert (not
  (and
    (<= 0 m@62@01)
    (and
      (< m@62@01 4)
      (and
        (<= 0 j@63@01)
        (<
          j@63@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
(assert (=>
  (and
    (<= 0 m@62@01)
    (and
      (< m@62@01 4)
      (and
        (<= 0 j@63@01)
        (<
          j@63@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
  (and
    (<= 0 m@62@01)
    (< m@62@01 4)
    (<= 0 j@63@01)
    (<
      j@63@01
      (Seq_length
        ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
      j@63@01) m@62@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@62@01)
      (and
        (< m@62@01 4)
        (and
          (<= 0 j@63@01)
          (<
            j@63@01
            (Seq_length
              ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))))))
  (and
    (<= 0 m@62@01)
    (and
      (< m@62@01 4)
      (and
        (<= 0 j@63@01)
        (<
          j@63@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 3))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@40@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@40@01  $FVF<val>) r))
  :qid |qp.fvfValDef13|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 1))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@25@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@25@01  $FVF<val>) r))
  :qid |qp.fvfValDef14|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 0))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@22@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@22@01  $FVF<val>) r))
  :qid |qp.fvfValDef15|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 2))
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@32@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@32@01  $FVF<val>) r))
  :qid |qp.fvfValDef16|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@19@01 r)
        (and (<= 0 (inv@18@01 r)) (< (inv@18@01 r) (len<Int> a@15@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@21@01 r)) (pTaken@23@01 r))
            (pTaken@29@01 r))
          (pTaken@36@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r)))
  :pattern (($FVF.lookup_val (as sm@42@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@16@01)) r))
  :qid |qp.fvfValDef17|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@62@01 Int) (j@63@01 Int)) (!
  (and
    (=>
      (<= 0 m@62@01)
      (and
        (<= 0 m@62@01)
        (=>
          (< m@62@01 4)
          (and (< m@62@01 4) (or (<= 0 j@63@01) (not (<= 0 j@63@01)))))
        (or (< m@62@01 4) (not (< m@62@01 4)))))
    (or (<= 0 m@62@01) (not (<= 0 m@62@01)))
    (=>
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
      (and
        (<= 0 m@62@01)
        (< m@62@01 4)
        (<= 0 j@63@01)
        (<
          j@63@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
          j@63@01) m@62@01 true)))
    (or
      (not
        (and
          (<= 0 m@62@01)
          (and
            (< m@62@01 4)
            (and
              (<= 0 j@63@01)
              (<
                j@63@01
                (Seq_length
                  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))))))
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@62@01 Int) (j@63@01 Int)) (!
  (and
    (=>
      (<= 0 m@62@01)
      (and
        (<= 0 m@62@01)
        (=>
          (< m@62@01 4)
          (and (< m@62@01 4) (or (<= 0 j@63@01) (not (<= 0 j@63@01)))))
        (or (< m@62@01 4) (not (< m@62@01 4)))))
    (or (<= 0 m@62@01) (not (<= 0 m@62@01)))
    (=>
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
      (and
        (<= 0 m@62@01)
        (< m@62@01 4)
        (<= 0 j@63@01)
        (<
          j@63@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
          j@63@01) m@62@01 true)))
    (or
      (not
        (and
          (<= 0 m@62@01)
          (and
            (< m@62@01 4)
            (and
              (<= 0 j@63@01)
              (<
                j@63@01
                (Seq_length
                  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))))))
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@62@01 Int) (j@63@01 Int)) (!
  (and
    (=>
      (<= 0 m@62@01)
      (and
        (<= 0 m@62@01)
        (=>
          (< m@62@01 4)
          (and (< m@62@01 4) (or (<= 0 j@63@01) (not (<= 0 j@63@01)))))
        (or (< m@62@01 4) (not (< m@62@01 4)))))
    (or (<= 0 m@62@01) (not (<= 0 m@62@01)))
    (=>
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
      (and
        (<= 0 m@62@01)
        (< m@62@01 4)
        (<= 0 j@63@01)
        (<
          j@63@01
          (Seq_length
            ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
          j@63@01) m@62@01 true)))
    (or
      (not
        (and
          (<= 0 m@62@01)
          (and
            (< m@62@01 4)
            (and
              (<= 0 j@63@01)
              (<
                j@63@01
                (Seq_length
                  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))))))
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@62@01 Int) (j@63@01 Int)) (!
  (=>
    (and
      (<= 0 m@62@01)
      (and
        (< m@62@01 4)
        (and
          (<= 0 j@63@01)
          (<
            j@63@01
            (Seq_length
              ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
      j@63@01) m@62@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39_precondition|)))
(push) ; 4
(assert (not (forall ((m@62@01 Int) (j@63@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 m@62@01)
          (and
            (< m@62@01 4)
            (and
              (<= 0 j@63@01)
              (<
                j@63@01
                (Seq_length
                  ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
          j@63@01) m@62@01 true))
      (and
        (<= 0 m@62@01)
        (and
          (< m@62@01 4)
          (and
            (<= 0 j@63@01)
            (<
              j@63@01
              (Seq_length
                ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
      j@63@01) m@62@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((m@62@01 Int) (j@63@01 Int)) (!
  (=>
    (and
      (<= 0 m@62@01)
      (and
        (< m@62@01 4)
        (and
          (<= 0 j@63@01)
          (<
            j@63@01
            (Seq_length
              ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
      j@63@01) m@62@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@42@01  $FVF<val>) (slot<Ref> a@15@01 m@62@01))
    j@63@01) m@62@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@51@01 r)
      (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
    (= (slot<Ref> a@15@01 (inv@50@01 r)) r))
  :pattern ((inv@50@01 r))
  :qid |val-fctOfInv|)))
(assert (forall ((i@49@01 Int)) (!
  (=>
    (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01)))
    (and
      (= (inv@50@01 (slot<Ref> a@15@01 i@49@01)) i@49@01)
      (img@51@01 (slot<Ref> a@15@01 i@49@01))))
  :pattern ((slot<Ref> a@15@01 i@49@01))
  :qid |quant-u-22561|)))
(assert (forall ((i@49@01 Int)) (!
  (=>
    (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01)))
    (not (= (slot<Ref> a@15@01 i@49@01) $Ref.null)))
  :pattern ((slot<Ref> a@15@01 i@49@01))
  :qid |val-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01))))
  $Snap.unit))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (and
    (=>
      (<= 0 m@52@01)
      (and
        (<= 0 m@52@01)
        (=>
          (< m@52@01 n@46@01)
          (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
        (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01)))))
    (or (<= 0 m@52@01) (not (<= 0 m@52@01)))
    (=>
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
      (and
        (<= 0 m@52@01)
        (< m@52@01 n@46@01)
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
          j@53@01) m@52@01 true)))
    (or
      (not
        (and
          (<= 0 m@52@01)
          (and
            (< m@52@01 n@46@01)
            (and
              (<= 0 j@53@01)
              (<
                j@53@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (and
    (=>
      (<= 0 m@52@01)
      (and
        (<= 0 m@52@01)
        (=>
          (< m@52@01 n@46@01)
          (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
        (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01)))))
    (or (<= 0 m@52@01) (not (<= 0 m@52@01)))
    (=>
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
      (and
        (<= 0 m@52@01)
        (< m@52@01 n@46@01)
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
          j@53@01) m@52@01 true)))
    (or
      (not
        (and
          (<= 0 m@52@01)
          (and
            (< m@52@01 n@46@01)
            (and
              (<= 0 j@53@01)
              (<
                j@53@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (and
    (=>
      (<= 0 m@52@01)
      (and
        (<= 0 m@52@01)
        (=>
          (< m@52@01 n@46@01)
          (and (< m@52@01 n@46@01) (or (<= 0 j@53@01) (not (<= 0 j@53@01)))))
        (or (< m@52@01 n@46@01) (not (< m@52@01 n@46@01)))))
    (or (<= 0 m@52@01) (not (<= 0 m@52@01)))
    (=>
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
      (and
        (<= 0 m@52@01)
        (< m@52@01 n@46@01)
        (<= 0 j@53@01)
        (<
          j@53@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
          j@53@01) m@52@01 true)))
    (or
      (not
        (and
          (<= 0 m@52@01)
          (and
            (< m@52@01 n@46@01)
            (and
              (<= 0 j@53@01)
              (<
                j@53@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))))))))
      (and
        (<= 0 m@52@01)
        (and
          (< m@52@01 n@46@01)
          (and
            (<= 0 j@53@01)
            (<
              j@53@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@52@01 Int) (j@53@01 Int)) (!
  (=>
    (and
      (<= 0 m@52@01)
      (and
        (< m@52@01 n@46@01)
        (and
          (<= 0 j@53@01)
          (<
            j@53@01
            (Seq_length
              ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
      j@53@01) m@52@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) (slot<Ref> a@15@01 m@52@01))
    j@53@01) m@52@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39|)))
(assert (= $t@48@01 ($Snap.combine ($Snap.first $t@48@01) ($Snap.second $t@48@01))))
(assert (= ($Snap.first $t@48@01) $Snap.unit))
(assert (<= 4 n@46@01))
(assert (=
  ($Snap.second $t@48@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@48@01))
    ($Snap.second ($Snap.second $t@48@01)))))
(assert (= ($Snap.first ($Snap.second $t@48@01)) $Snap.unit))
(assert (<= n@46@01 51))
(assert (=
  ($Snap.second ($Snap.second $t@48@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@48@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@48@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@48@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@48@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@48@01)))))))
(assert (forall ((i@49@01 Int)) (!
  (=>
    (and (<= 0 i@49@01) (< i@49@01 (len<Int> a@15@01)))
    (or (<= 0 i@49@01) (not (<= 0 i@49@01))))
  :pattern ((slot<Ref> a@15@01 i@49@01))
  :qid |val-aux|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] n <= 50
(pop) ; 5
(push) ; 5
; [eval] !(n <= 50)
; [eval] n <= 50
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] n <= 50
(push) ; 5
(set-option :timeout 10)
(assert (not (not (<= n@46@01 50))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<= n@46@01 50)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | n@46@01 <= 50 | live]
; [else-branch: 22 | !(n@46@01 <= 50) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 22 | n@46@01 <= 50]
(assert (<= n@46@01 50))
; [exec]
; var i: Int
(declare-const i@64@01 Int)
; [exec]
; slot(a, n).val := Seq[Seq[Int]]()
; [eval] slot(a, n)
; [eval] Seq[Seq[Int]]()
; Precomputing data for removing quantified permissions
(define-fun pTaken@65@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@65@01 r))
    $Perm.No)
  
  :qid |quant-u-22575|))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@65@01 r) $Perm.No)
  
  :qid |quant-u-22576|))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (= (- $Perm.Write (pTaken@65@01 r)) $Perm.No))
  
  :qid |quant-u-22577|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@66@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@66@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  (as Seq_empty  Seq<Seq<Int>>)))
; [exec]
; i := 0
(declare-const oldSoln@67@01 Seq<Int>)
(declare-const soln@68@01 Seq<Int>)
(declare-const i@69@01 Int)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 ($Snap.combine ($Snap.first $t@70@01) ($Snap.second $t@70@01))))
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@71@01 $FVF<val>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_val (as sm@71@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@70@01))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
  (not (= (slot<Ref> a@15@01 (- n@46@01 1)) $Ref.null))))
(assert (=
  ($Snap.second $t@70@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@01))
    ($Snap.second ($Snap.second $t@70@01)))))
(assert (= ($Snap.first ($Snap.second $t@70@01)) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (=
  ($Snap.second ($Snap.second $t@70@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@01))) $Snap.unit))
; [eval] 0 <= i
(assert (<= 0 i@69@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  $Snap.unit))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(push) ; 7
(assert (not (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@69@01
  (Seq_length
    ($FVF.lookup_val (as sm@71@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
; [eval] slot(a, n)
(declare-const sm@72@01 $FVF<val>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_val (as sm@72@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
    (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1))))
  (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
  (not (= (slot<Ref> a@15@01 n@46@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
  $Snap.unit))
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(declare-const sm@73@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
(declare-const pm@74@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@74@01  $FPM) r)
    (+
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_val (as pm@74@01  $FPM) r))
  :qid |qp.resPrmSumDef21|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_val (as pm@74@01  $FPM) (slot<Ref> a@15@01 n@46@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  i@69@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  $Snap.unit))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@75@01 Int)
(declare-const n1@76@01 Int)
(push) ; 7
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 8
; [then-branch: 23 | n1@76@01 != n@46@01 - 1 | live]
; [else-branch: 23 | n1@76@01 == n@46@01 - 1 | live]
(push) ; 9
; [then-branch: 23 | n1@76@01 != n@46@01 - 1]
(assert (not (= n1@76@01 (- n@46@01 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 23 | n1@76@01 == n@46@01 - 1]
(assert (= n1@76@01 (- n@46@01 1)))
; [eval] 0 <= j
(push) ; 10
; [then-branch: 24 | !(0 <= j@75@01) | live]
; [else-branch: 24 | 0 <= j@75@01 | live]
(push) ; 11
; [then-branch: 24 | !(0 <= j@75@01)]
(assert (not (<= 0 j@75@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 24 | 0 <= j@75@01]
(assert (<= 0 j@75@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
(assert (or (<= 0 j@75@01) (not (<= 0 j@75@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
(assert (=>
  (= n1@76@01 (- n@46@01 1))
  (and (= n1@76@01 (- n@46@01 1)) (or (<= 0 j@75@01) (not (<= 0 j@75@01))))))
(assert (or (= n1@76@01 (- n@46@01 1)) (not (= n1@76@01 (- n@46@01 1)))))
(push) ; 8
; [then-branch: 25 | n1@76@01 == n@46@01 - 1 && 0 <= j@75@01 && j@75@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))| | live]
; [else-branch: 25 | !(n1@76@01 == n@46@01 - 1 && 0 <= j@75@01 && j@75@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))|) | live]
(push) ; 9
; [then-branch: 25 | n1@76@01 == n@46@01 - 1 && 0 <= j@75@01 && j@75@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))|]
(assert (and
  (= n1@76@01 (- n@46@01 1))
  (and
    (<= 0 j@75@01)
    (<
      j@75@01
      (Seq_length
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n1@76@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n1@76@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@75@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@75@01
  (Seq_length
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
  j@75@01) (- n@46@01 1) true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
  j@75@01) (- n@46@01 1) true))
(pop) ; 9
(push) ; 9
; [else-branch: 25 | !(n1@76@01 == n@46@01 - 1 && 0 <= j@75@01 && j@75@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))|)]
(assert (not
  (and
    (= n1@76@01 (- n@46@01 1))
    (and
      (<= 0 j@75@01)
      (<
        j@75@01
        (Seq_length
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
(assert (=>
  (and
    (= n1@76@01 (- n@46@01 1))
    (and
      (<= 0 j@75@01)
      (<
        j@75@01
        (Seq_length
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))
  (and
    (= n1@76@01 (- n@46@01 1))
    (<= 0 j@75@01)
    (<
      j@75@01
      (Seq_length
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
      j@75@01) (- n@46@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@76@01 (- n@46@01 1))
      (and
        (<= 0 j@75@01)
        (<
          j@75@01
          (Seq_length
            ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1))))))))
  (and
    (= n1@76@01 (- n@46@01 1))
    (and
      (<= 0 j@75@01)
      (<
        j@75@01
        (Seq_length
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@75@01 Int) (n1@76@01 Int)) (!
  (and
    (=>
      (= n1@76@01 (- n@46@01 1))
      (and (= n1@76@01 (- n@46@01 1)) (or (<= 0 j@75@01) (not (<= 0 j@75@01)))))
    (or (= n1@76@01 (- n@46@01 1)) (not (= n1@76@01 (- n@46@01 1))))
    (=>
      (and
        (= n1@76@01 (- n@46@01 1))
        (and
          (<= 0 j@75@01)
          (<
            j@75@01
            (Seq_length
              ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))
      (and
        (= n1@76@01 (- n@46@01 1))
        (<= 0 j@75@01)
        (<
          j@75@01
          (Seq_length
            ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
          j@75@01) (- n@46@01 1) true)))
    (or
      (not
        (and
          (= n1@76@01 (- n@46@01 1))
          (and
            (<= 0 j@75@01)
            (<
              j@75@01
              (Seq_length
                ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1))))))))
      (and
        (= n1@76@01 (- n@46@01 1))
        (and
          (<= 0 j@75@01)
          (<
            j@75@01
            (Seq_length
              ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
    j@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44-aux|)))
(assert (forall ((j@75@01 Int) (n1@76@01 Int)) (!
  (=>
    (and
      (= n1@76@01 (- n@46@01 1))
      (and
        (<= 0 j@75@01)
        (<
          j@75@01
          (Seq_length
            ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
      j@75@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
    j@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  $Snap.unit))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@77@01 Int)
(push) ; 7
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 8
; [then-branch: 26 | !(0 <= j@77@01) | live]
; [else-branch: 26 | 0 <= j@77@01 | live]
(push) ; 9
; [then-branch: 26 | !(0 <= j@77@01)]
(assert (not (<= 0 j@77@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 26 | 0 <= j@77@01]
(assert (<= 0 j@77@01))
; [eval] j < i
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@77@01) (not (<= 0 j@77@01))))
(push) ; 8
; [then-branch: 27 | 0 <= j@77@01 && j@77@01 < i@69@01 | live]
; [else-branch: 27 | !(0 <= j@77@01 && j@77@01 < i@69@01) | live]
(push) ; 9
; [then-branch: 27 | 0 <= j@77@01 && j@77@01 < i@69@01]
(assert (and (<= 0 j@77@01) (< j@77@01 i@69@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@77@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@77@01
  (Seq_length
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@77@01) n@46@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@77@01) n@46@01 true))
(pop) ; 9
(push) ; 9
; [else-branch: 27 | !(0 <= j@77@01 && j@77@01 < i@69@01)]
(assert (not (and (<= 0 j@77@01) (< j@77@01 i@69@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
(assert (=>
  (and (<= 0 j@77@01) (< j@77@01 i@69@01))
  (and
    (<= 0 j@77@01)
    (< j@77@01 i@69@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@77@01) n@46@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@77@01) (< j@77@01 i@69@01)))
  (and (<= 0 j@77@01) (< j@77@01 i@69@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@77@01 Int)) (!
  (and
    (or (<= 0 j@77@01) (not (<= 0 j@77@01)))
    (=>
      (and (<= 0 j@77@01) (< j@77@01 i@69@01))
      (and
        (<= 0 j@77@01)
        (< j@77@01 i@69@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@77@01) n@46@01 true)))
    (or
      (not (and (<= 0 j@77@01) (< j@77@01 i@69@01)))
      (and (<= 0 j@77@01) (< j@77@01 i@69@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104-aux|)))
(assert (forall ((j@77@01 Int)) (!
  (=>
    (and (<= 0 j@77@01) (< j@77@01 i@69@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@77@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|)))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
(push) ; 7
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@78@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    ($Perm.min
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- $Perm.Write (pTaken@65@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@79@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@78@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- $Perm.Write (pTaken@65@01 r))
        $Perm.No)
      (pTaken@78@01 r))
    $Perm.No)
  
  :qid |quant-u-22579|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@78@01 r) $Perm.No)
  
  :qid |quant-u-22580|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@78@01 r)) $Perm.No))
  
  :qid |quant-u-22581|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@80@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
(declare-const pm@81@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@81@01  $FPM) r)
    (+
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- $Perm.Write (pTaken@65@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@81@01  $FPM) r))
  :qid |qp.resPrmSumDef24|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@81@01  $FPM) (slot<Ref> a@15@01 (- n@46@01 1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<=
  0
  (Seq_length
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (Seq_length
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
; [eval] slot(a, n)
; Precomputing data for removing quantified permissions
(define-fun pTaken@82@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@83@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@82@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (pTaken@82@01 (slot<Ref> a@15@01 n@46@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (= (- $Perm.Write (pTaken@82@01 r)) $Perm.No))
  
  :qid |quant-u-22584|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
    :qid |qp.fvfValDef22|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
    :qid |qp.fvfValDef23|))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@51@01 (slot<Ref> a@15@01 n@46@01))
        (and
          (<= 0 (inv@50@01 (slot<Ref> a@15@01 n@46@01)))
          (< (inv@50@01 (slot<Ref> a@15@01 n@46@01)) (len<Int> a@15@01))))
      (- $Perm.Write (pTaken@65@01 (slot<Ref> a@15@01 n@46@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  0))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@84@01 Int)
(declare-const n1@85@01 Int)
(push) ; 7
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 8
; [then-branch: 28 | n1@85@01 != n@46@01 - 1 | live]
; [else-branch: 28 | n1@85@01 == n@46@01 - 1 | live]
(push) ; 9
; [then-branch: 28 | n1@85@01 != n@46@01 - 1]
(assert (not (= n1@85@01 (- n@46@01 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 28 | n1@85@01 == n@46@01 - 1]
(assert (= n1@85@01 (- n@46@01 1)))
; [eval] 0 <= j
(push) ; 10
; [then-branch: 29 | !(0 <= j@84@01) | live]
; [else-branch: 29 | 0 <= j@84@01 | live]
(push) ; 11
; [then-branch: 29 | !(0 <= j@84@01)]
(assert (not (<= 0 j@84@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 29 | 0 <= j@84@01]
(assert (<= 0 j@84@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
    :qid |qp.fvfValDef22|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
    :qid |qp.fvfValDef23|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@51@01 (slot<Ref> a@15@01 (- n@46@01 1)))
        (and
          (<= 0 (inv@50@01 (slot<Ref> a@15@01 (- n@46@01 1))))
          (< (inv@50@01 (slot<Ref> a@15@01 (- n@46@01 1))) (len<Int> a@15@01))))
      (- $Perm.Write (pTaken@65@01 (slot<Ref> a@15@01 (- n@46@01 1))))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
(assert (or (<= 0 j@84@01) (not (<= 0 j@84@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
(assert (=>
  (= n1@85@01 (- n@46@01 1))
  (and (= n1@85@01 (- n@46@01 1)) (or (<= 0 j@84@01) (not (<= 0 j@84@01))))))
(assert (or (= n1@85@01 (- n@46@01 1)) (not (= n1@85@01 (- n@46@01 1)))))
(push) ; 8
; [then-branch: 30 | n1@85@01 == n@46@01 - 1 && 0 <= j@84@01 && j@84@01 < |Lookup(val, sm@80@01, slot[Ref](a@15@01, n@46@01 - 1))| | live]
; [else-branch: 30 | !(n1@85@01 == n@46@01 - 1 && 0 <= j@84@01 && j@84@01 < |Lookup(val, sm@80@01, slot[Ref](a@15@01, n@46@01 - 1))|) | live]
(push) ; 9
; [then-branch: 30 | n1@85@01 == n@46@01 - 1 && 0 <= j@84@01 && j@84@01 < |Lookup(val, sm@80@01, slot[Ref](a@15@01, n@46@01 - 1))|]
(assert (and
  (= n1@85@01 (- n@46@01 1))
  (and
    (<= 0 j@84@01)
    (<
      j@84@01
      (Seq_length
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
    :qid |qp.fvfValDef22|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
    :qid |qp.fvfValDef23|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n1@85@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@51@01 (slot<Ref> a@15@01 n1@85@01))
        (and
          (<= 0 (inv@50@01 (slot<Ref> a@15@01 n1@85@01)))
          (< (inv@50@01 (slot<Ref> a@15@01 n1@85@01)) (len<Int> a@15@01))))
      (- $Perm.Write (pTaken@65@01 (slot<Ref> a@15@01 n1@85@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@84@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@84@01
  (Seq_length
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
  j@84@01) (- n@46@01 1) true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
  j@84@01) (- n@46@01 1) true))
(pop) ; 9
(push) ; 9
; [else-branch: 30 | !(n1@85@01 == n@46@01 - 1 && 0 <= j@84@01 && j@84@01 < |Lookup(val, sm@80@01, slot[Ref](a@15@01, n@46@01 - 1))|)]
(assert (not
  (and
    (= n1@85@01 (- n@46@01 1))
    (and
      (<= 0 j@84@01)
      (<
        j@84@01
        (Seq_length
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
(assert (=>
  (and
    (= n1@85@01 (- n@46@01 1))
    (and
      (<= 0 j@84@01)
      (<
        j@84@01
        (Seq_length
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))
  (and
    (= n1@85@01 (- n@46@01 1))
    (<= 0 j@84@01)
    (<
      j@84@01
      (Seq_length
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
      j@84@01) (- n@46@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@85@01 (- n@46@01 1))
      (and
        (<= 0 j@84@01)
        (<
          j@84@01
          (Seq_length
            ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1))))))))
  (and
    (= n1@85@01 (- n@46@01 1))
    (and
      (<= 0 j@84@01)
      (<
        j@84@01
        (Seq_length
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@84@01 Int) (n1@85@01 Int)) (!
  (and
    (=>
      (= n1@85@01 (- n@46@01 1))
      (and (= n1@85@01 (- n@46@01 1)) (or (<= 0 j@84@01) (not (<= 0 j@84@01)))))
    (or (= n1@85@01 (- n@46@01 1)) (not (= n1@85@01 (- n@46@01 1))))
    (=>
      (and
        (= n1@85@01 (- n@46@01 1))
        (and
          (<= 0 j@84@01)
          (<
            j@84@01
            (Seq_length
              ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))
      (and
        (= n1@85@01 (- n@46@01 1))
        (<= 0 j@84@01)
        (<
          j@84@01
          (Seq_length
            ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
          j@84@01) (- n@46@01 1) true)))
    (or
      (not
        (and
          (= n1@85@01 (- n@46@01 1))
          (and
            (<= 0 j@84@01)
            (<
              j@84@01
              (Seq_length
                ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1))))))))
      (and
        (= n1@85@01 (- n@46@01 1))
        (and
          (<= 0 j@84@01)
          (<
            j@84@01
            (Seq_length
              ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
    j@84@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44-aux|)))
(assert (forall ((j@84@01 Int) (n1@85@01 Int)) (!
  (=>
    (and
      (= n1@85@01 (- n@46@01 1))
      (and
        (<= 0 j@84@01)
        (<
          j@84@01
          (Seq_length
            ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
      j@84@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
    j@84@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44_precondition|)))
(push) ; 7
(assert (not (forall ((j@84@01 Int) (n1@85@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@85@01 (- n@46@01 1))
          (and
            (<= 0 j@84@01)
            (<
              j@84@01
              (Seq_length
                ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
          j@84@01) (- n@46@01 1) true))
      (and
        (= n1@85@01 (- n@46@01 1))
        (and
          (<= 0 j@84@01)
          (<
            j@84@01
            (Seq_length
              ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
      j@84@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
    j@84@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@84@01 Int) (n1@85@01 Int)) (!
  (=>
    (and
      (= n1@85@01 (- n@46@01 1))
      (and
        (<= 0 j@84@01)
        (<
          j@84@01
          (Seq_length
            ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
      j@84@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n1@85@01))
    j@84@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@86@01 Int)
(push) ; 7
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 8
; [then-branch: 31 | !(0 <= j@86@01) | live]
; [else-branch: 31 | 0 <= j@86@01 | live]
(push) ; 9
; [then-branch: 31 | !(0 <= j@86@01)]
(assert (not (<= 0 j@86@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 31 | 0 <= j@86@01]
(assert (<= 0 j@86@01))
; [eval] j < i
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@86@01) (not (<= 0 j@86@01))))
(push) ; 8
; [then-branch: 32 | 0 <= j@86@01 && j@86@01 < 0 | live]
; [else-branch: 32 | !(0 <= j@86@01 && j@86@01 < 0) | live]
(push) ; 9
; [then-branch: 32 | 0 <= j@86@01 && j@86@01 < 0]
(assert (and (<= 0 j@86@01) (< j@86@01 0)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
    :qid |qp.fvfValDef22|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
    :qid |qp.fvfValDef23|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@51@01 (slot<Ref> a@15@01 n@46@01))
        (and
          (<= 0 (inv@50@01 (slot<Ref> a@15@01 n@46@01)))
          (< (inv@50@01 (slot<Ref> a@15@01 n@46@01)) (len<Int> a@15@01))))
      (- $Perm.Write (pTaken@65@01 (slot<Ref> a@15@01 n@46@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@86@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@86@01
  (Seq_length
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@86@01) n@46@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@86@01) n@46@01 true))
(pop) ; 9
(push) ; 9
; [else-branch: 32 | !(0 <= j@86@01 && j@86@01 < 0)]
(assert (not (and (<= 0 j@86@01) (< j@86@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
(assert (=>
  (and (<= 0 j@86@01) (< j@86@01 0))
  (and
    (<= 0 j@86@01)
    (< j@86@01 0)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@86@01) n@46@01 true))))
; Joined path conditions
(assert (or (not (and (<= 0 j@86@01) (< j@86@01 0))) (and (<= 0 j@86@01) (< j@86@01 0))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@66@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@66@01  $FVF<val>) r))
  :qid |qp.fvfValDef22|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- $Perm.Write (pTaken@65@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@80@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef23|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@86@01 Int)) (!
  (and
    (or (<= 0 j@86@01) (not (<= 0 j@86@01)))
    (=>
      (and (<= 0 j@86@01) (< j@86@01 0))
      (and
        (<= 0 j@86@01)
        (< j@86@01 0)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@86@01) n@46@01 true)))
    (or
      (not (and (<= 0 j@86@01) (< j@86@01 0)))
      (and (<= 0 j@86@01) (< j@86@01 0))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104-aux|)))
(assert (forall ((j@86@01 Int)) (!
  (=>
    (and (<= 0 j@86@01) (< j@86@01 0))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@86@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104_precondition|)))
(push) ; 7
(assert (not (forall ((j@86@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@86@01) (< j@86@01 0))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@86@01) n@46@01 true))
      (and (<= 0 j@86@01) (< j@86@01 0)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@86@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@86@01 Int)) (!
  (=>
    (and (<= 0 j@86@01) (< j@86@01 0))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@86@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@80@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@86@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef19|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef20|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@74@01  $FPM) r)
    (+
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_val (as pm@74@01  $FPM) r))
  :qid |qp.resPrmSumDef21|)))
(assert (=
  ($FVF.lookup_val (as sm@72@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
  (not (= (slot<Ref> a@15@01 n@46@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  i@69@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  $Snap.unit))
(assert (forall ((j@75@01 Int) (n1@76@01 Int)) (!
  (and
    (=>
      (= n1@76@01 (- n@46@01 1))
      (and (= n1@76@01 (- n@46@01 1)) (or (<= 0 j@75@01) (not (<= 0 j@75@01)))))
    (or (= n1@76@01 (- n@46@01 1)) (not (= n1@76@01 (- n@46@01 1))))
    (=>
      (and
        (= n1@76@01 (- n@46@01 1))
        (and
          (<= 0 j@75@01)
          (<
            j@75@01
            (Seq_length
              ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))
      (and
        (= n1@76@01 (- n@46@01 1))
        (<= 0 j@75@01)
        (<
          j@75@01
          (Seq_length
            ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
          j@75@01) (- n@46@01 1) true)))
    (or
      (not
        (and
          (= n1@76@01 (- n@46@01 1))
          (and
            (<= 0 j@75@01)
            (<
              j@75@01
              (Seq_length
                ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1))))))))
      (and
        (= n1@76@01 (- n@46@01 1))
        (and
          (<= 0 j@75@01)
          (<
            j@75@01
            (Seq_length
              ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
    j@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44-aux|)))
(assert (forall ((j@75@01 Int) (n1@76@01 Int)) (!
  (=>
    (and
      (= n1@76@01 (- n@46@01 1))
      (and
        (<= 0 j@75@01)
        (<
          j@75@01
          (Seq_length
            ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
      j@75@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n1@76@01))
    j@75@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  $Snap.unit))
(assert (forall ((j@77@01 Int)) (!
  (and
    (or (<= 0 j@77@01) (not (<= 0 j@77@01)))
    (=>
      (and (<= 0 j@77@01) (< j@77@01 i@69@01))
      (and
        (<= 0 j@77@01)
        (< j@77@01 i@69@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@77@01) n@46@01 true)))
    (or
      (not (and (<= 0 j@77@01) (< j@77@01 i@69@01)))
      (and (<= 0 j@77@01) (< j@77@01 i@69@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104-aux|)))
(assert (forall ((j@77@01 Int)) (!
  (=>
    (and (<= 0 j@77@01) (< j@77@01 i@69@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@77@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@77@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|)))
(assert (=
  ($FVF.lookup_val (as sm@71@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@70@01))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
  (not (= (slot<Ref> a@15@01 (- n@46@01 1)) $Ref.null))))
(assert (=
  ($Snap.second $t@70@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@01))
    ($Snap.second ($Snap.second $t@70@01)))))
(assert (= ($Snap.first ($Snap.second $t@70@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@70@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@01))) $Snap.unit))
(assert (<= 0 i@69@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  $Snap.unit))
(assert (<=
  i@69@01
  (Seq_length
    ($FVF.lookup_val (as sm@71@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
(assert (= $t@70@01 ($Snap.combine ($Snap.first $t@70@01) ($Snap.second $t@70@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [eval] !(i < |slot(a, n - 1).val|)
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    i@69@01
    (Seq_length
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  i@69@01
  (Seq_length
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | i@69@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))| | live]
; [else-branch: 33 | !(i@69@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))|) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 33 | i@69@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))|]
(assert (<
  i@69@01
  (Seq_length
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
; [exec]
; var oldSoln: Seq[Int]
(declare-const oldSoln@87@01 Seq<Int>)
; [exec]
; var soln: Seq[Int]
(declare-const soln@88@01 Seq<Int>)
; [exec]
; oldSoln := slot(a, n - 1).val[i]
; [eval] slot(a, n - 1).val[i]
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= i@69@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const oldSoln@89@01 Seq<Int>)
(assert (=
  oldSoln@89@01
  (Seq_index
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))
    i@69@01)))
; [eval] oldSoln[0] == 0
; [eval] oldSoln[0]
(push) ; 9
(assert (not (< 0 (Seq_length oldSoln@89@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (Seq_index oldSoln@89@01 0) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index oldSoln@89@01 0) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | oldSoln@89@01[0] == 0 | live]
; [else-branch: 34 | oldSoln@89@01[0] != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 34 | oldSoln@89@01[0] == 0]
(assert (= (Seq_index oldSoln@89@01 0) 0))
; [exec]
; soln := oldSoln[1 := oldSoln[1] + 1]
; [eval] oldSoln[1 := oldSoln[1] + 1]
; [eval] oldSoln[1] + 1
; [eval] oldSoln[1]
(push) ; 10
(assert (not (< 1 (Seq_length oldSoln@89@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< 1 (Seq_length oldSoln@89@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const soln@90@01 Seq<Int>)
(assert (=
  soln@90@01
  (Seq_append
    (Seq_take oldSoln@89@01 1)
    (Seq_append
      (Seq_singleton (+ (Seq_index oldSoln@89@01 1) 1))
      (Seq_drop oldSoln@89@01 2)))))
; [exec]
; assert valid(soln, n, true)
; [eval] valid(soln, n, true)
(push) ; 10
(assert (valid%precondition $Snap.unit soln@90@01 n@46@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit soln@90@01 n@46@01 true))
(push) ; 10
(assert (not (valid $Snap.unit soln@90@01 n@46@01 true)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit soln@90@01 n@46@01 true))
; [exec]
; slot(a, n).val := slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
; [eval] slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(soln)
(assert (= (Seq_length (Seq_singleton soln@90@01)) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@91@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@92@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@91@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (pTaken@91@01 (slot<Ref> a@15@01 n@46@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (= (- $Perm.Write (pTaken@91@01 r)) $Perm.No))
  
  :qid |quant-u-22587|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@93@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@93@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  (Seq_append
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    (Seq_singleton soln@90@01))))
; [exec]
; i := i + 1
; [eval] i + 1
(declare-const i@94@01 Int)
(assert (= i@94@01 (+ i@69@01 1)))
; Loop head block: Re-establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
; Precomputing data for removing quantified permissions
(define-fun pTaken@95@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@96@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@95@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@95@01 (slot<Ref> a@15@01 (- n@46@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@95@01 r)) $Perm.No))
  
  :qid |quant-u-22590|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
(set-option :timeout 0)
(push) ; 10
(assert (not (<= 0 i@94@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i@94@01))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@97@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
(declare-const pm@98@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@98@01  $FPM) r)
    (+
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@98@01  $FPM) r))
  :qid |qp.resPrmSumDef27|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@98@01  $FPM) (slot<Ref> a@15@01 (- n@46@01 1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  i@94@01
  (Seq_length
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@94@01
  (Seq_length
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
; [eval] slot(a, n)
; Precomputing data for removing quantified permissions
(define-fun pTaken@99@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (pTaken@99@01 (slot<Ref> a@15@01 n@46@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (= (- $Perm.Write (pTaken@99@01 r)) $Perm.No))
  
  :qid |quant-u-22593|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef26|))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  i@94@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  i@94@01))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@100@01 Int)
(declare-const n1@101@01 Int)
(push) ; 10
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 11
; [then-branch: 35 | n1@101@01 != n@46@01 - 1 | live]
; [else-branch: 35 | n1@101@01 == n@46@01 - 1 | live]
(push) ; 12
; [then-branch: 35 | n1@101@01 != n@46@01 - 1]
(assert (not (= n1@101@01 (- n@46@01 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 35 | n1@101@01 == n@46@01 - 1]
(assert (= n1@101@01 (- n@46@01 1)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 36 | !(0 <= j@100@01) | live]
; [else-branch: 36 | 0 <= j@100@01 | live]
(push) ; 14
; [then-branch: 36 | !(0 <= j@100@01)]
(assert (not (<= 0 j@100@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 36 | 0 <= j@100@01]
(assert (<= 0 j@100@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef26|))))
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
(assert (or (<= 0 j@100@01) (not (<= 0 j@100@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
(assert (=>
  (= n1@101@01 (- n@46@01 1))
  (and (= n1@101@01 (- n@46@01 1)) (or (<= 0 j@100@01) (not (<= 0 j@100@01))))))
(assert (or (= n1@101@01 (- n@46@01 1)) (not (= n1@101@01 (- n@46@01 1)))))
(push) ; 11
; [then-branch: 37 | n1@101@01 == n@46@01 - 1 && 0 <= j@100@01 && j@100@01 < |Lookup(val, sm@97@01, slot[Ref](a@15@01, n@46@01 - 1))| | live]
; [else-branch: 37 | !(n1@101@01 == n@46@01 - 1 && 0 <= j@100@01 && j@100@01 < |Lookup(val, sm@97@01, slot[Ref](a@15@01, n@46@01 - 1))|) | live]
(push) ; 12
; [then-branch: 37 | n1@101@01 == n@46@01 - 1 && 0 <= j@100@01 && j@100@01 < |Lookup(val, sm@97@01, slot[Ref](a@15@01, n@46@01 - 1))|]
(assert (and
  (= n1@101@01 (- n@46@01 1))
  (and
    (<= 0 j@100@01)
    (<
      j@100@01
      (Seq_length
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef26|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n1@101@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n1@101@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@100@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@100@01
  (Seq_length
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
  j@100@01) (- n@46@01 1) true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
  j@100@01) (- n@46@01 1) true))
(pop) ; 12
(push) ; 12
; [else-branch: 37 | !(n1@101@01 == n@46@01 - 1 && 0 <= j@100@01 && j@100@01 < |Lookup(val, sm@97@01, slot[Ref](a@15@01, n@46@01 - 1))|)]
(assert (not
  (and
    (= n1@101@01 (- n@46@01 1))
    (and
      (<= 0 j@100@01)
      (<
        j@100@01
        (Seq_length
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
(assert (=>
  (and
    (= n1@101@01 (- n@46@01 1))
    (and
      (<= 0 j@100@01)
      (<
        j@100@01
        (Seq_length
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))
  (and
    (= n1@101@01 (- n@46@01 1))
    (<= 0 j@100@01)
    (<
      j@100@01
      (Seq_length
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
      j@100@01) (- n@46@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@101@01 (- n@46@01 1))
      (and
        (<= 0 j@100@01)
        (<
          j@100@01
          (Seq_length
            ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1))))))))
  (and
    (= n1@101@01 (- n@46@01 1))
    (and
      (<= 0 j@100@01)
      (<
        j@100@01
        (Seq_length
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@100@01 Int) (n1@101@01 Int)) (!
  (and
    (=>
      (= n1@101@01 (- n@46@01 1))
      (and
        (= n1@101@01 (- n@46@01 1))
        (or (<= 0 j@100@01) (not (<= 0 j@100@01)))))
    (or (= n1@101@01 (- n@46@01 1)) (not (= n1@101@01 (- n@46@01 1))))
    (=>
      (and
        (= n1@101@01 (- n@46@01 1))
        (and
          (<= 0 j@100@01)
          (<
            j@100@01
            (Seq_length
              ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))
      (and
        (= n1@101@01 (- n@46@01 1))
        (<= 0 j@100@01)
        (<
          j@100@01
          (Seq_length
            ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
          j@100@01) (- n@46@01 1) true)))
    (or
      (not
        (and
          (= n1@101@01 (- n@46@01 1))
          (and
            (<= 0 j@100@01)
            (<
              j@100@01
              (Seq_length
                ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1))))))))
      (and
        (= n1@101@01 (- n@46@01 1))
        (and
          (<= 0 j@100@01)
          (<
            j@100@01
            (Seq_length
              ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
    j@100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44-aux|)))
(assert (forall ((j@100@01 Int) (n1@101@01 Int)) (!
  (=>
    (and
      (= n1@101@01 (- n@46@01 1))
      (and
        (<= 0 j@100@01)
        (<
          j@100@01
          (Seq_length
            ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
      j@100@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
    j@100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44_precondition|)))
(push) ; 10
(assert (not (forall ((j@100@01 Int) (n1@101@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@101@01 (- n@46@01 1))
          (and
            (<= 0 j@100@01)
            (<
              j@100@01
              (Seq_length
                ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
          j@100@01) (- n@46@01 1) true))
      (and
        (= n1@101@01 (- n@46@01 1))
        (and
          (<= 0 j@100@01)
          (<
            j@100@01
            (Seq_length
              ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
      j@100@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
    j@100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@100@01 Int) (n1@101@01 Int)) (!
  (=>
    (and
      (= n1@101@01 (- n@46@01 1))
      (and
        (<= 0 j@100@01)
        (<
          j@100@01
          (Seq_length
            ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
      j@100@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n1@101@01))
    j@100@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@102@01 Int)
(push) ; 10
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 11
; [then-branch: 38 | !(0 <= j@102@01) | live]
; [else-branch: 38 | 0 <= j@102@01 | live]
(push) ; 12
; [then-branch: 38 | !(0 <= j@102@01)]
(assert (not (<= 0 j@102@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 38 | 0 <= j@102@01]
(assert (<= 0 j@102@01))
; [eval] j < i
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@102@01) (not (<= 0 j@102@01))))
(push) ; 11
; [then-branch: 39 | 0 <= j@102@01 && j@102@01 < i@94@01 | live]
; [else-branch: 39 | !(0 <= j@102@01 && j@102@01 < i@94@01) | live]
(push) ; 12
; [then-branch: 39 | 0 <= j@102@01 && j@102@01 < i@94@01]
(assert (and (<= 0 j@102@01) (< j@102@01 i@94@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
    :qid |qp.fvfValDef25|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef26|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@102@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@102@01
  (Seq_length
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@102@01) n@46@01 true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@102@01) n@46@01 true))
(pop) ; 12
(push) ; 12
; [else-branch: 39 | !(0 <= j@102@01 && j@102@01 < i@94@01)]
(assert (not (and (<= 0 j@102@01) (< j@102@01 i@94@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
(assert (=>
  (and (<= 0 j@102@01) (< j@102@01 i@94@01))
  (and
    (<= 0 j@102@01)
    (< j@102@01 i@94@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@102@01) n@46@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@102@01) (< j@102@01 i@94@01)))
  (and (<= 0 j@102@01) (< j@102@01 i@94@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@93@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@93@01  $FVF<val>) r))
  :qid |qp.fvfValDef25|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@97@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef26|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@102@01 Int)) (!
  (and
    (or (<= 0 j@102@01) (not (<= 0 j@102@01)))
    (=>
      (and (<= 0 j@102@01) (< j@102@01 i@94@01))
      (and
        (<= 0 j@102@01)
        (< j@102@01 i@94@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@102@01) n@46@01 true)))
    (or
      (not (and (<= 0 j@102@01) (< j@102@01 i@94@01)))
      (and (<= 0 j@102@01) (< j@102@01 i@94@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104-aux|)))
(assert (forall ((j@102@01 Int)) (!
  (=>
    (and (<= 0 j@102@01) (< j@102@01 i@94@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@102@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104_precondition|)))
(push) ; 10
(assert (not (forall ((j@102@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@102@01) (< j@102@01 i@94@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@102@01) n@46@01 true))
      (and (<= 0 j@102@01) (< j@102@01 i@94@01)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@102@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@102@01 Int)) (!
  (=>
    (and (<= 0 j@102@01) (< j@102@01 i@94@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@102@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@97@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@102@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|)))
(pop) ; 9
(push) ; 9
; [else-branch: 34 | oldSoln@89@01[0] != 0]
(assert (not (= (Seq_index oldSoln@89@01 0) 0)))
(pop) ; 9
; [eval] !(oldSoln[0] == 0)
; [eval] oldSoln[0] == 0
; [eval] oldSoln[0]
(push) ; 9
(assert (not (< 0 (Seq_length oldSoln@89@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index oldSoln@89@01 0) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (Seq_index oldSoln@89@01 0) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 40 | oldSoln@89@01[0] != 0 | live]
; [else-branch: 40 | oldSoln@89@01[0] == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 40 | oldSoln@89@01[0] != 0]
(assert (not (= (Seq_index oldSoln@89@01 0) 0)))
; [exec]
; soln := Seq(0, 1) ++ oldSoln
; [eval] Seq(0, 1) ++ oldSoln
; [eval] Seq(0, 1)
(declare-const soln@103@01 Seq<Int>)
(assert (=
  soln@103@01
  (Seq_append (Seq_append (Seq_singleton 0) (Seq_singleton 1)) oldSoln@89@01)))
; [exec]
; assert soln[2..] == oldSoln
; [eval] soln[2..] == oldSoln
; [eval] soln[2..]
(push) ; 10
(assert (not (Seq_equal (Seq_drop soln@103@01 2) oldSoln@89@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal (Seq_drop soln@103@01 2) oldSoln@89@01))
; [exec]
; assert valid(oldSoln, n - 1, false)
; [eval] valid(oldSoln, n - 1, false)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit oldSoln@89@01 (- n@46@01 1) false))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit oldSoln@89@01 (- n@46@01 1) false))
(push) ; 10
(assert (not (valid $Snap.unit oldSoln@89@01 (- n@46@01 1) false)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit oldSoln@89@01 (- n@46@01 1) false))
; [exec]
; assert valid(soln, n, true)
; [eval] valid(soln, n, true)
(push) ; 10
(assert (valid%precondition $Snap.unit soln@103@01 n@46@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit soln@103@01 n@46@01 true))
(push) ; 10
(assert (not (valid $Snap.unit soln@103@01 n@46@01 true)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit soln@103@01 n@46@01 true))
; [exec]
; slot(a, n).val := slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
; [eval] slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef19|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@73@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@73@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef20|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(soln)
(assert (= (Seq_length (Seq_singleton soln@103@01)) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@104@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@105@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@104@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (pTaken@104@01 (slot<Ref> a@15@01 n@46@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (= (- $Perm.Write (pTaken@104@01 r)) $Perm.No))
  
  :qid |quant-u-22596|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@106@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@106@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  (Seq_append
    ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    (Seq_singleton soln@103@01))))
; [exec]
; i := i + 1
; [eval] i + 1
(declare-const i@107@01 Int)
(assert (= i@107@01 (+ i@69@01 1)))
; Loop head block: Re-establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
; Precomputing data for removing quantified permissions
(define-fun pTaken@108@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@109@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@108@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@108@01 (slot<Ref> a@15@01 (- n@46@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@108@01 r)) $Perm.No))
  
  :qid |quant-u-22599|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
(set-option :timeout 0)
(push) ; 10
(assert (not (<= 0 i@107@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i@107@01))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@110@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
(declare-const pm@111@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@111@01  $FPM) r)
    (+
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@111@01  $FPM) r))
  :qid |qp.resPrmSumDef30|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@111@01  $FPM) (slot<Ref> a@15@01 (- n@46@01 1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  i@107@01
  (Seq_length
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@107@01
  (Seq_length
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
; [eval] slot(a, n)
; Precomputing data for removing quantified permissions
(define-fun pTaken@112@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@15@01 n@46@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (pTaken@112@01 (slot<Ref> a@15@01 n@46@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (= (- $Perm.Write (pTaken@112@01 r)) $Perm.No))
  
  :qid |quant-u-22602|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
    :qid |qp.fvfValDef28|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef29|))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  i@107@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01)))
  i@107@01))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@113@01 Int)
(declare-const n1@114@01 Int)
(push) ; 10
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 11
; [then-branch: 41 | n1@114@01 != n@46@01 - 1 | live]
; [else-branch: 41 | n1@114@01 == n@46@01 - 1 | live]
(push) ; 12
; [then-branch: 41 | n1@114@01 != n@46@01 - 1]
(assert (not (= n1@114@01 (- n@46@01 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 41 | n1@114@01 == n@46@01 - 1]
(assert (= n1@114@01 (- n@46@01 1)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 42 | !(0 <= j@113@01) | live]
; [else-branch: 42 | 0 <= j@113@01 | live]
(push) ; 14
; [then-branch: 42 | !(0 <= j@113@01)]
(assert (not (<= 0 j@113@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 42 | 0 <= j@113@01]
(assert (<= 0 j@113@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
    :qid |qp.fvfValDef28|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef29|))))
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
(assert (or (<= 0 j@113@01) (not (<= 0 j@113@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
(assert (=>
  (= n1@114@01 (- n@46@01 1))
  (and (= n1@114@01 (- n@46@01 1)) (or (<= 0 j@113@01) (not (<= 0 j@113@01))))))
(assert (or (= n1@114@01 (- n@46@01 1)) (not (= n1@114@01 (- n@46@01 1)))))
(push) ; 11
; [then-branch: 43 | n1@114@01 == n@46@01 - 1 && 0 <= j@113@01 && j@113@01 < |Lookup(val, sm@110@01, slot[Ref](a@15@01, n@46@01 - 1))| | live]
; [else-branch: 43 | !(n1@114@01 == n@46@01 - 1 && 0 <= j@113@01 && j@113@01 < |Lookup(val, sm@110@01, slot[Ref](a@15@01, n@46@01 - 1))|) | live]
(push) ; 12
; [then-branch: 43 | n1@114@01 == n@46@01 - 1 && 0 <= j@113@01 && j@113@01 < |Lookup(val, sm@110@01, slot[Ref](a@15@01, n@46@01 - 1))|]
(assert (and
  (= n1@114@01 (- n@46@01 1))
  (and
    (<= 0 j@113@01)
    (<
      j@113@01
      (Seq_length
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
    :qid |qp.fvfValDef28|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef29|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n1@114@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n1@114@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@113@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@113@01
  (Seq_length
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
  j@113@01) (- n@46@01 1) true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
  j@113@01) (- n@46@01 1) true))
(pop) ; 12
(push) ; 12
; [else-branch: 43 | !(n1@114@01 == n@46@01 - 1 && 0 <= j@113@01 && j@113@01 < |Lookup(val, sm@110@01, slot[Ref](a@15@01, n@46@01 - 1))|)]
(assert (not
  (and
    (= n1@114@01 (- n@46@01 1))
    (and
      (<= 0 j@113@01)
      (<
        j@113@01
        (Seq_length
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
(assert (=>
  (and
    (= n1@114@01 (- n@46@01 1))
    (and
      (<= 0 j@113@01)
      (<
        j@113@01
        (Seq_length
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))
  (and
    (= n1@114@01 (- n@46@01 1))
    (<= 0 j@113@01)
    (<
      j@113@01
      (Seq_length
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
          n@46@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
      j@113@01) (- n@46@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@114@01 (- n@46@01 1))
      (and
        (<= 0 j@113@01)
        (<
          j@113@01
          (Seq_length
            ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1))))))))
  (and
    (= n1@114@01 (- n@46@01 1))
    (and
      (<= 0 j@113@01)
      (<
        j@113@01
        (Seq_length
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
            n@46@01
            1)))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@113@01 Int) (n1@114@01 Int)) (!
  (and
    (=>
      (= n1@114@01 (- n@46@01 1))
      (and
        (= n1@114@01 (- n@46@01 1))
        (or (<= 0 j@113@01) (not (<= 0 j@113@01)))))
    (or (= n1@114@01 (- n@46@01 1)) (not (= n1@114@01 (- n@46@01 1))))
    (=>
      (and
        (= n1@114@01 (- n@46@01 1))
        (and
          (<= 0 j@113@01)
          (<
            j@113@01
            (Seq_length
              ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))
      (and
        (= n1@114@01 (- n@46@01 1))
        (<= 0 j@113@01)
        (<
          j@113@01
          (Seq_length
            ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
          j@113@01) (- n@46@01 1) true)))
    (or
      (not
        (and
          (= n1@114@01 (- n@46@01 1))
          (and
            (<= 0 j@113@01)
            (<
              j@113@01
              (Seq_length
                ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1))))))))
      (and
        (= n1@114@01 (- n@46@01 1))
        (and
          (<= 0 j@113@01)
          (<
            j@113@01
            (Seq_length
              ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
    j@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44-aux|)))
(assert (forall ((j@113@01 Int) (n1@114@01 Int)) (!
  (=>
    (and
      (= n1@114@01 (- n@46@01 1))
      (and
        (<= 0 j@113@01)
        (<
          j@113@01
          (Seq_length
            ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
      j@113@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
    j@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44_precondition|)))
(push) ; 10
(assert (not (forall ((j@113@01 Int) (n1@114@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@114@01 (- n@46@01 1))
          (and
            (<= 0 j@113@01)
            (<
              j@113@01
              (Seq_length
                ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
                  n@46@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
          j@113@01) (- n@46@01 1) true))
      (and
        (= n1@114@01 (- n@46@01 1))
        (and
          (<= 0 j@113@01)
          (<
            j@113@01
            (Seq_length
              ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
                n@46@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
      j@113@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
    j@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@113@01 Int) (n1@114@01 Int)) (!
  (=>
    (and
      (= n1@114@01 (- n@46@01 1))
      (and
        (<= 0 j@113@01)
        (<
          j@113@01
          (Seq_length
            ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 (-
              n@46@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
      j@113@01) (- n@46@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n1@114@01))
    j@113@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@97@17@98@44|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@115@01 Int)
(push) ; 10
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 11
; [then-branch: 44 | !(0 <= j@115@01) | live]
; [else-branch: 44 | 0 <= j@115@01 | live]
(push) ; 12
; [then-branch: 44 | !(0 <= j@115@01)]
(assert (not (<= 0 j@115@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 44 | 0 <= j@115@01]
(assert (<= 0 j@115@01))
; [eval] j < i
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@115@01) (not (<= 0 j@115@01))))
(push) ; 11
; [then-branch: 45 | 0 <= j@115@01 && j@115@01 < i@107@01 | live]
; [else-branch: 45 | !(0 <= j@115@01 && j@115@01 < i@107@01) | live]
(push) ; 12
; [then-branch: 45 | 0 <= j@115@01 && j@115@01 < i@107@01]
(assert (and (<= 0 j@115@01) (< j@115@01 i@107@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
    :qid |qp.fvfValDef28|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef29|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@115@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@115@01
  (Seq_length
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@115@01) n@46@01 true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
  j@115@01) n@46@01 true))
(pop) ; 12
(push) ; 12
; [else-branch: 45 | !(0 <= j@115@01 && j@115@01 < i@107@01)]
(assert (not (and (<= 0 j@115@01) (< j@115@01 i@107@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
(assert (=>
  (and (<= 0 j@115@01) (< j@115@01 i@107@01))
  (and
    (<= 0 j@115@01)
    (< j@115@01 i@107@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@115@01) n@46@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@115@01) (< j@115@01 i@107@01)))
  (and (<= 0 j@115@01) (< j@115@01 i@107@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@106@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@106@01  $FVF<val>) r))
  :qid |qp.fvfValDef28|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@110@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef29|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@115@01 Int)) (!
  (and
    (or (<= 0 j@115@01) (not (<= 0 j@115@01)))
    (=>
      (and (<= 0 j@115@01) (< j@115@01 i@107@01))
      (and
        (<= 0 j@115@01)
        (< j@115@01 i@107@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@115@01) n@46@01 true)))
    (or
      (not (and (<= 0 j@115@01) (< j@115@01 i@107@01)))
      (and (<= 0 j@115@01) (< j@115@01 i@107@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104-aux|)))
(assert (forall ((j@115@01 Int)) (!
  (=>
    (and (<= 0 j@115@01) (< j@115@01 i@107@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@115@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104_precondition|)))
(push) ; 10
(assert (not (forall ((j@115@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@115@01) (< j@115@01 i@107@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
          j@115@01) n@46@01 true))
      (and (<= 0 j@115@01) (< j@115@01 i@107@01)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@115@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@115@01 Int)) (!
  (=>
    (and (<= 0 j@115@01) (< j@115@01 i@107@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
      j@115@01) n@46@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@110@01  $FVF<val>) (slot<Ref> a@15@01 n@46@01))
    j@115@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@99@17@99@104|)))
(pop) ; 9
(push) ; 9
; [else-branch: 40 | oldSoln@89@01[0] == 0]
(assert (= (Seq_index oldSoln@89@01 0) 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 33 | !(i@69@01 < |Lookup(val, sm@73@01, slot[Ref](a@15@01, n@46@01 - 1))|)]
(assert (not
  (<
    i@69@01
    (Seq_length
      ($FVF.lookup_val (as sm@73@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
(pop) ; 8
; [eval] !(i < |slot(a, n - 1).val|)
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@116@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef33|)))
(declare-const pm@117@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@117@01  $FPM) r)
    (+
      (+
        (ite
          (= r (slot<Ref> a@15@01 (- n@46@01 1)))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@117@01  $FPM) r))
  :qid |qp.resPrmSumDef34|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@117@01  $FPM) (slot<Ref> a@15@01 (- n@46@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  i@69@01
  (Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    i@69@01
    (Seq_length
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 46 | !(i@69@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, n@46@01 - 1))|) | live]
; [else-branch: 46 | i@69@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, n@46@01 - 1))| | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 46 | !(i@69@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, n@46@01 - 1))|)]
(assert (not
  (<
    i@69@01
    (Seq_length
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1)))))))
; [exec]
; n := n + 1
; [eval] n + 1
(declare-const n@118@01 Int)
(assert (= n@118@01 (+ n@46@01 1)))
; Loop head block: Re-establish invariant
; [eval] 4 <= n
(push) ; 9
(assert (not (<= 4 n@118@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 4 n@118@01))
; [eval] n <= 51
(push) ; 9
(assert (not (<= n@118@01 51)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= n@118@01 51))
; [eval] len(a) == 51
; [eval] len(a)
(declare-const i@119@01 Int)
(push) ; 9
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 10
; [then-branch: 47 | !(0 <= i@119@01) | live]
; [else-branch: 47 | 0 <= i@119@01 | live]
(push) ; 11
; [then-branch: 47 | !(0 <= i@119@01)]
(assert (not (<= 0 i@119@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 47 | 0 <= i@119@01]
(assert (<= 0 i@119@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@119@01) (not (<= 0 i@119@01))))
(assert (and (<= 0 i@119@01) (< i@119@01 (len<Int> a@15@01))))
; [eval] slot(a, i)
(pop) ; 9
(declare-fun inv@120@01 ($Ref) Int)
(declare-fun img@121@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@119@01 Int)) (!
  (=>
    (and (<= 0 i@119@01) (< i@119@01 (len<Int> a@15@01)))
    (or (<= 0 i@119@01) (not (<= 0 i@119@01))))
  :pattern ((slot<Ref> a@15@01 i@119@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((i1@119@01 Int) (i2@119@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@119@01) (< i1@119@01 (len<Int> a@15@01)))
      (and (<= 0 i2@119@01) (< i2@119@01 (len<Int> a@15@01)))
      (= (slot<Ref> a@15@01 i1@119@01) (slot<Ref> a@15@01 i2@119@01)))
    (= i1@119@01 i2@119@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@119@01 Int)) (!
  (=>
    (and (<= 0 i@119@01) (< i@119@01 (len<Int> a@15@01)))
    (and
      (= (inv@120@01 (slot<Ref> a@15@01 i@119@01)) i@119@01)
      (img@121@01 (slot<Ref> a@15@01 i@119@01))))
  :pattern ((slot<Ref> a@15@01 i@119@01))
  :qid |val-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@121@01 r)
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01))))
    (= (slot<Ref> a@15@01 (inv@120@01 r)) r))
  :pattern ((inv@120@01 r))
  :qid |val-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@122@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01)))
      (img@121@01 r)
      (= r (slot<Ref> a@15@01 (inv@120@01 r))))
    ($Perm.min
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@123@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01)))
      (img@121@01 r)
      (= r (slot<Ref> a@15@01 (inv@120@01 r))))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@122@01 r)))
    $Perm.No))
(define-fun pTaken@124@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01)))
      (img@121@01 r)
      (= r (slot<Ref> a@15@01 (inv@120@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@15@01 n@46@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@122@01 r)) (pTaken@123@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r))
        $Perm.No)
      (pTaken@122@01 r))
    $Perm.No)
  
  :qid |quant-u-22605|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01)))
      (img@121@01 r)
      (= r (slot<Ref> a@15@01 (inv@120@01 r))))
    (= (- $Perm.Write (pTaken@122@01 r)) $Perm.No))
  
  :qid |quant-u-22606|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 (- n@46@01 1)) (slot<Ref> a@15@01 (- n@46@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@123@01 (slot<Ref> a@15@01 (- n@46@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01)))
      (img@121@01 r)
      (= r (slot<Ref> a@15@01 (inv@120@01 r))))
    (= (- (- $Perm.Write (pTaken@122@01 r)) (pTaken@123@01 r)) $Perm.No))
  
  :qid |quant-u-22608|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@15@01 n@46@01) (slot<Ref> a@15@01 n@46@01))
      $Perm.Write
      $Perm.No)
    (pTaken@124@01 (slot<Ref> a@15@01 n@46@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@120@01 r)) (< (inv@120@01 r) (len<Int> a@15@01)))
      (img@121@01 r)
      (= r (slot<Ref> a@15@01 (inv@120@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@122@01 r)) (pTaken@123@01 r))
        (pTaken@124@01 r))
      $Perm.No))
  
  :qid |quant-u-22610|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@125@01 Int)
(declare-const j@126@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 10
; [then-branch: 48 | !(0 <= m@125@01) | live]
; [else-branch: 48 | 0 <= m@125@01 | live]
(push) ; 11
; [then-branch: 48 | !(0 <= m@125@01)]
(assert (not (<= 0 m@125@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 48 | 0 <= m@125@01]
(assert (<= 0 m@125@01))
; [eval] m < n
(push) ; 12
; [then-branch: 49 | !(m@125@01 < n@118@01) | live]
; [else-branch: 49 | m@125@01 < n@118@01 | live]
(push) ; 13
; [then-branch: 49 | !(m@125@01 < n@118@01)]
(assert (not (< m@125@01 n@118@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 49 | m@125@01 < n@118@01]
(assert (< m@125@01 n@118@01))
; [eval] 0 <= j
(push) ; 14
; [then-branch: 50 | !(0 <= j@126@01) | live]
; [else-branch: 50 | 0 <= j@126@01 | live]
(push) ; 15
; [then-branch: 50 | !(0 <= j@126@01)]
(assert (not (<= 0 j@126@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 50 | 0 <= j@126@01]
(assert (<= 0 j@126@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef31|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef32|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
    :qid |qp.fvfValDef33|))))
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@15@01 m@125@01) (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite
        (= (slot<Ref> a@15@01 m@125@01) (slot<Ref> a@15@01 n@46@01))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@51@01 (slot<Ref> a@15@01 m@125@01))
        (and
          (<= 0 (inv@50@01 (slot<Ref> a@15@01 m@125@01)))
          (< (inv@50@01 (slot<Ref> a@15@01 m@125@01)) (len<Int> a@15@01))))
      (-
        (- $Perm.Write (pTaken@65@01 (slot<Ref> a@15@01 m@125@01)))
        (pTaken@78@01 (slot<Ref> a@15@01 m@125@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef33|)))
(assert (or (<= 0 j@126@01) (not (<= 0 j@126@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef33|)))
(assert (=>
  (< m@125@01 n@118@01)
  (and (< m@125@01 n@118@01) (or (<= 0 j@126@01) (not (<= 0 j@126@01))))))
(assert (or (< m@125@01 n@118@01) (not (< m@125@01 n@118@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef33|)))
(assert (=>
  (<= 0 m@125@01)
  (and
    (<= 0 m@125@01)
    (=>
      (< m@125@01 n@118@01)
      (and (< m@125@01 n@118@01) (or (<= 0 j@126@01) (not (<= 0 j@126@01)))))
    (or (< m@125@01 n@118@01) (not (< m@125@01 n@118@01))))))
(assert (or (<= 0 m@125@01) (not (<= 0 m@125@01))))
(push) ; 10
; [then-branch: 51 | 0 <= m@125@01 && m@125@01 < n@118@01 && 0 <= j@126@01 && j@126@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, m@125@01))| | live]
; [else-branch: 51 | !(0 <= m@125@01 && m@125@01 < n@118@01 && 0 <= j@126@01 && j@126@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, m@125@01))|) | live]
(push) ; 11
; [then-branch: 51 | 0 <= m@125@01 && m@125@01 < n@118@01 && 0 <= j@126@01 && j@126@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, m@125@01))|]
(assert (and
  (<= 0 m@125@01)
  (and
    (< m@125@01 n@118@01)
    (and
      (<= 0 j@126@01)
      (<
        j@126@01
        (Seq_length
          ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 (- n@46@01 1)))
      (=
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
    :qid |qp.fvfValDef31|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@15@01 n@46@01))
      (=
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
    :qid |qp.fvfValDef32|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@51@01 r)
          (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
    :qid |qp.fvfValDef33|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@15@01 m@125@01) (slot<Ref> a@15@01 (- n@46@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite
        (= (slot<Ref> a@15@01 m@125@01) (slot<Ref> a@15@01 n@46@01))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@51@01 (slot<Ref> a@15@01 m@125@01))
        (and
          (<= 0 (inv@50@01 (slot<Ref> a@15@01 m@125@01)))
          (< (inv@50@01 (slot<Ref> a@15@01 m@125@01)) (len<Int> a@15@01))))
      (-
        (- $Perm.Write (pTaken@65@01 (slot<Ref> a@15@01 m@125@01)))
        (pTaken@78@01 (slot<Ref> a@15@01 m@125@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= j@126@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
  j@126@01) m@125@01 true))
(pop) ; 12
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
  j@126@01) m@125@01 true))
(pop) ; 11
(push) ; 11
; [else-branch: 51 | !(0 <= m@125@01 && m@125@01 < n@118@01 && 0 <= j@126@01 && j@126@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, m@125@01))|)]
(assert (not
  (and
    (<= 0 m@125@01)
    (and
      (< m@125@01 n@118@01)
      (and
        (<= 0 j@126@01)
        (<
          j@126@01
          (Seq_length
            ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef33|)))
(assert (=>
  (and
    (<= 0 m@125@01)
    (and
      (< m@125@01 n@118@01)
      (and
        (<= 0 j@126@01)
        (<
          j@126@01
          (Seq_length
            ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
  (and
    (<= 0 m@125@01)
    (< m@125@01 n@118@01)
    (<= 0 j@126@01)
    (<
      j@126@01
      (Seq_length
        ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
      j@126@01) m@125@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@125@01)
      (and
        (< m@125@01 n@118@01)
        (and
          (<= 0 j@126@01)
          (<
            j@126@01
            (Seq_length
              ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))))))
  (and
    (<= 0 m@125@01)
    (and
      (< m@125@01 n@118@01)
      (and
        (<= 0 j@126@01)
        (<
          j@126@01
          (Seq_length
            ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 (- n@46@01 1)))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@71@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@71@01  $FVF<val>) r))
  :qid |qp.fvfValDef31|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@15@01 n@46@01))
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@72@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@72@01  $FVF<val>) r))
  :qid |qp.fvfValDef32|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@51@01 r)
        (and (<= 0 (inv@50@01 r)) (< (inv@50@01 r) (len<Int> a@15@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@65@01 r)) (pTaken@78@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@116@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@48@01))))) r))
  :qid |qp.fvfValDef33|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@125@01 Int) (j@126@01 Int)) (!
  (and
    (=>
      (<= 0 m@125@01)
      (and
        (<= 0 m@125@01)
        (=>
          (< m@125@01 n@118@01)
          (and (< m@125@01 n@118@01) (or (<= 0 j@126@01) (not (<= 0 j@126@01)))))
        (or (< m@125@01 n@118@01) (not (< m@125@01 n@118@01)))))
    (or (<= 0 m@125@01) (not (<= 0 m@125@01)))
    (=>
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
      (and
        (<= 0 m@125@01)
        (< m@125@01 n@118@01)
        (<= 0 j@126@01)
        (<
          j@126@01
          (Seq_length
            ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
          j@126@01) m@125@01 true)))
    (or
      (not
        (and
          (<= 0 m@125@01)
          (and
            (< m@125@01 n@118@01)
            (and
              (<= 0 j@126@01)
              (<
                j@126@01
                (Seq_length
                  ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))))))
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@125@01 Int) (j@126@01 Int)) (!
  (and
    (=>
      (<= 0 m@125@01)
      (and
        (<= 0 m@125@01)
        (=>
          (< m@125@01 n@118@01)
          (and (< m@125@01 n@118@01) (or (<= 0 j@126@01) (not (<= 0 j@126@01)))))
        (or (< m@125@01 n@118@01) (not (< m@125@01 n@118@01)))))
    (or (<= 0 m@125@01) (not (<= 0 m@125@01)))
    (=>
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
      (and
        (<= 0 m@125@01)
        (< m@125@01 n@118@01)
        (<= 0 j@126@01)
        (<
          j@126@01
          (Seq_length
            ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
          j@126@01) m@125@01 true)))
    (or
      (not
        (and
          (<= 0 m@125@01)
          (and
            (< m@125@01 n@118@01)
            (and
              (<= 0 j@126@01)
              (<
                j@126@01
                (Seq_length
                  ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))))))
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@125@01 Int) (j@126@01 Int)) (!
  (and
    (=>
      (<= 0 m@125@01)
      (and
        (<= 0 m@125@01)
        (=>
          (< m@125@01 n@118@01)
          (and (< m@125@01 n@118@01) (or (<= 0 j@126@01) (not (<= 0 j@126@01)))))
        (or (< m@125@01 n@118@01) (not (< m@125@01 n@118@01)))))
    (or (<= 0 m@125@01) (not (<= 0 m@125@01)))
    (=>
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
      (and
        (<= 0 m@125@01)
        (< m@125@01 n@118@01)
        (<= 0 j@126@01)
        (<
          j@126@01
          (Seq_length
            ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
          j@126@01) m@125@01 true)))
    (or
      (not
        (and
          (<= 0 m@125@01)
          (and
            (< m@125@01 n@118@01)
            (and
              (<= 0 j@126@01)
              (<
                j@126@01
                (Seq_length
                  ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))))))
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39-aux|)))
(assert (forall ((m@125@01 Int) (j@126@01 Int)) (!
  (=>
    (and
      (<= 0 m@125@01)
      (and
        (< m@125@01 n@118@01)
        (and
          (<= 0 j@126@01)
          (<
            j@126@01
            (Seq_length
              ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
      j@126@01) m@125@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39_precondition|)))
(push) ; 9
(assert (not (forall ((m@125@01 Int) (j@126@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 m@125@01)
          (and
            (< m@125@01 n@118@01)
            (and
              (<= 0 j@126@01)
              (<
                j@126@01
                (Seq_length
                  ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
          j@126@01) m@125@01 true))
      (and
        (<= 0 m@125@01)
        (and
          (< m@125@01 n@118@01)
          (and
            (<= 0 j@126@01)
            (<
              j@126@01
              (Seq_length
                ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
      j@126@01) m@125@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((m@125@01 Int) (j@126@01 Int)) (!
  (=>
    (and
      (<= 0 m@125@01)
      (and
        (< m@125@01 n@118@01)
        (and
          (<= 0 j@126@01)
          (<
            j@126@01
            (Seq_length
              ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
      j@126@01) m@125@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 m@125@01))
    j@126@01) m@125@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@85@13@86@39|)))
(pop) ; 8
(push) ; 8
; [else-branch: 46 | i@69@01 < |Lookup(val, sm@116@01, slot[Ref](a@15@01, n@46@01 - 1))|]
(assert (<
  i@69@01
  (Seq_length
    ($FVF.lookup_val (as sm@116@01  $FVF<val>) (slot<Ref> a@15@01 (- n@46@01 1))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 22 | !(n@46@01 <= 50)]
(assert (not (<= n@46@01 50)))
(pop) ; 5
; [eval] !(n <= 50)
; [eval] n <= 50
(push) ; 5
(set-option :timeout 10)
(assert (not (<= n@46@01 50)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (<= n@46@01 50))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | !(n@46@01 <= 50) | live]
; [else-branch: 52 | n@46@01 <= 50 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 52 | !(n@46@01 <= 50)]
(assert (not (<= n@46@01 50)))
(pop) ; 5
(push) ; 5
; [else-branch: 52 | n@46@01 <= 50]
(assert (<= n@46@01 50))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- colourings2 ----------
(declare-const a@127@01 Array_)
(declare-const a@128@01 Array_)
(push) ; 1
(declare-const $t@129@01 $Snap)
(assert (= $t@129@01 ($Snap.combine ($Snap.first $t@129@01) ($Snap.second $t@129@01))))
(assert (= ($Snap.first $t@129@01) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (= (len<Int> a@128@01) 51))
(declare-const i@130@01 Int)
(push) ; 2
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 53 | !(0 <= i@130@01) | live]
; [else-branch: 53 | 0 <= i@130@01 | live]
(push) ; 4
; [then-branch: 53 | !(0 <= i@130@01)]
(assert (not (<= 0 i@130@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 53 | 0 <= i@130@01]
(assert (<= 0 i@130@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@130@01) (not (<= 0 i@130@01))))
(assert (and (<= 0 i@130@01) (< i@130@01 (len<Int> a@128@01))))
; [eval] slot(a, i)
(declare-const sm@131@01 $FVF<val>)
; Definitional axioms for snapshot map values
; [eval] slot(a, i)
(pop) ; 2
(declare-fun inv@132@01 ($Ref) Int)
(declare-fun img@133@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@130@01 Int)) (!
  (=>
    (and (<= 0 i@130@01) (< i@130@01 (len<Int> a@128@01)))
    (or (<= 0 i@130@01) (not (<= 0 i@130@01))))
  :pattern (($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) (slot<Ref> a@128@01 i@130@01)) (slot<Ref> a@128@01 i@130@01)))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@130@01 Int) (i2@130@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@130@01) (< i1@130@01 (len<Int> a@128@01)))
      (and (<= 0 i2@130@01) (< i2@130@01 (len<Int> a@128@01)))
      (= (slot<Ref> a@128@01 i1@130@01) (slot<Ref> a@128@01 i2@130@01)))
    (= i1@130@01 i2@130@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@130@01 Int)) (!
  (=>
    (and (<= 0 i@130@01) (< i@130@01 (len<Int> a@128@01)))
    (and
      (= (inv@132@01 (slot<Ref> a@128@01 i@130@01)) i@130@01)
      (img@133@01 (slot<Ref> a@128@01 i@130@01))))
  :pattern (($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) (slot<Ref> a@128@01 i@130@01)) (slot<Ref> a@128@01 i@130@01)))
  :qid |quant-u-22612|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@133@01 r)
      (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
    (= (slot<Ref> a@128@01 (inv@132@01 r)) r))
  :pattern ((inv@132@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@130@01 Int)) (!
  (=>
    (and (<= 0 i@130@01) (< i@130@01 (len<Int> a@128@01)))
    (not (= (slot<Ref> a@128@01 i@130@01) $Ref.null)))
  :pattern (($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) (slot<Ref> a@128@01 i@130@01)) (slot<Ref> a@128@01 i@130@01)))
  :qid |val-permImpliesNonNull|)))
(declare-const sm@134@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@133@01 r)
      (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@134@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@134@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef36|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r)
  :pattern (($FVF.lookup_val (as sm@134@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef37|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01)))
    ($FVF.loc_val ($FVF.lookup_val (as sm@134@01  $FVF<val>) r) r))
  :pattern ((inv@132@01 r))
  :qid |quant-u-22613|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var n: Int
(declare-const n@135@01 Int)
; [exec]
; slot(a, 0).val := Seq(Seq[Int]())
; [eval] slot(a, 0)
; [eval] Seq(Seq[Int]())
; [eval] Seq[Int]()
(assert (= (Seq_length (Seq_singleton (as Seq_empty  Seq<Int>))) 1))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@134@01  $FVF<val>) (slot<Ref> a@128@01 0)) (slot<Ref> a@128@01 0)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@136@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 0))
    ($Perm.min
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@136@01 r))
    $Perm.No)
  
  :qid |quant-u-22615|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@136@01 r) $Perm.No)
  
  :qid |quant-u-22616|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (= (- $Perm.Write (pTaken@136@01 r)) $Perm.No))
  
  :qid |quant-u-22617|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@137@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@137@01  $FVF<val>) (slot<Ref> a@128@01 0))
  (Seq_singleton (as Seq_empty  Seq<Int>))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) (slot<Ref> a@128@01 0)) (slot<Ref> a@128@01 0)))
; [exec]
; slot(a, 1).val := Seq(Seq(0, 1))
; [eval] slot(a, 1)
; [eval] Seq(Seq(0, 1))
; [eval] Seq(0, 1)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 1))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
  1))
(declare-const sm@138@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@138@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@138@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef38|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@136@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@138@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@138@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef39|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@138@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef40|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@138@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1)))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 0) (slot<Ref> a@128@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@139@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 1))
    ($Perm.min
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- $Perm.Write (pTaken@136@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@140@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 1))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@139@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- $Perm.Write (pTaken@136@01 r))
        $Perm.No)
      (pTaken@139@01 r))
    $Perm.No)
  
  :qid |quant-u-22619|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@139@01 r) $Perm.No)
  
  :qid |quant-u-22620|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (= (- $Perm.Write (pTaken@139@01 r)) $Perm.No))
  
  :qid |quant-u-22621|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@141@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@141@01  $FVF<val>) (slot<Ref> a@128@01 1))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1)))
; [exec]
; assert valid(Seq[Int](), 0, false)
; [eval] valid(Seq[Int](), 0, false)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(pop) ; 3
; Joined path conditions
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(push) ; 3
(assert (not (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
; [exec]
; assert Seq(0, 1)[2..] == Seq[Int]()
; [eval] Seq(0, 1)[2..] == Seq[Int]()
; [eval] Seq(0, 1)[2..]
; [eval] Seq(0, 1)
; [eval] Seq[Int]()
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 1)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 1)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 1).val[j], 1, true) }
;     0 <= j && j < |slot(a, 1).val| ==>
;     slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
; [eval] (forall j: Int :: { valid(slot(a, 1).val[j], 1, true) } 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
(declare-const j@142@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] 0 <= j && j < |slot(a, 1).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 54 | !(0 <= j@142@01) | live]
; [else-branch: 54 | 0 <= j@142@01 | live]
(push) ; 5
; [then-branch: 54 | !(0 <= j@142@01)]
(assert (not (<= 0 j@142@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 54 | 0 <= j@142@01]
(assert (<= 0 j@142@01))
; [eval] j < |slot(a, 1).val|
; [eval] |slot(a, 1).val|
; [eval] slot(a, 1)
(declare-const sm@143@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef44|)))
(declare-const pm@144@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@144@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@144@01  $FPM) r))
  :qid |qp.resPrmSumDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@144@01  $FPM) r))
  :qid |qp.resTrgDef46|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@144@01  $FPM) (slot<Ref> a@128@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@144@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@144@01  $FPM) r))
  :qid |qp.resPrmSumDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@144@01  $FPM) r))
  :qid |qp.resTrgDef46|)))
(assert (=>
  (<= 0 j@142@01)
  (and
    (<= 0 j@142@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1)))))
(assert (or (<= 0 j@142@01) (not (<= 0 j@142@01))))
(push) ; 4
; [then-branch: 55 | 0 <= j@142@01 && j@142@01 < |Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))| | live]
; [else-branch: 55 | !(0 <= j@142@01 && j@142@01 < |Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))|) | live]
(push) ; 5
; [then-branch: 55 | 0 <= j@142@01 && j@142@01 < |Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))|]
(assert (and
  (<= 0 j@142@01)
  (<
    j@142@01
    (Seq_length
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))))))
; [eval] slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j] == Seq(0, 1)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 1))
      (=
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
    :qid |qp.fvfValDef41|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 0))
      (=
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
    :qid |qp.fvfValDef42|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
    :qid |qp.fvfValDef43|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef44|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 1))
        $Perm.Write
        $Perm.No)
      (ite
        (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 0))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@133@01 (slot<Ref> a@128@01 1))
        (and
          (<= 0 (inv@132@01 (slot<Ref> a@128@01 1)))
          (< (inv@132@01 (slot<Ref> a@128@01 1)) (len<Int> a@128@01))))
      (-
        (- $Perm.Write (pTaken@136@01 (slot<Ref> a@128@01 1)))
        (pTaken@139@01 (slot<Ref> a@128@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@142@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(0, 1)
(push) ; 6
; [then-branch: 56 | !(Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))[j@142@01] === [0] ++ [1]) | live]
; [else-branch: 56 | Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))[j@142@01] === [0] ++ [1] | live]
(push) ; 7
; [then-branch: 56 | !(Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))[j@142@01] === [0] ++ [1])]
(assert (not
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
      j@142@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 56 | Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))[j@142@01] === [0] ++ [1]]
(assert (Seq_equal
  (Seq_index
    ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
    j@142@01)
  (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
; [eval] valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 1))
      (=
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
    :qid |qp.fvfValDef41|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 0))
      (=
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
    :qid |qp.fvfValDef42|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
    :qid |qp.fvfValDef43|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
    :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef44|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 1))
        $Perm.Write
        $Perm.No)
      (ite
        (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 0))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@133@01 (slot<Ref> a@128@01 1))
        (and
          (<= 0 (inv@132@01 (slot<Ref> a@128@01 1)))
          (< (inv@132@01 (slot<Ref> a@128@01 1)) (len<Int> a@128@01))))
      (-
        (- $Perm.Write (pTaken@136@01 (slot<Ref> a@128@01 1)))
        (pTaken@139@01 (slot<Ref> a@128@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (>= j@142@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
  j@142@01) 1 true))
(pop) ; 8
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
  j@142@01) 1 true))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (=>
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
      j@142@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (and
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
        j@142@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
      j@142@01) 1 true))))
(assert (or
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
      j@142@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (not
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
        j@142@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))
(pop) ; 5
(push) ; 5
; [else-branch: 55 | !(0 <= j@142@01 && j@142@01 < |Lookup(val, sm@143@01, slot[Ref](a@128@01, 1))|)]
(assert (not
  (and
    (<= 0 j@142@01)
    (<
      j@142@01
      (Seq_length
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (=>
  (and
    (<= 0 j@142@01)
    (<
      j@142@01
      (Seq_length
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))
  (and
    (<= 0 j@142@01)
    (<
      j@142@01
      (Seq_length
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1))
    (=>
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (and
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
            j@142@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01) 1 true)))
    (or
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (not
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
            j@142@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@142@01)
      (<
        j@142@01
        (Seq_length
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))))))
  (and
    (<= 0 j@142@01)
    (<
      j@142@01
      (Seq_length
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef41|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef42|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef43|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@143@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef44|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@144@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@144@01  $FPM) r))
  :qid |qp.resPrmSumDef45|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@144@01  $FPM) r))
  :qid |qp.resTrgDef46|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@142@01 Int)) (!
  (and
    (=>
      (<= 0 j@142@01)
      (and
        (<= 0 j@142@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1))))
    (or (<= 0 j@142@01) (not (<= 0 j@142@01)))
    (=>
      (and
        (<= 0 j@142@01)
        (<
          j@142@01
          (Seq_length
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))
      (and
        (<= 0 j@142@01)
        (<
          j@142@01
          (Seq_length
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)) (slot<Ref> a@128@01 1))
        (=>
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
              j@142@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (and
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
                j@142@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
            (valid%precondition $Snap.unit (Seq_index
              ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
              j@142@01) 1 true)))
        (or
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
              j@142@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (not
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
                j@142@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))))
    (or
      (not
        (and
          (<= 0 j@142@01)
          (<
            j@142@01
            (Seq_length
              ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))))))
      (and
        (<= 0 j@142@01)
        (<
          j@142@01
          (Seq_length
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
    j@142@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@138@10@139@71-aux|)))
(assert (forall ((j@142@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@142@01)
        (<
          j@142@01
          (Seq_length
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
      j@142@01) 1 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
    j@142@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@138@10@139@71_precondition|)))
(push) ; 3
(assert (not (forall ((j@142@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (<= 0 j@142@01)
            (<
              j@142@01
              (Seq_length
                ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
              j@142@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01) 1 true))
      (and
        (<= 0 j@142@01)
        (<
          j@142@01
          (Seq_length
            ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
        j@142@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
    j@142@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@138@10@139@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@142@01 Int)) (!
  (=>
    (and
      (<= 0 j@142@01)
      (<
        j@142@01
        (Seq_length
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1)))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
          j@142@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
        j@142@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 1))
    j@142@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@138@10@139@71|)))
; [exec]
; slot(a, 2).val := Seq(Seq(0, 2))
; [eval] slot(a, 2)
; [eval] Seq(Seq(0, 2))
; [eval] Seq(0, 2)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 2))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 2))))
  1))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@143@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2)))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 0) (slot<Ref> a@128@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@145@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 2))
    ($Perm.min
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@146@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 2))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@145@01 r)))
    $Perm.No))
(define-fun pTaken@147@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 2))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@145@01 r)) (pTaken@146@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
        $Perm.No)
      (pTaken@145@01 r))
    $Perm.No)
  
  :qid |quant-u-22623|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@145@01 r) $Perm.No)
  
  :qid |quant-u-22624|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (= (- $Perm.Write (pTaken@145@01 r)) $Perm.No))
  
  :qid |quant-u-22625|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@148@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@148@01  $FVF<val>) (slot<Ref> a@128@01 2))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 2)))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2)))
; [exec]
; assert Seq(0, 2)[2..] == Seq[Int]()
; [eval] Seq(0, 2)[2..] == Seq[Int]()
; [eval] Seq(0, 2)[2..]
; [eval] Seq(0, 2)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 2)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 2)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 2).val[j], 2, true) }
;     0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true))
; [eval] (forall j: Int :: { valid(slot(a, 2).val[j], 2, true) } 0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true))
(declare-const j@149@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true)
; [eval] 0 <= j && j < |slot(a, 2).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 57 | !(0 <= j@149@01) | live]
; [else-branch: 57 | 0 <= j@149@01 | live]
(push) ; 5
; [then-branch: 57 | !(0 <= j@149@01)]
(assert (not (<= 0 j@149@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 57 | 0 <= j@149@01]
(assert (<= 0 j@149@01))
; [eval] j < |slot(a, 2).val|
; [eval] |slot(a, 2).val|
; [eval] slot(a, 2)
(declare-const sm@150@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef51|)))
(declare-const pm@151@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@151@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@151@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@151@01  $FPM) (slot<Ref> a@128@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@151@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@151@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
(assert (=>
  (<= 0 j@149@01)
  (and
    (<= 0 j@149@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2)))))
(assert (or (<= 0 j@149@01) (not (<= 0 j@149@01))))
(push) ; 4
; [then-branch: 58 | 0 <= j@149@01 && j@149@01 < |Lookup(val, sm@150@01, slot[Ref](a@128@01, 2))| | live]
; [else-branch: 58 | !(0 <= j@149@01 && j@149@01 < |Lookup(val, sm@150@01, slot[Ref](a@128@01, 2))|) | live]
(push) ; 5
; [then-branch: 58 | 0 <= j@149@01 && j@149@01 < |Lookup(val, sm@150@01, slot[Ref](a@128@01, 2))|]
(assert (and
  (<= 0 j@149@01)
  (<
    j@149@01
    (Seq_length
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))))))
; [eval] valid(slot(a, 2).val[j], 2, true)
; [eval] slot(a, 2).val[j]
; [eval] slot(a, 2)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 2))
      (=
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
    :qid |qp.fvfValDef47|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 0))
      (=
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
    :qid |qp.fvfValDef48|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 1))
      (=
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
    :qid |qp.fvfValDef49|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (<
          $Perm.No
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
    :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
    :qid |qp.fvfValDef50|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
    :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef51|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (= (slot<Ref> a@128@01 2) (slot<Ref> a@128@01 2))
          $Perm.Write
          $Perm.No)
        (ite
          (= (slot<Ref> a@128@01 2) (slot<Ref> a@128@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@128@01 2) (slot<Ref> a@128@01 1))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@133@01 (slot<Ref> a@128@01 2))
        (and
          (<= 0 (inv@132@01 (slot<Ref> a@128@01 2)))
          (< (inv@132@01 (slot<Ref> a@128@01 2)) (len<Int> a@128@01))))
      (-
        (-
          (- $Perm.Write (pTaken@136@01 (slot<Ref> a@128@01 2)))
          (pTaken@139@01 (slot<Ref> a@128@01 2)))
        (pTaken@145@01 (slot<Ref> a@128@01 2)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@149@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
  j@149@01) 2 true))
(pop) ; 6
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
  j@149@01) 2 true))
(pop) ; 5
(push) ; 5
; [else-branch: 58 | !(0 <= j@149@01 && j@149@01 < |Lookup(val, sm@150@01, slot[Ref](a@128@01, 2))|)]
(assert (not
  (and
    (<= 0 j@149@01)
    (<
      j@149@01
      (Seq_length
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (=>
  (and
    (<= 0 j@149@01)
    (<
      j@149@01
      (Seq_length
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))
  (and
    (<= 0 j@149@01)
    (<
      j@149@01
      (Seq_length
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
      j@149@01) 2 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@149@01)
      (<
        j@149@01
        (Seq_length
          ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))))))
  (and
    (<= 0 j@149@01)
    (<
      j@149@01
      (Seq_length
        ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef47|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef48|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef49|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef50|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@150@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef51|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@151@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@151@01  $FPM) r))
  :qid |qp.resPrmSumDef52|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@151@01  $FPM) r))
  :qid |qp.resTrgDef53|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@149@01 Int)) (!
  (and
    (=>
      (<= 0 j@149@01)
      (and
        (<= 0 j@149@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2))))
    (or (<= 0 j@149@01) (not (<= 0 j@149@01)))
    (=>
      (and
        (<= 0 j@149@01)
        (<
          j@149@01
          (Seq_length
            ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))
      (and
        (<= 0 j@149@01)
        (<
          j@149@01
          (Seq_length
            ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)) (slot<Ref> a@128@01 2))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
          j@149@01) 2 true)))
    (or
      (not
        (and
          (<= 0 j@149@01)
          (<
            j@149@01
            (Seq_length
              ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))))))
      (and
        (<= 0 j@149@01)
        (<
          j@149@01
          (Seq_length
            ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
    j@149@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@143@10@144@37-aux|)))
(assert (forall ((j@149@01 Int)) (!
  (=>
    (and
      (<= 0 j@149@01)
      (<
        j@149@01
        (Seq_length
          ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
      j@149@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
    j@149@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@143@10@144@37_precondition|)))
(push) ; 3
(assert (not (forall ((j@149@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 j@149@01)
          (<
            j@149@01
            (Seq_length
              ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
          j@149@01) 2 true))
      (and
        (<= 0 j@149@01)
        (<
          j@149@01
          (Seq_length
            ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
      j@149@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
    j@149@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@143@10@144@37|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@149@01 Int)) (!
  (=>
    (and
      (<= 0 j@149@01)
      (<
        j@149@01
        (Seq_length
          ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2)))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
      j@149@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 2))
    j@149@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@143@10@144@37|)))
; [exec]
; slot(a, 3).val := Seq(Seq(0, 3), Seq(3))
; [eval] slot(a, 3)
; [eval] Seq(Seq(0, 3), Seq(3))
; [eval] Seq(0, 3)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 3))) 2))
; [eval] Seq(3)
(assert (= (Seq_length (Seq_singleton 3)) 1))
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 3)))
      (Seq_singleton (Seq_singleton 3))))
  2))
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@150@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3)))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 2) (slot<Ref> a@128@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 0) (slot<Ref> a@128@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@152@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 3))
    ($Perm.min
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@153@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@152@01 r)))
    $Perm.No))
(define-fun pTaken@154@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r)))
    $Perm.No))
(define-fun pTaken@155@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@152@01 r)) (pTaken@153@01 r))
        (pTaken@154@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
          (pTaken@145@01 r))
        $Perm.No)
      (pTaken@152@01 r))
    $Perm.No)
  
  :qid |quant-u-22627|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@152@01 r) $Perm.No)
  
  :qid |quant-u-22628|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (= (- $Perm.Write (pTaken@152@01 r)) $Perm.No))
  
  :qid |quant-u-22629|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@156@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@156@01  $FVF<val>) (slot<Ref> a@128@01 3))
  (Seq_append
    (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 3)))
    (Seq_singleton (Seq_singleton 3)))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3)))
; [exec]
; assert Seq(0, 3)[2..] == Seq[Int]()
; [eval] Seq(0, 3)[2..] == Seq[Int]()
; [eval] Seq(0, 3)[2..]
; [eval] Seq(0, 3)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 3)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 3)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 3).val[j], 3, true) }
;     0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true))
; [eval] (forall j: Int :: { valid(slot(a, 3).val[j], 3, true) } 0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true))
(declare-const j@157@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true)
; [eval] 0 <= j && j < |slot(a, 3).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 59 | !(0 <= j@157@01) | live]
; [else-branch: 59 | 0 <= j@157@01 | live]
(push) ; 5
; [then-branch: 59 | !(0 <= j@157@01)]
(assert (not (<= 0 j@157@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 59 | 0 <= j@157@01]
(assert (<= 0 j@157@01))
; [eval] j < |slot(a, 3).val|
; [eval] |slot(a, 3).val|
; [eval] slot(a, 3)
(declare-const sm@158@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(declare-const pm@159@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@159@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@128@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@159@01  $FPM) r))
  :qid |qp.resPrmSumDef60|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@159@01  $FPM) r))
  :qid |qp.resTrgDef61|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@159@01  $FPM) (slot<Ref> a@128@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@159@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@128@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@159@01  $FPM) r))
  :qid |qp.resPrmSumDef60|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@159@01  $FPM) r))
  :qid |qp.resTrgDef61|)))
(assert (=>
  (<= 0 j@157@01)
  (and
    (<= 0 j@157@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3)))))
(assert (or (<= 0 j@157@01) (not (<= 0 j@157@01))))
(push) ; 4
; [then-branch: 60 | 0 <= j@157@01 && j@157@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, 3))| | live]
; [else-branch: 60 | !(0 <= j@157@01 && j@157@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, 3))|) | live]
(push) ; 5
; [then-branch: 60 | 0 <= j@157@01 && j@157@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, 3))|]
(assert (and
  (<= 0 j@157@01)
  (<
    j@157@01
    (Seq_length
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))))))
; [eval] valid(slot(a, 3).val[j], 3, true)
; [eval] slot(a, 3).val[j]
; [eval] slot(a, 3)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 3))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 1))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 0))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 2))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
              (pTaken@145@01 r))
            (pTaken@152@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3)))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@128@01 3) (slot<Ref> a@128@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@128@01 3) (slot<Ref> a@128@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@128@01 3) (slot<Ref> a@128@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@128@01 3) (slot<Ref> a@128@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@133@01 (slot<Ref> a@128@01 3))
        (and
          (<= 0 (inv@132@01 (slot<Ref> a@128@01 3)))
          (< (inv@132@01 (slot<Ref> a@128@01 3)) (len<Int> a@128@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@136@01 (slot<Ref> a@128@01 3)))
            (pTaken@139@01 (slot<Ref> a@128@01 3)))
          (pTaken@145@01 (slot<Ref> a@128@01 3)))
        (pTaken@152@01 (slot<Ref> a@128@01 3)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@157@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
  j@157@01) 3 true))
(pop) ; 6
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
  j@157@01) 3 true))
(pop) ; 5
(push) ; 5
; [else-branch: 60 | !(0 <= j@157@01 && j@157@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, 3))|)]
(assert (not
  (and
    (<= 0 j@157@01)
    (<
      j@157@01
      (Seq_length
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (and
    (<= 0 j@157@01)
    (<
      j@157@01
      (Seq_length
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))
  (and
    (<= 0 j@157@01)
    (<
      j@157@01
      (Seq_length
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
      j@157@01) 3 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@157@01)
      (<
        j@157@01
        (Seq_length
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))))))
  (and
    (<= 0 j@157@01)
    (<
      j@157@01
      (Seq_length
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@159@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@128@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@159@01  $FPM) r))
  :qid |qp.resPrmSumDef60|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.perm_val (as pm@159@01  $FPM) r))
  :qid |qp.resTrgDef61|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@157@01 Int)) (!
  (and
    (=>
      (<= 0 j@157@01)
      (and
        (<= 0 j@157@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3))))
    (or (<= 0 j@157@01) (not (<= 0 j@157@01)))
    (=>
      (and
        (<= 0 j@157@01)
        (<
          j@157@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))
      (and
        (<= 0 j@157@01)
        (<
          j@157@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)) (slot<Ref> a@128@01 3))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
          j@157@01) 3 true)))
    (or
      (not
        (and
          (<= 0 j@157@01)
          (<
            j@157@01
            (Seq_length
              ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))))))
      (and
        (<= 0 j@157@01)
        (<
          j@157@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
    j@157@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@148@10@149@37-aux|)))
(assert (forall ((j@157@01 Int)) (!
  (=>
    (and
      (<= 0 j@157@01)
      (<
        j@157@01
        (Seq_length
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
      j@157@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
    j@157@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@148@10@149@37_precondition|)))
(push) ; 3
(assert (not (forall ((j@157@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 j@157@01)
          (<
            j@157@01
            (Seq_length
              ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
          j@157@01) 3 true))
      (and
        (<= 0 j@157@01)
        (<
          j@157@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
      j@157@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
    j@157@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@148@10@149@37|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@157@01 Int)) (!
  (=>
    (and
      (<= 0 j@157@01)
      (<
        j@157@01
        (Seq_length
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3)))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
      j@157@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 3))
    j@157@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@148@10@149@37|)))
; [exec]
; n := 4
(declare-const i@160@01 Int)
(declare-const oldSoln@161@01 Seq<Int>)
(declare-const n@162@01 Int)
(declare-const soln@163@01 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@164@01 $Snap)
(assert (= $t@164@01 ($Snap.combine ($Snap.first $t@164@01) ($Snap.second $t@164@01))))
(assert (= ($Snap.first $t@164@01) $Snap.unit))
; [eval] 4 <= n
(assert (<= 4 n@162@01))
(assert (=
  ($Snap.second $t@164@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@164@01))
    ($Snap.second ($Snap.second $t@164@01)))))
(assert (= ($Snap.first ($Snap.second $t@164@01)) $Snap.unit))
; [eval] n <= 51
(assert (<= n@162@01 51))
(assert (=
  ($Snap.second ($Snap.second $t@164@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@164@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@164@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@164@01))) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@164@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@164@01)))))))
(declare-const i@165@01 Int)
(push) ; 4
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 5
; [then-branch: 61 | !(0 <= i@165@01) | live]
; [else-branch: 61 | 0 <= i@165@01 | live]
(push) ; 6
; [then-branch: 61 | !(0 <= i@165@01)]
(assert (not (<= 0 i@165@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 61 | 0 <= i@165@01]
(assert (<= 0 i@165@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@165@01) (not (<= 0 i@165@01))))
(assert (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01))))
; [eval] slot(a, i)
(pop) ; 4
(declare-fun inv@166@01 ($Ref) Int)
(declare-fun img@167@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@165@01 Int)) (!
  (=>
    (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01)))
    (or (<= 0 i@165@01) (not (<= 0 i@165@01))))
  :pattern ((slot<Ref> a@128@01 i@165@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@165@01 Int) (i2@165@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@165@01) (< i1@165@01 (len<Int> a@128@01)))
      (and (<= 0 i2@165@01) (< i2@165@01 (len<Int> a@128@01)))
      (= (slot<Ref> a@128@01 i1@165@01) (slot<Ref> a@128@01 i2@165@01)))
    (= i1@165@01 i2@165@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@165@01 Int)) (!
  (=>
    (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01)))
    (and
      (= (inv@166@01 (slot<Ref> a@128@01 i@165@01)) i@165@01)
      (img@167@01 (slot<Ref> a@128@01 i@165@01))))
  :pattern ((slot<Ref> a@128@01 i@165@01))
  :qid |quant-u-22631|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (= (slot<Ref> a@128@01 (inv@166@01 r)) r))
  :pattern ((inv@166@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@165@01 Int)) (!
  (=>
    (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01)))
    (not (= (slot<Ref> a@128@01 i@165@01) $Ref.null)))
  :pattern ((slot<Ref> a@128@01 i@165@01))
  :qid |val-permImpliesNonNull|)))
(declare-const sm@168@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01)))
    ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) r) r))
  :pattern ((inv@166@01 r))
  :qid |quant-u-22632|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@164@01))))
  $Snap.unit))
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@169@01 Int)
(declare-const j@170@01 Int)
(push) ; 4
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 5
; [then-branch: 62 | !(0 <= m@169@01) | live]
; [else-branch: 62 | 0 <= m@169@01 | live]
(push) ; 6
; [then-branch: 62 | !(0 <= m@169@01)]
(assert (not (<= 0 m@169@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 62 | 0 <= m@169@01]
(assert (<= 0 m@169@01))
; [eval] m < n
(push) ; 7
; [then-branch: 63 | !(m@169@01 < n@162@01) | live]
; [else-branch: 63 | m@169@01 < n@162@01 | live]
(push) ; 8
; [then-branch: 63 | !(m@169@01 < n@162@01)]
(assert (not (< m@169@01 n@162@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 63 | m@169@01 < n@162@01]
(assert (< m@169@01 n@162@01))
; [eval] 0 <= j
(push) ; 9
; [then-branch: 64 | !(0 <= j@170@01) | live]
; [else-branch: 64 | 0 <= j@170@01 | live]
(push) ; 10
; [then-branch: 64 | !(0 <= j@170@01)]
(assert (not (<= 0 j@170@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 64 | 0 <= j@170@01]
(assert (<= 0 j@170@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (=
        ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
    :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef63|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01)))
(push) ; 11
(assert (not (and
  (img@167@01 (slot<Ref> a@128@01 m@169@01))
  (and
    (<= 0 (inv@166@01 (slot<Ref> a@128@01 m@169@01)))
    (< (inv@166@01 (slot<Ref> a@128@01 m@169@01)) (len<Int> a@128@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
(assert (=>
  (<= 0 j@170@01)
  (and
    (<= 0 j@170@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01)))))
(assert (or (<= 0 j@170@01) (not (<= 0 j@170@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
(assert (=>
  (< m@169@01 n@162@01)
  (and
    (< m@169@01 n@162@01)
    (=>
      (<= 0 j@170@01)
      (and
        (<= 0 j@170@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
    (or (<= 0 j@170@01) (not (<= 0 j@170@01))))))
(assert (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
(assert (=>
  (<= 0 m@169@01)
  (and
    (<= 0 m@169@01)
    (=>
      (< m@169@01 n@162@01)
      (and
        (< m@169@01 n@162@01)
        (=>
          (<= 0 j@170@01)
          (and
            (<= 0 j@170@01)
            ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
        (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
    (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01))))))
(assert (or (<= 0 m@169@01) (not (<= 0 m@169@01))))
(push) ; 5
; [then-branch: 65 | 0 <= m@169@01 && m@169@01 < n@162@01 && 0 <= j@170@01 && j@170@01 < |Lookup(val, sm@168@01, slot[Ref](a@128@01, m@169@01))| | live]
; [else-branch: 65 | !(0 <= m@169@01 && m@169@01 < n@162@01 && 0 <= j@170@01 && j@170@01 < |Lookup(val, sm@168@01, slot[Ref](a@128@01, m@169@01))|) | live]
(push) ; 6
; [then-branch: 65 | 0 <= m@169@01 && m@169@01 < n@162@01 && 0 <= j@170@01 && j@170@01 < |Lookup(val, sm@168@01, slot[Ref](a@128@01, m@169@01))|]
(assert (and
  (<= 0 m@169@01)
  (and
    (< m@169@01 n@162@01)
    (and
      (<= 0 j@170@01)
      (<
        j@170@01
        (Seq_length
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (=
        ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef62|))
  (forall ((r $Ref)) (!
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
    :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef63|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01)))
(push) ; 7
(assert (not (and
  (img@167@01 (slot<Ref> a@128@01 m@169@01))
  (and
    (<= 0 (inv@166@01 (slot<Ref> a@128@01 m@169@01)))
    (< (inv@166@01 (slot<Ref> a@128@01 m@169@01)) (len<Int> a@128@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@170@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
  j@170@01) m@169@01 true))
(pop) ; 7
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
  j@170@01) m@169@01 true))
(pop) ; 6
(push) ; 6
; [else-branch: 65 | !(0 <= m@169@01 && m@169@01 < n@162@01 && 0 <= j@170@01 && j@170@01 < |Lookup(val, sm@168@01, slot[Ref](a@128@01, m@169@01))|)]
(assert (not
  (and
    (<= 0 m@169@01)
    (and
      (< m@169@01 n@162@01)
      (and
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
(assert (=>
  (and
    (<= 0 m@169@01)
    (and
      (< m@169@01 n@162@01)
      (and
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
  (and
    (<= 0 m@169@01)
    (< m@169@01 n@162@01)
    (<= 0 j@170@01)
    (<
      j@170@01
      (Seq_length
        ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
      j@170@01) m@169@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@169@01)
      (and
        (< m@169@01 n@162@01)
        (and
          (<= 0 j@170@01)
          (<
            j@170@01
            (Seq_length
              ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
  (and
    (<= 0 m@169@01)
    (and
      (< m@169@01 n@162@01)
      (and
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (<= 0 m@169@01)
      (and
        (<= 0 m@169@01)
        (=>
          (< m@169@01 n@162@01)
          (and
            (< m@169@01 n@162@01)
            (=>
              (<= 0 j@170@01)
              (and
                (<= 0 j@170@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
            (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
        (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01)))))
    (or (<= 0 m@169@01) (not (<= 0 m@169@01)))
    (=>
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
      (and
        (<= 0 m@169@01)
        (< m@169@01 n@162@01)
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
          j@170@01) m@169@01 true)))
    (or
      (not
        (and
          (<= 0 m@169@01)
          (and
            (< m@169@01 n@162@01)
            (and
              (<= 0 j@170@01)
              (<
                j@170@01
                (Seq_length
                  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (<= 0 m@169@01)
      (and
        (<= 0 m@169@01)
        (=>
          (< m@169@01 n@162@01)
          (and
            (< m@169@01 n@162@01)
            (=>
              (<= 0 j@170@01)
              (and
                (<= 0 j@170@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
            (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
        (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01)))))
    (or (<= 0 m@169@01) (not (<= 0 m@169@01)))
    (=>
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
      (and
        (<= 0 m@169@01)
        (< m@169@01 n@162@01)
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
          j@170@01) m@169@01 true)))
    (or
      (not
        (and
          (<= 0 m@169@01)
          (and
            (< m@169@01 n@162@01)
            (and
              (<= 0 j@170@01)
              (<
                j@170@01
                (Seq_length
                  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (<= 0 m@169@01)
      (and
        (<= 0 m@169@01)
        (=>
          (< m@169@01 n@162@01)
          (and
            (< m@169@01 n@162@01)
            (=>
              (<= 0 j@170@01)
              (and
                (<= 0 j@170@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
            (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
        (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01)))))
    (or (<= 0 m@169@01) (not (<= 0 m@169@01)))
    (=>
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
      (and
        (<= 0 m@169@01)
        (< m@169@01 n@162@01)
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
          j@170@01) m@169@01 true)))
    (or
      (not
        (and
          (<= 0 m@169@01)
          (and
            (< m@169@01 n@162@01)
            (and
              (<= 0 j@170@01)
              (<
                j@170@01
                (Seq_length
                  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (=>
    (and
      (<= 0 m@169@01)
      (and
        (< m@169@01 n@162@01)
        (and
          (<= 0 j@170@01)
          (<
            j@170@01
            (Seq_length
              ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
      j@170@01) m@169@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39|)))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] 4 <= n
; [eval] n <= 51
; [eval] len(a) == 51
; [eval] len(a)
(declare-const i@171@01 Int)
(push) ; 4
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 5
; [then-branch: 66 | !(0 <= i@171@01) | live]
; [else-branch: 66 | 0 <= i@171@01 | live]
(push) ; 6
; [then-branch: 66 | !(0 <= i@171@01)]
(assert (not (<= 0 i@171@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 66 | 0 <= i@171@01]
(assert (<= 0 i@171@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@171@01) (not (<= 0 i@171@01))))
(assert (and (<= 0 i@171@01) (< i@171@01 (len<Int> a@128@01))))
; [eval] slot(a, i)
(pop) ; 4
(declare-fun inv@172@01 ($Ref) Int)
(declare-fun img@173@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@171@01 Int)) (!
  (=>
    (and (<= 0 i@171@01) (< i@171@01 (len<Int> a@128@01)))
    (or (<= 0 i@171@01) (not (<= 0 i@171@01))))
  :pattern ((slot<Ref> a@128@01 i@171@01))
  :qid |val-aux|)))
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@171@01 Int) (i2@171@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@171@01) (< i1@171@01 (len<Int> a@128@01)))
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 i1@171@01)) (slot<Ref> a@128@01 i1@171@01)))
      (and
        (and (<= 0 i2@171@01) (< i2@171@01 (len<Int> a@128@01)))
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 i2@171@01)) (slot<Ref> a@128@01 i2@171@01)))
      (= (slot<Ref> a@128@01 i1@171@01) (slot<Ref> a@128@01 i2@171@01)))
    (= i1@171@01 i2@171@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@171@01 Int)) (!
  (=>
    (and (<= 0 i@171@01) (< i@171@01 (len<Int> a@128@01)))
    (and
      (= (inv@172@01 (slot<Ref> a@128@01 i@171@01)) i@171@01)
      (img@173@01 (slot<Ref> a@128@01 i@171@01))))
  :pattern ((slot<Ref> a@128@01 i@171@01))
  :qid |val-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@173@01 r)
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01))))
    (= (slot<Ref> a@128@01 (inv@172@01 r)) r))
  :pattern ((inv@172@01 r))
  :qid |val-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) r) r))
  :pattern ((inv@172@01 r))
  :qid |quant-u-22634|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@174@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    ($Perm.min
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@175@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 3)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@174@01 r)))
    $Perm.No))
(define-fun pTaken@176@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r)))
    $Perm.No))
(define-fun pTaken@177@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
        (pTaken@176@01 r)))
    $Perm.No))
(define-fun pTaken@178@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
          (pTaken@176@01 r))
        (pTaken@177@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r))
        $Perm.No)
      (pTaken@174@01 r))
    $Perm.No)
  
  :qid |quant-u-22636|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    (= (- $Perm.Write (pTaken@174@01 r)) $Perm.No))
  
  :qid |quant-u-22637|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@128@01 3) (slot<Ref> a@128@01 3)) $Perm.Write $Perm.No)
    (pTaken@175@01 (slot<Ref> a@128@01 3)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    (= (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r)) $Perm.No))
  
  :qid |quant-u-22639|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@128@01 1) (slot<Ref> a@128@01 1)) $Perm.Write $Perm.No)
    (pTaken@176@01 (slot<Ref> a@128@01 1)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
        (pTaken@176@01 r))
      $Perm.No))
  
  :qid |quant-u-22641|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@128@01 0) (slot<Ref> a@128@01 0)) $Perm.Write $Perm.No)
    (pTaken@177@01 (slot<Ref> a@128@01 0)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
          (pTaken@176@01 r))
        (pTaken@177@01 r))
      $Perm.No))
  
  :qid |quant-u-22643|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@128@01 2) (slot<Ref> a@128@01 2)) $Perm.Write $Perm.No)
    (pTaken@178@01 (slot<Ref> a@128@01 2)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@172@01 r)) (< (inv@172@01 r) (len<Int> a@128@01)))
      (img@173@01 r)
      (= r (slot<Ref> a@128@01 (inv@172@01 r))))
    (=
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@174@01 r)) (pTaken@175@01 r))
            (pTaken@176@01 r))
          (pTaken@177@01 r))
        (pTaken@178@01 r))
      $Perm.No))
  
  :qid |quant-u-22645|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@179@01 Int)
(declare-const j@180@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 5
; [then-branch: 67 | !(0 <= m@179@01) | live]
; [else-branch: 67 | 0 <= m@179@01 | live]
(push) ; 6
; [then-branch: 67 | !(0 <= m@179@01)]
(assert (not (<= 0 m@179@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 67 | 0 <= m@179@01]
(assert (<= 0 m@179@01))
; [eval] m < n
(push) ; 7
; [then-branch: 68 | !(m@179@01 < 4) | live]
; [else-branch: 68 | m@179@01 < 4 | live]
(push) ; 8
; [then-branch: 68 | !(m@179@01 < 4)]
(assert (not (< m@179@01 4)))
(pop) ; 8
(push) ; 8
; [else-branch: 68 | m@179@01 < 4]
(assert (< m@179@01 4))
; [eval] 0 <= j
(push) ; 9
; [then-branch: 69 | !(0 <= j@180@01) | live]
; [else-branch: 69 | 0 <= j@180@01 | live]
(push) ; 10
; [then-branch: 69 | !(0 <= j@180@01)]
(assert (not (<= 0 j@180@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 69 | 0 <= j@180@01]
(assert (<= 0 j@180@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 3))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 1))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 0))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 2))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
              (pTaken@145@01 r))
            (pTaken@152@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01)))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@133@01 (slot<Ref> a@128@01 m@179@01))
        (and
          (<= 0 (inv@132@01 (slot<Ref> a@128@01 m@179@01)))
          (< (inv@132@01 (slot<Ref> a@128@01 m@179@01)) (len<Int> a@128@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@136@01 (slot<Ref> a@128@01 m@179@01)))
            (pTaken@139@01 (slot<Ref> a@128@01 m@179@01)))
          (pTaken@145@01 (slot<Ref> a@128@01 m@179@01)))
        (pTaken@152@01 (slot<Ref> a@128@01 m@179@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (<= 0 j@180@01)
  (and
    (<= 0 j@180@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01)))))
(assert (or (<= 0 j@180@01) (not (<= 0 j@180@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (< m@179@01 4)
  (and
    (< m@179@01 4)
    (=>
      (<= 0 j@180@01)
      (and
        (<= 0 j@180@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))))
    (or (<= 0 j@180@01) (not (<= 0 j@180@01))))))
(assert (or (< m@179@01 4) (not (< m@179@01 4))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (<= 0 m@179@01)
  (and
    (<= 0 m@179@01)
    (=>
      (< m@179@01 4)
      (and
        (< m@179@01 4)
        (=>
          (<= 0 j@180@01)
          (and
            (<= 0 j@180@01)
            ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))))
        (or (<= 0 j@180@01) (not (<= 0 j@180@01)))))
    (or (< m@179@01 4) (not (< m@179@01 4))))))
(assert (or (<= 0 m@179@01) (not (<= 0 m@179@01))))
(push) ; 5
; [then-branch: 70 | 0 <= m@179@01 && m@179@01 < 4 && 0 <= j@180@01 && j@180@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, m@179@01))| | live]
; [else-branch: 70 | !(0 <= m@179@01 && m@179@01 < 4 && 0 <= j@180@01 && j@180@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, m@179@01))|) | live]
(push) ; 6
; [then-branch: 70 | 0 <= m@179@01 && m@179@01 < 4 && 0 <= j@180@01 && j@180@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, m@179@01))|]
(assert (and
  (<= 0 m@179@01)
  (and
    (< m@179@01 4)
    (and
      (<= 0 j@180@01)
      (<
        j@180@01
        (Seq_length
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 3))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
    :qid |qp.fvfValDef54|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 1))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
    :qid |qp.fvfValDef55|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 0))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
    :qid |qp.fvfValDef56|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 2))
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
    :qid |qp.fvfValDef57|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@133@01 r)
          (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
              (pTaken@145@01 r))
            (pTaken@152@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
    :qid |qp.fvfValDef58|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
    :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef59|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01)))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@128@01 m@179@01) (slot<Ref> a@128@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@133@01 (slot<Ref> a@128@01 m@179@01))
        (and
          (<= 0 (inv@132@01 (slot<Ref> a@128@01 m@179@01)))
          (< (inv@132@01 (slot<Ref> a@128@01 m@179@01)) (len<Int> a@128@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@136@01 (slot<Ref> a@128@01 m@179@01)))
            (pTaken@139@01 (slot<Ref> a@128@01 m@179@01)))
          (pTaken@145@01 (slot<Ref> a@128@01 m@179@01)))
        (pTaken@152@01 (slot<Ref> a@128@01 m@179@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@180@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
  j@180@01) m@179@01 true))
(pop) ; 7
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
  j@180@01) m@179@01 true))
(pop) ; 6
(push) ; 6
; [else-branch: 70 | !(0 <= m@179@01 && m@179@01 < 4 && 0 <= j@180@01 && j@180@01 < |Lookup(val, sm@158@01, slot[Ref](a@128@01, m@179@01))|)]
(assert (not
  (and
    (<= 0 m@179@01)
    (and
      (< m@179@01 4)
      (and
        (<= 0 j@180@01)
        (<
          j@180@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
(assert (=>
  (and
    (<= 0 m@179@01)
    (and
      (< m@179@01 4)
      (and
        (<= 0 j@180@01)
        (<
          j@180@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
  (and
    (<= 0 m@179@01)
    (< m@179@01 4)
    (<= 0 j@180@01)
    (<
      j@180@01
      (Seq_length
        ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
      j@180@01) m@179@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@179@01)
      (and
        (< m@179@01 4)
        (and
          (<= 0 j@180@01)
          (<
            j@180@01
            (Seq_length
              ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))))))
  (and
    (<= 0 m@179@01)
    (and
      (< m@179@01 4)
      (and
        (<= 0 j@180@01)
        (<
          j@180@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 3))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@156@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@156@01  $FVF<val>) r))
  :qid |qp.fvfValDef54|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 1))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@141@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@141@01  $FVF<val>) r))
  :qid |qp.fvfValDef55|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 0))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@137@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@137@01  $FVF<val>) r))
  :qid |qp.fvfValDef56|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 2))
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@148@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@148@01  $FVF<val>) r))
  :qid |qp.fvfValDef57|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@133@01 r)
        (and (<= 0 (inv@132@01 r)) (< (inv@132@01 r) (len<Int> a@128@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@136@01 r)) (pTaken@139@01 r))
            (pTaken@145@01 r))
          (pTaken@152@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r)))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r))
  :qid |qp.fvfValDef58|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@156@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@141@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@137@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@148@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@129@01)) r) r))
  :pattern (($FVF.lookup_val (as sm@158@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef59|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@179@01 Int) (j@180@01 Int)) (!
  (and
    (=>
      (<= 0 m@179@01)
      (and
        (<= 0 m@179@01)
        (=>
          (< m@179@01 4)
          (and
            (< m@179@01 4)
            (=>
              (<= 0 j@180@01)
              (and
                (<= 0 j@180@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))))
            (or (<= 0 j@180@01) (not (<= 0 j@180@01)))))
        (or (< m@179@01 4) (not (< m@179@01 4)))))
    (or (<= 0 m@179@01) (not (<= 0 m@179@01)))
    (=>
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
      (and
        (<= 0 m@179@01)
        (< m@179@01 4)
        (<= 0 j@180@01)
        (<
          j@180@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
          j@180@01) m@179@01 true)))
    (or
      (not
        (and
          (<= 0 m@179@01)
          (and
            (< m@179@01 4)
            (and
              (<= 0 j@180@01)
              (<
                j@180@01
                (Seq_length
                  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))))))
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@179@01 Int) (j@180@01 Int)) (!
  (and
    (=>
      (<= 0 m@179@01)
      (and
        (<= 0 m@179@01)
        (=>
          (< m@179@01 4)
          (and
            (< m@179@01 4)
            (=>
              (<= 0 j@180@01)
              (and
                (<= 0 j@180@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))))
            (or (<= 0 j@180@01) (not (<= 0 j@180@01)))))
        (or (< m@179@01 4) (not (< m@179@01 4)))))
    (or (<= 0 m@179@01) (not (<= 0 m@179@01)))
    (=>
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
      (and
        (<= 0 m@179@01)
        (< m@179@01 4)
        (<= 0 j@180@01)
        (<
          j@180@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
          j@180@01) m@179@01 true)))
    (or
      (not
        (and
          (<= 0 m@179@01)
          (and
            (< m@179@01 4)
            (and
              (<= 0 j@180@01)
              (<
                j@180@01
                (Seq_length
                  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))))))
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@179@01 Int) (j@180@01 Int)) (!
  (and
    (=>
      (<= 0 m@179@01)
      (and
        (<= 0 m@179@01)
        (=>
          (< m@179@01 4)
          (and
            (< m@179@01 4)
            (=>
              (<= 0 j@180@01)
              (and
                (<= 0 j@180@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))))
            (or (<= 0 j@180@01) (not (<= 0 j@180@01)))))
        (or (< m@179@01 4) (not (< m@179@01 4)))))
    (or (<= 0 m@179@01) (not (<= 0 m@179@01)))
    (=>
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
      (and
        (<= 0 m@179@01)
        (< m@179@01 4)
        (<= 0 j@180@01)
        (<
          j@180@01
          (Seq_length
            ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)) (slot<Ref> a@128@01 m@179@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
          j@180@01) m@179@01 true)))
    (or
      (not
        (and
          (<= 0 m@179@01)
          (and
            (< m@179@01 4)
            (and
              (<= 0 j@180@01)
              (<
                j@180@01
                (Seq_length
                  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))))))
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@179@01 Int) (j@180@01 Int)) (!
  (=>
    (and
      (<= 0 m@179@01)
      (and
        (< m@179@01 4)
        (and
          (<= 0 j@180@01)
          (<
            j@180@01
            (Seq_length
              ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
      j@180@01) m@179@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39_precondition|)))
(push) ; 4
(assert (not (forall ((m@179@01 Int) (j@180@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 m@179@01)
          (and
            (< m@179@01 4)
            (and
              (<= 0 j@180@01)
              (<
                j@180@01
                (Seq_length
                  ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
          j@180@01) m@179@01 true))
      (and
        (<= 0 m@179@01)
        (and
          (< m@179@01 4)
          (and
            (<= 0 j@180@01)
            (<
              j@180@01
              (Seq_length
                ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
      j@180@01) m@179@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((m@179@01 Int) (j@180@01 Int)) (!
  (=>
    (and
      (<= 0 m@179@01)
      (and
        (< m@179@01 4)
        (and
          (<= 0 j@180@01)
          (<
            j@180@01
            (Seq_length
              ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
      j@180@01) m@179@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@158@01  $FVF<val>) (slot<Ref> a@128@01 m@179@01))
    j@180@01) m@179@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (= (slot<Ref> a@128@01 (inv@166@01 r)) r))
  :pattern ((inv@166@01 r))
  :qid |val-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@167@01 r)
      (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
    (=
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef62|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r)
  :pattern (($FVF.lookup_val (as sm@168@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef63|)))
(assert (forall ((i@165@01 Int)) (!
  (=>
    (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01)))
    (and
      (= (inv@166@01 (slot<Ref> a@128@01 i@165@01)) i@165@01)
      (img@167@01 (slot<Ref> a@128@01 i@165@01))))
  :pattern ((slot<Ref> a@128@01 i@165@01))
  :qid |quant-u-22631|)))
(assert (forall ((i@165@01 Int)) (!
  (=>
    (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01)))
    (not (= (slot<Ref> a@128@01 i@165@01) $Ref.null)))
  :pattern ((slot<Ref> a@128@01 i@165@01))
  :qid |val-permImpliesNonNull|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01)))
    ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) r) r))
  :pattern ((inv@166@01 r))
  :qid |quant-u-22632|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@164@01))))
  $Snap.unit))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (<= 0 m@169@01)
      (and
        (<= 0 m@169@01)
        (=>
          (< m@169@01 n@162@01)
          (and
            (< m@169@01 n@162@01)
            (=>
              (<= 0 j@170@01)
              (and
                (<= 0 j@170@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
            (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
        (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01)))))
    (or (<= 0 m@169@01) (not (<= 0 m@169@01)))
    (=>
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
      (and
        (<= 0 m@169@01)
        (< m@169@01 n@162@01)
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
          j@170@01) m@169@01 true)))
    (or
      (not
        (and
          (<= 0 m@169@01)
          (and
            (< m@169@01 n@162@01)
            (and
              (<= 0 j@170@01)
              (<
                j@170@01
                (Seq_length
                  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (<= 0 m@169@01)
      (and
        (<= 0 m@169@01)
        (=>
          (< m@169@01 n@162@01)
          (and
            (< m@169@01 n@162@01)
            (=>
              (<= 0 j@170@01)
              (and
                (<= 0 j@170@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
            (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
        (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01)))))
    (or (<= 0 m@169@01) (not (<= 0 m@169@01)))
    (=>
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
      (and
        (<= 0 m@169@01)
        (< m@169@01 n@162@01)
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
          j@170@01) m@169@01 true)))
    (or
      (not
        (and
          (<= 0 m@169@01)
          (and
            (< m@169@01 n@162@01)
            (and
              (<= 0 j@170@01)
              (<
                j@170@01
                (Seq_length
                  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (and
    (=>
      (<= 0 m@169@01)
      (and
        (<= 0 m@169@01)
        (=>
          (< m@169@01 n@162@01)
          (and
            (< m@169@01 n@162@01)
            (=>
              (<= 0 j@170@01)
              (and
                (<= 0 j@170@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))))
            (or (<= 0 j@170@01) (not (<= 0 j@170@01)))))
        (or (< m@169@01 n@162@01) (not (< m@169@01 n@162@01)))))
    (or (<= 0 m@169@01) (not (<= 0 m@169@01)))
    (=>
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
      (and
        (<= 0 m@169@01)
        (< m@169@01 n@162@01)
        (<= 0 j@170@01)
        (<
          j@170@01
          (Seq_length
            ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)) (slot<Ref> a@128@01 m@169@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
          j@170@01) m@169@01 true)))
    (or
      (not
        (and
          (<= 0 m@169@01)
          (and
            (< m@169@01 n@162@01)
            (and
              (<= 0 j@170@01)
              (<
                j@170@01
                (Seq_length
                  ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))))))))
      (and
        (<= 0 m@169@01)
        (and
          (< m@169@01 n@162@01)
          (and
            (<= 0 j@170@01)
            (<
              j@170@01
              (Seq_length
                ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@169@01 Int) (j@170@01 Int)) (!
  (=>
    (and
      (<= 0 m@169@01)
      (and
        (< m@169@01 n@162@01)
        (and
          (<= 0 j@170@01)
          (<
            j@170@01
            (Seq_length
              ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
      j@170@01) m@169@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 m@169@01))
    j@170@01) m@169@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39|)))
(assert (= $t@164@01 ($Snap.combine ($Snap.first $t@164@01) ($Snap.second $t@164@01))))
(assert (= ($Snap.first $t@164@01) $Snap.unit))
(assert (<= 4 n@162@01))
(assert (=
  ($Snap.second $t@164@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@164@01))
    ($Snap.second ($Snap.second $t@164@01)))))
(assert (= ($Snap.first ($Snap.second $t@164@01)) $Snap.unit))
(assert (<= n@162@01 51))
(assert (=
  ($Snap.second ($Snap.second $t@164@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@164@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@164@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@164@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@164@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@164@01)))))))
(assert (forall ((i@165@01 Int)) (!
  (=>
    (and (<= 0 i@165@01) (< i@165@01 (len<Int> a@128@01)))
    (or (<= 0 i@165@01) (not (<= 0 i@165@01))))
  :pattern ((slot<Ref> a@128@01 i@165@01))
  :qid |val-aux|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] n <= 50
(pop) ; 5
(push) ; 5
; [eval] !(n <= 50)
; [eval] n <= 50
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] n <= 50
(push) ; 5
(set-option :timeout 10)
(assert (not (not (<= n@162@01 50))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<= n@162@01 50)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 71 | n@162@01 <= 50 | live]
; [else-branch: 71 | !(n@162@01 <= 50) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 71 | n@162@01 <= 50]
(assert (<= n@162@01 50))
; [exec]
; var i: Int
(declare-const i@181@01 Int)
; [exec]
; slot(a, n).val := Seq[Seq[Int]]()
; [eval] slot(a, n)
; [eval] Seq[Seq[Int]]()
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@168@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@182@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@182@01 r))
    $Perm.No)
  
  :qid |quant-u-22647|))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@182@01 r) $Perm.No)
  
  :qid |quant-u-22648|))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (= (- $Perm.Write (pTaken@182@01 r)) $Perm.No))
  
  :qid |quant-u-22649|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@183@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@183@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  (as Seq_empty  Seq<Seq<Int>>)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; [exec]
; i := 0
(declare-const oldSoln@184@01 Seq<Int>)
(declare-const soln@185@01 Seq<Int>)
(declare-const i@186@01 Int)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@187@01 $Snap)
(assert (= $t@187@01 ($Snap.combine ($Snap.first $t@187@01) ($Snap.second $t@187@01))))
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@188@01 $FVF<val>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_val (as sm@188@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@187@01))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
  (not (= (slot<Ref> a@128@01 (- n@162@01 1)) $Ref.null))))
(declare-const sm@189@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@189@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@189@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
  :pattern (($FVF.lookup_val (as sm@189@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef65|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@189@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(assert (=
  ($Snap.second $t@187@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@187@01))
    ($Snap.second ($Snap.second $t@187@01)))))
(assert (= ($Snap.first ($Snap.second $t@187@01)) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (=
  ($Snap.second ($Snap.second $t@187@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@187@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@187@01))) $Snap.unit))
; [eval] 0 <= i
(assert (<= 0 i@186@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@187@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  $Snap.unit))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@189@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@189@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef64|))
  (forall ((r $Ref)) (!
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    :pattern (($FVF.lookup_val (as sm@189@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef65|))))
(push) ; 7
(assert (not (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@186@01
  (Seq_length
    ($FVF.lookup_val (as sm@189@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
; [eval] slot(a, n)
(declare-const sm@190@01 $FVF<val>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_val (as sm@190@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
    (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1))))
  (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
  (not (= (slot<Ref> a@128@01 n@162@01) $Ref.null))))
(declare-const sm@191@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
  $Snap.unit))
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  i@186@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
  $Snap.unit))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@192@01 Int)
(declare-const n1@193@01 Int)
(push) ; 7
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 8
; [then-branch: 72 | n1@193@01 != n@162@01 - 1 | live]
; [else-branch: 72 | n1@193@01 == n@162@01 - 1 | live]
(push) ; 9
; [then-branch: 72 | n1@193@01 != n@162@01 - 1]
(assert (not (= n1@193@01 (- n@162@01 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 72 | n1@193@01 == n@162@01 - 1]
(assert (= n1@193@01 (- n@162@01 1)))
; [eval] 0 <= j
(push) ; 10
; [then-branch: 73 | !(0 <= j@192@01) | live]
; [else-branch: 73 | 0 <= j@192@01 | live]
(push) ; 11
; [then-branch: 73 | !(0 <= j@192@01)]
(assert (not (<= 0 j@192@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 73 | 0 <= j@192@01]
(assert (<= 0 j@192@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (=>
  (<= 0 j@192@01)
  (and
    (<= 0 j@192@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
      n@162@01
      1))) (slot<Ref> a@128@01 (- n@162@01 1))))))
(assert (or (<= 0 j@192@01) (not (<= 0 j@192@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (=>
  (= n1@193@01 (- n@162@01 1))
  (and
    (= n1@193@01 (- n@162@01 1))
    (=>
      (<= 0 j@192@01)
      (and
        (<= 0 j@192@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1))) (slot<Ref> a@128@01 (- n@162@01 1)))))
    (or (<= 0 j@192@01) (not (<= 0 j@192@01))))))
(assert (or (= n1@193@01 (- n@162@01 1)) (not (= n1@193@01 (- n@162@01 1)))))
(push) ; 8
; [then-branch: 74 | n1@193@01 == n@162@01 - 1 && 0 <= j@192@01 && j@192@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))| | live]
; [else-branch: 74 | !(n1@193@01 == n@162@01 - 1 && 0 <= j@192@01 && j@192@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))|) | live]
(push) ; 9
; [then-branch: 74 | n1@193@01 == n@162@01 - 1 && 0 <= j@192@01 && j@192@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))|]
(assert (and
  (= n1@193@01 (- n@162@01 1))
  (and
    (<= 0 j@192@01)
    (<
      j@192@01
      (Seq_length
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01)) (slot<Ref> a@128@01 n1@193@01)))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n1@193@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n1@193@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@192@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@192@01
  (Seq_length
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
  j@192@01) (- n@162@01 1) true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
  j@192@01) (- n@162@01 1) true))
(pop) ; 9
(push) ; 9
; [else-branch: 74 | !(n1@193@01 == n@162@01 - 1 && 0 <= j@192@01 && j@192@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))|)]
(assert (not
  (and
    (= n1@193@01 (- n@162@01 1))
    (and
      (<= 0 j@192@01)
      (<
        j@192@01
        (Seq_length
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (=>
  (and
    (= n1@193@01 (- n@162@01 1))
    (and
      (<= 0 j@192@01)
      (<
        j@192@01
        (Seq_length
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))
  (and
    (= n1@193@01 (- n@162@01 1))
    (<= 0 j@192@01)
    (<
      j@192@01
      (Seq_length
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1)))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01)) (slot<Ref> a@128@01 n1@193@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
      j@192@01) (- n@162@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@193@01 (- n@162@01 1))
      (and
        (<= 0 j@192@01)
        (<
          j@192@01
          (Seq_length
            ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1))))))))
  (and
    (= n1@193@01 (- n@162@01 1))
    (and
      (<= 0 j@192@01)
      (<
        j@192@01
        (Seq_length
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@192@01 Int) (n1@193@01 Int)) (!
  (and
    (=>
      (= n1@193@01 (- n@162@01 1))
      (and
        (= n1@193@01 (- n@162@01 1))
        (=>
          (<= 0 j@192@01)
          (and
            (<= 0 j@192@01)
            ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1))) (slot<Ref> a@128@01 (- n@162@01 1)))))
        (or (<= 0 j@192@01) (not (<= 0 j@192@01)))))
    (or (= n1@193@01 (- n@162@01 1)) (not (= n1@193@01 (- n@162@01 1))))
    (=>
      (and
        (= n1@193@01 (- n@162@01 1))
        (and
          (<= 0 j@192@01)
          (<
            j@192@01
            (Seq_length
              ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))
      (and
        (= n1@193@01 (- n@162@01 1))
        (<= 0 j@192@01)
        (<
          j@192@01
          (Seq_length
            ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01)) (slot<Ref> a@128@01 n1@193@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
          j@192@01) (- n@162@01 1) true)))
    (or
      (not
        (and
          (= n1@193@01 (- n@162@01 1))
          (and
            (<= 0 j@192@01)
            (<
              j@192@01
              (Seq_length
                ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1))))))))
      (and
        (= n1@193@01 (- n@162@01 1))
        (and
          (<= 0 j@192@01)
          (<
            j@192@01
            (Seq_length
              ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
    j@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42-aux|)))
(assert (forall ((j@192@01 Int) (n1@193@01 Int)) (!
  (=>
    (and
      (= n1@193@01 (- n@162@01 1))
      (and
        (<= 0 j@192@01)
        (<
          j@192@01
          (Seq_length
            ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
      j@192@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
    j@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
  $Snap.unit))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@194@01 Int)
(push) ; 7
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 8
; [then-branch: 75 | !(0 <= j@194@01) | live]
; [else-branch: 75 | 0 <= j@194@01 | live]
(push) ; 9
; [then-branch: 75 | !(0 <= j@194@01)]
(assert (not (<= 0 j@194@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 75 | 0 <= j@194@01]
(assert (<= 0 j@194@01))
; [eval] j < i
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@194@01) (not (<= 0 j@194@01))))
(push) ; 8
; [then-branch: 76 | 0 <= j@194@01 && j@194@01 < i@186@01 | live]
; [else-branch: 76 | !(0 <= j@194@01 && j@194@01 < i@186@01) | live]
(push) ; 9
; [then-branch: 76 | 0 <= j@194@01 && j@194@01 < i@186@01]
(assert (and (<= 0 j@194@01) (< j@194@01 i@186@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@194@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@194@01
  (Seq_length
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@194@01) n@162@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@194@01) n@162@01 true))
(pop) ; 9
(push) ; 9
; [else-branch: 76 | !(0 <= j@194@01 && j@194@01 < i@186@01)]
(assert (not (and (<= 0 j@194@01) (< j@194@01 i@186@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (=>
  (and (<= 0 j@194@01) (< j@194@01 i@186@01))
  (and
    (<= 0 j@194@01)
    (< j@194@01 i@186@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@194@01) n@162@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@194@01) (< j@194@01 i@186@01)))
  (and (<= 0 j@194@01) (< j@194@01 i@186@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@194@01 Int)) (!
  (and
    (or (<= 0 j@194@01) (not (<= 0 j@194@01)))
    (=>
      (and (<= 0 j@194@01) (< j@194@01 i@186@01))
      (and
        (<= 0 j@194@01)
        (< j@194@01 i@186@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@194@01) n@162@01 true)))
    (or
      (not (and (<= 0 j@194@01) (< j@194@01 i@186@01)))
      (and (<= 0 j@194@01) (< j@194@01 i@186@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104-aux|)))
(assert (forall ((j@194@01 Int)) (!
  (=>
    (and (<= 0 j@194@01) (< j@194@01 i@186@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@194@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|)))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@195@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(push) ; 7
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@196@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    ($Perm.min
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (- $Perm.Write (pTaken@182@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@197@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@196@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (- $Perm.Write (pTaken@182@01 r))
        $Perm.No)
      (pTaken@196@01 r))
    $Perm.No)
  
  :qid |quant-u-22651|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@196@01 r) $Perm.No)
  
  :qid |quant-u-22652|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@196@01 r)) $Perm.No))
  
  :qid |quant-u-22653|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef71|))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 (- n@162@01 1)))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 (- n@162@01 1))))
          (<
            (inv@166@01 (slot<Ref> a@128@01 (- n@162@01 1)))
            (len<Int> a@128@01))))
      (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 (- n@162@01 1))))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<=
  0
  (Seq_length
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (Seq_length
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
; [eval] slot(a, n)
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@198@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@199@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@198@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (pTaken@198@01 (slot<Ref> a@128@01 n@162@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (= (- $Perm.Write (pTaken@198@01 r)) $Perm.No))
  
  :qid |quant-u-22656|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef71|))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 n@162@01))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 n@162@01)))
          (< (inv@166@01 (slot<Ref> a@128@01 n@162@01)) (len<Int> a@128@01))))
      (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 n@162@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  0))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@200@01 Int)
(declare-const n1@201@01 Int)
(push) ; 7
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 8
; [then-branch: 77 | n1@201@01 != n@162@01 - 1 | live]
; [else-branch: 77 | n1@201@01 == n@162@01 - 1 | live]
(push) ; 9
; [then-branch: 77 | n1@201@01 != n@162@01 - 1]
(assert (not (= n1@201@01 (- n@162@01 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 77 | n1@201@01 == n@162@01 - 1]
(assert (= n1@201@01 (- n@162@01 1)))
; [eval] 0 <= j
(push) ; 10
; [then-branch: 78 | !(0 <= j@200@01) | live]
; [else-branch: 78 | 0 <= j@200@01 | live]
(push) ; 11
; [then-branch: 78 | !(0 <= j@200@01)]
(assert (not (<= 0 j@200@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 78 | 0 <= j@200@01]
(assert (<= 0 j@200@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef71|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 (- n@162@01 1)))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 (- n@162@01 1))))
          (<
            (inv@166@01 (slot<Ref> a@128@01 (- n@162@01 1)))
            (len<Int> a@128@01))))
      (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 (- n@162@01 1))))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (or (<= 0 j@200@01) (not (<= 0 j@200@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (= n1@201@01 (- n@162@01 1))
  (and (= n1@201@01 (- n@162@01 1)) (or (<= 0 j@200@01) (not (<= 0 j@200@01))))))
(assert (or (= n1@201@01 (- n@162@01 1)) (not (= n1@201@01 (- n@162@01 1)))))
(push) ; 8
; [then-branch: 79 | n1@201@01 == n@162@01 - 1 && 0 <= j@200@01 && j@200@01 < |Lookup(val, sm@195@01, slot[Ref](a@128@01, n@162@01 - 1))| | live]
; [else-branch: 79 | !(n1@201@01 == n@162@01 - 1 && 0 <= j@200@01 && j@200@01 < |Lookup(val, sm@195@01, slot[Ref](a@128@01, n@162@01 - 1))|) | live]
(push) ; 9
; [then-branch: 79 | n1@201@01 == n@162@01 - 1 && 0 <= j@200@01 && j@200@01 < |Lookup(val, sm@195@01, slot[Ref](a@128@01, n@162@01 - 1))|]
(assert (and
  (= n1@201@01 (- n@162@01 1))
  (and
    (<= 0 j@200@01)
    (<
      j@200@01
      (Seq_length
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef71|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01)) (slot<Ref> a@128@01 n1@201@01)))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n1@201@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 n1@201@01))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 n1@201@01)))
          (< (inv@166@01 (slot<Ref> a@128@01 n1@201@01)) (len<Int> a@128@01))))
      (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 n1@201@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@200@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@200@01
  (Seq_length
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
  j@200@01) (- n@162@01 1) true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
  j@200@01) (- n@162@01 1) true))
(pop) ; 9
(push) ; 9
; [else-branch: 79 | !(n1@201@01 == n@162@01 - 1 && 0 <= j@200@01 && j@200@01 < |Lookup(val, sm@195@01, slot[Ref](a@128@01, n@162@01 - 1))|)]
(assert (not
  (and
    (= n1@201@01 (- n@162@01 1))
    (and
      (<= 0 j@200@01)
      (<
        j@200@01
        (Seq_length
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (and
    (= n1@201@01 (- n@162@01 1))
    (and
      (<= 0 j@200@01)
      (<
        j@200@01
        (Seq_length
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))
  (and
    (= n1@201@01 (- n@162@01 1))
    (<= 0 j@200@01)
    (<
      j@200@01
      (Seq_length
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1)))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01)) (slot<Ref> a@128@01 n1@201@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
      j@200@01) (- n@162@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@201@01 (- n@162@01 1))
      (and
        (<= 0 j@200@01)
        (<
          j@200@01
          (Seq_length
            ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1))))))))
  (and
    (= n1@201@01 (- n@162@01 1))
    (and
      (<= 0 j@200@01)
      (<
        j@200@01
        (Seq_length
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@200@01 Int) (n1@201@01 Int)) (!
  (and
    (=>
      (= n1@201@01 (- n@162@01 1))
      (and
        (= n1@201@01 (- n@162@01 1))
        (or (<= 0 j@200@01) (not (<= 0 j@200@01)))))
    (or (= n1@201@01 (- n@162@01 1)) (not (= n1@201@01 (- n@162@01 1))))
    (=>
      (and
        (= n1@201@01 (- n@162@01 1))
        (and
          (<= 0 j@200@01)
          (<
            j@200@01
            (Seq_length
              ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))
      (and
        (= n1@201@01 (- n@162@01 1))
        (<= 0 j@200@01)
        (<
          j@200@01
          (Seq_length
            ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01)) (slot<Ref> a@128@01 n1@201@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
          j@200@01) (- n@162@01 1) true)))
    (or
      (not
        (and
          (= n1@201@01 (- n@162@01 1))
          (and
            (<= 0 j@200@01)
            (<
              j@200@01
              (Seq_length
                ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1))))))))
      (and
        (= n1@201@01 (- n@162@01 1))
        (and
          (<= 0 j@200@01)
          (<
            j@200@01
            (Seq_length
              ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
    j@200@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42-aux|)))
(assert (forall ((j@200@01 Int) (n1@201@01 Int)) (!
  (=>
    (and
      (= n1@201@01 (- n@162@01 1))
      (and
        (<= 0 j@200@01)
        (<
          j@200@01
          (Seq_length
            ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
      j@200@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
    j@200@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42_precondition|)))
(push) ; 7
(assert (not (forall ((j@200@01 Int) (n1@201@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@201@01 (- n@162@01 1))
          (and
            (<= 0 j@200@01)
            (<
              j@200@01
              (Seq_length
                ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
          j@200@01) (- n@162@01 1) true))
      (and
        (= n1@201@01 (- n@162@01 1))
        (and
          (<= 0 j@200@01)
          (<
            j@200@01
            (Seq_length
              ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
      j@200@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
    j@200@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@200@01 Int) (n1@201@01 Int)) (!
  (=>
    (and
      (= n1@201@01 (- n@162@01 1))
      (and
        (<= 0 j@200@01)
        (<
          j@200@01
          (Seq_length
            ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
      j@200@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n1@201@01))
    j@200@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@202@01 Int)
(push) ; 7
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 8
; [then-branch: 80 | !(0 <= j@202@01) | live]
; [else-branch: 80 | 0 <= j@202@01 | live]
(push) ; 9
; [then-branch: 80 | !(0 <= j@202@01)]
(assert (not (<= 0 j@202@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 80 | 0 <= j@202@01]
(assert (<= 0 j@202@01))
; [eval] j < i
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@202@01) (not (<= 0 j@202@01))))
(push) ; 8
; [then-branch: 81 | 0 <= j@202@01 && j@202@01 < 0 | live]
; [else-branch: 81 | !(0 <= j@202@01 && j@202@01 < 0) | live]
(push) ; 9
; [then-branch: 81 | 0 <= j@202@01 && j@202@01 < 0]
(assert (and (<= 0 j@202@01) (< j@202@01 0)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
    :qid |qp.fvfValDef69|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef70|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef71|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 n@162@01))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 n@162@01)))
          (< (inv@166@01 (slot<Ref> a@128@01 n@162@01)) (len<Int> a@128@01))))
      (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 n@162@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@202@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@202@01
  (Seq_length
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@202@01) n@162@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@202@01) n@162@01 true))
(pop) ; 9
(push) ; 9
; [else-branch: 81 | !(0 <= j@202@01 && j@202@01 < 0)]
(assert (not (and (<= 0 j@202@01) (< j@202@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
(assert (=>
  (and (<= 0 j@202@01) (< j@202@01 0))
  (and
    (<= 0 j@202@01)
    (< j@202@01 0)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@202@01) n@162@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@202@01) (< j@202@01 0)))
  (and (<= 0 j@202@01) (< j@202@01 0))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@183@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@183@01  $FVF<val>) r))
  :qid |qp.fvfValDef69|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- $Perm.Write (pTaken@182@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef70|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@183@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@195@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef71|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@202@01 Int)) (!
  (and
    (or (<= 0 j@202@01) (not (<= 0 j@202@01)))
    (=>
      (and (<= 0 j@202@01) (< j@202@01 0))
      (and
        (<= 0 j@202@01)
        (< j@202@01 0)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@202@01) n@162@01 true)))
    (or
      (not (and (<= 0 j@202@01) (< j@202@01 0)))
      (and (<= 0 j@202@01) (< j@202@01 0))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104-aux|)))
(assert (forall ((j@202@01 Int)) (!
  (=>
    (and (<= 0 j@202@01) (< j@202@01 0))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@202@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104_precondition|)))
(push) ; 7
(assert (not (forall ((j@202@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@202@01) (< j@202@01 0))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@202@01) n@162@01 true))
      (and (<= 0 j@202@01) (< j@202@01 0)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@202@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@202@01 Int)) (!
  (=>
    (and (<= 0 j@202@01) (< j@202@01 0))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@202@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@195@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@202@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef66|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef67|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef68|)))
(assert (=
  ($FVF.lookup_val (as sm@190@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
  (not (= (slot<Ref> a@128@01 n@162@01) $Ref.null))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  i@186@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
  $Snap.unit))
(assert (forall ((j@192@01 Int) (n1@193@01 Int)) (!
  (and
    (=>
      (= n1@193@01 (- n@162@01 1))
      (and
        (= n1@193@01 (- n@162@01 1))
        (=>
          (<= 0 j@192@01)
          (and
            (<= 0 j@192@01)
            ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1))) (slot<Ref> a@128@01 (- n@162@01 1)))))
        (or (<= 0 j@192@01) (not (<= 0 j@192@01)))))
    (or (= n1@193@01 (- n@162@01 1)) (not (= n1@193@01 (- n@162@01 1))))
    (=>
      (and
        (= n1@193@01 (- n@162@01 1))
        (and
          (<= 0 j@192@01)
          (<
            j@192@01
            (Seq_length
              ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))
      (and
        (= n1@193@01 (- n@162@01 1))
        (<= 0 j@192@01)
        (<
          j@192@01
          (Seq_length
            ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01)) (slot<Ref> a@128@01 n1@193@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
          j@192@01) (- n@162@01 1) true)))
    (or
      (not
        (and
          (= n1@193@01 (- n@162@01 1))
          (and
            (<= 0 j@192@01)
            (<
              j@192@01
              (Seq_length
                ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1))))))))
      (and
        (= n1@193@01 (- n@162@01 1))
        (and
          (<= 0 j@192@01)
          (<
            j@192@01
            (Seq_length
              ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
    j@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42-aux|)))
(assert (forall ((j@192@01 Int) (n1@193@01 Int)) (!
  (=>
    (and
      (= n1@193@01 (- n@162@01 1))
      (and
        (<= 0 j@192@01)
        (<
          j@192@01
          (Seq_length
            ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
      j@192@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n1@193@01))
    j@192@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
  $Snap.unit))
(assert (forall ((j@194@01 Int)) (!
  (and
    (or (<= 0 j@194@01) (not (<= 0 j@194@01)))
    (=>
      (and (<= 0 j@194@01) (< j@194@01 i@186@01))
      (and
        (<= 0 j@194@01)
        (< j@194@01 i@186@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@194@01) n@162@01 true)))
    (or
      (not (and (<= 0 j@194@01) (< j@194@01 i@186@01)))
      (and (<= 0 j@194@01) (< j@194@01 i@186@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104-aux|)))
(assert (forall ((j@194@01 Int)) (!
  (=>
    (and (<= 0 j@194@01) (< j@194@01 i@186@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@194@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@194@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@189@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@189@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef64|)))
(assert (forall ((r $Ref)) (!
  ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
  :pattern (($FVF.lookup_val (as sm@189@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef65|)))
(assert (=
  ($FVF.lookup_val (as sm@188@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@187@01))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
  (not (= (slot<Ref> a@128@01 (- n@162@01 1)) $Ref.null))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@189@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(assert (=
  ($Snap.second $t@187@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@187@01))
    ($Snap.second ($Snap.second $t@187@01)))))
(assert (= ($Snap.first ($Snap.second $t@187@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@187@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@187@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@187@01))) $Snap.unit))
(assert (<= 0 i@186@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@187@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  $Snap.unit))
(assert (<=
  i@186@01
  (Seq_length
    ($FVF.lookup_val (as sm@189@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@187@01))))))))
(assert (= $t@187@01 ($Snap.combine ($Snap.first $t@187@01) ($Snap.second $t@187@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [eval] !(i < |slot(a, n - 1).val|)
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    i@186@01
    (Seq_length
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
        n@162@01
        1))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  i@186@01
  (Seq_length
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | i@186@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))| | live]
; [else-branch: 82 | !(i@186@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))|) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 82 | i@186@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))|]
(assert (<
  i@186@01
  (Seq_length
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
; [exec]
; var oldSoln: Seq[Int]
(declare-const oldSoln@203@01 Seq<Int>)
; [exec]
; var soln: Seq[Int]
(declare-const soln@204@01 Seq<Int>)
; [exec]
; oldSoln := slot(a, n - 1).val[i]
; [eval] slot(a, n - 1).val[i]
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= i@186@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const oldSoln@205@01 Seq<Int>)
(assert (=
  oldSoln@205@01
  (Seq_index
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))
    i@186@01)))
; [eval] oldSoln[0] == 0
; [eval] oldSoln[0]
(push) ; 9
(assert (not (< 0 (Seq_length oldSoln@205@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (Seq_index oldSoln@205@01 0) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index oldSoln@205@01 0) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | oldSoln@205@01[0] == 0 | live]
; [else-branch: 83 | oldSoln@205@01[0] != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 83 | oldSoln@205@01[0] == 0]
(assert (= (Seq_index oldSoln@205@01 0) 0))
; [exec]
; soln := oldSoln[1 := oldSoln[1] + 1]
; [eval] oldSoln[1 := oldSoln[1] + 1]
; [eval] oldSoln[1] + 1
; [eval] oldSoln[1]
(push) ; 10
(assert (not (< 1 (Seq_length oldSoln@205@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< 1 (Seq_length oldSoln@205@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const soln@206@01 Seq<Int>)
(assert (=
  soln@206@01
  (Seq_append
    (Seq_take oldSoln@205@01 1)
    (Seq_append
      (Seq_singleton (+ (Seq_index oldSoln@205@01 1) 1))
      (Seq_drop oldSoln@205@01 2)))))
; [exec]
; assert soln[2..] == oldSoln[2..]
; [eval] soln[2..] == oldSoln[2..]
; [eval] soln[2..]
; [eval] oldSoln[2..]
(push) ; 10
(assert (not (Seq_equal (Seq_drop soln@206@01 2) (Seq_drop oldSoln@205@01 2))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal (Seq_drop soln@206@01 2) (Seq_drop oldSoln@205@01 2)))
; [exec]
; assert valid(soln, n, true)
; [eval] valid(soln, n, true)
(push) ; 10
(assert (valid%precondition $Snap.unit soln@206@01 n@162@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit soln@206@01 n@162@01 true))
(push) ; 10
(assert (not (valid $Snap.unit soln@206@01 n@162@01 true)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit soln@206@01 n@162@01 true))
; [exec]
; slot(a, n).val := slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
; [eval] slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(soln)
(assert (= (Seq_length (Seq_singleton soln@206@01)) 1))
; Definitional axioms for snapshot map values
; Precomputing data for removing quantified permissions
(define-fun pTaken@207@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@208@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@207@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (pTaken@207@01 (slot<Ref> a@128@01 n@162@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (= (- $Perm.Write (pTaken@207@01 r)) $Perm.No))
  
  :qid |quant-u-22659|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@209@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@209@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  (Seq_append
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    (Seq_singleton soln@206@01))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; [exec]
; i := i + 1
; [eval] i + 1
(declare-const i@210@01 Int)
(assert (= i@210@01 (+ i@186@01 1)))
; Loop head block: Re-establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@211@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@212@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@213@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@212@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@212@01 (slot<Ref> a@128@01 (- n@162@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@212@01 r)) $Perm.No))
  
  :qid |quant-u-22662|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
(set-option :timeout 0)
(push) ; 10
(assert (not (<= 0 i@210@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i@210@01))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
    :qid |qp.fvfValDef72|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef74|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  i@210@01
  (Seq_length
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@210@01
  (Seq_length
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
; [eval] slot(a, n)
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@214@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (pTaken@214@01 (slot<Ref> a@128@01 n@162@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (= (- $Perm.Write (pTaken@214@01 r)) $Perm.No))
  
  :qid |quant-u-22665|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
    :qid |qp.fvfValDef72|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef74|))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  i@210@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  i@210@01))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@215@01 Int)
(declare-const n1@216@01 Int)
(push) ; 10
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 11
; [then-branch: 84 | n1@216@01 != n@162@01 - 1 | live]
; [else-branch: 84 | n1@216@01 == n@162@01 - 1 | live]
(push) ; 12
; [then-branch: 84 | n1@216@01 != n@162@01 - 1]
(assert (not (= n1@216@01 (- n@162@01 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 84 | n1@216@01 == n@162@01 - 1]
(assert (= n1@216@01 (- n@162@01 1)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 85 | !(0 <= j@215@01) | live]
; [else-branch: 85 | 0 <= j@215@01 | live]
(push) ; 14
; [then-branch: 85 | !(0 <= j@215@01)]
(assert (not (<= 0 j@215@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 85 | 0 <= j@215@01]
(assert (<= 0 j@215@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
    :qid |qp.fvfValDef72|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef74|))))
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (or (<= 0 j@215@01) (not (<= 0 j@215@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (= n1@216@01 (- n@162@01 1))
  (and (= n1@216@01 (- n@162@01 1)) (or (<= 0 j@215@01) (not (<= 0 j@215@01))))))
(assert (or (= n1@216@01 (- n@162@01 1)) (not (= n1@216@01 (- n@162@01 1)))))
(push) ; 11
; [then-branch: 86 | n1@216@01 == n@162@01 - 1 && 0 <= j@215@01 && j@215@01 < |Lookup(val, sm@211@01, slot[Ref](a@128@01, n@162@01 - 1))| | live]
; [else-branch: 86 | !(n1@216@01 == n@162@01 - 1 && 0 <= j@215@01 && j@215@01 < |Lookup(val, sm@211@01, slot[Ref](a@128@01, n@162@01 - 1))|) | live]
(push) ; 12
; [then-branch: 86 | n1@216@01 == n@162@01 - 1 && 0 <= j@215@01 && j@215@01 < |Lookup(val, sm@211@01, slot[Ref](a@128@01, n@162@01 - 1))|]
(assert (and
  (= n1@216@01 (- n@162@01 1))
  (and
    (<= 0 j@215@01)
    (<
      j@215@01
      (Seq_length
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
    :qid |qp.fvfValDef72|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef74|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01)) (slot<Ref> a@128@01 n1@216@01)))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n1@216@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n1@216@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@215@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@215@01
  (Seq_length
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
  j@215@01) (- n@162@01 1) true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
  j@215@01) (- n@162@01 1) true))
(pop) ; 12
(push) ; 12
; [else-branch: 86 | !(n1@216@01 == n@162@01 - 1 && 0 <= j@215@01 && j@215@01 < |Lookup(val, sm@211@01, slot[Ref](a@128@01, n@162@01 - 1))|)]
(assert (not
  (and
    (= n1@216@01 (- n@162@01 1))
    (and
      (<= 0 j@215@01)
      (<
        j@215@01
        (Seq_length
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (and
    (= n1@216@01 (- n@162@01 1))
    (and
      (<= 0 j@215@01)
      (<
        j@215@01
        (Seq_length
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))
  (and
    (= n1@216@01 (- n@162@01 1))
    (<= 0 j@215@01)
    (<
      j@215@01
      (Seq_length
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1)))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01)) (slot<Ref> a@128@01 n1@216@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
      j@215@01) (- n@162@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@216@01 (- n@162@01 1))
      (and
        (<= 0 j@215@01)
        (<
          j@215@01
          (Seq_length
            ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1))))))))
  (and
    (= n1@216@01 (- n@162@01 1))
    (and
      (<= 0 j@215@01)
      (<
        j@215@01
        (Seq_length
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@215@01 Int) (n1@216@01 Int)) (!
  (and
    (=>
      (= n1@216@01 (- n@162@01 1))
      (and
        (= n1@216@01 (- n@162@01 1))
        (or (<= 0 j@215@01) (not (<= 0 j@215@01)))))
    (or (= n1@216@01 (- n@162@01 1)) (not (= n1@216@01 (- n@162@01 1))))
    (=>
      (and
        (= n1@216@01 (- n@162@01 1))
        (and
          (<= 0 j@215@01)
          (<
            j@215@01
            (Seq_length
              ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))
      (and
        (= n1@216@01 (- n@162@01 1))
        (<= 0 j@215@01)
        (<
          j@215@01
          (Seq_length
            ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01)) (slot<Ref> a@128@01 n1@216@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
          j@215@01) (- n@162@01 1) true)))
    (or
      (not
        (and
          (= n1@216@01 (- n@162@01 1))
          (and
            (<= 0 j@215@01)
            (<
              j@215@01
              (Seq_length
                ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1))))))))
      (and
        (= n1@216@01 (- n@162@01 1))
        (and
          (<= 0 j@215@01)
          (<
            j@215@01
            (Seq_length
              ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
    j@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42-aux|)))
(assert (forall ((j@215@01 Int) (n1@216@01 Int)) (!
  (=>
    (and
      (= n1@216@01 (- n@162@01 1))
      (and
        (<= 0 j@215@01)
        (<
          j@215@01
          (Seq_length
            ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
      j@215@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
    j@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42_precondition|)))
(push) ; 10
(assert (not (forall ((j@215@01 Int) (n1@216@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@216@01 (- n@162@01 1))
          (and
            (<= 0 j@215@01)
            (<
              j@215@01
              (Seq_length
                ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
          j@215@01) (- n@162@01 1) true))
      (and
        (= n1@216@01 (- n@162@01 1))
        (and
          (<= 0 j@215@01)
          (<
            j@215@01
            (Seq_length
              ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
      j@215@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
    j@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@215@01 Int) (n1@216@01 Int)) (!
  (=>
    (and
      (= n1@216@01 (- n@162@01 1))
      (and
        (<= 0 j@215@01)
        (<
          j@215@01
          (Seq_length
            ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
      j@215@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n1@216@01))
    j@215@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@217@01 Int)
(push) ; 10
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 11
; [then-branch: 87 | !(0 <= j@217@01) | live]
; [else-branch: 87 | 0 <= j@217@01 | live]
(push) ; 12
; [then-branch: 87 | !(0 <= j@217@01)]
(assert (not (<= 0 j@217@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 87 | 0 <= j@217@01]
(assert (<= 0 j@217@01))
; [eval] j < i
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@217@01) (not (<= 0 j@217@01))))
(push) ; 11
; [then-branch: 88 | 0 <= j@217@01 && j@217@01 < i@210@01 | live]
; [else-branch: 88 | !(0 <= j@217@01 && j@217@01 < i@210@01) | live]
(push) ; 12
; [then-branch: 88 | 0 <= j@217@01 && j@217@01 < i@210@01]
(assert (and (<= 0 j@217@01) (< j@217@01 i@210@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
    :qid |qp.fvfValDef72|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef73|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef74|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@217@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@217@01
  (Seq_length
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@217@01) n@162@01 true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@217@01) n@162@01 true))
(pop) ; 12
(push) ; 12
; [else-branch: 88 | !(0 <= j@217@01 && j@217@01 < i@210@01)]
(assert (not (and (<= 0 j@217@01) (< j@217@01 i@210@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
(assert (=>
  (and (<= 0 j@217@01) (< j@217@01 i@210@01))
  (and
    (<= 0 j@217@01)
    (< j@217@01 i@210@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@217@01) n@162@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@217@01) (< j@217@01 i@210@01)))
  (and (<= 0 j@217@01) (< j@217@01 i@210@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@209@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@209@01  $FVF<val>) r))
  :qid |qp.fvfValDef72|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef73|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@209@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@211@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef74|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@217@01 Int)) (!
  (and
    (or (<= 0 j@217@01) (not (<= 0 j@217@01)))
    (=>
      (and (<= 0 j@217@01) (< j@217@01 i@210@01))
      (and
        (<= 0 j@217@01)
        (< j@217@01 i@210@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@217@01) n@162@01 true)))
    (or
      (not (and (<= 0 j@217@01) (< j@217@01 i@210@01)))
      (and (<= 0 j@217@01) (< j@217@01 i@210@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104-aux|)))
(assert (forall ((j@217@01 Int)) (!
  (=>
    (and (<= 0 j@217@01) (< j@217@01 i@210@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@217@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104_precondition|)))
(push) ; 10
(assert (not (forall ((j@217@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@217@01) (< j@217@01 i@210@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@217@01) n@162@01 true))
      (and (<= 0 j@217@01) (< j@217@01 i@210@01)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@217@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@217@01 Int)) (!
  (=>
    (and (<= 0 j@217@01) (< j@217@01 i@210@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@217@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@211@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@217@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|)))
(pop) ; 9
(push) ; 9
; [else-branch: 83 | oldSoln@205@01[0] != 0]
(assert (not (= (Seq_index oldSoln@205@01 0) 0)))
(pop) ; 9
; [eval] !(oldSoln[0] == 0)
; [eval] oldSoln[0] == 0
; [eval] oldSoln[0]
(push) ; 9
(assert (not (< 0 (Seq_length oldSoln@205@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index oldSoln@205@01 0) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (Seq_index oldSoln@205@01 0) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 89 | oldSoln@205@01[0] != 0 | live]
; [else-branch: 89 | oldSoln@205@01[0] == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 89 | oldSoln@205@01[0] != 0]
(assert (not (= (Seq_index oldSoln@205@01 0) 0)))
; [exec]
; soln := Seq(0, 1) ++ oldSoln
; [eval] Seq(0, 1) ++ oldSoln
; [eval] Seq(0, 1)
(declare-const soln@218@01 Seq<Int>)
(assert (=
  soln@218@01
  (Seq_append (Seq_append (Seq_singleton 0) (Seq_singleton 1)) oldSoln@205@01)))
; [exec]
; assert valid(oldSoln, n - 1, false)
; [eval] valid(oldSoln, n - 1, false)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit oldSoln@205@01 (- n@162@01 1) false))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit oldSoln@205@01 (- n@162@01 1) false))
(push) ; 10
(assert (not (valid $Snap.unit oldSoln@205@01 (- n@162@01 1) false)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit oldSoln@205@01 (- n@162@01 1) false))
; [exec]
; assert valid(soln, n, true)
; [eval] valid(soln, n, true)
(push) ; 10
(assert (valid%precondition $Snap.unit soln@218@01 n@162@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit soln@218@01 n@162@01 true))
(push) ; 10
(assert (not (valid $Snap.unit soln@218@01 n@162@01 true)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit soln@218@01 n@162@01 true))
; [exec]
; slot(a, n).val := slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
; [eval] slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef66|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@191@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef67|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@191@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef68|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(soln)
(assert (= (Seq_length (Seq_singleton soln@218@01)) 1))
; Definitional axioms for snapshot map values
; Precomputing data for removing quantified permissions
(define-fun pTaken@219@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@220@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@219@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (pTaken@219@01 (slot<Ref> a@128@01 n@162@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (= (- $Perm.Write (pTaken@219@01 r)) $Perm.No))
  
  :qid |quant-u-22668|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@221@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@221@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  (Seq_append
    ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    (Seq_singleton soln@218@01))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; [exec]
; i := i + 1
; [eval] i + 1
(declare-const i@222@01 Int)
(assert (= i@222@01 (+ i@186@01 1)))
; Loop head block: Re-establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@223@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
; Precomputing data for removing quantified permissions
(define-fun pTaken@224@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@225@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@224@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@224@01 (slot<Ref> a@128@01 (- n@162@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@224@01 r)) $Perm.No))
  
  :qid |quant-u-22671|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
(set-option :timeout 0)
(push) ; 10
(assert (not (<= 0 i@222@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i@222@01))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef77|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  i@222@01
  (Seq_length
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@222@01
  (Seq_length
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
; [eval] slot(a, n)
; Definitional axioms for snapshot map values
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)) (slot<Ref> a@128@01 n@162@01)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@226@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@128@01 n@162@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (pTaken@226@01 (slot<Ref> a@128@01 n@162@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (= (- $Perm.Write (pTaken@226@01 r)) $Perm.No))
  
  :qid |quant-u-22674|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef77|))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  i@222@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01)))
  i@222@01))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@227@01 Int)
(declare-const n1@228@01 Int)
(push) ; 10
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 11
; [then-branch: 90 | n1@228@01 != n@162@01 - 1 | live]
; [else-branch: 90 | n1@228@01 == n@162@01 - 1 | live]
(push) ; 12
; [then-branch: 90 | n1@228@01 != n@162@01 - 1]
(assert (not (= n1@228@01 (- n@162@01 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 90 | n1@228@01 == n@162@01 - 1]
(assert (= n1@228@01 (- n@162@01 1)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 91 | !(0 <= j@227@01) | live]
; [else-branch: 91 | 0 <= j@227@01 | live]
(push) ; 14
; [then-branch: 91 | !(0 <= j@227@01)]
(assert (not (<= 0 j@227@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 91 | 0 <= j@227@01]
(assert (<= 0 j@227@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef77|))))
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (or (<= 0 j@227@01) (not (<= 0 j@227@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (= n1@228@01 (- n@162@01 1))
  (and (= n1@228@01 (- n@162@01 1)) (or (<= 0 j@227@01) (not (<= 0 j@227@01))))))
(assert (or (= n1@228@01 (- n@162@01 1)) (not (= n1@228@01 (- n@162@01 1)))))
(push) ; 11
; [then-branch: 92 | n1@228@01 == n@162@01 - 1 && 0 <= j@227@01 && j@227@01 < |Lookup(val, sm@223@01, slot[Ref](a@128@01, n@162@01 - 1))| | live]
; [else-branch: 92 | !(n1@228@01 == n@162@01 - 1 && 0 <= j@227@01 && j@227@01 < |Lookup(val, sm@223@01, slot[Ref](a@128@01, n@162@01 - 1))|) | live]
(push) ; 12
; [then-branch: 92 | n1@228@01 == n@162@01 - 1 && 0 <= j@227@01 && j@227@01 < |Lookup(val, sm@223@01, slot[Ref](a@128@01, n@162@01 - 1))|]
(assert (and
  (= n1@228@01 (- n@162@01 1))
  (and
    (<= 0 j@227@01)
    (<
      j@227@01
      (Seq_length
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef77|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01)) (slot<Ref> a@128@01 n1@228@01)))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n1@228@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n1@228@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@227@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@227@01
  (Seq_length
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
  j@227@01) (- n@162@01 1) true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
  j@227@01) (- n@162@01 1) true))
(pop) ; 12
(push) ; 12
; [else-branch: 92 | !(n1@228@01 == n@162@01 - 1 && 0 <= j@227@01 && j@227@01 < |Lookup(val, sm@223@01, slot[Ref](a@128@01, n@162@01 - 1))|)]
(assert (not
  (and
    (= n1@228@01 (- n@162@01 1))
    (and
      (<= 0 j@227@01)
      (<
        j@227@01
        (Seq_length
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (and
    (= n1@228@01 (- n@162@01 1))
    (and
      (<= 0 j@227@01)
      (<
        j@227@01
        (Seq_length
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))
  (and
    (= n1@228@01 (- n@162@01 1))
    (<= 0 j@227@01)
    (<
      j@227@01
      (Seq_length
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
          n@162@01
          1)))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01)) (slot<Ref> a@128@01 n1@228@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
      j@227@01) (- n@162@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@228@01 (- n@162@01 1))
      (and
        (<= 0 j@227@01)
        (<
          j@227@01
          (Seq_length
            ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1))))))))
  (and
    (= n1@228@01 (- n@162@01 1))
    (and
      (<= 0 j@227@01)
      (<
        j@227@01
        (Seq_length
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
            n@162@01
            1)))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@227@01 Int) (n1@228@01 Int)) (!
  (and
    (=>
      (= n1@228@01 (- n@162@01 1))
      (and
        (= n1@228@01 (- n@162@01 1))
        (or (<= 0 j@227@01) (not (<= 0 j@227@01)))))
    (or (= n1@228@01 (- n@162@01 1)) (not (= n1@228@01 (- n@162@01 1))))
    (=>
      (and
        (= n1@228@01 (- n@162@01 1))
        (and
          (<= 0 j@227@01)
          (<
            j@227@01
            (Seq_length
              ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))
      (and
        (= n1@228@01 (- n@162@01 1))
        (<= 0 j@227@01)
        (<
          j@227@01
          (Seq_length
            ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01)) (slot<Ref> a@128@01 n1@228@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
          j@227@01) (- n@162@01 1) true)))
    (or
      (not
        (and
          (= n1@228@01 (- n@162@01 1))
          (and
            (<= 0 j@227@01)
            (<
              j@227@01
              (Seq_length
                ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1))))))))
      (and
        (= n1@228@01 (- n@162@01 1))
        (and
          (<= 0 j@227@01)
          (<
            j@227@01
            (Seq_length
              ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
    j@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42-aux|)))
(assert (forall ((j@227@01 Int) (n1@228@01 Int)) (!
  (=>
    (and
      (= n1@228@01 (- n@162@01 1))
      (and
        (<= 0 j@227@01)
        (<
          j@227@01
          (Seq_length
            ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
      j@227@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
    j@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42_precondition|)))
(push) ; 10
(assert (not (forall ((j@227@01 Int) (n1@228@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@228@01 (- n@162@01 1))
          (and
            (<= 0 j@227@01)
            (<
              j@227@01
              (Seq_length
                ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
                  n@162@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
          j@227@01) (- n@162@01 1) true))
      (and
        (= n1@228@01 (- n@162@01 1))
        (and
          (<= 0 j@227@01)
          (<
            j@227@01
            (Seq_length
              ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
                n@162@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
      j@227@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
    j@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@227@01 Int) (n1@228@01 Int)) (!
  (=>
    (and
      (= n1@228@01 (- n@162@01 1))
      (and
        (<= 0 j@227@01)
        (<
          j@227@01
          (Seq_length
            ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 (-
              n@162@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
      j@227@01) (- n@162@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n1@228@01))
    j@227@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@168@17@169@42|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@229@01 Int)
(push) ; 10
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 11
; [then-branch: 93 | !(0 <= j@229@01) | live]
; [else-branch: 93 | 0 <= j@229@01 | live]
(push) ; 12
; [then-branch: 93 | !(0 <= j@229@01)]
(assert (not (<= 0 j@229@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 93 | 0 <= j@229@01]
(assert (<= 0 j@229@01))
; [eval] j < i
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@229@01) (not (<= 0 j@229@01))))
(push) ; 11
; [then-branch: 94 | 0 <= j@229@01 && j@229@01 < i@222@01 | live]
; [else-branch: 94 | !(0 <= j@229@01 && j@229@01 < i@222@01) | live]
(push) ; 12
; [then-branch: 94 | 0 <= j@229@01 && j@229@01 < i@222@01]
(assert (and (<= 0 j@229@01) (< j@229@01 i@222@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
    :qid |qp.fvfValDef75|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef76|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
    :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef77|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@229@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@229@01
  (Seq_length
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@229@01) n@162@01 true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
  j@229@01) n@162@01 true))
(pop) ; 12
(push) ; 12
; [else-branch: 94 | !(0 <= j@229@01 && j@229@01 < i@222@01)]
(assert (not (and (<= 0 j@229@01) (< j@229@01 i@222@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
(assert (=>
  (and (<= 0 j@229@01) (< j@229@01 i@222@01))
  (and
    (<= 0 j@229@01)
    (< j@229@01 i@222@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@229@01) n@162@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@229@01) (< j@229@01 i@222@01)))
  (and (<= 0 j@229@01) (< j@229@01 i@222@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@221@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@221@01  $FVF<val>) r))
  :qid |qp.fvfValDef75|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef76|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@221@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r))
  :pattern (($FVF.lookup_val (as sm@223@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef77|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@229@01 Int)) (!
  (and
    (or (<= 0 j@229@01) (not (<= 0 j@229@01)))
    (=>
      (and (<= 0 j@229@01) (< j@229@01 i@222@01))
      (and
        (<= 0 j@229@01)
        (< j@229@01 i@222@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@229@01) n@162@01 true)))
    (or
      (not (and (<= 0 j@229@01) (< j@229@01 i@222@01)))
      (and (<= 0 j@229@01) (< j@229@01 i@222@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104-aux|)))
(assert (forall ((j@229@01 Int)) (!
  (=>
    (and (<= 0 j@229@01) (< j@229@01 i@222@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@229@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104_precondition|)))
(push) ; 10
(assert (not (forall ((j@229@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@229@01) (< j@229@01 i@222@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
          j@229@01) n@162@01 true))
      (and (<= 0 j@229@01) (< j@229@01 i@222@01)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@229@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@229@01 Int)) (!
  (=>
    (and (<= 0 j@229@01) (< j@229@01 i@222@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
      j@229@01) n@162@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@223@01  $FVF<val>) (slot<Ref> a@128@01 n@162@01))
    j@229@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@170@17@170@104|)))
(pop) ; 9
(push) ; 9
; [else-branch: 89 | oldSoln@205@01[0] == 0]
(assert (= (Seq_index oldSoln@205@01 0) 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 82 | !(i@186@01 < |Lookup(val, sm@191@01, slot[Ref](a@128@01, n@162@01 - 1))|)]
(assert (not
  (<
    i@186@01
    (Seq_length
      ($FVF.lookup_val (as sm@191@01  $FVF<val>) (slot<Ref> a@128@01 (-
        n@162@01
        1)))))))
(pop) ; 8
; [eval] !(i < |slot(a, n - 1).val|)
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@230@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef81|)))
(declare-const pm@231@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@231@01  $FPM) r)
    (+
      (+
        (ite
          (= r (slot<Ref> a@128@01 (- n@162@01 1)))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@231@01  $FPM) r))
  :qid |qp.resPrmSumDef82|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.perm_val (as pm@231@01  $FPM) r))
  :qid |qp.resTrgDef83|)))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 (-
  n@162@01
  1))) (slot<Ref> a@128@01 (- n@162@01 1))))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@231@01  $FPM) (slot<Ref> a@128@01 (- n@162@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  i@186@01
  (Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    i@186@01
    (Seq_length
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 (-
        n@162@01
        1))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 95 | !(i@186@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, n@162@01 - 1))|) | live]
; [else-branch: 95 | i@186@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, n@162@01 - 1))| | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 95 | !(i@186@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, n@162@01 - 1))|)]
(assert (not
  (<
    i@186@01
    (Seq_length
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 (-
        n@162@01
        1)))))))
; [exec]
; n := n + 1
; [eval] n + 1
(declare-const n@232@01 Int)
(assert (= n@232@01 (+ n@162@01 1)))
; Loop head block: Re-establish invariant
; [eval] 4 <= n
(push) ; 9
(assert (not (<= 4 n@232@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 4 n@232@01))
; [eval] n <= 51
(push) ; 9
(assert (not (<= n@232@01 51)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= n@232@01 51))
; [eval] len(a) == 51
; [eval] len(a)
(declare-const i@233@01 Int)
(push) ; 9
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 10
; [then-branch: 96 | !(0 <= i@233@01) | live]
; [else-branch: 96 | 0 <= i@233@01 | live]
(push) ; 11
; [then-branch: 96 | !(0 <= i@233@01)]
(assert (not (<= 0 i@233@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 96 | 0 <= i@233@01]
(assert (<= 0 i@233@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@233@01) (not (<= 0 i@233@01))))
(assert (and (<= 0 i@233@01) (< i@233@01 (len<Int> a@128@01))))
; [eval] slot(a, i)
(pop) ; 9
(declare-fun inv@234@01 ($Ref) Int)
(declare-fun img@235@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@233@01 Int)) (!
  (=>
    (and (<= 0 i@233@01) (< i@233@01 (len<Int> a@128@01)))
    (or (<= 0 i@233@01) (not (<= 0 i@233@01))))
  :pattern ((slot<Ref> a@128@01 i@233@01))
  :qid |val-aux|)))
; Definitional axioms for snapshot map values
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((i1@233@01 Int) (i2@233@01 Int)) (!
  (=>
    (and
      (and
        (and (<= 0 i1@233@01) (< i1@233@01 (len<Int> a@128@01)))
        ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 i1@233@01)) (slot<Ref> a@128@01 i1@233@01)))
      (and
        (and (<= 0 i2@233@01) (< i2@233@01 (len<Int> a@128@01)))
        ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 i2@233@01)) (slot<Ref> a@128@01 i2@233@01)))
      (= (slot<Ref> a@128@01 i1@233@01) (slot<Ref> a@128@01 i2@233@01)))
    (= i1@233@01 i2@233@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@233@01 Int)) (!
  (=>
    (and (<= 0 i@233@01) (< i@233@01 (len<Int> a@128@01)))
    (and
      (= (inv@234@01 (slot<Ref> a@128@01 i@233@01)) i@233@01)
      (img@235@01 (slot<Ref> a@128@01 i@233@01))))
  :pattern ((slot<Ref> a@128@01 i@233@01))
  :qid |val-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@235@01 r)
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01))))
    (= (slot<Ref> a@128@01 (inv@234@01 r)) r))
  :pattern ((inv@234@01 r))
  :qid |val-fctOfInv|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
    ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) r) r))
  :pattern ((inv@234@01 r))
  :qid |quant-u-22676|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@236@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
      (img@235@01 r)
      (= r (slot<Ref> a@128@01 (inv@234@01 r))))
    ($Perm.min
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@237@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
      (img@235@01 r)
      (= r (slot<Ref> a@128@01 (inv@234@01 r))))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@236@01 r)))
    $Perm.No))
(define-fun pTaken@238@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
      (img@235@01 r)
      (= r (slot<Ref> a@128@01 (inv@234@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@128@01 n@162@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@236@01 r)) (pTaken@237@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r))
        $Perm.No)
      (pTaken@236@01 r))
    $Perm.No)
  
  :qid |quant-u-22678|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
      (img@235@01 r)
      (= r (slot<Ref> a@128@01 (inv@234@01 r))))
    (= (- $Perm.Write (pTaken@236@01 r)) $Perm.No))
  
  :qid |quant-u-22679|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 (- n@162@01 1)) (slot<Ref> a@128@01 (- n@162@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@237@01 (slot<Ref> a@128@01 (- n@162@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
      (img@235@01 r)
      (= r (slot<Ref> a@128@01 (inv@234@01 r))))
    (= (- (- $Perm.Write (pTaken@236@01 r)) (pTaken@237@01 r)) $Perm.No))
  
  :qid |quant-u-22681|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@128@01 n@162@01) (slot<Ref> a@128@01 n@162@01))
      $Perm.Write
      $Perm.No)
    (pTaken@238@01 (slot<Ref> a@128@01 n@162@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@234@01 r)) (< (inv@234@01 r) (len<Int> a@128@01)))
      (img@235@01 r)
      (= r (slot<Ref> a@128@01 (inv@234@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@236@01 r)) (pTaken@237@01 r))
        (pTaken@238@01 r))
      $Perm.No))
  
  :qid |quant-u-22683|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@239@01 Int)
(declare-const j@240@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 10
; [then-branch: 97 | !(0 <= m@239@01) | live]
; [else-branch: 97 | 0 <= m@239@01 | live]
(push) ; 11
; [then-branch: 97 | !(0 <= m@239@01)]
(assert (not (<= 0 m@239@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 97 | 0 <= m@239@01]
(assert (<= 0 m@239@01))
; [eval] m < n
(push) ; 12
; [then-branch: 98 | !(m@239@01 < n@232@01) | live]
; [else-branch: 98 | m@239@01 < n@232@01 | live]
(push) ; 13
; [then-branch: 98 | !(m@239@01 < n@232@01)]
(assert (not (< m@239@01 n@232@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 98 | m@239@01 < n@232@01]
(assert (< m@239@01 n@232@01))
; [eval] 0 <= j
(push) ; 14
; [then-branch: 99 | !(0 <= j@240@01) | live]
; [else-branch: 99 | 0 <= j@240@01 | live]
(push) ; 15
; [then-branch: 99 | !(0 <= j@240@01)]
(assert (not (<= 0 j@240@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 99 | 0 <= j@240@01]
(assert (<= 0 j@240@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef78|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef80|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef81|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01)))
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@128@01 m@239@01) (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite
        (= (slot<Ref> a@128@01 m@239@01) (slot<Ref> a@128@01 n@162@01))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 m@239@01))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 m@239@01)))
          (< (inv@166@01 (slot<Ref> a@128@01 m@239@01)) (len<Int> a@128@01))))
      (-
        (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 m@239@01)))
        (pTaken@196@01 (slot<Ref> a@128@01 m@239@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (=>
  (<= 0 j@240@01)
  (and
    (<= 0 j@240@01)
    ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01)))))
(assert (or (<= 0 j@240@01) (not (<= 0 j@240@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (=>
  (< m@239@01 n@232@01)
  (and
    (< m@239@01 n@232@01)
    (=>
      (<= 0 j@240@01)
      (and
        (<= 0 j@240@01)
        ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))))
    (or (<= 0 j@240@01) (not (<= 0 j@240@01))))))
(assert (or (< m@239@01 n@232@01) (not (< m@239@01 n@232@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (=>
  (<= 0 m@239@01)
  (and
    (<= 0 m@239@01)
    (=>
      (< m@239@01 n@232@01)
      (and
        (< m@239@01 n@232@01)
        (=>
          (<= 0 j@240@01)
          (and
            (<= 0 j@240@01)
            ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))))
        (or (<= 0 j@240@01) (not (<= 0 j@240@01)))))
    (or (< m@239@01 n@232@01) (not (< m@239@01 n@232@01))))))
(assert (or (<= 0 m@239@01) (not (<= 0 m@239@01))))
(push) ; 10
; [then-branch: 100 | 0 <= m@239@01 && m@239@01 < n@232@01 && 0 <= j@240@01 && j@240@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, m@239@01))| | live]
; [else-branch: 100 | !(0 <= m@239@01 && m@239@01 < n@232@01 && 0 <= j@240@01 && j@240@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, m@239@01))|) | live]
(push) ; 11
; [then-branch: 100 | 0 <= m@239@01 && m@239@01 < n@232@01 && 0 <= j@240@01 && j@240@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, m@239@01))|]
(assert (and
  (<= 0 m@239@01)
  (and
    (< m@239@01 n@232@01)
    (and
      (<= 0 j@240@01)
      (<
        j@240@01
        (Seq_length
          ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 (- n@162@01 1)))
      (=
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
    :qid |qp.fvfValDef78|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@128@01 n@162@01))
      (=
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
    :qid |qp.fvfValDef79|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@167@01 r)
          (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
    :qid |qp.fvfValDef80|))
  (forall ((r $Ref)) (!
    (and
      ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
      ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
    :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
    :qid |qp.fvfResTrgDef81|))))
(assert ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01)))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@128@01 m@239@01) (slot<Ref> a@128@01 (- n@162@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite
        (= (slot<Ref> a@128@01 m@239@01) (slot<Ref> a@128@01 n@162@01))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@167@01 (slot<Ref> a@128@01 m@239@01))
        (and
          (<= 0 (inv@166@01 (slot<Ref> a@128@01 m@239@01)))
          (< (inv@166@01 (slot<Ref> a@128@01 m@239@01)) (len<Int> a@128@01))))
      (-
        (- $Perm.Write (pTaken@182@01 (slot<Ref> a@128@01 m@239@01)))
        (pTaken@196@01 (slot<Ref> a@128@01 m@239@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= j@240@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
  j@240@01) m@239@01 true))
(pop) ; 12
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
  j@240@01) m@239@01 true))
(pop) ; 11
(push) ; 11
; [else-branch: 100 | !(0 <= m@239@01 && m@239@01 < n@232@01 && 0 <= j@240@01 && j@240@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, m@239@01))|)]
(assert (not
  (and
    (<= 0 m@239@01)
    (and
      (< m@239@01 n@232@01)
      (and
        (<= 0 j@240@01)
        (<
          j@240@01
          (Seq_length
            ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef81|)))
(assert (=>
  (and
    (<= 0 m@239@01)
    (and
      (< m@239@01 n@232@01)
      (and
        (<= 0 j@240@01)
        (<
          j@240@01
          (Seq_length
            ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
  (and
    (<= 0 m@239@01)
    (< m@239@01 n@232@01)
    (<= 0 j@240@01)
    (<
      j@240@01
      (Seq_length
        ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))
    ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
      j@240@01) m@239@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@239@01)
      (and
        (< m@239@01 n@232@01)
        (and
          (<= 0 j@240@01)
          (<
            j@240@01
            (Seq_length
              ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))))))
  (and
    (<= 0 m@239@01)
    (and
      (< m@239@01 n@232@01)
      (and
        (<= 0 j@240@01)
        (<
          j@240@01
          (Seq_length
            ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 (- n@162@01 1)))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@188@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@188@01  $FVF<val>) r))
  :qid |qp.fvfValDef78|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@128@01 n@162@01))
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@190@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@190@01  $FVF<val>) r))
  :qid |qp.fvfValDef79|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@167@01 r)
        (and (<= 0 (inv@166@01 r)) (< (inv@166@01 r) (len<Int> a@128@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@182@01 r)) (pTaken@196@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r))
  :qid |qp.fvfValDef80|)))
(assert (forall ((r $Ref)) (!
  (and
    ($FVF.loc_val ($FVF.lookup_val (as sm@188@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val (as sm@190@01  $FVF<val>) r) r)
    ($FVF.loc_val ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@164@01))))) r) r))
  :pattern (($FVF.lookup_val (as sm@230@01  $FVF<val>) r))
  :qid |qp.fvfResTrgDef81|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@239@01 Int) (j@240@01 Int)) (!
  (and
    (=>
      (<= 0 m@239@01)
      (and
        (<= 0 m@239@01)
        (=>
          (< m@239@01 n@232@01)
          (and
            (< m@239@01 n@232@01)
            (=>
              (<= 0 j@240@01)
              (and
                (<= 0 j@240@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))))
            (or (<= 0 j@240@01) (not (<= 0 j@240@01)))))
        (or (< m@239@01 n@232@01) (not (< m@239@01 n@232@01)))))
    (or (<= 0 m@239@01) (not (<= 0 m@239@01)))
    (=>
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
      (and
        (<= 0 m@239@01)
        (< m@239@01 n@232@01)
        (<= 0 j@240@01)
        (<
          j@240@01
          (Seq_length
            ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
          j@240@01) m@239@01 true)))
    (or
      (not
        (and
          (<= 0 m@239@01)
          (and
            (< m@239@01 n@232@01)
            (and
              (<= 0 j@240@01)
              (<
                j@240@01
                (Seq_length
                  ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))))))
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@239@01 Int) (j@240@01 Int)) (!
  (and
    (=>
      (<= 0 m@239@01)
      (and
        (<= 0 m@239@01)
        (=>
          (< m@239@01 n@232@01)
          (and
            (< m@239@01 n@232@01)
            (=>
              (<= 0 j@240@01)
              (and
                (<= 0 j@240@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))))
            (or (<= 0 j@240@01) (not (<= 0 j@240@01)))))
        (or (< m@239@01 n@232@01) (not (< m@239@01 n@232@01)))))
    (or (<= 0 m@239@01) (not (<= 0 m@239@01)))
    (=>
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
      (and
        (<= 0 m@239@01)
        (< m@239@01 n@232@01)
        (<= 0 j@240@01)
        (<
          j@240@01
          (Seq_length
            ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
          j@240@01) m@239@01 true)))
    (or
      (not
        (and
          (<= 0 m@239@01)
          (and
            (< m@239@01 n@232@01)
            (and
              (<= 0 j@240@01)
              (<
                j@240@01
                (Seq_length
                  ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))))))
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@239@01 Int) (j@240@01 Int)) (!
  (and
    (=>
      (<= 0 m@239@01)
      (and
        (<= 0 m@239@01)
        (=>
          (< m@239@01 n@232@01)
          (and
            (< m@239@01 n@232@01)
            (=>
              (<= 0 j@240@01)
              (and
                (<= 0 j@240@01)
                ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))))
            (or (<= 0 j@240@01) (not (<= 0 j@240@01)))))
        (or (< m@239@01 n@232@01) (not (< m@239@01 n@232@01)))))
    (or (<= 0 m@239@01) (not (<= 0 m@239@01)))
    (=>
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
      (and
        (<= 0 m@239@01)
        (< m@239@01 n@232@01)
        (<= 0 j@240@01)
        (<
          j@240@01
          (Seq_length
            ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))
        ($FVF.loc_val ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)) (slot<Ref> a@128@01 m@239@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
          j@240@01) m@239@01 true)))
    (or
      (not
        (and
          (<= 0 m@239@01)
          (and
            (< m@239@01 n@232@01)
            (and
              (<= 0 j@240@01)
              (<
                j@240@01
                (Seq_length
                  ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))))))
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39-aux|)))
(assert (forall ((m@239@01 Int) (j@240@01 Int)) (!
  (=>
    (and
      (<= 0 m@239@01)
      (and
        (< m@239@01 n@232@01)
        (and
          (<= 0 j@240@01)
          (<
            j@240@01
            (Seq_length
              ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
      j@240@01) m@239@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39_precondition|)))
(push) ; 9
(assert (not (forall ((m@239@01 Int) (j@240@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 m@239@01)
          (and
            (< m@239@01 n@232@01)
            (and
              (<= 0 j@240@01)
              (<
                j@240@01
                (Seq_length
                  ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
          j@240@01) m@239@01 true))
      (and
        (<= 0 m@239@01)
        (and
          (< m@239@01 n@232@01)
          (and
            (<= 0 j@240@01)
            (<
              j@240@01
              (Seq_length
                ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
      j@240@01) m@239@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((m@239@01 Int) (j@240@01 Int)) (!
  (=>
    (and
      (<= 0 m@239@01)
      (and
        (< m@239@01 n@232@01)
        (and
          (<= 0 j@240@01)
          (<
            j@240@01
            (Seq_length
              ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
      j@240@01) m@239@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 m@239@01))
    j@240@01) m@239@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@156@13@157@39|)))
(pop) ; 8
(push) ; 8
; [else-branch: 95 | i@186@01 < |Lookup(val, sm@230@01, slot[Ref](a@128@01, n@162@01 - 1))|]
(assert (<
  i@186@01
  (Seq_length
    ($FVF.lookup_val (as sm@230@01  $FVF<val>) (slot<Ref> a@128@01 (- n@162@01 1))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 71 | !(n@162@01 <= 50)]
(assert (not (<= n@162@01 50)))
(pop) ; 5
; [eval] !(n <= 50)
; [eval] n <= 50
(push) ; 5
(set-option :timeout 10)
(assert (not (<= n@162@01 50)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (<= n@162@01 50))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | !(n@162@01 <= 50) | live]
; [else-branch: 101 | n@162@01 <= 50 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 101 | !(n@162@01 <= 50)]
(assert (not (<= n@162@01 50)))
(pop) ; 5
(push) ; 5
; [else-branch: 101 | n@162@01 <= 50]
(assert (<= n@162@01 50))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- colourings ----------
(declare-const a@241@01 Array_)
(declare-const a@242@01 Array_)
(push) ; 1
(declare-const $t@243@01 $Snap)
(assert (= $t@243@01 ($Snap.combine ($Snap.first $t@243@01) ($Snap.second $t@243@01))))
(assert (= ($Snap.first $t@243@01) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (= (len<Int> a@242@01) 51))
(declare-const i@244@01 Int)
(push) ; 2
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 3
; [then-branch: 102 | !(0 <= i@244@01) | live]
; [else-branch: 102 | 0 <= i@244@01 | live]
(push) ; 4
; [then-branch: 102 | !(0 <= i@244@01)]
(assert (not (<= 0 i@244@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 102 | 0 <= i@244@01]
(assert (<= 0 i@244@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@244@01) (not (<= 0 i@244@01))))
(assert (and (<= 0 i@244@01) (< i@244@01 (len<Int> a@242@01))))
; [eval] slot(a, i)
(pop) ; 2
(declare-fun inv@245@01 ($Ref) Int)
(declare-fun img@246@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@244@01 Int)) (!
  (=>
    (and (<= 0 i@244@01) (< i@244@01 (len<Int> a@242@01)))
    (or (<= 0 i@244@01) (not (<= 0 i@244@01))))
  :pattern ((slot<Ref> a@242@01 i@244@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((i1@244@01 Int) (i2@244@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@244@01) (< i1@244@01 (len<Int> a@242@01)))
      (and (<= 0 i2@244@01) (< i2@244@01 (len<Int> a@242@01)))
      (= (slot<Ref> a@242@01 i1@244@01) (slot<Ref> a@242@01 i2@244@01)))
    (= i1@244@01 i2@244@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@244@01 Int)) (!
  (=>
    (and (<= 0 i@244@01) (< i@244@01 (len<Int> a@242@01)))
    (and
      (= (inv@245@01 (slot<Ref> a@242@01 i@244@01)) i@244@01)
      (img@246@01 (slot<Ref> a@242@01 i@244@01))))
  :pattern ((slot<Ref> a@242@01 i@244@01))
  :qid |quant-u-22685|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@246@01 r)
      (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
    (= (slot<Ref> a@242@01 (inv@245@01 r)) r))
  :pattern ((inv@245@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@244@01 Int)) (!
  (=>
    (and (<= 0 i@244@01) (< i@244@01 (len<Int> a@242@01)))
    (not (= (slot<Ref> a@242@01 i@244@01) $Ref.null)))
  :pattern ((slot<Ref> a@242@01 i@244@01))
  :qid |val-permImpliesNonNull|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var n: Int
(declare-const n@247@01 Int)
; [exec]
; slot(a, 0).val := Seq(Seq[Int]())
; [eval] slot(a, 0)
; [eval] Seq(Seq[Int]())
; [eval] Seq[Int]()
(assert (= (Seq_length (Seq_singleton (as Seq_empty  Seq<Int>))) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@248@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 0))
    ($Perm.min
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@248@01 r))
    $Perm.No)
  
  :qid |quant-u-22687|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@248@01 r) $Perm.No)
  
  :qid |quant-u-22688|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (= (- $Perm.Write (pTaken@248@01 r)) $Perm.No))
  
  :qid |quant-u-22689|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@249@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@249@01  $FVF<val>) (slot<Ref> a@242@01 0))
  (Seq_singleton (as Seq_empty  Seq<Int>))))
; [exec]
; slot(a, 1).val := Seq(Seq(0, 1))
; [eval] slot(a, 1)
; [eval] Seq(Seq(0, 1))
; [eval] Seq(0, 1)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 1))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
  1))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 0) (slot<Ref> a@242@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@250@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 1))
    ($Perm.min
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- $Perm.Write (pTaken@248@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@251@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 1))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@250@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- $Perm.Write (pTaken@248@01 r))
        $Perm.No)
      (pTaken@250@01 r))
    $Perm.No)
  
  :qid |quant-u-22691|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@250@01 r) $Perm.No)
  
  :qid |quant-u-22692|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (= (- $Perm.Write (pTaken@250@01 r)) $Perm.No))
  
  :qid |quant-u-22693|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@252@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@252@01  $FVF<val>) (slot<Ref> a@242@01 1))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
; [exec]
; assert valid(Seq[Int](), 0, false)
; [eval] valid(Seq[Int](), 0, false)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(pop) ; 3
; Joined path conditions
(assert (valid%precondition $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
(push) ; 3
(assert (not (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit (as Seq_empty  Seq<Int>) 0 false))
; [exec]
; assert Seq(0, 1)[2..] == Seq[Int]()
; [eval] Seq(0, 1)[2..] == Seq[Int]()
; [eval] Seq(0, 1)[2..]
; [eval] Seq(0, 1)
; [eval] Seq[Int]()
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 1)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 1)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 1).val[j], 1, true) }
;     0 <= j && j < |slot(a, 1).val| ==>
;     slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
; [eval] (forall j: Int :: { valid(slot(a, 1).val[j], 1, true) } 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true))
(declare-const j@253@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 1).val| ==> slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] 0 <= j && j < |slot(a, 1).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 103 | !(0 <= j@253@01) | live]
; [else-branch: 103 | 0 <= j@253@01 | live]
(push) ; 5
; [then-branch: 103 | !(0 <= j@253@01)]
(assert (not (<= 0 j@253@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 103 | 0 <= j@253@01]
(assert (<= 0 j@253@01))
; [eval] j < |slot(a, 1).val|
; [eval] |slot(a, 1).val|
; [eval] slot(a, 1)
(declare-const sm@254@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef86|)))
(declare-const pm@255@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@255@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@255@01  $FPM) r))
  :qid |qp.resPrmSumDef87|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@255@01  $FPM) (slot<Ref> a@242@01 1)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@255@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@255@01  $FPM) r))
  :qid |qp.resPrmSumDef87|)))
(assert (or (<= 0 j@253@01) (not (<= 0 j@253@01))))
(push) ; 4
; [then-branch: 104 | 0 <= j@253@01 && j@253@01 < |Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))| | live]
; [else-branch: 104 | !(0 <= j@253@01 && j@253@01 < |Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))|) | live]
(push) ; 5
; [then-branch: 104 | 0 <= j@253@01 && j@253@01 < |Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))|]
(assert (and
  (<= 0 j@253@01)
  (<
    j@253@01
    (Seq_length
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))))))
; [eval] slot(a, 1).val[j] == Seq(0, 1) && valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j] == Seq(0, 1)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 1))
      (=
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
    :qid |qp.fvfValDef84|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 0))
      (=
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
    :qid |qp.fvfValDef85|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
    :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
    :qid |qp.fvfValDef86|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 1))
        $Perm.Write
        $Perm.No)
      (ite
        (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 0))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@246@01 (slot<Ref> a@242@01 1))
        (and
          (<= 0 (inv@245@01 (slot<Ref> a@242@01 1)))
          (< (inv@245@01 (slot<Ref> a@242@01 1)) (len<Int> a@242@01))))
      (-
        (- $Perm.Write (pTaken@248@01 (slot<Ref> a@242@01 1)))
        (pTaken@250@01 (slot<Ref> a@242@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@253@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(0, 1)
(push) ; 6
; [then-branch: 105 | !(Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))[j@253@01] === [0] ++ [1]) | live]
; [else-branch: 105 | Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))[j@253@01] === [0] ++ [1] | live]
(push) ; 7
; [then-branch: 105 | !(Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))[j@253@01] === [0] ++ [1])]
(assert (not
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
      j@253@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))
(pop) ; 7
(push) ; 7
; [else-branch: 105 | Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))[j@253@01] === [0] ++ [1]]
(assert (Seq_equal
  (Seq_index
    ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
    j@253@01)
  (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
; [eval] valid(slot(a, 1).val[j], 1, true)
; [eval] slot(a, 1).val[j]
; [eval] slot(a, 1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 1))
      (=
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
    :qid |qp.fvfValDef84|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 0))
      (=
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
    :qid |qp.fvfValDef85|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
    :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
    :qid |qp.fvfValDef86|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 1))
        $Perm.Write
        $Perm.No)
      (ite
        (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 0))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@246@01 (slot<Ref> a@242@01 1))
        (and
          (<= 0 (inv@245@01 (slot<Ref> a@242@01 1)))
          (< (inv@245@01 (slot<Ref> a@242@01 1)) (len<Int> a@242@01))))
      (-
        (- $Perm.Write (pTaken@248@01 (slot<Ref> a@242@01 1)))
        (pTaken@250@01 (slot<Ref> a@242@01 1)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (>= j@253@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
  j@253@01) 1 true))
(pop) ; 8
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
  j@253@01) 1 true))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef86|)))
(assert (=>
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
      j@253@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (and
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
        j@253@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
      j@253@01) 1 true))))
(assert (or
  (Seq_equal
    (Seq_index
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
      j@253@01)
    (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
  (not
    (Seq_equal
      (Seq_index
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
        j@253@01)
      (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))
(pop) ; 5
(push) ; 5
; [else-branch: 104 | !(0 <= j@253@01 && j@253@01 < |Lookup(val, sm@254@01, slot[Ref](a@242@01, 1))|)]
(assert (not
  (and
    (<= 0 j@253@01)
    (<
      j@253@01
      (Seq_length
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef86|)))
(assert (=>
  (and
    (<= 0 j@253@01)
    (<
      j@253@01
      (Seq_length
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))
  (and
    (<= 0 j@253@01)
    (<
      j@253@01
      (Seq_length
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))))
    (=>
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (and
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
            j@253@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01) 1 true)))
    (or
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (not
        (Seq_equal
          (Seq_index
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
            j@253@01)
          (Seq_append (Seq_singleton 0) (Seq_singleton 1))))))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@253@01)
      (<
        j@253@01
        (Seq_length
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))))))
  (and
    (<= 0 j@253@01)
    (<
      j@253@01
      (Seq_length
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef84|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef85|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@254@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef86|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@255@01  $FPM) r)
    (+
      (+
        (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
        (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@255@01  $FPM) r))
  :qid |qp.resPrmSumDef87|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@253@01 Int)) (!
  (and
    (or (<= 0 j@253@01) (not (<= 0 j@253@01)))
    (=>
      (and
        (<= 0 j@253@01)
        (<
          j@253@01
          (Seq_length
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))
      (and
        (<= 0 j@253@01)
        (<
          j@253@01
          (Seq_length
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))))
        (=>
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
              j@253@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (and
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
                j@253@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
            (valid%precondition $Snap.unit (Seq_index
              ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
              j@253@01) 1 true)))
        (or
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
              j@253@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
          (not
            (Seq_equal
              (Seq_index
                ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
                j@253@01)
              (Seq_append (Seq_singleton 0) (Seq_singleton 1)))))))
    (or
      (not
        (and
          (<= 0 j@253@01)
          (<
            j@253@01
            (Seq_length
              ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))))))
      (and
        (<= 0 j@253@01)
        (<
          j@253@01
          (Seq_length
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
    j@253@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@207@10@208@71-aux|)))
(assert (forall ((j@253@01 Int)) (!
  (=>
    (and
      (and
        (<= 0 j@253@01)
        (<
          j@253@01
          (Seq_length
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
      j@253@01) 1 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
    j@253@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@207@10@208@71_precondition|)))
(push) ; 3
(assert (not (forall ((j@253@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (and
            (<= 0 j@253@01)
            (<
              j@253@01
              (Seq_length
                ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))
          (Seq_equal
            (Seq_index
              ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
              j@253@01)
            (Seq_append (Seq_singleton 0) (Seq_singleton 1))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01) 1 true))
      (and
        (<= 0 j@253@01)
        (<
          j@253@01
          (Seq_length
            ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
        j@253@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
    j@253@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@207@10@208@71|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@253@01 Int)) (!
  (=>
    (and
      (<= 0 j@253@01)
      (<
        j@253@01
        (Seq_length
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1)))))
    (and
      (Seq_equal
        (Seq_index
          ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
          j@253@01)
        (Seq_append (Seq_singleton 0) (Seq_singleton 1)))
      (valid $Snap.unit (Seq_index
        ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
        j@253@01) 1 true)))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@254@01  $FVF<val>) (slot<Ref> a@242@01 1))
    j@253@01) 1 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@207@10@208@71|)))
; [exec]
; slot(a, 2).val := Seq(Seq(0, 2))
; [eval] slot(a, 2)
; [eval] Seq(Seq(0, 2))
; [eval] Seq(0, 2)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 2))) 2))
(assert (=
  (Seq_length (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 2))))
  1))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 0) (slot<Ref> a@242@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@256@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 2))
    ($Perm.min
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@257@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 2))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@256@01 r)))
    $Perm.No))
(define-fun pTaken@258@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 2))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@256@01 r)) (pTaken@257@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
        $Perm.No)
      (pTaken@256@01 r))
    $Perm.No)
  
  :qid |quant-u-22695|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@256@01 r) $Perm.No)
  
  :qid |quant-u-22696|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (= (- $Perm.Write (pTaken@256@01 r)) $Perm.No))
  
  :qid |quant-u-22697|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@259@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@259@01  $FVF<val>) (slot<Ref> a@242@01 2))
  (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 2)))))
; [exec]
; assert Seq(0, 2)[2..] == Seq[Int]()
; [eval] Seq(0, 2)[2..] == Seq[Int]()
; [eval] Seq(0, 2)[2..]
; [eval] Seq(0, 2)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 2)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 2)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 2).val[j], 2, true) }
;     0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true))
; [eval] (forall j: Int :: { valid(slot(a, 2).val[j], 2, true) } 0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true))
(declare-const j@260@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 2).val| ==> valid(slot(a, 2).val[j], 2, true)
; [eval] 0 <= j && j < |slot(a, 2).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 106 | !(0 <= j@260@01) | live]
; [else-branch: 106 | 0 <= j@260@01 | live]
(push) ; 5
; [then-branch: 106 | !(0 <= j@260@01)]
(assert (not (<= 0 j@260@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 106 | 0 <= j@260@01]
(assert (<= 0 j@260@01))
; [eval] j < |slot(a, 2).val|
; [eval] |slot(a, 2).val|
; [eval] slot(a, 2)
(declare-const sm@261@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef91|)))
(declare-const pm@262@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@262@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@262@01  $FPM) r))
  :qid |qp.resPrmSumDef92|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@262@01  $FPM) (slot<Ref> a@242@01 2)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@262@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@262@01  $FPM) r))
  :qid |qp.resPrmSumDef92|)))
(assert (or (<= 0 j@260@01) (not (<= 0 j@260@01))))
(push) ; 4
; [then-branch: 107 | 0 <= j@260@01 && j@260@01 < |Lookup(val, sm@261@01, slot[Ref](a@242@01, 2))| | live]
; [else-branch: 107 | !(0 <= j@260@01 && j@260@01 < |Lookup(val, sm@261@01, slot[Ref](a@242@01, 2))|) | live]
(push) ; 5
; [then-branch: 107 | 0 <= j@260@01 && j@260@01 < |Lookup(val, sm@261@01, slot[Ref](a@242@01, 2))|]
(assert (and
  (<= 0 j@260@01)
  (<
    j@260@01
    (Seq_length
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))))))
; [eval] valid(slot(a, 2).val[j], 2, true)
; [eval] slot(a, 2).val[j]
; [eval] slot(a, 2)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 2))
      (=
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
    :qid |qp.fvfValDef88|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 0))
      (=
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
    :qid |qp.fvfValDef89|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 1))
      (=
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
    :qid |qp.fvfValDef90|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (<
          $Perm.No
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
    :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
    :qid |qp.fvfValDef91|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (ite
          (= (slot<Ref> a@242@01 2) (slot<Ref> a@242@01 2))
          $Perm.Write
          $Perm.No)
        (ite
          (= (slot<Ref> a@242@01 2) (slot<Ref> a@242@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@242@01 2) (slot<Ref> a@242@01 1))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@246@01 (slot<Ref> a@242@01 2))
        (and
          (<= 0 (inv@245@01 (slot<Ref> a@242@01 2)))
          (< (inv@245@01 (slot<Ref> a@242@01 2)) (len<Int> a@242@01))))
      (-
        (-
          (- $Perm.Write (pTaken@248@01 (slot<Ref> a@242@01 2)))
          (pTaken@250@01 (slot<Ref> a@242@01 2)))
        (pTaken@256@01 (slot<Ref> a@242@01 2)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@260@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
  j@260@01) 2 true))
(pop) ; 6
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
  j@260@01) 2 true))
(pop) ; 5
(push) ; 5
; [else-branch: 107 | !(0 <= j@260@01 && j@260@01 < |Lookup(val, sm@261@01, slot[Ref](a@242@01, 2))|)]
(assert (not
  (and
    (<= 0 j@260@01)
    (<
      j@260@01
      (Seq_length
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef91|)))
(assert (=>
  (and
    (<= 0 j@260@01)
    (<
      j@260@01
      (Seq_length
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))
  (and
    (<= 0 j@260@01)
    (<
      j@260@01
      (Seq_length
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
      j@260@01) 2 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@260@01)
      (<
        j@260@01
        (Seq_length
          ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))))))
  (and
    (<= 0 j@260@01)
    (<
      j@260@01
      (Seq_length
        ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef88|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef89|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef90|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@261@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef91|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@262@01  $FPM) r)
    (+
      (+
        (+
          (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No)
          (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@262@01  $FPM) r))
  :qid |qp.resPrmSumDef92|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@260@01 Int)) (!
  (and
    (or (<= 0 j@260@01) (not (<= 0 j@260@01)))
    (=>
      (and
        (<= 0 j@260@01)
        (<
          j@260@01
          (Seq_length
            ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))
      (and
        (<= 0 j@260@01)
        (<
          j@260@01
          (Seq_length
            ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
          j@260@01) 2 true)))
    (or
      (not
        (and
          (<= 0 j@260@01)
          (<
            j@260@01
            (Seq_length
              ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))))))
      (and
        (<= 0 j@260@01)
        (<
          j@260@01
          (Seq_length
            ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
    j@260@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@212@10@213@37-aux|)))
(assert (forall ((j@260@01 Int)) (!
  (=>
    (and
      (<= 0 j@260@01)
      (<
        j@260@01
        (Seq_length
          ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
      j@260@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
    j@260@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@212@10@213@37_precondition|)))
(push) ; 3
(assert (not (forall ((j@260@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 j@260@01)
          (<
            j@260@01
            (Seq_length
              ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
          j@260@01) 2 true))
      (and
        (<= 0 j@260@01)
        (<
          j@260@01
          (Seq_length
            ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
      j@260@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
    j@260@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@212@10@213@37|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@260@01 Int)) (!
  (=>
    (and
      (<= 0 j@260@01)
      (<
        j@260@01
        (Seq_length
          ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2)))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
      j@260@01) 2 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@261@01  $FVF<val>) (slot<Ref> a@242@01 2))
    j@260@01) 2 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@212@10@213@37|)))
; [exec]
; slot(a, 3).val := Seq(Seq(0, 3), Seq(3))
; [eval] slot(a, 3)
; [eval] Seq(Seq(0, 3), Seq(3))
; [eval] Seq(0, 3)
(assert (= (Seq_length (Seq_append (Seq_singleton 0) (Seq_singleton 3))) 2))
; [eval] Seq(3)
(assert (= (Seq_length (Seq_singleton 3)) 1))
(assert (=
  (Seq_length
    (Seq_append
      (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 3)))
      (Seq_singleton (Seq_singleton 3))))
  2))
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 2) (slot<Ref> a@242@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 0) (slot<Ref> a@242@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 3))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@263@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 3))
    ($Perm.min
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@264@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@263@01 r)))
    $Perm.No))
(define-fun pTaken@265@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@263@01 r)) (pTaken@264@01 r)))
    $Perm.No))
(define-fun pTaken@266@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 3))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@263@01 r)) (pTaken@264@01 r))
        (pTaken@265@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
          (pTaken@256@01 r))
        $Perm.No)
      (pTaken@263@01 r))
    $Perm.No)
  
  :qid |quant-u-22699|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@263@01 r) $Perm.No)
  
  :qid |quant-u-22700|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (= (- $Perm.Write (pTaken@263@01 r)) $Perm.No))
  
  :qid |quant-u-22701|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@267@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@267@01  $FVF<val>) (slot<Ref> a@242@01 3))
  (Seq_append
    (Seq_singleton (Seq_append (Seq_singleton 0) (Seq_singleton 3)))
    (Seq_singleton (Seq_singleton 3)))))
; [exec]
; assert Seq(0, 3)[2..] == Seq[Int]()
; [eval] Seq(0, 3)[2..] == Seq[Int]()
; [eval] Seq(0, 3)[2..]
; [eval] Seq(0, 3)
; [eval] Seq[Int]()
(set-option :timeout 0)
(push) ; 3
(assert (not (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 3)) 2)
  (as Seq_empty  Seq<Int>))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  (Seq_drop (Seq_append (Seq_singleton 0) (Seq_singleton 3)) 2)
  (as Seq_empty  Seq<Int>)))
; [exec]
; assert (forall j: Int ::
;     { valid(slot(a, 3).val[j], 3, true) }
;     0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true))
; [eval] (forall j: Int :: { valid(slot(a, 3).val[j], 3, true) } 0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true))
(declare-const j@268@01 Int)
(push) ; 3
; [eval] 0 <= j && j < |slot(a, 3).val| ==> valid(slot(a, 3).val[j], 3, true)
; [eval] 0 <= j && j < |slot(a, 3).val|
; [eval] 0 <= j
(push) ; 4
; [then-branch: 108 | !(0 <= j@268@01) | live]
; [else-branch: 108 | 0 <= j@268@01 | live]
(push) ; 5
; [then-branch: 108 | !(0 <= j@268@01)]
(assert (not (<= 0 j@268@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 108 | 0 <= j@268@01]
(assert (<= 0 j@268@01))
; [eval] j < |slot(a, 3).val|
; [eval] |slot(a, 3).val|
; [eval] slot(a, 3)
(declare-const sm@269@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(declare-const pm@270@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@270@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@242@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@270@01  $FPM) r))
  :qid |qp.resPrmSumDef98|)))
(push) ; 6
(assert (not (< $Perm.No ($FVF.perm_val (as pm@270@01  $FPM) (slot<Ref> a@242@01 3)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@270@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@242@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@270@01  $FPM) r))
  :qid |qp.resPrmSumDef98|)))
(assert (or (<= 0 j@268@01) (not (<= 0 j@268@01))))
(push) ; 4
; [then-branch: 109 | 0 <= j@268@01 && j@268@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, 3))| | live]
; [else-branch: 109 | !(0 <= j@268@01 && j@268@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, 3))|) | live]
(push) ; 5
; [then-branch: 109 | 0 <= j@268@01 && j@268@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, 3))|]
(assert (and
  (<= 0 j@268@01)
  (<
    j@268@01
    (Seq_length
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))))))
; [eval] valid(slot(a, 3).val[j], 3, true)
; [eval] slot(a, 3).val[j]
; [eval] slot(a, 3)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 3))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 1))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
    :qid |qp.fvfValDef94|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 0))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
    :qid |qp.fvfValDef95|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 2))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
              (pTaken@256@01 r))
            (pTaken@263@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
    :qid |qp.fvfValDef97|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@242@01 3) (slot<Ref> a@242@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@242@01 3) (slot<Ref> a@242@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@242@01 3) (slot<Ref> a@242@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@242@01 3) (slot<Ref> a@242@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@246@01 (slot<Ref> a@242@01 3))
        (and
          (<= 0 (inv@245@01 (slot<Ref> a@242@01 3)))
          (< (inv@245@01 (slot<Ref> a@242@01 3)) (len<Int> a@242@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@248@01 (slot<Ref> a@242@01 3)))
            (pTaken@250@01 (slot<Ref> a@242@01 3)))
          (pTaken@256@01 (slot<Ref> a@242@01 3)))
        (pTaken@263@01 (slot<Ref> a@242@01 3)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (>= j@268@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
  j@268@01) 3 true))
(pop) ; 6
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
  j@268@01) 3 true))
(pop) ; 5
(push) ; 5
; [else-branch: 109 | !(0 <= j@268@01 && j@268@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, 3))|)]
(assert (not
  (and
    (<= 0 j@268@01)
    (<
      j@268@01
      (Seq_length
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (=>
  (and
    (<= 0 j@268@01)
    (<
      j@268@01
      (Seq_length
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))
  (and
    (<= 0 j@268@01)
    (<
      j@268@01
      (Seq_length
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
      j@268@01) 3 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 j@268@01)
      (<
        j@268@01
        (Seq_length
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))))))
  (and
    (<= 0 j@268@01)
    (<
      j@268@01
      (Seq_length
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@270@01  $FPM) r)
    (+
      (+
        (+
          (+
            (ite (= r (slot<Ref> a@242@01 3)) $Perm.Write $Perm.No)
            (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No))
          (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No))
        (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@270@01  $FPM) r))
  :qid |qp.resPrmSumDef98|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@268@01 Int)) (!
  (and
    (or (<= 0 j@268@01) (not (<= 0 j@268@01)))
    (=>
      (and
        (<= 0 j@268@01)
        (<
          j@268@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))
      (and
        (<= 0 j@268@01)
        (<
          j@268@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
          j@268@01) 3 true)))
    (or
      (not
        (and
          (<= 0 j@268@01)
          (<
            j@268@01
            (Seq_length
              ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))))))
      (and
        (<= 0 j@268@01)
        (<
          j@268@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
    j@268@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@217@10@218@37-aux|)))
(assert (forall ((j@268@01 Int)) (!
  (=>
    (and
      (<= 0 j@268@01)
      (<
        j@268@01
        (Seq_length
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
      j@268@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
    j@268@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@217@10@218@37_precondition|)))
(push) ; 3
(assert (not (forall ((j@268@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 j@268@01)
          (<
            j@268@01
            (Seq_length
              ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
          j@268@01) 3 true))
      (and
        (<= 0 j@268@01)
        (<
          j@268@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
      j@268@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
    j@268@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@217@10@218@37|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@268@01 Int)) (!
  (=>
    (and
      (<= 0 j@268@01)
      (<
        j@268@01
        (Seq_length
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3)))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
      j@268@01) 3 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 3))
    j@268@01) 3 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@217@10@218@37|)))
; [exec]
; n := 4
(declare-const i@271@01 Int)
(declare-const oldSoln@272@01 Seq<Int>)
(declare-const n@273@01 Int)
(declare-const soln@274@01 Seq<Int>)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@275@01 $Snap)
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
; [eval] 4 <= n
(assert (<= 4 n@273@01))
(assert (=
  ($Snap.second $t@275@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@275@01))
    ($Snap.second ($Snap.second $t@275@01)))))
(assert (= ($Snap.first ($Snap.second $t@275@01)) $Snap.unit))
; [eval] n <= 51
(assert (<= n@273@01 51))
(assert (=
  ($Snap.second ($Snap.second $t@275@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@275@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@275@01))) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@275@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))))
(declare-const i@276@01 Int)
(push) ; 4
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 5
; [then-branch: 110 | !(0 <= i@276@01) | live]
; [else-branch: 110 | 0 <= i@276@01 | live]
(push) ; 6
; [then-branch: 110 | !(0 <= i@276@01)]
(assert (not (<= 0 i@276@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 110 | 0 <= i@276@01]
(assert (<= 0 i@276@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@276@01) (not (<= 0 i@276@01))))
(assert (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01))))
; [eval] slot(a, i)
(pop) ; 4
(declare-fun inv@277@01 ($Ref) Int)
(declare-fun img@278@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@276@01 Int)) (!
  (=>
    (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01)))
    (or (<= 0 i@276@01) (not (<= 0 i@276@01))))
  :pattern ((slot<Ref> a@242@01 i@276@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@276@01 Int) (i2@276@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@276@01) (< i1@276@01 (len<Int> a@242@01)))
      (and (<= 0 i2@276@01) (< i2@276@01 (len<Int> a@242@01)))
      (= (slot<Ref> a@242@01 i1@276@01) (slot<Ref> a@242@01 i2@276@01)))
    (= i1@276@01 i2@276@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@276@01 Int)) (!
  (=>
    (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01)))
    (and
      (= (inv@277@01 (slot<Ref> a@242@01 i@276@01)) i@276@01)
      (img@278@01 (slot<Ref> a@242@01 i@276@01))))
  :pattern ((slot<Ref> a@242@01 i@276@01))
  :qid |quant-u-22703|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@278@01 r)
      (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
    (= (slot<Ref> a@242@01 (inv@277@01 r)) r))
  :pattern ((inv@277@01 r))
  :qid |val-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((i@276@01 Int)) (!
  (=>
    (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01)))
    (not (= (slot<Ref> a@242@01 i@276@01) $Ref.null)))
  :pattern ((slot<Ref> a@242@01 i@276@01))
  :qid |val-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
  $Snap.unit))
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@279@01 Int)
(declare-const j@280@01 Int)
(push) ; 4
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 5
; [then-branch: 111 | !(0 <= m@279@01) | live]
; [else-branch: 111 | 0 <= m@279@01 | live]
(push) ; 6
; [then-branch: 111 | !(0 <= m@279@01)]
(assert (not (<= 0 m@279@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 111 | 0 <= m@279@01]
(assert (<= 0 m@279@01))
; [eval] m < n
(push) ; 7
; [then-branch: 112 | !(m@279@01 < n@273@01) | live]
; [else-branch: 112 | m@279@01 < n@273@01 | live]
(push) ; 8
; [then-branch: 112 | !(m@279@01 < n@273@01)]
(assert (not (< m@279@01 n@273@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 112 | m@279@01 < n@273@01]
(assert (< m@279@01 n@273@01))
; [eval] 0 <= j
(push) ; 9
; [then-branch: 113 | !(0 <= j@280@01) | live]
; [else-branch: 113 | 0 <= j@280@01 | live]
(push) ; 10
; [then-branch: 113 | !(0 <= j@280@01)]
(assert (not (<= 0 j@280@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 113 | 0 <= j@280@01]
(assert (<= 0 j@280@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(push) ; 11
(assert (not (and
  (img@278@01 (slot<Ref> a@242@01 m@279@01))
  (and
    (<= 0 (inv@277@01 (slot<Ref> a@242@01 m@279@01)))
    (< (inv@277@01 (slot<Ref> a@242@01 m@279@01)) (len<Int> a@242@01))))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@280@01) (not (<= 0 j@280@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (< m@279@01 n@273@01)
  (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01))))))
(assert (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<= 0 m@279@01)
  (and
    (<= 0 m@279@01)
    (=>
      (< m@279@01 n@273@01)
      (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
    (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01))))))
(assert (or (<= 0 m@279@01) (not (<= 0 m@279@01))))
(push) ; 5
; [then-branch: 114 | 0 <= m@279@01 && m@279@01 < n@273@01 && 0 <= j@280@01 && j@280@01 < |Lookup(val, First:(Second:(Second:(Second:($t@275@01)))), slot[Ref](a@242@01, m@279@01))| | live]
; [else-branch: 114 | !(0 <= m@279@01 && m@279@01 < n@273@01 && 0 <= j@280@01 && j@280@01 < |Lookup(val, First:(Second:(Second:(Second:($t@275@01)))), slot[Ref](a@242@01, m@279@01))|) | live]
(push) ; 6
; [then-branch: 114 | 0 <= m@279@01 && m@279@01 < n@273@01 && 0 <= j@280@01 && j@280@01 < |Lookup(val, First:(Second:(Second:(Second:($t@275@01)))), slot[Ref](a@242@01, m@279@01))|]
(assert (and
  (<= 0 m@279@01)
  (and
    (< m@279@01 n@273@01)
    (and
      (<= 0 j@280@01)
      (<
        j@280@01
        (Seq_length
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(push) ; 7
(assert (not (and
  (img@278@01 (slot<Ref> a@242@01 m@279@01))
  (and
    (<= 0 (inv@277@01 (slot<Ref> a@242@01 m@279@01)))
    (< (inv@277@01 (slot<Ref> a@242@01 m@279@01)) (len<Int> a@242@01))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@280@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
  j@280@01) m@279@01 true))
(pop) ; 7
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
  j@280@01) m@279@01 true))
(pop) ; 6
(push) ; 6
; [else-branch: 114 | !(0 <= m@279@01 && m@279@01 < n@273@01 && 0 <= j@280@01 && j@280@01 < |Lookup(val, First:(Second:(Second:(Second:($t@275@01)))), slot[Ref](a@242@01, m@279@01))|)]
(assert (not
  (and
    (<= 0 m@279@01)
    (and
      (< m@279@01 n@273@01)
      (and
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (and
    (<= 0 m@279@01)
    (and
      (< m@279@01 n@273@01)
      (and
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
  (and
    (<= 0 m@279@01)
    (< m@279@01 n@273@01)
    (<= 0 j@280@01)
    (<
      j@280@01
      (Seq_length
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
      j@280@01) m@279@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@279@01)
      (and
        (< m@279@01 n@273@01)
        (and
          (<= 0 j@280@01)
          (<
            j@280@01
            (Seq_length
              ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
  (and
    (<= 0 m@279@01)
    (and
      (< m@279@01 n@273@01)
      (and
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (and
    (=>
      (<= 0 m@279@01)
      (and
        (<= 0 m@279@01)
        (=>
          (< m@279@01 n@273@01)
          (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
        (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01)))))
    (or (<= 0 m@279@01) (not (<= 0 m@279@01)))
    (=>
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
      (and
        (<= 0 m@279@01)
        (< m@279@01 n@273@01)
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
          j@280@01) m@279@01 true)))
    (or
      (not
        (and
          (<= 0 m@279@01)
          (and
            (< m@279@01 n@273@01)
            (and
              (<= 0 j@280@01)
              (<
                j@280@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (and
    (=>
      (<= 0 m@279@01)
      (and
        (<= 0 m@279@01)
        (=>
          (< m@279@01 n@273@01)
          (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
        (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01)))))
    (or (<= 0 m@279@01) (not (<= 0 m@279@01)))
    (=>
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
      (and
        (<= 0 m@279@01)
        (< m@279@01 n@273@01)
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
          j@280@01) m@279@01 true)))
    (or
      (not
        (and
          (<= 0 m@279@01)
          (and
            (< m@279@01 n@273@01)
            (and
              (<= 0 j@280@01)
              (<
                j@280@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (and
    (=>
      (<= 0 m@279@01)
      (and
        (<= 0 m@279@01)
        (=>
          (< m@279@01 n@273@01)
          (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
        (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01)))))
    (or (<= 0 m@279@01) (not (<= 0 m@279@01)))
    (=>
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
      (and
        (<= 0 m@279@01)
        (< m@279@01 n@273@01)
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
          j@280@01) m@279@01 true)))
    (or
      (not
        (and
          (<= 0 m@279@01)
          (and
            (< m@279@01 n@273@01)
            (and
              (<= 0 j@280@01)
              (<
                j@280@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (=>
    (and
      (<= 0 m@279@01)
      (and
        (< m@279@01 n@273@01)
        (and
          (<= 0 j@280@01)
          (<
            j@280@01
            (Seq_length
              ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
      j@280@01) m@279@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39|)))
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] 4 <= n
; [eval] n <= 51
; [eval] len(a) == 51
; [eval] len(a)
(declare-const i@281@01 Int)
(push) ; 4
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 5
; [then-branch: 115 | !(0 <= i@281@01) | live]
; [else-branch: 115 | 0 <= i@281@01 | live]
(push) ; 6
; [then-branch: 115 | !(0 <= i@281@01)]
(assert (not (<= 0 i@281@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 115 | 0 <= i@281@01]
(assert (<= 0 i@281@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@281@01) (not (<= 0 i@281@01))))
(assert (and (<= 0 i@281@01) (< i@281@01 (len<Int> a@242@01))))
; [eval] slot(a, i)
(pop) ; 4
(declare-fun inv@282@01 ($Ref) Int)
(declare-fun img@283@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@281@01 Int)) (!
  (=>
    (and (<= 0 i@281@01) (< i@281@01 (len<Int> a@242@01)))
    (or (<= 0 i@281@01) (not (<= 0 i@281@01))))
  :pattern ((slot<Ref> a@242@01 i@281@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 4
(assert (not (forall ((i1@281@01 Int) (i2@281@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@281@01) (< i1@281@01 (len<Int> a@242@01)))
      (and (<= 0 i2@281@01) (< i2@281@01 (len<Int> a@242@01)))
      (= (slot<Ref> a@242@01 i1@281@01) (slot<Ref> a@242@01 i2@281@01)))
    (= i1@281@01 i2@281@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@281@01 Int)) (!
  (=>
    (and (<= 0 i@281@01) (< i@281@01 (len<Int> a@242@01)))
    (and
      (= (inv@282@01 (slot<Ref> a@242@01 i@281@01)) i@281@01)
      (img@283@01 (slot<Ref> a@242@01 i@281@01))))
  :pattern ((slot<Ref> a@242@01 i@281@01))
  :qid |val-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@283@01 r)
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01))))
    (= (slot<Ref> a@242@01 (inv@282@01 r)) r))
  :pattern ((inv@282@01 r))
  :qid |val-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@284@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    ($Perm.min
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@285@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 3)) $Perm.Write $Perm.No)
      (- $Perm.Write (pTaken@284@01 r)))
    $Perm.No))
(define-fun pTaken@286@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r)))
    $Perm.No))
(define-fun pTaken@287@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No)
      (-
        (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r))
        (pTaken@286@01 r)))
    $Perm.No))
(define-fun pTaken@288@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No)
      (-
        (-
          (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r))
          (pTaken@286@01 r))
        (pTaken@287@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r))
        $Perm.No)
      (pTaken@284@01 r))
    $Perm.No)
  
  :qid |quant-u-22706|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    (= (- $Perm.Write (pTaken@284@01 r)) $Perm.No))
  
  :qid |quant-u-22707|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@242@01 3) (slot<Ref> a@242@01 3)) $Perm.Write $Perm.No)
    (pTaken@285@01 (slot<Ref> a@242@01 3)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    (= (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r)) $Perm.No))
  
  :qid |quant-u-22709|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@242@01 1) (slot<Ref> a@242@01 1)) $Perm.Write $Perm.No)
    (pTaken@286@01 (slot<Ref> a@242@01 1)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r))
        (pTaken@286@01 r))
      $Perm.No))
  
  :qid |quant-u-22711|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@242@01 0) (slot<Ref> a@242@01 0)) $Perm.Write $Perm.No)
    (pTaken@287@01 (slot<Ref> a@242@01 0)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    (=
      (-
        (-
          (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r))
          (pTaken@286@01 r))
        (pTaken@287@01 r))
      $Perm.No))
  
  :qid |quant-u-22713|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (=
  (-
    (ite (= (slot<Ref> a@242@01 2) (slot<Ref> a@242@01 2)) $Perm.Write $Perm.No)
    (pTaken@288@01 (slot<Ref> a@242@01 2)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@282@01 r)) (< (inv@282@01 r) (len<Int> a@242@01)))
      (img@283@01 r)
      (= r (slot<Ref> a@242@01 (inv@282@01 r))))
    (=
      (-
        (-
          (-
            (- (- $Perm.Write (pTaken@284@01 r)) (pTaken@285@01 r))
            (pTaken@286@01 r))
          (pTaken@287@01 r))
        (pTaken@288@01 r))
      $Perm.No))
  
  :qid |quant-u-22715|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@289@01 Int)
(declare-const j@290@01 Int)
(set-option :timeout 0)
(push) ; 4
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 5
; [then-branch: 116 | !(0 <= m@289@01) | live]
; [else-branch: 116 | 0 <= m@289@01 | live]
(push) ; 6
; [then-branch: 116 | !(0 <= m@289@01)]
(assert (not (<= 0 m@289@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 116 | 0 <= m@289@01]
(assert (<= 0 m@289@01))
; [eval] m < n
(push) ; 7
; [then-branch: 117 | !(m@289@01 < 4) | live]
; [else-branch: 117 | m@289@01 < 4 | live]
(push) ; 8
; [then-branch: 117 | !(m@289@01 < 4)]
(assert (not (< m@289@01 4)))
(pop) ; 8
(push) ; 8
; [else-branch: 117 | m@289@01 < 4]
(assert (< m@289@01 4))
; [eval] 0 <= j
(push) ; 9
; [then-branch: 118 | !(0 <= j@290@01) | live]
; [else-branch: 118 | 0 <= j@290@01 | live]
(push) ; 10
; [then-branch: 118 | !(0 <= j@290@01)]
(assert (not (<= 0 j@290@01)))
(pop) ; 10
(push) ; 10
; [else-branch: 118 | 0 <= j@290@01]
(assert (<= 0 j@290@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 3))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 1))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
    :qid |qp.fvfValDef94|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 0))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
    :qid |qp.fvfValDef95|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 2))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
              (pTaken@256@01 r))
            (pTaken@263@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
    :qid |qp.fvfValDef97|))))
(push) ; 11
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@246@01 (slot<Ref> a@242@01 m@289@01))
        (and
          (<= 0 (inv@245@01 (slot<Ref> a@242@01 m@289@01)))
          (< (inv@245@01 (slot<Ref> a@242@01 m@289@01)) (len<Int> a@242@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@248@01 (slot<Ref> a@242@01 m@289@01)))
            (pTaken@250@01 (slot<Ref> a@242@01 m@289@01)))
          (pTaken@256@01 (slot<Ref> a@242@01 m@289@01)))
        (pTaken@263@01 (slot<Ref> a@242@01 m@289@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (or (<= 0 j@290@01) (not (<= 0 j@290@01))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (=>
  (< m@289@01 4)
  (and (< m@289@01 4) (or (<= 0 j@290@01) (not (<= 0 j@290@01))))))
(assert (or (< m@289@01 4) (not (< m@289@01 4))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (=>
  (<= 0 m@289@01)
  (and
    (<= 0 m@289@01)
    (=>
      (< m@289@01 4)
      (and (< m@289@01 4) (or (<= 0 j@290@01) (not (<= 0 j@290@01)))))
    (or (< m@289@01 4) (not (< m@289@01 4))))))
(assert (or (<= 0 m@289@01) (not (<= 0 m@289@01))))
(push) ; 5
; [then-branch: 119 | 0 <= m@289@01 && m@289@01 < 4 && 0 <= j@290@01 && j@290@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, m@289@01))| | live]
; [else-branch: 119 | !(0 <= m@289@01 && m@289@01 < 4 && 0 <= j@290@01 && j@290@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, m@289@01))|) | live]
(push) ; 6
; [then-branch: 119 | 0 <= m@289@01 && m@289@01 < 4 && 0 <= j@290@01 && j@290@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, m@289@01))|]
(assert (and
  (<= 0 m@289@01)
  (and
    (< m@289@01 4)
    (and
      (<= 0 j@290@01)
      (<
        j@290@01
        (Seq_length
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 3))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
    :qid |qp.fvfValDef93|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 1))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
    :qid |qp.fvfValDef94|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 0))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
    :qid |qp.fvfValDef95|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 2))
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
    :qid |qp.fvfValDef96|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@246@01 r)
          (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
        (<
          $Perm.No
          (-
            (-
              (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
              (pTaken@256@01 r))
            (pTaken@263@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
    :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
    :qid |qp.fvfValDef97|))))
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (+
      (+
        (+
          (ite
            (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 3))
            $Perm.Write
            $Perm.No)
          (ite
            (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 1))
            $Perm.Write
            $Perm.No))
        (ite
          (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 0))
          $Perm.Write
          $Perm.No))
      (ite
        (= (slot<Ref> a@242@01 m@289@01) (slot<Ref> a@242@01 2))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@246@01 (slot<Ref> a@242@01 m@289@01))
        (and
          (<= 0 (inv@245@01 (slot<Ref> a@242@01 m@289@01)))
          (< (inv@245@01 (slot<Ref> a@242@01 m@289@01)) (len<Int> a@242@01))))
      (-
        (-
          (-
            (- $Perm.Write (pTaken@248@01 (slot<Ref> a@242@01 m@289@01)))
            (pTaken@250@01 (slot<Ref> a@242@01 m@289@01)))
          (pTaken@256@01 (slot<Ref> a@242@01 m@289@01)))
        (pTaken@263@01 (slot<Ref> a@242@01 m@289@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (>= j@290@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
  j@290@01) m@289@01 true))
(pop) ; 7
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
  j@290@01) m@289@01 true))
(pop) ; 6
(push) ; 6
; [else-branch: 119 | !(0 <= m@289@01 && m@289@01 < 4 && 0 <= j@290@01 && j@290@01 < |Lookup(val, sm@269@01, slot[Ref](a@242@01, m@289@01))|)]
(assert (not
  (and
    (<= 0 m@289@01)
    (and
      (< m@289@01 4)
      (and
        (<= 0 j@290@01)
        (<
          j@290@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
(assert (=>
  (and
    (<= 0 m@289@01)
    (and
      (< m@289@01 4)
      (and
        (<= 0 j@290@01)
        (<
          j@290@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
  (and
    (<= 0 m@289@01)
    (< m@289@01 4)
    (<= 0 j@290@01)
    (<
      j@290@01
      (Seq_length
        ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
      j@290@01) m@289@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@289@01)
      (and
        (< m@289@01 4)
        (and
          (<= 0 j@290@01)
          (<
            j@290@01
            (Seq_length
              ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))))))
  (and
    (<= 0 m@289@01)
    (and
      (< m@289@01 4)
      (and
        (<= 0 j@290@01)
        (<
          j@290@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))))
(pop) ; 4
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 3))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@267@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@267@01  $FVF<val>) r))
  :qid |qp.fvfValDef93|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 1))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@252@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@252@01  $FVF<val>) r))
  :qid |qp.fvfValDef94|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 0))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@249@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@249@01  $FVF<val>) r))
  :qid |qp.fvfValDef95|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 2))
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@259@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@259@01  $FVF<val>) r))
  :qid |qp.fvfValDef96|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@246@01 r)
        (and (<= 0 (inv@245@01 r)) (< (inv@245@01 r) (len<Int> a@242@01))))
      (<
        $Perm.No
        (-
          (-
            (- (- $Perm.Write (pTaken@248@01 r)) (pTaken@250@01 r))
            (pTaken@256@01 r))
          (pTaken@263@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r)))
  :pattern (($FVF.lookup_val (as sm@269@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.second $t@243@01)) r))
  :qid |qp.fvfValDef97|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@289@01 Int) (j@290@01 Int)) (!
  (and
    (=>
      (<= 0 m@289@01)
      (and
        (<= 0 m@289@01)
        (=>
          (< m@289@01 4)
          (and (< m@289@01 4) (or (<= 0 j@290@01) (not (<= 0 j@290@01)))))
        (or (< m@289@01 4) (not (< m@289@01 4)))))
    (or (<= 0 m@289@01) (not (<= 0 m@289@01)))
    (=>
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
      (and
        (<= 0 m@289@01)
        (< m@289@01 4)
        (<= 0 j@290@01)
        (<
          j@290@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
          j@290@01) m@289@01 true)))
    (or
      (not
        (and
          (<= 0 m@289@01)
          (and
            (< m@289@01 4)
            (and
              (<= 0 j@290@01)
              (<
                j@290@01
                (Seq_length
                  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))))))
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@289@01 Int) (j@290@01 Int)) (!
  (and
    (=>
      (<= 0 m@289@01)
      (and
        (<= 0 m@289@01)
        (=>
          (< m@289@01 4)
          (and (< m@289@01 4) (or (<= 0 j@290@01) (not (<= 0 j@290@01)))))
        (or (< m@289@01 4) (not (< m@289@01 4)))))
    (or (<= 0 m@289@01) (not (<= 0 m@289@01)))
    (=>
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
      (and
        (<= 0 m@289@01)
        (< m@289@01 4)
        (<= 0 j@290@01)
        (<
          j@290@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
          j@290@01) m@289@01 true)))
    (or
      (not
        (and
          (<= 0 m@289@01)
          (and
            (< m@289@01 4)
            (and
              (<= 0 j@290@01)
              (<
                j@290@01
                (Seq_length
                  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))))))
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@289@01 Int) (j@290@01 Int)) (!
  (and
    (=>
      (<= 0 m@289@01)
      (and
        (<= 0 m@289@01)
        (=>
          (< m@289@01 4)
          (and (< m@289@01 4) (or (<= 0 j@290@01) (not (<= 0 j@290@01)))))
        (or (< m@289@01 4) (not (< m@289@01 4)))))
    (or (<= 0 m@289@01) (not (<= 0 m@289@01)))
    (=>
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
      (and
        (<= 0 m@289@01)
        (< m@289@01 4)
        (<= 0 j@290@01)
        (<
          j@290@01
          (Seq_length
            ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
          j@290@01) m@289@01 true)))
    (or
      (not
        (and
          (<= 0 m@289@01)
          (and
            (< m@289@01 4)
            (and
              (<= 0 j@290@01)
              (<
                j@290@01
                (Seq_length
                  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))))))
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@289@01 Int) (j@290@01 Int)) (!
  (=>
    (and
      (<= 0 m@289@01)
      (and
        (< m@289@01 4)
        (and
          (<= 0 j@290@01)
          (<
            j@290@01
            (Seq_length
              ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
      j@290@01) m@289@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39_precondition|)))
(push) ; 4
(assert (not (forall ((m@289@01 Int) (j@290@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 m@289@01)
          (and
            (< m@289@01 4)
            (and
              (<= 0 j@290@01)
              (<
                j@290@01
                (Seq_length
                  ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
          j@290@01) m@289@01 true))
      (and
        (<= 0 m@289@01)
        (and
          (< m@289@01 4)
          (and
            (<= 0 j@290@01)
            (<
              j@290@01
              (Seq_length
                ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
      j@290@01) m@289@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (forall ((m@289@01 Int) (j@290@01 Int)) (!
  (=>
    (and
      (<= 0 m@289@01)
      (and
        (< m@289@01 4)
        (and
          (<= 0 j@290@01)
          (<
            j@290@01
            (Seq_length
              ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
      j@290@01) m@289@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@269@01  $FVF<val>) (slot<Ref> a@242@01 m@289@01))
    j@290@01) m@289@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 4
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@278@01 r)
      (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
    (= (slot<Ref> a@242@01 (inv@277@01 r)) r))
  :pattern ((inv@277@01 r))
  :qid |val-fctOfInv|)))
(assert (forall ((i@276@01 Int)) (!
  (=>
    (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01)))
    (and
      (= (inv@277@01 (slot<Ref> a@242@01 i@276@01)) i@276@01)
      (img@278@01 (slot<Ref> a@242@01 i@276@01))))
  :pattern ((slot<Ref> a@242@01 i@276@01))
  :qid |quant-u-22703|)))
(assert (forall ((i@276@01 Int)) (!
  (=>
    (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01)))
    (not (= (slot<Ref> a@242@01 i@276@01) $Ref.null)))
  :pattern ((slot<Ref> a@242@01 i@276@01))
  :qid |val-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
  $Snap.unit))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (and
    (=>
      (<= 0 m@279@01)
      (and
        (<= 0 m@279@01)
        (=>
          (< m@279@01 n@273@01)
          (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
        (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01)))))
    (or (<= 0 m@279@01) (not (<= 0 m@279@01)))
    (=>
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
      (and
        (<= 0 m@279@01)
        (< m@279@01 n@273@01)
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
          j@280@01) m@279@01 true)))
    (or
      (not
        (and
          (<= 0 m@279@01)
          (and
            (< m@279@01 n@273@01)
            (and
              (<= 0 j@280@01)
              (<
                j@280@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (and
    (=>
      (<= 0 m@279@01)
      (and
        (<= 0 m@279@01)
        (=>
          (< m@279@01 n@273@01)
          (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
        (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01)))))
    (or (<= 0 m@279@01) (not (<= 0 m@279@01)))
    (=>
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
      (and
        (<= 0 m@279@01)
        (< m@279@01 n@273@01)
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
          j@280@01) m@279@01 true)))
    (or
      (not
        (and
          (<= 0 m@279@01)
          (and
            (< m@279@01 n@273@01)
            (and
              (<= 0 j@280@01)
              (<
                j@280@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (and
    (=>
      (<= 0 m@279@01)
      (and
        (<= 0 m@279@01)
        (=>
          (< m@279@01 n@273@01)
          (and (< m@279@01 n@273@01) (or (<= 0 j@280@01) (not (<= 0 j@280@01)))))
        (or (< m@279@01 n@273@01) (not (< m@279@01 n@273@01)))))
    (or (<= 0 m@279@01) (not (<= 0 m@279@01)))
    (=>
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
      (and
        (<= 0 m@279@01)
        (< m@279@01 n@273@01)
        (<= 0 j@280@01)
        (<
          j@280@01
          (Seq_length
            ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
          j@280@01) m@279@01 true)))
    (or
      (not
        (and
          (<= 0 m@279@01)
          (and
            (< m@279@01 n@273@01)
            (and
              (<= 0 j@280@01)
              (<
                j@280@01
                (Seq_length
                  ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))))))))
      (and
        (<= 0 m@279@01)
        (and
          (< m@279@01 n@273@01)
          (and
            (<= 0 j@280@01)
            (<
              j@280@01
              (Seq_length
                ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@279@01 Int) (j@280@01 Int)) (!
  (=>
    (and
      (<= 0 m@279@01)
      (and
        (< m@279@01 n@273@01)
        (and
          (<= 0 j@280@01)
          (<
            j@280@01
            (Seq_length
              ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
      j@280@01) m@279@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01))
  :pattern ((Seq_length
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) (slot<Ref> a@242@01 m@279@01))
    j@280@01) m@279@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39|)))
(assert (= $t@275@01 ($Snap.combine ($Snap.first $t@275@01) ($Snap.second $t@275@01))))
(assert (= ($Snap.first $t@275@01) $Snap.unit))
(assert (<= 4 n@273@01))
(assert (=
  ($Snap.second $t@275@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@275@01))
    ($Snap.second ($Snap.second $t@275@01)))))
(assert (= ($Snap.first ($Snap.second $t@275@01)) $Snap.unit))
(assert (<= n@273@01 51))
(assert (=
  ($Snap.second ($Snap.second $t@275@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@275@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@275@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@275@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@275@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@275@01)))))))
(assert (forall ((i@276@01 Int)) (!
  (=>
    (and (<= 0 i@276@01) (< i@276@01 (len<Int> a@242@01)))
    (or (<= 0 i@276@01) (not (<= 0 i@276@01))))
  :pattern ((slot<Ref> a@242@01 i@276@01))
  :qid |val-aux|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 5
; [eval] n <= 50
(pop) ; 5
(push) ; 5
; [eval] !(n <= 50)
; [eval] n <= 50
(pop) ; 5
; Loop head block: Follow loop-internal edges
; [eval] n <= 50
(push) ; 5
(set-option :timeout 10)
(assert (not (not (<= n@273@01 50))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (<= n@273@01 50)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 120 | n@273@01 <= 50 | live]
; [else-branch: 120 | !(n@273@01 <= 50) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 120 | n@273@01 <= 50]
(assert (<= n@273@01 50))
; [exec]
; var i: Int
(declare-const i@291@01 Int)
; [exec]
; slot(a, n).val := Seq[Seq[Int]]()
; [eval] slot(a, n)
; [eval] Seq[Seq[Int]]()
; Precomputing data for removing quantified permissions
(define-fun pTaken@292@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        $Perm.Write
        $Perm.No)
      (pTaken@292@01 r))
    $Perm.No)
  
  :qid |quant-u-22717|))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@292@01 r) $Perm.No)
  
  :qid |quant-u-22718|))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (= (- $Perm.Write (pTaken@292@01 r)) $Perm.No))
  
  :qid |quant-u-22719|))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@293@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@293@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  (as Seq_empty  Seq<Seq<Int>>)))
; [exec]
; i := 0
(declare-const oldSoln@294@01 Seq<Int>)
(declare-const soln@295@01 Seq<Int>)
(declare-const i@296@01 Int)
(set-option :timeout 0)
(push) ; 6
; Loop head block: Check well-definedness of invariant
(declare-const $t@297@01 $Snap)
(assert (= $t@297@01 ($Snap.combine ($Snap.first $t@297@01) ($Snap.second $t@297@01))))
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@298@01 $FVF<val>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_val (as sm@298@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@297@01))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
  (not (= (slot<Ref> a@242@01 (- n@273@01 1)) $Ref.null))))
(assert (=
  ($Snap.second $t@297@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@297@01))
    ($Snap.second ($Snap.second $t@297@01)))))
(assert (= ($Snap.first ($Snap.second $t@297@01)) $Snap.unit))
; [eval] len(a) == 51
; [eval] len(a)
(assert (=
  ($Snap.second ($Snap.second $t@297@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@297@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@297@01))) $Snap.unit))
; [eval] 0 <= i
(assert (<= 0 i@296@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@297@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@297@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@297@01))))
  $Snap.unit))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(push) ; 7
(assert (not (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@296@01
  (Seq_length
    ($FVF.lookup_val (as sm@298@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))))
; [eval] slot(a, n)
(declare-const sm@299@01 $FVF<val>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_val (as sm@299@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))))
(push) ; 7
(set-option :timeout 10)
(assert (not (and
  (and
    (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
    (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1))))
  (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1))))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
  (not (= (slot<Ref> a@242@01 n@273@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
  $Snap.unit))
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(declare-const sm@300@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
(declare-const pm@301@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@301@01  $FPM) r)
    (+
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_val (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef101|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (< $Perm.No ($FVF.perm_val (as pm@301@01  $FPM) (slot<Ref> a@242@01 n@273@01)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  i@296@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
  $Snap.unit))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@302@01 Int)
(declare-const n1@303@01 Int)
(push) ; 7
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 8
; [then-branch: 121 | n1@303@01 != n@273@01 - 1 | live]
; [else-branch: 121 | n1@303@01 == n@273@01 - 1 | live]
(push) ; 9
; [then-branch: 121 | n1@303@01 != n@273@01 - 1]
(assert (not (= n1@303@01 (- n@273@01 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 121 | n1@303@01 == n@273@01 - 1]
(assert (= n1@303@01 (- n@273@01 1)))
; [eval] 0 <= j
(push) ; 10
; [then-branch: 122 | !(0 <= j@302@01) | live]
; [else-branch: 122 | 0 <= j@302@01 | live]
(push) ; 11
; [then-branch: 122 | !(0 <= j@302@01)]
(assert (not (<= 0 j@302@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 122 | 0 <= j@302@01]
(assert (<= 0 j@302@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
(assert (or (<= 0 j@302@01) (not (<= 0 j@302@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
(assert (=>
  (= n1@303@01 (- n@273@01 1))
  (and (= n1@303@01 (- n@273@01 1)) (or (<= 0 j@302@01) (not (<= 0 j@302@01))))))
(assert (or (= n1@303@01 (- n@273@01 1)) (not (= n1@303@01 (- n@273@01 1)))))
(push) ; 8
; [then-branch: 123 | n1@303@01 == n@273@01 - 1 && 0 <= j@302@01 && j@302@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))| | live]
; [else-branch: 123 | !(n1@303@01 == n@273@01 - 1 && 0 <= j@302@01 && j@302@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))|) | live]
(push) ; 9
; [then-branch: 123 | n1@303@01 == n@273@01 - 1 && 0 <= j@302@01 && j@302@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))|]
(assert (and
  (= n1@303@01 (- n@273@01 1))
  (and
    (<= 0 j@302@01)
    (<
      j@302@01
      (Seq_length
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n1@303@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n1@303@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@302@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@302@01
  (Seq_length
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
  j@302@01) (- n@273@01 1) true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
  j@302@01) (- n@273@01 1) true))
(pop) ; 9
(push) ; 9
; [else-branch: 123 | !(n1@303@01 == n@273@01 - 1 && 0 <= j@302@01 && j@302@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))|)]
(assert (not
  (and
    (= n1@303@01 (- n@273@01 1))
    (and
      (<= 0 j@302@01)
      (<
        j@302@01
        (Seq_length
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
(assert (=>
  (and
    (= n1@303@01 (- n@273@01 1))
    (and
      (<= 0 j@302@01)
      (<
        j@302@01
        (Seq_length
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))
  (and
    (= n1@303@01 (- n@273@01 1))
    (<= 0 j@302@01)
    (<
      j@302@01
      (Seq_length
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
      j@302@01) (- n@273@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@303@01 (- n@273@01 1))
      (and
        (<= 0 j@302@01)
        (<
          j@302@01
          (Seq_length
            ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1))))))))
  (and
    (= n1@303@01 (- n@273@01 1))
    (and
      (<= 0 j@302@01)
      (<
        j@302@01
        (Seq_length
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@302@01 Int) (n1@303@01 Int)) (!
  (and
    (=>
      (= n1@303@01 (- n@273@01 1))
      (and
        (= n1@303@01 (- n@273@01 1))
        (or (<= 0 j@302@01) (not (<= 0 j@302@01)))))
    (or (= n1@303@01 (- n@273@01 1)) (not (= n1@303@01 (- n@273@01 1))))
    (=>
      (and
        (= n1@303@01 (- n@273@01 1))
        (and
          (<= 0 j@302@01)
          (<
            j@302@01
            (Seq_length
              ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))
      (and
        (= n1@303@01 (- n@273@01 1))
        (<= 0 j@302@01)
        (<
          j@302@01
          (Seq_length
            ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
          j@302@01) (- n@273@01 1) true)))
    (or
      (not
        (and
          (= n1@303@01 (- n@273@01 1))
          (and
            (<= 0 j@302@01)
            (<
              j@302@01
              (Seq_length
                ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1))))))))
      (and
        (= n1@303@01 (- n@273@01 1))
        (and
          (<= 0 j@302@01)
          (<
            j@302@01
            (Seq_length
              ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
    j@302@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42-aux|)))
(assert (forall ((j@302@01 Int) (n1@303@01 Int)) (!
  (=>
    (and
      (= n1@303@01 (- n@273@01 1))
      (and
        (<= 0 j@302@01)
        (<
          j@302@01
          (Seq_length
            ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
      j@302@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
    j@302@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
  $Snap.unit))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@304@01 Int)
(push) ; 7
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 8
; [then-branch: 124 | !(0 <= j@304@01) | live]
; [else-branch: 124 | 0 <= j@304@01 | live]
(push) ; 9
; [then-branch: 124 | !(0 <= j@304@01)]
(assert (not (<= 0 j@304@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 124 | 0 <= j@304@01]
(assert (<= 0 j@304@01))
; [eval] j < i
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@304@01) (not (<= 0 j@304@01))))
(push) ; 8
; [then-branch: 125 | 0 <= j@304@01 && j@304@01 < i@296@01 | live]
; [else-branch: 125 | !(0 <= j@304@01 && j@304@01 < i@296@01) | live]
(push) ; 9
; [then-branch: 125 | 0 <= j@304@01 && j@304@01 < i@296@01]
(assert (and (<= 0 j@304@01) (< j@304@01 i@296@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@304@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@304@01
  (Seq_length
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@304@01) n@273@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@304@01) n@273@01 true))
(pop) ; 9
(push) ; 9
; [else-branch: 125 | !(0 <= j@304@01 && j@304@01 < i@296@01)]
(assert (not (and (<= 0 j@304@01) (< j@304@01 i@296@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
(assert (=>
  (and (<= 0 j@304@01) (< j@304@01 i@296@01))
  (and
    (<= 0 j@304@01)
    (< j@304@01 i@296@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@304@01) n@273@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@304@01) (< j@304@01 i@296@01)))
  (and (<= 0 j@304@01) (< j@304@01 i@296@01))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@304@01 Int)) (!
  (and
    (or (<= 0 j@304@01) (not (<= 0 j@304@01)))
    (=>
      (and (<= 0 j@304@01) (< j@304@01 i@296@01))
      (and
        (<= 0 j@304@01)
        (< j@304@01 i@296@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@304@01) n@273@01 true)))
    (or
      (not (and (<= 0 j@304@01) (< j@304@01 i@296@01)))
      (and (<= 0 j@304@01) (< j@304@01 i@296@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104-aux|)))
(assert (forall ((j@304@01 Int)) (!
  (=>
    (and (<= 0 j@304@01) (< j@304@01 i@296@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@304@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|)))
(pop) ; 6
(push) ; 6
; Loop head block: Establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
(push) ; 7
(set-option :timeout 10)
(assert (not (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@305@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    ($Perm.min
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- $Perm.Write (pTaken@292@01 r))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@306@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@305@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- $Perm.Write (pTaken@292@01 r))
        $Perm.No)
      (pTaken@305@01 r))
    $Perm.No)
  
  :qid |quant-u-22721|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@305@01 r) $Perm.No)
  
  :qid |quant-u-22722|))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@305@01 r)) $Perm.No))
  
  :qid |quant-u-22723|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@307@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
(declare-const pm@308@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@308@01  $FPM) r)
    (+
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- $Perm.Write (pTaken@292@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@308@01  $FPM) r))
  :qid |qp.resPrmSumDef104|)))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@308@01  $FPM) (slot<Ref> a@242@01 (- n@273@01 1))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<=
  0
  (Seq_length
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<=
  0
  (Seq_length
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
; [eval] slot(a, n)
; Precomputing data for removing quantified permissions
(define-fun pTaken@309@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@310@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@309@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (pTaken@309@01 (slot<Ref> a@242@01 n@273@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (= (- $Perm.Write (pTaken@309@01 r)) $Perm.No))
  
  :qid |quant-u-22726|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
    :qid |qp.fvfValDef103|))))
(set-option :timeout 0)
(push) ; 7
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@278@01 (slot<Ref> a@242@01 n@273@01))
        (and
          (<= 0 (inv@277@01 (slot<Ref> a@242@01 n@273@01)))
          (< (inv@277@01 (slot<Ref> a@242@01 n@273@01)) (len<Int> a@242@01))))
      (- $Perm.Write (pTaken@292@01 (slot<Ref> a@242@01 n@273@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  0))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@311@01 Int)
(declare-const n1@312@01 Int)
(push) ; 7
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 8
; [then-branch: 126 | n1@312@01 != n@273@01 - 1 | live]
; [else-branch: 126 | n1@312@01 == n@273@01 - 1 | live]
(push) ; 9
; [then-branch: 126 | n1@312@01 != n@273@01 - 1]
(assert (not (= n1@312@01 (- n@273@01 1))))
(pop) ; 9
(push) ; 9
; [else-branch: 126 | n1@312@01 == n@273@01 - 1]
(assert (= n1@312@01 (- n@273@01 1)))
; [eval] 0 <= j
(push) ; 10
; [then-branch: 127 | !(0 <= j@311@01) | live]
; [else-branch: 127 | 0 <= j@311@01 | live]
(push) ; 11
; [then-branch: 127 | !(0 <= j@311@01)]
(assert (not (<= 0 j@311@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 127 | 0 <= j@311@01]
(assert (<= 0 j@311@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
    :qid |qp.fvfValDef103|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@278@01 (slot<Ref> a@242@01 (- n@273@01 1)))
        (and
          (<= 0 (inv@277@01 (slot<Ref> a@242@01 (- n@273@01 1))))
          (<
            (inv@277@01 (slot<Ref> a@242@01 (- n@273@01 1)))
            (len<Int> a@242@01))))
      (- $Perm.Write (pTaken@292@01 (slot<Ref> a@242@01 (- n@273@01 1))))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
(assert (or (<= 0 j@311@01) (not (<= 0 j@311@01))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
(assert (=>
  (= n1@312@01 (- n@273@01 1))
  (and (= n1@312@01 (- n@273@01 1)) (or (<= 0 j@311@01) (not (<= 0 j@311@01))))))
(assert (or (= n1@312@01 (- n@273@01 1)) (not (= n1@312@01 (- n@273@01 1)))))
(push) ; 8
; [then-branch: 128 | n1@312@01 == n@273@01 - 1 && 0 <= j@311@01 && j@311@01 < |Lookup(val, sm@307@01, slot[Ref](a@242@01, n@273@01 - 1))| | live]
; [else-branch: 128 | !(n1@312@01 == n@273@01 - 1 && 0 <= j@311@01 && j@311@01 < |Lookup(val, sm@307@01, slot[Ref](a@242@01, n@273@01 - 1))|) | live]
(push) ; 9
; [then-branch: 128 | n1@312@01 == n@273@01 - 1 && 0 <= j@311@01 && j@311@01 < |Lookup(val, sm@307@01, slot[Ref](a@242@01, n@273@01 - 1))|]
(assert (and
  (= n1@312@01 (- n@273@01 1))
  (and
    (<= 0 j@311@01)
    (<
      j@311@01
      (Seq_length
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
    :qid |qp.fvfValDef103|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n1@312@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@278@01 (slot<Ref> a@242@01 n1@312@01))
        (and
          (<= 0 (inv@277@01 (slot<Ref> a@242@01 n1@312@01)))
          (< (inv@277@01 (slot<Ref> a@242@01 n1@312@01)) (len<Int> a@242@01))))
      (- $Perm.Write (pTaken@292@01 (slot<Ref> a@242@01 n1@312@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@311@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@311@01
  (Seq_length
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
  j@311@01) (- n@273@01 1) true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
  j@311@01) (- n@273@01 1) true))
(pop) ; 9
(push) ; 9
; [else-branch: 128 | !(n1@312@01 == n@273@01 - 1 && 0 <= j@311@01 && j@311@01 < |Lookup(val, sm@307@01, slot[Ref](a@242@01, n@273@01 - 1))|)]
(assert (not
  (and
    (= n1@312@01 (- n@273@01 1))
    (and
      (<= 0 j@311@01)
      (<
        j@311@01
        (Seq_length
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
(assert (=>
  (and
    (= n1@312@01 (- n@273@01 1))
    (and
      (<= 0 j@311@01)
      (<
        j@311@01
        (Seq_length
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))
  (and
    (= n1@312@01 (- n@273@01 1))
    (<= 0 j@311@01)
    (<
      j@311@01
      (Seq_length
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
      j@311@01) (- n@273@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@312@01 (- n@273@01 1))
      (and
        (<= 0 j@311@01)
        (<
          j@311@01
          (Seq_length
            ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1))))))))
  (and
    (= n1@312@01 (- n@273@01 1))
    (and
      (<= 0 j@311@01)
      (<
        j@311@01
        (Seq_length
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@311@01 Int) (n1@312@01 Int)) (!
  (and
    (=>
      (= n1@312@01 (- n@273@01 1))
      (and
        (= n1@312@01 (- n@273@01 1))
        (or (<= 0 j@311@01) (not (<= 0 j@311@01)))))
    (or (= n1@312@01 (- n@273@01 1)) (not (= n1@312@01 (- n@273@01 1))))
    (=>
      (and
        (= n1@312@01 (- n@273@01 1))
        (and
          (<= 0 j@311@01)
          (<
            j@311@01
            (Seq_length
              ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))
      (and
        (= n1@312@01 (- n@273@01 1))
        (<= 0 j@311@01)
        (<
          j@311@01
          (Seq_length
            ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
          j@311@01) (- n@273@01 1) true)))
    (or
      (not
        (and
          (= n1@312@01 (- n@273@01 1))
          (and
            (<= 0 j@311@01)
            (<
              j@311@01
              (Seq_length
                ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1))))))))
      (and
        (= n1@312@01 (- n@273@01 1))
        (and
          (<= 0 j@311@01)
          (<
            j@311@01
            (Seq_length
              ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
    j@311@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42-aux|)))
(assert (forall ((j@311@01 Int) (n1@312@01 Int)) (!
  (=>
    (and
      (= n1@312@01 (- n@273@01 1))
      (and
        (<= 0 j@311@01)
        (<
          j@311@01
          (Seq_length
            ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
      j@311@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
    j@311@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42_precondition|)))
(push) ; 7
(assert (not (forall ((j@311@01 Int) (n1@312@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@312@01 (- n@273@01 1))
          (and
            (<= 0 j@311@01)
            (<
              j@311@01
              (Seq_length
                ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
          j@311@01) (- n@273@01 1) true))
      (and
        (= n1@312@01 (- n@273@01 1))
        (and
          (<= 0 j@311@01)
          (<
            j@311@01
            (Seq_length
              ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
      j@311@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
    j@311@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@311@01 Int) (n1@312@01 Int)) (!
  (=>
    (and
      (= n1@312@01 (- n@273@01 1))
      (and
        (<= 0 j@311@01)
        (<
          j@311@01
          (Seq_length
            ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
      j@311@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n1@312@01))
    j@311@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@313@01 Int)
(push) ; 7
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 8
; [then-branch: 129 | !(0 <= j@313@01) | live]
; [else-branch: 129 | 0 <= j@313@01 | live]
(push) ; 9
; [then-branch: 129 | !(0 <= j@313@01)]
(assert (not (<= 0 j@313@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 129 | 0 <= j@313@01]
(assert (<= 0 j@313@01))
; [eval] j < i
(pop) ; 9
(pop) ; 8
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@313@01) (not (<= 0 j@313@01))))
(push) ; 8
; [then-branch: 130 | 0 <= j@313@01 && j@313@01 < 0 | live]
; [else-branch: 130 | !(0 <= j@313@01 && j@313@01 < 0) | live]
(push) ; 9
; [then-branch: 130 | 0 <= j@313@01 && j@313@01 < 0]
(assert (and (<= 0 j@313@01) (< j@313@01 0)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
    :qid |qp.fvfValDef102|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
    :qid |qp.fvfValDef103|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@278@01 (slot<Ref> a@242@01 n@273@01))
        (and
          (<= 0 (inv@277@01 (slot<Ref> a@242@01 n@273@01)))
          (< (inv@277@01 (slot<Ref> a@242@01 n@273@01)) (len<Int> a@242@01))))
      (- $Perm.Write (pTaken@292@01 (slot<Ref> a@242@01 n@273@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (>= j@313@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  j@313@01
  (Seq_length
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@313@01) n@273@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@313@01) n@273@01 true))
(pop) ; 9
(push) ; 9
; [else-branch: 130 | !(0 <= j@313@01 && j@313@01 < 0)]
(assert (not (and (<= 0 j@313@01) (< j@313@01 0))))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
(assert (=>
  (and (<= 0 j@313@01) (< j@313@01 0))
  (and
    (<= 0 j@313@01)
    (< j@313@01 0)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@313@01) n@273@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@313@01) (< j@313@01 0)))
  (and (<= 0 j@313@01) (< j@313@01 0))))
(pop) ; 7
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@293@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@293@01  $FVF<val>) r))
  :qid |qp.fvfValDef102|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- $Perm.Write (pTaken@292@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@307@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef103|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@313@01 Int)) (!
  (and
    (or (<= 0 j@313@01) (not (<= 0 j@313@01)))
    (=>
      (and (<= 0 j@313@01) (< j@313@01 0))
      (and
        (<= 0 j@313@01)
        (< j@313@01 0)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@313@01) n@273@01 true)))
    (or
      (not (and (<= 0 j@313@01) (< j@313@01 0)))
      (and (<= 0 j@313@01) (< j@313@01 0))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104-aux|)))
(assert (forall ((j@313@01 Int)) (!
  (=>
    (and (<= 0 j@313@01) (< j@313@01 0))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@313@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104_precondition|)))
(push) ; 7
(assert (not (forall ((j@313@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@313@01) (< j@313@01 0))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@313@01) n@273@01 true))
      (and (<= 0 j@313@01) (< j@313@01 0)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@313@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@313@01 Int)) (!
  (=>
    (and (<= 0 j@313@01) (< j@313@01 0))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@313@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@307@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@313@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef99|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef100|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@301@01  $FPM) r)
    (+
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)))
  :pattern (($FVF.perm_val (as pm@301@01  $FPM) r))
  :qid |qp.resPrmSumDef101|)))
(assert (=
  ($FVF.lookup_val (as sm@299@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
  (not (= (slot<Ref> a@242@01 n@273@01) $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  i@296@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
  $Snap.unit))
(assert (forall ((j@302@01 Int) (n1@303@01 Int)) (!
  (and
    (=>
      (= n1@303@01 (- n@273@01 1))
      (and
        (= n1@303@01 (- n@273@01 1))
        (or (<= 0 j@302@01) (not (<= 0 j@302@01)))))
    (or (= n1@303@01 (- n@273@01 1)) (not (= n1@303@01 (- n@273@01 1))))
    (=>
      (and
        (= n1@303@01 (- n@273@01 1))
        (and
          (<= 0 j@302@01)
          (<
            j@302@01
            (Seq_length
              ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))
      (and
        (= n1@303@01 (- n@273@01 1))
        (<= 0 j@302@01)
        (<
          j@302@01
          (Seq_length
            ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
          j@302@01) (- n@273@01 1) true)))
    (or
      (not
        (and
          (= n1@303@01 (- n@273@01 1))
          (and
            (<= 0 j@302@01)
            (<
              j@302@01
              (Seq_length
                ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1))))))))
      (and
        (= n1@303@01 (- n@273@01 1))
        (and
          (<= 0 j@302@01)
          (<
            j@302@01
            (Seq_length
              ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
    j@302@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42-aux|)))
(assert (forall ((j@302@01 Int) (n1@303@01 Int)) (!
  (=>
    (and
      (= n1@303@01 (- n@273@01 1))
      (and
        (<= 0 j@302@01)
        (<
          j@302@01
          (Seq_length
            ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
      j@302@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n1@303@01))
    j@302@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
  $Snap.unit))
(assert (forall ((j@304@01 Int)) (!
  (and
    (or (<= 0 j@304@01) (not (<= 0 j@304@01)))
    (=>
      (and (<= 0 j@304@01) (< j@304@01 i@296@01))
      (and
        (<= 0 j@304@01)
        (< j@304@01 i@296@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@304@01) n@273@01 true)))
    (or
      (not (and (<= 0 j@304@01) (< j@304@01 i@296@01)))
      (and (<= 0 j@304@01) (< j@304@01 i@296@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104-aux|)))
(assert (forall ((j@304@01 Int)) (!
  (=>
    (and (<= 0 j@304@01) (< j@304@01 i@296@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@304@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@304@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|)))
(assert (=
  ($FVF.lookup_val (as sm@298@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))
  ($SortWrappers.$SnapToSeq<Seq<Int>> ($Snap.first $t@297@01))))
(assert (<=
  $Perm.No
  (ite
    (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)))
(assert (<=
  (ite
    (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
    (/ (to_real 1) (to_real 2))
    $Perm.No)
  $Perm.Write))
(assert (=>
  (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
  (not (= (slot<Ref> a@242@01 (- n@273@01 1)) $Ref.null))))
(assert (=
  ($Snap.second $t@297@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@297@01))
    ($Snap.second ($Snap.second $t@297@01)))))
(assert (= ($Snap.first ($Snap.second $t@297@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@297@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@297@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@297@01))) $Snap.unit))
(assert (<= 0 i@296@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@297@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@297@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@297@01))))
  $Snap.unit))
(assert (<=
  i@296@01
  (Seq_length
    ($FVF.lookup_val (as sm@298@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@297@01))))))))
(assert (= $t@297@01 ($Snap.combine ($Snap.first $t@297@01) ($Snap.second $t@297@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
(push) ; 8
; [eval] !(i < |slot(a, n - 1).val|)
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 8
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    i@296@01
    (Seq_length
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
        n@273@01
        1))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  i@296@01
  (Seq_length
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 131 | i@296@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))| | live]
; [else-branch: 131 | !(i@296@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))|) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 131 | i@296@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))|]
(assert (<
  i@296@01
  (Seq_length
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
; [exec]
; var oldSoln: Seq[Int]
(declare-const oldSoln@314@01 Seq<Int>)
; [exec]
; var soln: Seq[Int]
(declare-const soln@315@01 Seq<Int>)
; [exec]
; oldSoln := slot(a, n - 1).val[i]
; [eval] slot(a, n - 1).val[i]
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 9
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (>= i@296@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const oldSoln@316@01 Seq<Int>)
(assert (=
  oldSoln@316@01
  (Seq_index
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))
    i@296@01)))
; [eval] oldSoln[0] == 0
; [eval] oldSoln[0]
(push) ; 9
(assert (not (< 0 (Seq_length oldSoln@316@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (Seq_index oldSoln@316@01 0) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index oldSoln@316@01 0) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 132 | oldSoln@316@01[0] == 0 | live]
; [else-branch: 132 | oldSoln@316@01[0] != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 132 | oldSoln@316@01[0] == 0]
(assert (= (Seq_index oldSoln@316@01 0) 0))
; [exec]
; soln := oldSoln[1 := oldSoln[1] + 1]
; [eval] oldSoln[1 := oldSoln[1] + 1]
; [eval] oldSoln[1] + 1
; [eval] oldSoln[1]
(push) ; 10
(assert (not (< 1 (Seq_length oldSoln@316@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (< 1 (Seq_length oldSoln@316@01))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(declare-const soln@317@01 Seq<Int>)
(assert (=
  soln@317@01
  (Seq_append
    (Seq_take oldSoln@316@01 1)
    (Seq_append
      (Seq_singleton (+ (Seq_index oldSoln@316@01 1) 1))
      (Seq_drop oldSoln@316@01 2)))))
; [exec]
; assert soln[2..] == oldSoln[2..]
; [eval] soln[2..] == oldSoln[2..]
; [eval] soln[2..]
; [eval] oldSoln[2..]
(push) ; 10
(assert (not (Seq_equal (Seq_drop soln@317@01 2) (Seq_drop oldSoln@316@01 2))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal (Seq_drop soln@317@01 2) (Seq_drop oldSoln@316@01 2)))
; [exec]
; assert valid(soln, n, true)
; [eval] valid(soln, n, true)
(push) ; 10
(assert (valid%precondition $Snap.unit soln@317@01 n@273@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit soln@317@01 n@273@01 true))
(push) ; 10
(assert (not (valid $Snap.unit soln@317@01 n@273@01 true)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit soln@317@01 n@273@01 true))
; [exec]
; slot(a, n).val := slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
; [eval] slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(soln)
(assert (= (Seq_length (Seq_singleton soln@317@01)) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@318@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@319@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@318@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (pTaken@318@01 (slot<Ref> a@242@01 n@273@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (= (- $Perm.Write (pTaken@318@01 r)) $Perm.No))
  
  :qid |quant-u-22729|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@320@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@320@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  (Seq_append
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    (Seq_singleton soln@317@01))))
; [exec]
; i := i + 1
; [eval] i + 1
(declare-const i@321@01 Int)
(assert (= i@321@01 (+ i@296@01 1)))
; Loop head block: Re-establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
; Precomputing data for removing quantified permissions
(define-fun pTaken@322@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@323@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@322@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@322@01 (slot<Ref> a@242@01 (- n@273@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@322@01 r)) $Perm.No))
  
  :qid |quant-u-22732|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
(set-option :timeout 0)
(push) ; 10
(assert (not (<= 0 i@321@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i@321@01))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@324@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
(declare-const pm@325@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@325@01  $FPM) r)
    (+
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@325@01  $FPM) r))
  :qid |qp.resPrmSumDef107|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@325@01  $FPM) (slot<Ref> a@242@01 (- n@273@01 1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  i@321@01
  (Seq_length
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@321@01
  (Seq_length
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
; [eval] slot(a, n)
; Precomputing data for removing quantified permissions
(define-fun pTaken@326@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (pTaken@326@01 (slot<Ref> a@242@01 n@273@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (= (- $Perm.Write (pTaken@326@01 r)) $Perm.No))
  
  :qid |quant-u-22735|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
    :qid |qp.fvfValDef105|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef106|))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  i@321@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  i@321@01))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@327@01 Int)
(declare-const n1@328@01 Int)
(push) ; 10
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 11
; [then-branch: 133 | n1@328@01 != n@273@01 - 1 | live]
; [else-branch: 133 | n1@328@01 == n@273@01 - 1 | live]
(push) ; 12
; [then-branch: 133 | n1@328@01 != n@273@01 - 1]
(assert (not (= n1@328@01 (- n@273@01 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 133 | n1@328@01 == n@273@01 - 1]
(assert (= n1@328@01 (- n@273@01 1)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 134 | !(0 <= j@327@01) | live]
; [else-branch: 134 | 0 <= j@327@01 | live]
(push) ; 14
; [then-branch: 134 | !(0 <= j@327@01)]
(assert (not (<= 0 j@327@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 134 | 0 <= j@327@01]
(assert (<= 0 j@327@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
    :qid |qp.fvfValDef105|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef106|))))
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
(assert (or (<= 0 j@327@01) (not (<= 0 j@327@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
(assert (=>
  (= n1@328@01 (- n@273@01 1))
  (and (= n1@328@01 (- n@273@01 1)) (or (<= 0 j@327@01) (not (<= 0 j@327@01))))))
(assert (or (= n1@328@01 (- n@273@01 1)) (not (= n1@328@01 (- n@273@01 1)))))
(push) ; 11
; [then-branch: 135 | n1@328@01 == n@273@01 - 1 && 0 <= j@327@01 && j@327@01 < |Lookup(val, sm@324@01, slot[Ref](a@242@01, n@273@01 - 1))| | live]
; [else-branch: 135 | !(n1@328@01 == n@273@01 - 1 && 0 <= j@327@01 && j@327@01 < |Lookup(val, sm@324@01, slot[Ref](a@242@01, n@273@01 - 1))|) | live]
(push) ; 12
; [then-branch: 135 | n1@328@01 == n@273@01 - 1 && 0 <= j@327@01 && j@327@01 < |Lookup(val, sm@324@01, slot[Ref](a@242@01, n@273@01 - 1))|]
(assert (and
  (= n1@328@01 (- n@273@01 1))
  (and
    (<= 0 j@327@01)
    (<
      j@327@01
      (Seq_length
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
    :qid |qp.fvfValDef105|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef106|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n1@328@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n1@328@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@327@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@327@01
  (Seq_length
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
  j@327@01) (- n@273@01 1) true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
  j@327@01) (- n@273@01 1) true))
(pop) ; 12
(push) ; 12
; [else-branch: 135 | !(n1@328@01 == n@273@01 - 1 && 0 <= j@327@01 && j@327@01 < |Lookup(val, sm@324@01, slot[Ref](a@242@01, n@273@01 - 1))|)]
(assert (not
  (and
    (= n1@328@01 (- n@273@01 1))
    (and
      (<= 0 j@327@01)
      (<
        j@327@01
        (Seq_length
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
(assert (=>
  (and
    (= n1@328@01 (- n@273@01 1))
    (and
      (<= 0 j@327@01)
      (<
        j@327@01
        (Seq_length
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))
  (and
    (= n1@328@01 (- n@273@01 1))
    (<= 0 j@327@01)
    (<
      j@327@01
      (Seq_length
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
      j@327@01) (- n@273@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@328@01 (- n@273@01 1))
      (and
        (<= 0 j@327@01)
        (<
          j@327@01
          (Seq_length
            ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1))))))))
  (and
    (= n1@328@01 (- n@273@01 1))
    (and
      (<= 0 j@327@01)
      (<
        j@327@01
        (Seq_length
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@327@01 Int) (n1@328@01 Int)) (!
  (and
    (=>
      (= n1@328@01 (- n@273@01 1))
      (and
        (= n1@328@01 (- n@273@01 1))
        (or (<= 0 j@327@01) (not (<= 0 j@327@01)))))
    (or (= n1@328@01 (- n@273@01 1)) (not (= n1@328@01 (- n@273@01 1))))
    (=>
      (and
        (= n1@328@01 (- n@273@01 1))
        (and
          (<= 0 j@327@01)
          (<
            j@327@01
            (Seq_length
              ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))
      (and
        (= n1@328@01 (- n@273@01 1))
        (<= 0 j@327@01)
        (<
          j@327@01
          (Seq_length
            ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
          j@327@01) (- n@273@01 1) true)))
    (or
      (not
        (and
          (= n1@328@01 (- n@273@01 1))
          (and
            (<= 0 j@327@01)
            (<
              j@327@01
              (Seq_length
                ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1))))))))
      (and
        (= n1@328@01 (- n@273@01 1))
        (and
          (<= 0 j@327@01)
          (<
            j@327@01
            (Seq_length
              ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
    j@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42-aux|)))
(assert (forall ((j@327@01 Int) (n1@328@01 Int)) (!
  (=>
    (and
      (= n1@328@01 (- n@273@01 1))
      (and
        (<= 0 j@327@01)
        (<
          j@327@01
          (Seq_length
            ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
      j@327@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
    j@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42_precondition|)))
(push) ; 10
(assert (not (forall ((j@327@01 Int) (n1@328@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@328@01 (- n@273@01 1))
          (and
            (<= 0 j@327@01)
            (<
              j@327@01
              (Seq_length
                ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
          j@327@01) (- n@273@01 1) true))
      (and
        (= n1@328@01 (- n@273@01 1))
        (and
          (<= 0 j@327@01)
          (<
            j@327@01
            (Seq_length
              ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
      j@327@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
    j@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@327@01 Int) (n1@328@01 Int)) (!
  (=>
    (and
      (= n1@328@01 (- n@273@01 1))
      (and
        (<= 0 j@327@01)
        (<
          j@327@01
          (Seq_length
            ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
      j@327@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n1@328@01))
    j@327@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@329@01 Int)
(push) ; 10
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 11
; [then-branch: 136 | !(0 <= j@329@01) | live]
; [else-branch: 136 | 0 <= j@329@01 | live]
(push) ; 12
; [then-branch: 136 | !(0 <= j@329@01)]
(assert (not (<= 0 j@329@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 136 | 0 <= j@329@01]
(assert (<= 0 j@329@01))
; [eval] j < i
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@329@01) (not (<= 0 j@329@01))))
(push) ; 11
; [then-branch: 137 | 0 <= j@329@01 && j@329@01 < i@321@01 | live]
; [else-branch: 137 | !(0 <= j@329@01 && j@329@01 < i@321@01) | live]
(push) ; 12
; [then-branch: 137 | 0 <= j@329@01 && j@329@01 < i@321@01]
(assert (and (<= 0 j@329@01) (< j@329@01 i@321@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
    :qid |qp.fvfValDef105|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef106|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@329@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@329@01
  (Seq_length
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@329@01) n@273@01 true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@329@01) n@273@01 true))
(pop) ; 12
(push) ; 12
; [else-branch: 137 | !(0 <= j@329@01 && j@329@01 < i@321@01)]
(assert (not (and (<= 0 j@329@01) (< j@329@01 i@321@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
(assert (=>
  (and (<= 0 j@329@01) (< j@329@01 i@321@01))
  (and
    (<= 0 j@329@01)
    (< j@329@01 i@321@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@329@01) n@273@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@329@01) (< j@329@01 i@321@01)))
  (and (<= 0 j@329@01) (< j@329@01 i@321@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@320@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@320@01  $FVF<val>) r))
  :qid |qp.fvfValDef105|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@324@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef106|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@329@01 Int)) (!
  (and
    (or (<= 0 j@329@01) (not (<= 0 j@329@01)))
    (=>
      (and (<= 0 j@329@01) (< j@329@01 i@321@01))
      (and
        (<= 0 j@329@01)
        (< j@329@01 i@321@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@329@01) n@273@01 true)))
    (or
      (not (and (<= 0 j@329@01) (< j@329@01 i@321@01)))
      (and (<= 0 j@329@01) (< j@329@01 i@321@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@329@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104-aux|)))
(assert (forall ((j@329@01 Int)) (!
  (=>
    (and (<= 0 j@329@01) (< j@329@01 i@321@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@329@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@329@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104_precondition|)))
(push) ; 10
(assert (not (forall ((j@329@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@329@01) (< j@329@01 i@321@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@329@01) n@273@01 true))
      (and (<= 0 j@329@01) (< j@329@01 i@321@01)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@329@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@329@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@329@01 Int)) (!
  (=>
    (and (<= 0 j@329@01) (< j@329@01 i@321@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@329@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@324@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@329@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|)))
(pop) ; 9
(push) ; 9
; [else-branch: 132 | oldSoln@316@01[0] != 0]
(assert (not (= (Seq_index oldSoln@316@01 0) 0)))
(pop) ; 9
; [eval] !(oldSoln[0] == 0)
; [eval] oldSoln[0] == 0
; [eval] oldSoln[0]
(push) ; 9
(assert (not (< 0 (Seq_length oldSoln@316@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (= (Seq_index oldSoln@316@01 0) 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (Seq_index oldSoln@316@01 0) 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 138 | oldSoln@316@01[0] != 0 | live]
; [else-branch: 138 | oldSoln@316@01[0] == 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 138 | oldSoln@316@01[0] != 0]
(assert (not (= (Seq_index oldSoln@316@01 0) 0)))
; [exec]
; soln := Seq(0, 1) ++ oldSoln
; [eval] Seq(0, 1) ++ oldSoln
; [eval] Seq(0, 1)
(declare-const soln@330@01 Seq<Int>)
(assert (=
  soln@330@01
  (Seq_append (Seq_append (Seq_singleton 0) (Seq_singleton 1)) oldSoln@316@01)))
; [exec]
; assert soln[2..] == oldSoln
; [eval] soln[2..] == oldSoln
; [eval] soln[2..]
(push) ; 10
(assert (not (Seq_equal (Seq_drop soln@330@01 2) oldSoln@316@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal (Seq_drop soln@330@01 2) oldSoln@316@01))
; [exec]
; assert valid(oldSoln, n - 1, false)
; [eval] valid(oldSoln, n - 1, false)
; [eval] n - 1
(push) ; 10
(assert (valid%precondition $Snap.unit oldSoln@316@01 (- n@273@01 1) false))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit oldSoln@316@01 (- n@273@01 1) false))
(push) ; 10
(assert (not (valid $Snap.unit oldSoln@316@01 (- n@273@01 1) false)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit oldSoln@316@01 (- n@273@01 1) false))
; [exec]
; assert valid(soln, n, true)
; [eval] valid(soln, n, true)
(push) ; 10
(assert (valid%precondition $Snap.unit soln@330@01 n@273@01 true))
(pop) ; 10
; Joined path conditions
(assert (valid%precondition $Snap.unit soln@330@01 n@273@01 true))
(push) ; 10
(assert (not (valid $Snap.unit soln@330@01 n@273@01 true)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (valid $Snap.unit soln@330@01 n@273@01 true))
; [exec]
; slot(a, n).val := slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
; [eval] slot(a, n).val ++ Seq(soln)
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef99|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@300@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@300@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef100|))))
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] Seq(soln)
(assert (= (Seq_length (Seq_singleton soln@330@01)) 1))
; Precomputing data for removing quantified permissions
(define-fun pTaken@331@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@332@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@331@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (pTaken@331@01 (slot<Ref> a@242@01 n@273@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (= (- $Perm.Write (pTaken@331@01 r)) $Perm.No))
  
  :qid |quant-u-22738|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const sm@333@01 $FVF<val>)
; Definitional axioms for singleton-FVF's value
(assert (=
  ($FVF.lookup_val (as sm@333@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  (Seq_append
    ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    (Seq_singleton soln@330@01))))
; [exec]
; i := i + 1
; [eval] i + 1
(declare-const i@334@01 Int)
(assert (= i@334@01 (+ i@296@01 1)))
; Loop head block: Re-establish invariant
; [eval] slot(a, n - 1)
; [eval] n - 1
; Precomputing data for removing quantified permissions
(define-fun pTaken@335@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (/ (to_real 1) (to_real 2)))
    $Perm.No))
(define-fun pTaken@336@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (- (/ (to_real 1) (to_real 2)) (pTaken@335@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@335@01 (slot<Ref> a@242@01 (- n@273@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (= (- (/ (to_real 1) (to_real 2)) (pTaken@335@01 r)) $Perm.No))
  
  :qid |quant-u-22741|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] len(a) == 51
; [eval] len(a)
; [eval] 0 <= i
(set-option :timeout 0)
(push) ; 10
(assert (not (<= 0 i@334@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 i@334@01))
; [eval] i <= |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@337@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
(declare-const pm@338@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@338@01  $FPM) r)
    (+
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@338@01  $FPM) r))
  :qid |qp.resPrmSumDef110|)))
(push) ; 10
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@338@01  $FPM) (slot<Ref> a@242@01 (- n@273@01 1))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<=
  i@334@01
  (Seq_length
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<=
  i@334@01
  (Seq_length
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
; [eval] slot(a, n)
; Precomputing data for removing quantified permissions
(define-fun pTaken@339@01 ((r $Ref)) $Perm
  (ite
    (= r (slot<Ref> a@242@01 n@273@01))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (pTaken@339@01 (slot<Ref> a@242@01 n@273@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (= (- $Perm.Write (pTaken@339@01 r)) $Perm.No))
  
  :qid |quant-u-22744|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] |slot(a, n).val| == i
; [eval] |slot(a, n).val|
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
    :qid |qp.fvfValDef108|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef109|))))
(set-option :timeout 0)
(push) ; 10
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (=
  (Seq_length
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  i@334@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01)))
  i@334@01))
; [eval] (forall j: Int, n1: Int :: { slot(a, n1).val[j] } n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true))
(declare-const j@340@01 Int)
(declare-const n1@341@01 Int)
(push) ; 10
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|) ==> valid(slot(a, n1).val[j], n - 1, true)
; [eval] n1 == n - 1 && (0 <= j && j < |slot(a, n - 1).val|)
; [eval] n1 == n - 1
; [eval] n - 1
(push) ; 11
; [then-branch: 139 | n1@341@01 != n@273@01 - 1 | live]
; [else-branch: 139 | n1@341@01 == n@273@01 - 1 | live]
(push) ; 12
; [then-branch: 139 | n1@341@01 != n@273@01 - 1]
(assert (not (= n1@341@01 (- n@273@01 1))))
(pop) ; 12
(push) ; 12
; [else-branch: 139 | n1@341@01 == n@273@01 - 1]
(assert (= n1@341@01 (- n@273@01 1)))
; [eval] 0 <= j
(push) ; 13
; [then-branch: 140 | !(0 <= j@340@01) | live]
; [else-branch: 140 | 0 <= j@340@01 | live]
(push) ; 14
; [then-branch: 140 | !(0 <= j@340@01)]
(assert (not (<= 0 j@340@01)))
(pop) ; 14
(push) ; 14
; [else-branch: 140 | 0 <= j@340@01]
(assert (<= 0 j@340@01))
; [eval] j < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
    :qid |qp.fvfValDef108|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef109|))))
(push) ; 15
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
(assert (or (<= 0 j@340@01) (not (<= 0 j@340@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
(assert (=>
  (= n1@341@01 (- n@273@01 1))
  (and (= n1@341@01 (- n@273@01 1)) (or (<= 0 j@340@01) (not (<= 0 j@340@01))))))
(assert (or (= n1@341@01 (- n@273@01 1)) (not (= n1@341@01 (- n@273@01 1)))))
(push) ; 11
; [then-branch: 141 | n1@341@01 == n@273@01 - 1 && 0 <= j@340@01 && j@340@01 < |Lookup(val, sm@337@01, slot[Ref](a@242@01, n@273@01 - 1))| | live]
; [else-branch: 141 | !(n1@341@01 == n@273@01 - 1 && 0 <= j@340@01 && j@340@01 < |Lookup(val, sm@337@01, slot[Ref](a@242@01, n@273@01 - 1))|) | live]
(push) ; 12
; [then-branch: 141 | n1@341@01 == n@273@01 - 1 && 0 <= j@340@01 && j@340@01 < |Lookup(val, sm@337@01, slot[Ref](a@242@01, n@273@01 - 1))|]
(assert (and
  (= n1@341@01 (- n@273@01 1))
  (and
    (<= 0 j@340@01)
    (<
      j@340@01
      (Seq_length
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1))))))))
; [eval] valid(slot(a, n1).val[j], n - 1, true)
; [eval] slot(a, n1).val[j]
; [eval] slot(a, n1)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
    :qid |qp.fvfValDef108|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef109|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n1@341@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n1@341@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@340@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@340@01
  (Seq_length
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [eval] n - 1
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
  j@340@01) (- n@273@01 1) true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
  j@340@01) (- n@273@01 1) true))
(pop) ; 12
(push) ; 12
; [else-branch: 141 | !(n1@341@01 == n@273@01 - 1 && 0 <= j@340@01 && j@340@01 < |Lookup(val, sm@337@01, slot[Ref](a@242@01, n@273@01 - 1))|)]
(assert (not
  (and
    (= n1@341@01 (- n@273@01 1))
    (and
      (<= 0 j@340@01)
      (<
        j@340@01
        (Seq_length
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
(assert (=>
  (and
    (= n1@341@01 (- n@273@01 1))
    (and
      (<= 0 j@340@01)
      (<
        j@340@01
        (Seq_length
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))
  (and
    (= n1@341@01 (- n@273@01 1))
    (<= 0 j@340@01)
    (<
      j@340@01
      (Seq_length
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
          n@273@01
          1)))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
      j@340@01) (- n@273@01 1) true))))
; Joined path conditions
(assert (or
  (not
    (and
      (= n1@341@01 (- n@273@01 1))
      (and
        (<= 0 j@340@01)
        (<
          j@340@01
          (Seq_length
            ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1))))))))
  (and
    (= n1@341@01 (- n@273@01 1))
    (and
      (<= 0 j@340@01)
      (<
        j@340@01
        (Seq_length
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
            n@273@01
            1)))))))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@340@01 Int) (n1@341@01 Int)) (!
  (and
    (=>
      (= n1@341@01 (- n@273@01 1))
      (and
        (= n1@341@01 (- n@273@01 1))
        (or (<= 0 j@340@01) (not (<= 0 j@340@01)))))
    (or (= n1@341@01 (- n@273@01 1)) (not (= n1@341@01 (- n@273@01 1))))
    (=>
      (and
        (= n1@341@01 (- n@273@01 1))
        (and
          (<= 0 j@340@01)
          (<
            j@340@01
            (Seq_length
              ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))
      (and
        (= n1@341@01 (- n@273@01 1))
        (<= 0 j@340@01)
        (<
          j@340@01
          (Seq_length
            ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
          j@340@01) (- n@273@01 1) true)))
    (or
      (not
        (and
          (= n1@341@01 (- n@273@01 1))
          (and
            (<= 0 j@340@01)
            (<
              j@340@01
              (Seq_length
                ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1))))))))
      (and
        (= n1@341@01 (- n@273@01 1))
        (and
          (<= 0 j@340@01)
          (<
            j@340@01
            (Seq_length
              ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1)))))))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
    j@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42-aux|)))
(assert (forall ((j@340@01 Int) (n1@341@01 Int)) (!
  (=>
    (and
      (= n1@341@01 (- n@273@01 1))
      (and
        (<= 0 j@340@01)
        (<
          j@340@01
          (Seq_length
            ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
      j@340@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
    j@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42_precondition|)))
(push) ; 10
(assert (not (forall ((j@340@01 Int) (n1@341@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (= n1@341@01 (- n@273@01 1))
          (and
            (<= 0 j@340@01)
            (<
              j@340@01
              (Seq_length
                ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
                  n@273@01
                  1)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
          j@340@01) (- n@273@01 1) true))
      (and
        (= n1@341@01 (- n@273@01 1))
        (and
          (<= 0 j@340@01)
          (<
            j@340@01
            (Seq_length
              ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
                n@273@01
                1))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
      j@340@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
    j@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@340@01 Int) (n1@341@01 Int)) (!
  (=>
    (and
      (= n1@341@01 (- n@273@01 1))
      (and
        (<= 0 j@340@01)
        (<
          j@340@01
          (Seq_length
            ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 (-
              n@273@01
              1)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
      j@340@01) (- n@273@01 1) true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n1@341@01))
    j@340@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@237@17@238@42|)))
; [eval] (forall j: Int :: { slot(a, n).val[j] } 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true))
(declare-const j@342@01 Int)
(push) ; 10
; [eval] 0 <= j && j < i ==> valid(slot(a, n).val[j], n, true)
; [eval] 0 <= j && j < i
; [eval] 0 <= j
(push) ; 11
; [then-branch: 142 | !(0 <= j@342@01) | live]
; [else-branch: 142 | 0 <= j@342@01 | live]
(push) ; 12
; [then-branch: 142 | !(0 <= j@342@01)]
(assert (not (<= 0 j@342@01)))
(pop) ; 12
(push) ; 12
; [else-branch: 142 | 0 <= j@342@01]
(assert (<= 0 j@342@01))
; [eval] j < i
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 j@342@01) (not (<= 0 j@342@01))))
(push) ; 11
; [then-branch: 143 | 0 <= j@342@01 && j@342@01 < i@334@01 | live]
; [else-branch: 143 | !(0 <= j@342@01 && j@342@01 < i@334@01) | live]
(push) ; 12
; [then-branch: 143 | 0 <= j@342@01 && j@342@01 < i@334@01]
(assert (and (<= 0 j@342@01) (< j@342@01 i@334@01)))
; [eval] valid(slot(a, n).val[j], n, true)
; [eval] slot(a, n).val[j]
; [eval] slot(a, n)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
    :qid |qp.fvfValDef108|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef109|))))
(push) ; 13
(assert (not (<
  $Perm.No
  (+
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (>= j@342@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (<
  j@342@01
  (Seq_length
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@342@01) n@273@01 true))
(pop) ; 13
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
  j@342@01) n@273@01 true))
(pop) ; 12
(push) ; 12
; [else-branch: 143 | !(0 <= j@342@01 && j@342@01 < i@334@01)]
(assert (not (and (<= 0 j@342@01) (< j@342@01 i@334@01))))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
(assert (=>
  (and (<= 0 j@342@01) (< j@342@01 i@334@01))
  (and
    (<= 0 j@342@01)
    (< j@342@01 i@334@01)
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@342@01) n@273@01 true))))
; Joined path conditions
(assert (or
  (not (and (<= 0 j@342@01) (< j@342@01 i@334@01)))
  (and (<= 0 j@342@01) (< j@342@01 i@334@01))))
(pop) ; 10
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@333@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@333@01  $FVF<val>) r))
  :qid |qp.fvfValDef108|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@337@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef109|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((j@342@01 Int)) (!
  (and
    (or (<= 0 j@342@01) (not (<= 0 j@342@01)))
    (=>
      (and (<= 0 j@342@01) (< j@342@01 i@334@01))
      (and
        (<= 0 j@342@01)
        (< j@342@01 i@334@01)
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@342@01) n@273@01 true)))
    (or
      (not (and (<= 0 j@342@01) (< j@342@01 i@334@01)))
      (and (<= 0 j@342@01) (< j@342@01 i@334@01))))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104-aux|)))
(assert (forall ((j@342@01 Int)) (!
  (=>
    (and (<= 0 j@342@01) (< j@342@01 i@334@01))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@342@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104_precondition|)))
(push) ; 10
(assert (not (forall ((j@342@01 Int)) (!
  (=>
    (and
      (=>
        (and (<= 0 j@342@01) (< j@342@01 i@334@01))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
          j@342@01) n@273@01 true))
      (and (<= 0 j@342@01) (< j@342@01 i@334@01)))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@342@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (forall ((j@342@01 Int)) (!
  (=>
    (and (<= 0 j@342@01) (< j@342@01 i@334@01))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
      j@342@01) n@273@01 true))
  :pattern ((Seq_index
    ($FVF.lookup_val (as sm@337@01  $FVF<val>) (slot<Ref> a@242@01 n@273@01))
    j@342@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@239@17@239@104|)))
(pop) ; 9
(push) ; 9
; [else-branch: 138 | oldSoln@316@01[0] == 0]
(assert (= (Seq_index oldSoln@316@01 0) 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 131 | !(i@296@01 < |Lookup(val, sm@300@01, slot[Ref](a@242@01, n@273@01 - 1))|)]
(assert (not
  (<
    i@296@01
    (Seq_length
      ($FVF.lookup_val (as sm@300@01  $FVF<val>) (slot<Ref> a@242@01 (-
        n@273@01
        1)))))))
(pop) ; 8
; [eval] !(i < |slot(a, n - 1).val|)
; [eval] i < |slot(a, n - 1).val|
; [eval] |slot(a, n - 1).val|
; [eval] slot(a, n - 1)
; [eval] n - 1
(declare-const sm@343@01 $FVF<val>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef113|)))
(declare-const pm@344@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_val (as pm@344@01  $FPM) r)
    (+
      (+
        (ite
          (= r (slot<Ref> a@242@01 (- n@273@01 1)))
          (/ (to_real 1) (to_real 2))
          $Perm.No)
        (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No))
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r))
        $Perm.No)))
  :pattern (($FVF.perm_val (as pm@344@01  $FPM) r))
  :qid |qp.resPrmSumDef114|)))
(push) ; 8
(assert (not (<
  $Perm.No
  ($FVF.perm_val (as pm@344@01  $FPM) (slot<Ref> a@242@01 (- n@273@01 1))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (<
  i@296@01
  (Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1)))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not
  (<
    i@296@01
    (Seq_length
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 (-
        n@273@01
        1))))))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 144 | !(i@296@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, n@273@01 - 1))|) | live]
; [else-branch: 144 | i@296@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, n@273@01 - 1))| | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 144 | !(i@296@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, n@273@01 - 1))|)]
(assert (not
  (<
    i@296@01
    (Seq_length
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 (-
        n@273@01
        1)))))))
; [exec]
; n := n + 1
; [eval] n + 1
(declare-const n@345@01 Int)
(assert (= n@345@01 (+ n@273@01 1)))
; Loop head block: Re-establish invariant
; [eval] 4 <= n
(push) ; 9
(assert (not (<= 4 n@345@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= 4 n@345@01))
; [eval] n <= 51
(push) ; 9
(assert (not (<= n@345@01 51)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (<= n@345@01 51))
; [eval] len(a) == 51
; [eval] len(a)
(declare-const i@346@01 Int)
(push) ; 9
; [eval] 0 <= i && i < len(a)
; [eval] 0 <= i
(push) ; 10
; [then-branch: 145 | !(0 <= i@346@01) | live]
; [else-branch: 145 | 0 <= i@346@01 | live]
(push) ; 11
; [then-branch: 145 | !(0 <= i@346@01)]
(assert (not (<= 0 i@346@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 145 | 0 <= i@346@01]
(assert (<= 0 i@346@01))
; [eval] i < len(a)
; [eval] len(a)
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 i@346@01) (not (<= 0 i@346@01))))
(assert (and (<= 0 i@346@01) (< i@346@01 (len<Int> a@242@01))))
; [eval] slot(a, i)
(pop) ; 9
(declare-fun inv@347@01 ($Ref) Int)
(declare-fun img@348@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((i@346@01 Int)) (!
  (=>
    (and (<= 0 i@346@01) (< i@346@01 (len<Int> a@242@01)))
    (or (<= 0 i@346@01) (not (<= 0 i@346@01))))
  :pattern ((slot<Ref> a@242@01 i@346@01))
  :qid |val-aux|)))
; Check receiver injectivity
(push) ; 9
(assert (not (forall ((i1@346@01 Int) (i2@346@01 Int)) (!
  (=>
    (and
      (and (<= 0 i1@346@01) (< i1@346@01 (len<Int> a@242@01)))
      (and (<= 0 i2@346@01) (< i2@346@01 (len<Int> a@242@01)))
      (= (slot<Ref> a@242@01 i1@346@01) (slot<Ref> a@242@01 i2@346@01)))
    (= i1@346@01 i2@346@01))
  
  :qid |val-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((i@346@01 Int)) (!
  (=>
    (and (<= 0 i@346@01) (< i@346@01 (len<Int> a@242@01)))
    (and
      (= (inv@347@01 (slot<Ref> a@242@01 i@346@01)) i@346@01)
      (img@348@01 (slot<Ref> a@242@01 i@346@01))))
  :pattern ((slot<Ref> a@242@01 i@346@01))
  :qid |val-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@348@01 r)
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01))))
    (= (slot<Ref> a@242@01 (inv@347@01 r)) r))
  :pattern ((inv@347@01 r))
  :qid |val-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@349@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01)))
      (img@348@01 r)
      (= r (slot<Ref> a@242@01 (inv@347@01 r))))
    ($Perm.min
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r))
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@350@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01)))
      (img@348@01 r)
      (= r (slot<Ref> a@242@01 (inv@347@01 r))))
    ($Perm.min
      (ite
        (= r (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (- $Perm.Write (pTaken@349@01 r)))
    $Perm.No))
(define-fun pTaken@351@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01)))
      (img@348@01 r)
      (= r (slot<Ref> a@242@01 (inv@347@01 r))))
    ($Perm.min
      (ite (= r (slot<Ref> a@242@01 n@273@01)) $Perm.Write $Perm.No)
      (- (- $Perm.Write (pTaken@349@01 r)) (pTaken@350@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r))
        $Perm.No)
      (pTaken@349@01 r))
    $Perm.No)
  
  :qid |quant-u-22747|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01)))
      (img@348@01 r)
      (= r (slot<Ref> a@242@01 (inv@347@01 r))))
    (= (- $Perm.Write (pTaken@349@01 r)) $Perm.No))
  
  :qid |quant-u-22748|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 (- n@273@01 1)) (slot<Ref> a@242@01 (- n@273@01 1)))
      (/ (to_real 1) (to_real 2))
      $Perm.No)
    (pTaken@350@01 (slot<Ref> a@242@01 (- n@273@01 1))))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01)))
      (img@348@01 r)
      (= r (slot<Ref> a@242@01 (inv@347@01 r))))
    (= (- (- $Perm.Write (pTaken@349@01 r)) (pTaken@350@01 r)) $Perm.No))
  
  :qid |quant-u-22750|))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Chunk depleted?
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (=
  (-
    (ite
      (= (slot<Ref> a@242@01 n@273@01) (slot<Ref> a@242@01 n@273@01))
      $Perm.Write
      $Perm.No)
    (pTaken@351@01 (slot<Ref> a@242@01 n@273@01)))
  $Perm.No)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@347@01 r)) (< (inv@347@01 r) (len<Int> a@242@01)))
      (img@348@01 r)
      (= r (slot<Ref> a@242@01 (inv@347@01 r))))
    (=
      (-
        (- (- $Perm.Write (pTaken@349@01 r)) (pTaken@350@01 r))
        (pTaken@351@01 r))
      $Perm.No))
  
  :qid |quant-u-22752|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] (forall m: Int, j: Int :: { |slot(a, m).val|, slot(a, m).val[j] } { |slot(a, m).val|, valid(slot(a, m).val[j], m, true) } { valid(slot(a, m).val[j], m, true) } 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true))
(declare-const m@352@01 Int)
(declare-const j@353@01 Int)
(set-option :timeout 0)
(push) ; 9
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|)) ==> valid(slot(a, m).val[j], m, true)
; [eval] 0 <= m && (m < n && (0 <= j && j < |slot(a, m).val|))
; [eval] 0 <= m
(push) ; 10
; [then-branch: 146 | !(0 <= m@352@01) | live]
; [else-branch: 146 | 0 <= m@352@01 | live]
(push) ; 11
; [then-branch: 146 | !(0 <= m@352@01)]
(assert (not (<= 0 m@352@01)))
(pop) ; 11
(push) ; 11
; [else-branch: 146 | 0 <= m@352@01]
(assert (<= 0 m@352@01))
; [eval] m < n
(push) ; 12
; [then-branch: 147 | !(m@352@01 < n@345@01) | live]
; [else-branch: 147 | m@352@01 < n@345@01 | live]
(push) ; 13
; [then-branch: 147 | !(m@352@01 < n@345@01)]
(assert (not (< m@352@01 n@345@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 147 | m@352@01 < n@345@01]
(assert (< m@352@01 n@345@01))
; [eval] 0 <= j
(push) ; 14
; [then-branch: 148 | !(0 <= j@353@01) | live]
; [else-branch: 148 | 0 <= j@353@01 | live]
(push) ; 15
; [then-branch: 148 | !(0 <= j@353@01)]
(assert (not (<= 0 j@353@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 148 | 0 <= j@353@01]
(assert (<= 0 j@353@01))
; [eval] j < |slot(a, m).val|
; [eval] |slot(a, m).val|
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef111|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
    :qid |qp.fvfValDef113|))))
(push) ; 16
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@242@01 m@352@01) (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite
        (= (slot<Ref> a@242@01 m@352@01) (slot<Ref> a@242@01 n@273@01))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@278@01 (slot<Ref> a@242@01 m@352@01))
        (and
          (<= 0 (inv@277@01 (slot<Ref> a@242@01 m@352@01)))
          (< (inv@277@01 (slot<Ref> a@242@01 m@352@01)) (len<Int> a@242@01))))
      (-
        (- $Perm.Write (pTaken@292@01 (slot<Ref> a@242@01 m@352@01)))
        (pTaken@305@01 (slot<Ref> a@242@01 m@352@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef113|)))
(assert (or (<= 0 j@353@01) (not (<= 0 j@353@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef113|)))
(assert (=>
  (< m@352@01 n@345@01)
  (and (< m@352@01 n@345@01) (or (<= 0 j@353@01) (not (<= 0 j@353@01))))))
(assert (or (< m@352@01 n@345@01) (not (< m@352@01 n@345@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef113|)))
(assert (=>
  (<= 0 m@352@01)
  (and
    (<= 0 m@352@01)
    (=>
      (< m@352@01 n@345@01)
      (and (< m@352@01 n@345@01) (or (<= 0 j@353@01) (not (<= 0 j@353@01)))))
    (or (< m@352@01 n@345@01) (not (< m@352@01 n@345@01))))))
(assert (or (<= 0 m@352@01) (not (<= 0 m@352@01))))
(push) ; 10
; [then-branch: 149 | 0 <= m@352@01 && m@352@01 < n@345@01 && 0 <= j@353@01 && j@353@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, m@352@01))| | live]
; [else-branch: 149 | !(0 <= m@352@01 && m@352@01 < n@345@01 && 0 <= j@353@01 && j@353@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, m@352@01))|) | live]
(push) ; 11
; [then-branch: 149 | 0 <= m@352@01 && m@352@01 < n@345@01 && 0 <= j@353@01 && j@353@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, m@352@01))|]
(assert (and
  (<= 0 m@352@01)
  (and
    (< m@352@01 n@345@01)
    (and
      (<= 0 j@353@01)
      (<
        j@353@01
        (Seq_length
          ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))))))
; [eval] valid(slot(a, m).val[j], m, true)
; [eval] slot(a, m).val[j]
; [eval] slot(a, m)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 (- n@273@01 1)))
      (=
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
    :qid |qp.fvfValDef111|))
  (forall ((r $Ref)) (!
    (=>
      (= r (slot<Ref> a@242@01 n@273@01))
      (=
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
        ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
    :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
    :qid |qp.fvfValDef112|))
  (forall ((r $Ref)) (!
    (=>
      (ite
        (and
          (img@278@01 r)
          (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
        (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
        false)
      (=
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
        ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
    :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
    :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
    :qid |qp.fvfValDef113|))))
(push) ; 12
(assert (not (<
  $Perm.No
  (+
    (+
      (ite
        (= (slot<Ref> a@242@01 m@352@01) (slot<Ref> a@242@01 (- n@273@01 1)))
        (/ (to_real 1) (to_real 2))
        $Perm.No)
      (ite
        (= (slot<Ref> a@242@01 m@352@01) (slot<Ref> a@242@01 n@273@01))
        $Perm.Write
        $Perm.No))
    (ite
      (and
        (img@278@01 (slot<Ref> a@242@01 m@352@01))
        (and
          (<= 0 (inv@277@01 (slot<Ref> a@242@01 m@352@01)))
          (< (inv@277@01 (slot<Ref> a@242@01 m@352@01)) (len<Int> a@242@01))))
      (-
        (- $Perm.Write (pTaken@292@01 (slot<Ref> a@242@01 m@352@01)))
        (pTaken@305@01 (slot<Ref> a@242@01 m@352@01)))
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (>= j@353@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
  j@353@01) m@352@01 true))
(pop) ; 12
; Joined path conditions
(assert (valid%precondition $Snap.unit (Seq_index
  ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
  j@353@01) m@352@01 true))
(pop) ; 11
(push) ; 11
; [else-branch: 149 | !(0 <= m@352@01 && m@352@01 < n@345@01 && 0 <= j@353@01 && j@353@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, m@352@01))|)]
(assert (not
  (and
    (<= 0 m@352@01)
    (and
      (< m@352@01 n@345@01)
      (and
        (<= 0 j@353@01)
        (<
          j@353@01
          (Seq_length
            ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef113|)))
(assert (=>
  (and
    (<= 0 m@352@01)
    (and
      (< m@352@01 n@345@01)
      (and
        (<= 0 j@353@01)
        (<
          j@353@01
          (Seq_length
            ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
  (and
    (<= 0 m@352@01)
    (< m@352@01 n@345@01)
    (<= 0 j@353@01)
    (<
      j@353@01
      (Seq_length
        ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
      j@353@01) m@352@01 true))))
; Joined path conditions
(assert (or
  (not
    (and
      (<= 0 m@352@01)
      (and
        (< m@352@01 n@345@01)
        (and
          (<= 0 j@353@01)
          (<
            j@353@01
            (Seq_length
              ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))))))
  (and
    (<= 0 m@352@01)
    (and
      (< m@352@01 n@345@01)
      (and
        (<= 0 j@353@01)
        (<
          j@353@01
          (Seq_length
            ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))))
(pop) ; 9
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 (- n@273@01 1)))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@298@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@298@01  $FVF<val>) r))
  :qid |qp.fvfValDef111|)))
(assert (forall ((r $Ref)) (!
  (=>
    (= r (slot<Ref> a@242@01 n@273@01))
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val (as sm@299@01  $FVF<val>) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val (as sm@299@01  $FVF<val>) r))
  :qid |qp.fvfValDef112|)))
(assert (forall ((r $Ref)) (!
  (=>
    (ite
      (and
        (img@278@01 r)
        (and (<= 0 (inv@277@01 r)) (< (inv@277@01 r) (len<Int> a@242@01))))
      (< $Perm.No (- (- $Perm.Write (pTaken@292@01 r)) (pTaken@305@01 r)))
      false)
    (=
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) r)
      ($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r)))
  :pattern (($FVF.lookup_val (as sm@343@01  $FVF<val>) r))
  :pattern (($FVF.lookup_val ($SortWrappers.$SnapTo$FVF<val> ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@275@01))))) r))
  :qid |qp.fvfValDef113|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((m@352@01 Int) (j@353@01 Int)) (!
  (and
    (=>
      (<= 0 m@352@01)
      (and
        (<= 0 m@352@01)
        (=>
          (< m@352@01 n@345@01)
          (and (< m@352@01 n@345@01) (or (<= 0 j@353@01) (not (<= 0 j@353@01)))))
        (or (< m@352@01 n@345@01) (not (< m@352@01 n@345@01)))))
    (or (<= 0 m@352@01) (not (<= 0 m@352@01)))
    (=>
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
      (and
        (<= 0 m@352@01)
        (< m@352@01 n@345@01)
        (<= 0 j@353@01)
        (<
          j@353@01
          (Seq_length
            ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
          j@353@01) m@352@01 true)))
    (or
      (not
        (and
          (<= 0 m@352@01)
          (and
            (< m@352@01 n@345@01)
            (and
              (<= 0 j@353@01)
              (<
                j@353@01
                (Seq_length
                  ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))))))
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@352@01 Int) (j@353@01 Int)) (!
  (and
    (=>
      (<= 0 m@352@01)
      (and
        (<= 0 m@352@01)
        (=>
          (< m@352@01 n@345@01)
          (and (< m@352@01 n@345@01) (or (<= 0 j@353@01) (not (<= 0 j@353@01)))))
        (or (< m@352@01 n@345@01) (not (< m@352@01 n@345@01)))))
    (or (<= 0 m@352@01) (not (<= 0 m@352@01)))
    (=>
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
      (and
        (<= 0 m@352@01)
        (< m@352@01 n@345@01)
        (<= 0 j@353@01)
        (<
          j@353@01
          (Seq_length
            ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
          j@353@01) m@352@01 true)))
    (or
      (not
        (and
          (<= 0 m@352@01)
          (and
            (< m@352@01 n@345@01)
            (and
              (<= 0 j@353@01)
              (<
                j@353@01
                (Seq_length
                  ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))))))
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@352@01 Int) (j@353@01 Int)) (!
  (and
    (=>
      (<= 0 m@352@01)
      (and
        (<= 0 m@352@01)
        (=>
          (< m@352@01 n@345@01)
          (and (< m@352@01 n@345@01) (or (<= 0 j@353@01) (not (<= 0 j@353@01)))))
        (or (< m@352@01 n@345@01) (not (< m@352@01 n@345@01)))))
    (or (<= 0 m@352@01) (not (<= 0 m@352@01)))
    (=>
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
      (and
        (<= 0 m@352@01)
        (< m@352@01 n@345@01)
        (<= 0 j@353@01)
        (<
          j@353@01
          (Seq_length
            ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
          j@353@01) m@352@01 true)))
    (or
      (not
        (and
          (<= 0 m@352@01)
          (and
            (< m@352@01 n@345@01)
            (and
              (<= 0 j@353@01)
              (<
                j@353@01
                (Seq_length
                  ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))))))
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39-aux|)))
(assert (forall ((m@352@01 Int) (j@353@01 Int)) (!
  (=>
    (and
      (<= 0 m@352@01)
      (and
        (< m@352@01 n@345@01)
        (and
          (<= 0 j@353@01)
          (<
            j@353@01
            (Seq_length
              ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
    (valid%precondition $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
      j@353@01) m@352@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39_precondition|)))
(push) ; 9
(assert (not (forall ((m@352@01 Int) (j@353@01 Int)) (!
  (=>
    (and
      (=>
        (and
          (<= 0 m@352@01)
          (and
            (< m@352@01 n@345@01)
            (and
              (<= 0 j@353@01)
              (<
                j@353@01
                (Seq_length
                  ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
        (valid%precondition $Snap.unit (Seq_index
          ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
          j@353@01) m@352@01 true))
      (and
        (<= 0 m@352@01)
        (and
          (< m@352@01 n@345@01)
          (and
            (<= 0 j@353@01)
            (<
              j@353@01
              (Seq_length
                ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
      j@353@01) m@352@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39|))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (forall ((m@352@01 Int) (j@353@01 Int)) (!
  (=>
    (and
      (<= 0 m@352@01)
      (and
        (< m@352@01 n@345@01)
        (and
          (<= 0 j@353@01)
          (<
            j@353@01
            (Seq_length
              ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01)))))))
    (valid $Snap.unit (Seq_index
      ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
      j@353@01) m@352@01 true))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01))
  :pattern ((Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))) (valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :pattern ((valid%limited $Snap.unit (Seq_index
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 m@352@01))
    j@353@01) m@352@01 true))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@225@13@226@39|)))
(pop) ; 8
(push) ; 8
; [else-branch: 144 | i@296@01 < |Lookup(val, sm@343@01, slot[Ref](a@242@01, n@273@01 - 1))|]
(assert (<
  i@296@01
  (Seq_length
    ($FVF.lookup_val (as sm@343@01  $FVF<val>) (slot<Ref> a@242@01 (- n@273@01 1))))))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch: 120 | !(n@273@01 <= 50)]
(assert (not (<= n@273@01 50)))
(pop) ; 5
; [eval] !(n <= 50)
; [eval] n <= 50
(push) ; 5
(set-option :timeout 10)
(assert (not (<= n@273@01 50)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (<= n@273@01 50))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | !(n@273@01 <= 50) | live]
; [else-branch: 150 | n@273@01 <= 50 | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 150 | !(n@273@01 <= 50)]
(assert (not (<= n@273@01 50)))
(pop) ; 5
(push) ; 5
; [else-branch: 150 | n@273@01 <= 50]
(assert (<= n@273@01 50))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- test_extend ----------
(declare-const s@354@01 Seq<Int>)
(declare-const s@355@01 Seq<Int>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var ss: Seq[Int]
(declare-const ss@356@01 Seq<Int>)
; [exec]
; ss := s ++ Seq(42)
; [eval] s ++ Seq(42)
; [eval] Seq(42)
(assert (= (Seq_length (Seq_singleton 42)) 1))
(declare-const ss@357@01 Seq<Int>)
(assert (= ss@357@01 (Seq_append s@355@01 (Seq_singleton 42))))
; [exec]
; assert (forall i: Int :: { (i in s) } (i in s) ==> (i in ss[..|ss| - 1]))
; [eval] (forall i: Int :: { (i in s) } (i in s) ==> (i in ss[..|ss| - 1]))
(declare-const i@358@01 Int)
(push) ; 3
; [eval] (i in s) ==> (i in ss[..|ss| - 1])
; [eval] (i in s)
(push) ; 4
; [then-branch: 151 | i@358@01 in s@355@01 | live]
; [else-branch: 151 | !(i@358@01 in s@355@01) | live]
(push) ; 5
; [then-branch: 151 | i@358@01 in s@355@01]
(assert (Seq_contains s@355@01 i@358@01))
; [eval] (i in ss[..|ss| - 1])
; [eval] ss[..|ss| - 1]
; [eval] |ss| - 1
; [eval] |ss|
(pop) ; 5
(push) ; 5
; [else-branch: 151 | !(i@358@01 in s@355@01)]
(assert (not (Seq_contains s@355@01 i@358@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Seq_contains s@355@01 i@358@01)) (Seq_contains s@355@01 i@358@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@358@01 Int)) (!
  (or (not (Seq_contains s@355@01 i@358@01)) (Seq_contains s@355@01 i@358@01))
  :pattern ((Seq_contains s@355@01 i@358@01))
  :pattern ((Seq_contains_trigger s@355@01 i@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@268@10@268@54-aux|)))
(assert (forall ((i@358@01 Int)) (!
  (or (not (Seq_contains s@355@01 i@358@01)) (Seq_contains s@355@01 i@358@01))
  :pattern ((Seq_contains_trigger s@355@01 i@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@268@10@268@54-aux|)))
(push) ; 3
(assert (not (forall ((i@358@01 Int)) (!
  (=>
    (Seq_contains s@355@01 i@358@01)
    (Seq_contains (Seq_take ss@357@01 (- (Seq_length ss@357@01) 1)) i@358@01))
  :pattern ((Seq_contains s@355@01 i@358@01))
  :pattern ((Seq_contains_trigger s@355@01 i@358@01))
  :pattern ((Seq_contains_trigger s@355@01 i@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@268@10@268@54|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@358@01 Int)) (!
  (=>
    (Seq_contains s@355@01 i@358@01)
    (Seq_contains (Seq_take ss@357@01 (- (Seq_length ss@357@01) 1)) i@358@01))
  :pattern ((Seq_contains s@355@01 i@358@01))
  :pattern ((Seq_contains_trigger s@355@01 i@358@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@268@10@268@54|)))
(pop) ; 2
(pop) ; 1
; ---------- test_extend_left ----------
(declare-const s@359@01 Seq<Int>)
(declare-const s@360@01 Seq<Int>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var ss: Seq[Int]
(declare-const ss@361@01 Seq<Int>)
; [exec]
; ss := Seq(42) ++ s
; [eval] Seq(42) ++ s
; [eval] Seq(42)
(assert (= (Seq_length (Seq_singleton 42)) 1))
(declare-const ss@362@01 Seq<Int>)
(assert (= ss@362@01 (Seq_append (Seq_singleton 42) s@360@01)))
; [exec]
; assert (forall i: Int ::
;     { (i in s) }
;     { (i in ss[1..]) }
;     (i in s) ==> (i in ss[1..]))
; [eval] (forall i: Int :: { (i in s) } { (i in ss[1..]) } (i in s) ==> (i in ss[1..]))
(declare-const i@363@01 Int)
(push) ; 3
; [eval] (i in s) ==> (i in ss[1..])
; [eval] (i in s)
(push) ; 4
; [then-branch: 152 | i@363@01 in s@360@01 | live]
; [else-branch: 152 | !(i@363@01 in s@360@01) | live]
(push) ; 5
; [then-branch: 152 | i@363@01 in s@360@01]
(assert (Seq_contains s@360@01 i@363@01))
; [eval] (i in ss[1..])
; [eval] ss[1..]
(pop) ; 5
(push) ; 5
; [else-branch: 152 | !(i@363@01 in s@360@01)]
(assert (not (Seq_contains s@360@01 i@363@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Seq_contains s@360@01 i@363@01)) (Seq_contains s@360@01 i@363@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@363@01 Int)) (!
  (or (not (Seq_contains s@360@01 i@363@01)) (Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains_trigger s@360@01 i@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@275@11@275@50-aux|)))
(assert (forall ((i@363@01 Int)) (!
  (or (not (Seq_contains s@360@01 i@363@01)) (Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains_trigger s@360@01 i@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@275@11@275@50-aux|)))
(assert (forall ((i@363@01 Int)) (!
  (or (not (Seq_contains s@360@01 i@363@01)) (Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains (Seq_drop ss@362@01 1) i@363@01))
  :pattern ((Seq_contains_trigger (Seq_drop ss@362@01 1) i@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@275@11@275@50-aux|)))
(assert (forall ((i@363@01 Int)) (!
  (or (not (Seq_contains s@360@01 i@363@01)) (Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains_trigger (Seq_drop ss@362@01 1) i@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@275@11@275@50-aux|)))
(push) ; 3
(assert (not (forall ((i@363@01 Int)) (!
  (=>
    (Seq_contains s@360@01 i@363@01)
    (Seq_contains (Seq_drop ss@362@01 1) i@363@01))
  :pattern ((Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains_trigger s@360@01 i@363@01))
  :pattern ((Seq_contains_trigger s@360@01 i@363@01))
  :pattern ((Seq_contains (Seq_drop ss@362@01 1) i@363@01))
  :pattern ((Seq_contains_trigger (Seq_drop ss@362@01 1) i@363@01))
  :pattern ((Seq_contains_trigger (Seq_drop ss@362@01 1) i@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@275@11@275@50|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@363@01 Int)) (!
  (=>
    (Seq_contains s@360@01 i@363@01)
    (Seq_contains (Seq_drop ss@362@01 1) i@363@01))
  :pattern ((Seq_contains s@360@01 i@363@01))
  :pattern ((Seq_contains_trigger s@360@01 i@363@01))
  :pattern ((Seq_contains (Seq_drop ss@362@01 1) i@363@01))
  :pattern ((Seq_contains_trigger (Seq_drop ss@362@01 1) i@363@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@275@11@275@50|)))
(pop) ; 2
(pop) ; 1
; ---------- test_append_left ----------
(declare-const s@364@01 Seq<Int>)
(declare-const t@365@01 Seq<Int>)
(declare-const s@366@01 Seq<Int>)
(declare-const t@367@01 Seq<Int>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var ss: Seq[Int]
(declare-const ss@368@01 Seq<Int>)
; [exec]
; ss := s ++ t
; [eval] s ++ t
(declare-const ss@369@01 Seq<Int>)
(assert (= ss@369@01 (Seq_append s@366@01 t@367@01)))
; [exec]
; assert (forall i: Int ::
;     { (i in s) }
;     { (i in ss[..|s|]) }
;     (i in s) ==> (i in ss[..|s|]))
; [eval] (forall i: Int :: { (i in s) } { (i in ss[..|s|]) } (i in s) ==> (i in ss[..|s|]))
(declare-const i@370@01 Int)
(push) ; 3
; [eval] (i in s) ==> (i in ss[..|s|])
; [eval] (i in s)
(push) ; 4
; [then-branch: 153 | i@370@01 in s@366@01 | live]
; [else-branch: 153 | !(i@370@01 in s@366@01) | live]
(push) ; 5
; [then-branch: 153 | i@370@01 in s@366@01]
(assert (Seq_contains s@366@01 i@370@01))
; [eval] (i in ss[..|s|])
; [eval] ss[..|s|]
; [eval] |s|
(pop) ; 5
(push) ; 5
; [else-branch: 153 | !(i@370@01 in s@366@01)]
(assert (not (Seq_contains s@366@01 i@370@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Seq_contains s@366@01 i@370@01)) (Seq_contains s@366@01 i@370@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@370@01 Int)) (!
  (or (not (Seq_contains s@366@01 i@370@01)) (Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains_trigger s@366@01 i@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@281@10@281@51-aux|)))
(assert (forall ((i@370@01 Int)) (!
  (or (not (Seq_contains s@366@01 i@370@01)) (Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains_trigger s@366@01 i@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@281@10@281@51-aux|)))
(assert (forall ((i@370@01 Int)) (!
  (or (not (Seq_contains s@366@01 i@370@01)) (Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains (Seq_take ss@369@01 (Seq_length s@366@01)) i@370@01))
  :pattern ((Seq_contains_trigger
    (Seq_take ss@369@01 (Seq_length s@366@01))
    i@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@281@10@281@51-aux|)))
(assert (forall ((i@370@01 Int)) (!
  (or (not (Seq_contains s@366@01 i@370@01)) (Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains_trigger
    (Seq_take ss@369@01 (Seq_length s@366@01))
    i@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@281@10@281@51-aux|)))
(push) ; 3
(assert (not (forall ((i@370@01 Int)) (!
  (=>
    (Seq_contains s@366@01 i@370@01)
    (Seq_contains (Seq_take ss@369@01 (Seq_length s@366@01)) i@370@01))
  :pattern ((Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains_trigger s@366@01 i@370@01))
  :pattern ((Seq_contains_trigger s@366@01 i@370@01))
  :pattern ((Seq_contains (Seq_take ss@369@01 (Seq_length s@366@01)) i@370@01))
  :pattern ((Seq_contains_trigger
    (Seq_take ss@369@01 (Seq_length s@366@01))
    i@370@01))
  :pattern ((Seq_contains_trigger
    (Seq_take ss@369@01 (Seq_length s@366@01))
    i@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@281@10@281@51|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@370@01 Int)) (!
  (=>
    (Seq_contains s@366@01 i@370@01)
    (Seq_contains (Seq_take ss@369@01 (Seq_length s@366@01)) i@370@01))
  :pattern ((Seq_contains s@366@01 i@370@01))
  :pattern ((Seq_contains_trigger s@366@01 i@370@01))
  :pattern ((Seq_contains (Seq_take ss@369@01 (Seq_length s@366@01)) i@370@01))
  :pattern ((Seq_contains_trigger
    (Seq_take ss@369@01 (Seq_length s@366@01))
    i@370@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@281@10@281@51|)))
(pop) ; 2
(pop) ; 1
; ---------- test_append_right ----------
(declare-const s@371@01 Seq<Int>)
(declare-const t@372@01 Seq<Int>)
(declare-const s@373@01 Seq<Int>)
(declare-const t@374@01 Seq<Int>)
(push) ; 1
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(pop) ; 2
(push) ; 2
; [exec]
; var ss: Seq[Int]
(declare-const ss@375@01 Seq<Int>)
; [exec]
; ss := s ++ t
; [eval] s ++ t
(declare-const ss@376@01 Seq<Int>)
(assert (= ss@376@01 (Seq_append s@373@01 t@374@01)))
; [exec]
; assert (forall i: Int ::
;     { (i in t) }
;     { (i in ss[|s|..]) }
;     (i in t) ==> (i in ss[|s|..]))
; [eval] (forall i: Int :: { (i in t) } { (i in ss[|s|..]) } (i in t) ==> (i in ss[|s|..]))
(declare-const i@377@01 Int)
(push) ; 3
; [eval] (i in t) ==> (i in ss[|s|..])
; [eval] (i in t)
(push) ; 4
; [then-branch: 154 | i@377@01 in t@374@01 | live]
; [else-branch: 154 | !(i@377@01 in t@374@01) | live]
(push) ; 5
; [then-branch: 154 | i@377@01 in t@374@01]
(assert (Seq_contains t@374@01 i@377@01))
; [eval] (i in ss[|s|..])
; [eval] ss[|s|..]
; [eval] |s|
(pop) ; 5
(push) ; 5
; [else-branch: 154 | !(i@377@01 in t@374@01)]
(assert (not (Seq_contains t@374@01 i@377@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (Seq_contains t@374@01 i@377@01)) (Seq_contains t@374@01 i@377@01)))
(pop) ; 3
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@377@01 Int)) (!
  (or (not (Seq_contains t@374@01 i@377@01)) (Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains_trigger t@374@01 i@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@288@10@288@51-aux|)))
(assert (forall ((i@377@01 Int)) (!
  (or (not (Seq_contains t@374@01 i@377@01)) (Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains_trigger t@374@01 i@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@288@10@288@51-aux|)))
(assert (forall ((i@377@01 Int)) (!
  (or (not (Seq_contains t@374@01 i@377@01)) (Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains (Seq_drop ss@376@01 (Seq_length s@373@01)) i@377@01))
  :pattern ((Seq_contains_trigger
    (Seq_drop ss@376@01 (Seq_length s@373@01))
    i@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@288@10@288@51-aux|)))
(assert (forall ((i@377@01 Int)) (!
  (or (not (Seq_contains t@374@01 i@377@01)) (Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains_trigger
    (Seq_drop ss@376@01 (Seq_length s@373@01))
    i@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@288@10@288@51-aux|)))
(push) ; 3
(assert (not (forall ((i@377@01 Int)) (!
  (=>
    (Seq_contains t@374@01 i@377@01)
    (Seq_contains (Seq_drop ss@376@01 (Seq_length s@373@01)) i@377@01))
  :pattern ((Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains_trigger t@374@01 i@377@01))
  :pattern ((Seq_contains_trigger t@374@01 i@377@01))
  :pattern ((Seq_contains (Seq_drop ss@376@01 (Seq_length s@373@01)) i@377@01))
  :pattern ((Seq_contains_trigger
    (Seq_drop ss@376@01 (Seq_length s@373@01))
    i@377@01))
  :pattern ((Seq_contains_trigger
    (Seq_drop ss@376@01 (Seq_length s@373@01))
    i@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@288@10@288@51|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (forall ((i@377@01 Int)) (!
  (=>
    (Seq_contains t@374@01 i@377@01)
    (Seq_contains (Seq_drop ss@376@01 (Seq_length s@373@01)) i@377@01))
  :pattern ((Seq_contains t@374@01 i@377@01))
  :pattern ((Seq_contains_trigger t@374@01 i@377@01))
  :pattern ((Seq_contains (Seq_drop ss@376@01 (Seq_length s@373@01)) i@377@01))
  :pattern ((Seq_contains_trigger
    (Seq_drop ss@376@01 (Seq_length s@373@01))
    i@377@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/all/sequences/sequence_incompletenesses.vpr@288@10@288@51|)))
(pop) ; 2
(pop) ; 1
