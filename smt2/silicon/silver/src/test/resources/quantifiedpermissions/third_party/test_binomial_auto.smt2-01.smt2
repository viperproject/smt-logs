(get-info :version)
; (:version "4.12.1")
; Started: 2024-12-27 10:00:41
; Silicon.version: 1.1-SNAPSHOT (457c6eca@(detached))
; Input file: <unknown>
; Verifier id: 00
; ------------------------------------------------------------
; Begin preamble
; ////////// Static preamble
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Necessary for push pop mode
(set-option :auto_config false)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :type_check true)
(set-option :smt.mbqi false)
(set-option :pp.bv_literals false)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.solver 2)
(set-option :model.v2 true)
(set-option :smt.qi.max_multi_patterns 1000)
; 
; ; /preamble.smt2
(declare-datatypes (($Snap 0)) ((
    ($Snap.unit)
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref 0)
(declare-const $Ref.null $Ref)
(declare-sort $FPM 0)
(declare-sort $PPM 0)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
; ////////// Sorts
(declare-sort Seq<$Ref> 0)
(declare-sort Set<Seq<$Ref>> 0)
(declare-sort Set<Int> 0)
(declare-sort Set<$Ref> 0)
(declare-sort Set<$Snap> 0)
(declare-sort $FVF<demo__ar> 0)
(declare-sort $FVF<demo__tmp> 0)
(declare-sort $FVF<Ref__Integer_value> 0)
; ////////// Sort wrappers
; Declaring additional sort wrappers
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    :qid |$Snap.$SnapToIntTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.IntTo$Snap($SortWrappers.$SnapToInt x)))
    :pattern (($SortWrappers.$SnapToInt x))
    :qid |$Snap.IntTo$SnapToInt|
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    :qid |$Snap.$SnapToBoolTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.BoolTo$Snap($SortWrappers.$SnapToBool x)))
    :pattern (($SortWrappers.$SnapToBool x))
    :qid |$Snap.BoolTo$SnapToBool|
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    :qid |$Snap.$SnapTo$RefTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$RefTo$Snap($SortWrappers.$SnapTo$Ref x)))
    :pattern (($SortWrappers.$SnapTo$Ref x))
    :qid |$Snap.$RefTo$SnapTo$Ref|
    )))
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    :qid |$Snap.$SnapTo$PermTo$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$PermTo$Snap($SortWrappers.$SnapTo$Perm x)))
    :pattern (($SortWrappers.$SnapTo$Perm x))
    :qid |$Snap.$PermTo$SnapTo$Perm|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Seq<$Ref>To$Snap (Seq<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSeq<$Ref> ($Snap) Seq<$Ref>)
(assert (forall ((x Seq<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSeq<$Ref>($SortWrappers.Seq<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Seq<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSeq<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Seq<$Ref>To$Snap($SortWrappers.$SnapToSeq<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSeq<$Ref> x))
    :qid |$Snap.Seq<$Ref>To$SnapToSeq<$Ref>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.Set<Seq<$Ref>>To$Snap (Set<Seq<$Ref>>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Seq<$Ref>> ($Snap) Set<Seq<$Ref>>)
(assert (forall ((x Set<Seq<$Ref>>)) (!
    (= x ($SortWrappers.$SnapToSet<Seq<$Ref>>($SortWrappers.Set<Seq<$Ref>>To$Snap x)))
    :pattern (($SortWrappers.Set<Seq<$Ref>>To$Snap x))
    :qid |$Snap.$SnapToSet<Seq<$Ref>>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Seq<$Ref>>To$Snap($SortWrappers.$SnapToSet<Seq<$Ref>> x)))
    :pattern (($SortWrappers.$SnapToSet<Seq<$Ref>> x))
    :qid |$Snap.Set<Seq<$Ref>>To$SnapToSet<Seq<$Ref>>|
    )))
(declare-fun $SortWrappers.Set<Int>To$Snap (Set<Int>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<Int> ($Snap) Set<Int>)
(assert (forall ((x Set<Int>)) (!
    (= x ($SortWrappers.$SnapToSet<Int>($SortWrappers.Set<Int>To$Snap x)))
    :pattern (($SortWrappers.Set<Int>To$Snap x))
    :qid |$Snap.$SnapToSet<Int>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<Int>To$Snap($SortWrappers.$SnapToSet<Int> x)))
    :pattern (($SortWrappers.$SnapToSet<Int> x))
    :qid |$Snap.Set<Int>To$SnapToSet<Int>|
    )))
(declare-fun $SortWrappers.Set<$Ref>To$Snap (Set<$Ref>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Ref> ($Snap) Set<$Ref>)
(assert (forall ((x Set<$Ref>)) (!
    (= x ($SortWrappers.$SnapToSet<$Ref>($SortWrappers.Set<$Ref>To$Snap x)))
    :pattern (($SortWrappers.Set<$Ref>To$Snap x))
    :qid |$Snap.$SnapToSet<$Ref>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Ref>To$Snap($SortWrappers.$SnapToSet<$Ref> x)))
    :pattern (($SortWrappers.$SnapToSet<$Ref> x))
    :qid |$Snap.Set<$Ref>To$SnapToSet<$Ref>|
    )))
(declare-fun $SortWrappers.Set<$Snap>To$Snap (Set<$Snap>) $Snap)
(declare-fun $SortWrappers.$SnapToSet<$Snap> ($Snap) Set<$Snap>)
(assert (forall ((x Set<$Snap>)) (!
    (= x ($SortWrappers.$SnapToSet<$Snap>($SortWrappers.Set<$Snap>To$Snap x)))
    :pattern (($SortWrappers.Set<$Snap>To$Snap x))
    :qid |$Snap.$SnapToSet<$Snap>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.Set<$Snap>To$Snap($SortWrappers.$SnapToSet<$Snap> x)))
    :pattern (($SortWrappers.$SnapToSet<$Snap> x))
    :qid |$Snap.Set<$Snap>To$SnapToSet<$Snap>|
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$FVF<demo__ar>To$Snap ($FVF<demo__ar>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<demo__ar> ($Snap) $FVF<demo__ar>)
(assert (forall ((x $FVF<demo__ar>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<demo__ar>($SortWrappers.$FVF<demo__ar>To$Snap x)))
    :pattern (($SortWrappers.$FVF<demo__ar>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<demo__ar>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<demo__ar>To$Snap($SortWrappers.$SnapTo$FVF<demo__ar> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<demo__ar> x))
    :qid |$Snap.$FVF<demo__ar>To$SnapTo$FVF<demo__ar>|
    )))
(declare-fun $SortWrappers.$FVF<demo__tmp>To$Snap ($FVF<demo__tmp>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<demo__tmp> ($Snap) $FVF<demo__tmp>)
(assert (forall ((x $FVF<demo__tmp>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<demo__tmp>($SortWrappers.$FVF<demo__tmp>To$Snap x)))
    :pattern (($SortWrappers.$FVF<demo__tmp>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<demo__tmp>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<demo__tmp>To$Snap($SortWrappers.$SnapTo$FVF<demo__tmp> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<demo__tmp> x))
    :qid |$Snap.$FVF<demo__tmp>To$SnapTo$FVF<demo__tmp>|
    )))
(declare-fun $SortWrappers.$FVF<Ref__Integer_value>To$Snap ($FVF<Ref__Integer_value>) $Snap)
(declare-fun $SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap) $FVF<Ref__Integer_value>)
(assert (forall ((x $FVF<Ref__Integer_value>)) (!
    (= x ($SortWrappers.$SnapTo$FVF<Ref__Integer_value>($SortWrappers.$FVF<Ref__Integer_value>To$Snap x)))
    :pattern (($SortWrappers.$FVF<Ref__Integer_value>To$Snap x))
    :qid |$Snap.$SnapTo$FVF<Ref__Integer_value>To$Snap|
    )))
(assert (forall ((x $Snap)) (!
    (= x ($SortWrappers.$FVF<Ref__Integer_value>To$Snap($SortWrappers.$SnapTo$FVF<Ref__Integer_value> x)))
    :pattern (($SortWrappers.$SnapTo$FVF<Ref__Integer_value> x))
    :qid |$Snap.$FVF<Ref__Integer_value>To$SnapTo$FVF<Ref__Integer_value>|
    )))
; ////////// Symbols
(declare-fun Set_card (Set<Seq<$Ref>>) Int)
(declare-const Set_empty Set<Seq<$Ref>>)
(declare-fun Set_in (Seq<$Ref> Set<Seq<$Ref>>) Bool)
(declare-fun Set_singleton (Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_unionone (Set<Seq<$Ref>> Seq<$Ref>) Set<Seq<$Ref>>)
(declare-fun Set_union (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_intersection (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_difference (Set<Seq<$Ref>> Set<Seq<$Ref>>) Set<Seq<$Ref>>)
(declare-fun Set_subset (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_equal (Set<Seq<$Ref>> Set<Seq<$Ref>>) Bool)
(declare-fun Set_skolem_diff (Set<Seq<$Ref>> Set<Seq<$Ref>>) Seq<$Ref>)
(declare-fun Set_card (Set<Int>) Int)
(declare-const Set_empty Set<Int>)
(declare-fun Set_in (Int Set<Int>) Bool)
(declare-fun Set_singleton (Int) Set<Int>)
(declare-fun Set_unionone (Set<Int> Int) Set<Int>)
(declare-fun Set_union (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_intersection (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_difference (Set<Int> Set<Int>) Set<Int>)
(declare-fun Set_subset (Set<Int> Set<Int>) Bool)
(declare-fun Set_equal (Set<Int> Set<Int>) Bool)
(declare-fun Set_skolem_diff (Set<Int> Set<Int>) Int)
(declare-fun Set_card (Set<$Ref>) Int)
(declare-const Set_empty Set<$Ref>)
(declare-fun Set_in ($Ref Set<$Ref>) Bool)
(declare-fun Set_singleton ($Ref) Set<$Ref>)
(declare-fun Set_unionone (Set<$Ref> $Ref) Set<$Ref>)
(declare-fun Set_union (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_intersection (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_difference (Set<$Ref> Set<$Ref>) Set<$Ref>)
(declare-fun Set_subset (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_equal (Set<$Ref> Set<$Ref>) Bool)
(declare-fun Set_skolem_diff (Set<$Ref> Set<$Ref>) $Ref)
(declare-fun Set_card (Set<$Snap>) Int)
(declare-const Set_empty Set<$Snap>)
(declare-fun Set_in ($Snap Set<$Snap>) Bool)
(declare-fun Set_singleton ($Snap) Set<$Snap>)
(declare-fun Set_unionone (Set<$Snap> $Snap) Set<$Snap>)
(declare-fun Set_union (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_intersection (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_difference (Set<$Snap> Set<$Snap>) Set<$Snap>)
(declare-fun Set_subset (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_equal (Set<$Snap> Set<$Snap>) Bool)
(declare-fun Set_skolem_diff (Set<$Snap> Set<$Snap>) $Snap)
(declare-fun Seq_length (Seq<$Ref>) Int)
(declare-const Seq_empty Seq<$Ref>)
(declare-fun Seq_singleton ($Ref) Seq<$Ref>)
(declare-fun Seq_append (Seq<$Ref> Seq<$Ref>) Seq<$Ref>)
(declare-fun Seq_index (Seq<$Ref> Int) $Ref)
(declare-fun Seq_add (Int Int) Int)
(declare-fun Seq_sub (Int Int) Int)
(declare-fun Seq_update (Seq<$Ref> Int $Ref) Seq<$Ref>)
(declare-fun Seq_take (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_drop (Seq<$Ref> Int) Seq<$Ref>)
(declare-fun Seq_contains (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_contains_trigger (Seq<$Ref> $Ref) Bool)
(declare-fun Seq_skolem (Seq<$Ref> $Ref) Int)
(declare-fun Seq_equal (Seq<$Ref> Seq<$Ref>) Bool)
(declare-fun Seq_skolem_diff (Seq<$Ref> Seq<$Ref>) Int)
; /field_value_functions_declarations.smt2 [demo__ar: Seq[Ref]]
(declare-fun $FVF.domain_demo__ar ($FVF<demo__ar>) Set<$Ref>)
(declare-fun $FVF.lookup_demo__ar ($FVF<demo__ar> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_demo__ar ($FVF<demo__ar> $FVF<demo__ar>) Bool)
(declare-fun $FVF.loc_demo__ar (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_demo__ar ($FPM $Ref) $Perm)
(declare-const $fvfTOP_demo__ar $FVF<demo__ar>)
; /field_value_functions_declarations.smt2 [demo__tmp: Seq[Ref]]
(declare-fun $FVF.domain_demo__tmp ($FVF<demo__tmp>) Set<$Ref>)
(declare-fun $FVF.lookup_demo__tmp ($FVF<demo__tmp> $Ref) Seq<$Ref>)
(declare-fun $FVF.after_demo__tmp ($FVF<demo__tmp> $FVF<demo__tmp>) Bool)
(declare-fun $FVF.loc_demo__tmp (Seq<$Ref> $Ref) Bool)
(declare-fun $FVF.perm_demo__tmp ($FPM $Ref) $Perm)
(declare-const $fvfTOP_demo__tmp $FVF<demo__tmp>)
; /field_value_functions_declarations.smt2 [Ref__Integer_value: Int]
(declare-fun $FVF.domain_Ref__Integer_value ($FVF<Ref__Integer_value>) Set<$Ref>)
(declare-fun $FVF.lookup_Ref__Integer_value ($FVF<Ref__Integer_value> $Ref) Int)
(declare-fun $FVF.after_Ref__Integer_value ($FVF<Ref__Integer_value> $FVF<Ref__Integer_value>) Bool)
(declare-fun $FVF.loc_Ref__Integer_value (Int $Ref) Bool)
(declare-fun $FVF.perm_Ref__Integer_value ($FPM $Ref) $Perm)
(declare-const $fvfTOP_Ref__Integer_value $FVF<Ref__Integer_value>)
; Declaring symbols related to program functions (from program analysis)
(declare-fun demo__bin ($Snap Int Int) Int)
(declare-fun demo__bin%limited ($Snap Int Int) Int)
(declare-fun demo__bin%stateless (Int Int) Bool)
(declare-fun demo__bin%precondition ($Snap Int Int) Bool)
; Snapshot variable to be used during function verification
(declare-fun s@$ () $Snap)
; Declaring predicate trigger functions
; ////////// Uniqueness assumptions from domains
; ////////// Axioms
(assert (forall ((s Seq<$Ref>)) (!
  (<= 0 (Seq_length s))
  :pattern ((Seq_length s))
  )))
(assert (= (Seq_length (as Seq_empty  Seq<$Ref>)) 0))
(assert (forall ((s Seq<$Ref>)) (!
  (=> (= (Seq_length s) 0) (= s (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_length s))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_length (Seq_singleton e)) 1)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (not (= s1 (as Seq_empty  Seq<$Ref>))))
    (= (Seq_length (Seq_append s0 s1)) (+ (Seq_length s0) (Seq_length s1))))
  :pattern ((Seq_length (Seq_append s0 s1)))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (and
    (=> (= s0 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s1))
    (=> (= s1 (as Seq_empty  Seq<$Ref>)) (= (Seq_append s0 s1) s0)))
  :pattern ((Seq_append s0 s1))
  )))
(assert (forall ((e $Ref)) (!
  (= (Seq_index (Seq_singleton e) 0) e)
  :pattern ((Seq_singleton e))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_add i j) (+ i j))
  :pattern ((Seq_add i j))
  )))
(assert (forall ((i Int) (j Int)) (!
  (= (Seq_sub i j) (- i j))
  :pattern ((Seq_sub i j))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 n) (< n (Seq_length s0)))))
    (= (Seq_index (Seq_append s0 s1) n) (Seq_index s0 n)))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  :pattern ((Seq_index s0 n) (Seq_append s0 s1))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (n Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= (Seq_length s0) n) (< n (Seq_length (Seq_append s0 s1))))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s0)) (Seq_length s0)) n)
      (=
        (Seq_index (Seq_append s0 s1) n)
        (Seq_index s1 (Seq_sub n (Seq_length s0))))))
  :pattern ((Seq_index (Seq_append s0 s1) n))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>) (m Int)) (!
  (=>
    (and
      (not (= s0 (as Seq_empty  Seq<$Ref>)))
      (and
        (not (= s1 (as Seq_empty  Seq<$Ref>)))
        (and (<= 0 m) (< m (Seq_length s1)))))
    (and
      (= (Seq_sub (Seq_add m (Seq_length s0)) (Seq_length s0)) m)
      (=
        (Seq_index (Seq_append s0 s1) (Seq_add m (Seq_length s0)))
        (Seq_index s1 m))))
  :pattern ((Seq_index s1 m) (Seq_append s0 s1))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (= (Seq_length (Seq_update s i v)) (Seq_length s)))
  :pattern ((Seq_length (Seq_update s i v)))
  :pattern ((Seq_length s) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (i Int) (v $Ref) (n Int)) (!
  (=>
    (and (<= 0 n) (< n (Seq_length s)))
    (and
      (=> (= i n) (= (Seq_index (Seq_update s i v) n) v))
      (=> (not (= i n)) (= (Seq_index (Seq_update s i v) n) (Seq_index s n)))))
  :pattern ((Seq_index (Seq_update s i v) n))
  :pattern ((Seq_index s n) (Seq_update s i v))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=> (<= n (Seq_length s)) (= (Seq_length (Seq_take s n)) n))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_take s n)) (Seq_length s)))))
    (=> (< n 0) (= (Seq_length (Seq_take s n)) 0)))
  :pattern ((Seq_length (Seq_take s n)))
  :pattern ((Seq_take s n) (Seq_length s))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (<= 0 j) (and (< j n) (< j (Seq_length s))))
    (= (Seq_index (Seq_take s n) j) (Seq_index s j)))
  :pattern ((Seq_index (Seq_take s n) j))
  :pattern ((Seq_index s j) (Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (and
    (=>
      (<= 0 n)
      (and
        (=>
          (<= n (Seq_length s))
          (= (Seq_length (Seq_drop s n)) (- (Seq_length s) n)))
        (=> (< (Seq_length s) n) (= (Seq_length (Seq_drop s n)) 0))))
    (=> (< n 0) (= (Seq_length (Seq_drop s n)) (Seq_length s))))
  :pattern ((Seq_length (Seq_drop s n)))
  :pattern ((Seq_length s) (Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (j Int)) (!
  (=>
    (and (< 0 n) (and (<= 0 j) (< j (- (Seq_length s) n))))
    (and
      (= (Seq_sub (Seq_add j n) n) j)
      (= (Seq_index (Seq_drop s n) j) (Seq_index s (Seq_add j n)))))
  :pattern ((Seq_index (Seq_drop s n) j))
  )))
(assert (forall ((s Seq<$Ref>) (n Int) (i Int)) (!
  (=>
    (and (< 0 n) (and (<= n i) (< i (Seq_length s))))
    (and
      (= (Seq_add (Seq_sub i n) n) i)
      (= (Seq_index (Seq_drop s n) (Seq_sub i n)) (Seq_index s i))))
  :pattern ((Seq_drop s n) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_take (Seq_append s t) n) (Seq_take s n)))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (and (> n (Seq_length s)) (< n (Seq_length (Seq_append s t)))))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (=
        (Seq_take (Seq_append s t) n)
        (Seq_append s (Seq_take t (Seq_sub n (Seq_length s)))))))
  :pattern ((Seq_take (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (< 0 n) (<= n (Seq_length s)))
    (= (Seq_drop (Seq_append s t) n) (Seq_append (Seq_drop s n) t)))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (t Seq<$Ref>) (n Int)) (!
  (=>
    (and (> n 0) (> n (Seq_length s)))
    (and
      (= (Seq_add (Seq_sub n (Seq_length s)) (Seq_length s)) n)
      (= (Seq_drop (Seq_append s t) n) (Seq_drop t (Seq_sub n (Seq_length s))))))
  :pattern ((Seq_drop (Seq_append s t) n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_take s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (<= n 0) (= (Seq_drop s n) s))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_take s n) s))
  :pattern ((Seq_take s n))
  )))
(assert (forall ((s Seq<$Ref>) (n Int)) (!
  (=> (>= n (Seq_length s)) (= (Seq_drop s n) (as Seq_empty  Seq<$Ref>)))
  :pattern ((Seq_drop s n))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref)) (!
  (=>
    (Seq_contains s x)
    (and
      (<= 0 (Seq_skolem s x))
      (and
        (< (Seq_skolem s x) (Seq_length s))
        (= (Seq_index s (Seq_skolem s x)) x))))
  :pattern ((Seq_contains s x))
  )))
(assert (forall ((s Seq<$Ref>) (x $Ref) (i Int)) (!
  (=>
    (and (<= 0 i) (and (< i (Seq_length s)) (= (Seq_index s i) x)))
    (Seq_contains s x))
  :pattern ((Seq_contains s x) (Seq_index s i))
  )))
(assert (forall ((s Seq<$Ref>) (i Int)) (!
  (=>
    (and (<= 0 i) (< i (Seq_length s)))
    (Seq_contains_trigger s (Seq_index s i)))
  :pattern ((Seq_index s i))
  )))
(assert (forall ((s0 Seq<$Ref>) (s1 Seq<$Ref>)) (!
  (or
    (and (= s0 s1) (Seq_equal s0 s1))
    (or
      (and
        (not (= s0 s1))
        (and (not (Seq_equal s0 s1)) (not (= (Seq_length s0) (Seq_length s1)))))
      (and
        (not (= s0 s1))
        (and
          (not (Seq_equal s0 s1))
          (and
            (= (Seq_length s0) (Seq_length s1))
            (and
              (= (Seq_skolem_diff s0 s1) (Seq_skolem_diff s1 s0))
              (and
                (<= 0 (Seq_skolem_diff s0 s1))
                (and
                  (< (Seq_skolem_diff s0 s1) (Seq_length s0))
                  (not
                    (=
                      (Seq_index s0 (Seq_skolem_diff s0 s1))
                      (Seq_index s1 (Seq_skolem_diff s0 s1))))))))))))
  :pattern ((Seq_equal s0 s1))
  )))
(assert (forall ((a Seq<$Ref>) (b Seq<$Ref>)) (!
  (=> (Seq_equal a b) (= a b))
  :pattern ((Seq_equal a b))
  )))
(assert (forall ((x $Ref) (y $Ref)) (!
  (= (Seq_contains (Seq_singleton x) y) (= x y))
  :pattern ((Seq_contains (Seq_singleton x) y))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Seq<$Ref>)) (!
  (not (Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  :pattern ((Set_in o (as Set_empty  Set<Seq<$Ref>>)))
  )))
(assert (forall ((s Set<Seq<$Ref>>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Seq<$Ref>>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Seq<$Ref>))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Seq<$Ref>)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (x Seq<$Ref>)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (o Seq<$Ref>)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>) (y Seq<$Ref>)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=
    (Set_subset a b)
    (forall ((o Seq<$Ref>)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Seq<$Ref>>) (b Set<Seq<$Ref>>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<Int>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o Int)) (!
  (not (Set_in o (as Set_empty  Set<Int>)))
  :pattern ((Set_in o (as Set_empty  Set<Int>)))
  )))
(assert (forall ((s Set<Int>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<Int>)))
    (=> (not (= (Set_card s) 0)) (exists ((x Int))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r Int)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r Int) (o Int)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r Int)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<Int>) (x Int) (o Int)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<Int>) (x Int) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (x Int)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (o Int)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>) (y Int)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=
    (Set_subset a b)
    (forall ((o Int)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<Int>) (b Set<Int>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Ref)) (!
  (not (Set_in o (as Set_empty  Set<$Ref>)))
  :pattern ((Set_in o (as Set_empty  Set<$Ref>)))
  )))
(assert (forall ((s Set<$Ref>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Ref>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Ref))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Ref)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Ref) (o $Ref)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Ref)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (o $Ref)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (x $Ref)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (o $Ref)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>) (y $Ref)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Ref)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Ref>) (b Set<$Ref>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (<= 0 (Set_card s))
  :pattern ((Set_card s))
  )))
(assert (forall ((o $Snap)) (!
  (not (Set_in o (as Set_empty  Set<$Snap>)))
  :pattern ((Set_in o (as Set_empty  Set<$Snap>)))
  )))
(assert (forall ((s Set<$Snap>)) (!
  (and
    (=> (= (Set_card s) 0) (= s (as Set_empty  Set<$Snap>)))
    (=> (not (= (Set_card s) 0)) (exists ((x $Snap))  (Set_in x s))))
  :pattern ((Set_card s))
  )))
(assert (forall ((r $Snap)) (!
  (Set_in r (Set_singleton r))
  :pattern ((Set_singleton r))
  )))
(assert (forall ((r $Snap) (o $Snap)) (!
  (= (Set_in o (Set_singleton r)) (= r o))
  :pattern ((Set_in o (Set_singleton r)))
  )))
(assert (forall ((r $Snap)) (!
  (= (Set_card (Set_singleton r)) 1)
  :pattern ((Set_card (Set_singleton r)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (o $Snap)) (!
  (= (Set_in o (Set_unionone a x)) (or (= o x) (Set_in o a)))
  :pattern ((Set_in o (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (Set_in x (Set_unionone a x))
  :pattern ((Set_unionone a x))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_unionone a x)))
  :pattern ((Set_unionone a x) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (Set_in x a) (= (Set_card (Set_unionone a x)) (Set_card a)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (x $Snap)) (!
  (=> (not (Set_in x a)) (= (Set_card (Set_unionone a x)) (+ (Set_card a) 1)))
  :pattern ((Set_card (Set_unionone a x)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_union a b)) (or (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y a) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (Set_in y (Set_union a b)))
  :pattern ((Set_union a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_intersection a b)) (and (Set_in o a) (Set_in o b)))
  :pattern ((Set_in o (Set_intersection a b)))
  :pattern ((Set_intersection a b) (Set_in o a))
  :pattern ((Set_intersection a b) (Set_in o b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union (Set_union a b) b) (Set_union a b))
  :pattern ((Set_union (Set_union a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_union a (Set_union a b)) (Set_union a b))
  :pattern ((Set_union a (Set_union a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection (Set_intersection a b) b) (Set_intersection a b))
  :pattern ((Set_intersection (Set_intersection a b) b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (= (Set_intersection a (Set_intersection a b)) (Set_intersection a b))
  :pattern ((Set_intersection a (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (+ (Set_card (Set_union a b)) (Set_card (Set_intersection a b)))
    (+ (Set_card a) (Set_card b)))
  :pattern ((Set_card (Set_union a b)))
  :pattern ((Set_card (Set_intersection a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (o $Snap)) (!
  (= (Set_in o (Set_difference a b)) (and (Set_in o a) (not (Set_in o b))))
  :pattern ((Set_in o (Set_difference a b)))
  :pattern ((Set_difference a b) (Set_in o a))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>) (y $Snap)) (!
  (=> (Set_in y b) (not (Set_in y (Set_difference a b))))
  :pattern ((Set_difference a b) (Set_in y b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (and
    (=
      (+
        (+ (Set_card (Set_difference a b)) (Set_card (Set_difference b a)))
        (Set_card (Set_intersection a b)))
      (Set_card (Set_union a b)))
    (=
      (Set_card (Set_difference a b))
      (- (Set_card a) (Set_card (Set_intersection a b)))))
  :pattern ((Set_card (Set_difference a b)))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=
    (Set_subset a b)
    (forall ((o $Snap)) (!
      (=> (Set_in o a) (Set_in o b))
      :pattern ((Set_in o a))
      :pattern ((Set_in o b))
      )))
  :pattern ((Set_subset a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (or
    (and (Set_equal a b) (= a b))
    (and
      (not (Set_equal a b))
      (and
        (not (= a b))
        (and
          (= (Set_skolem_diff a b) (Set_skolem_diff b a))
          (not
            (= (Set_in (Set_skolem_diff a b) a) (Set_in (Set_skolem_diff a b) b)))))))
  :pattern ((Set_equal a b))
  )))
(assert (forall ((a Set<$Snap>) (b Set<$Snap>)) (!
  (=> (Set_equal a b) (= a b))
  :pattern ((Set_equal a b))
  )))
; /field_value_functions_axioms.smt2 [demo__ar: Seq[Ref]]
(assert (forall ((vs $FVF<demo__ar>) (ws $FVF<demo__ar>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_demo__ar vs) ($FVF.domain_demo__ar ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_demo__ar vs))
            (= ($FVF.lookup_demo__ar vs x) ($FVF.lookup_demo__ar ws x)))
          :pattern (($FVF.lookup_demo__ar vs x) ($FVF.lookup_demo__ar ws x))
          :qid |qp.$FVF<demo__ar>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<demo__ar>To$Snap vs)
              ($SortWrappers.$FVF<demo__ar>To$Snap ws)
              )
    :qid |qp.$FVF<demo__ar>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_demo__ar pm r))
    :pattern (($FVF.perm_demo__ar pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_demo__ar f r) true)
    :pattern (($FVF.loc_demo__ar f r)))))
; /field_value_functions_axioms.smt2 [demo__tmp: Seq[Ref]]
(assert (forall ((vs $FVF<demo__tmp>) (ws $FVF<demo__tmp>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_demo__tmp vs) ($FVF.domain_demo__tmp ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_demo__tmp vs))
            (= ($FVF.lookup_demo__tmp vs x) ($FVF.lookup_demo__tmp ws x)))
          :pattern (($FVF.lookup_demo__tmp vs x) ($FVF.lookup_demo__tmp ws x))
          :qid |qp.$FVF<demo__tmp>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<demo__tmp>To$Snap vs)
              ($SortWrappers.$FVF<demo__tmp>To$Snap ws)
              )
    :qid |qp.$FVF<demo__tmp>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_demo__tmp pm r))
    :pattern (($FVF.perm_demo__tmp pm r)))))
(assert (forall ((r $Ref) (f Seq<$Ref>)) (!
    (= ($FVF.loc_demo__tmp f r) true)
    :pattern (($FVF.loc_demo__tmp f r)))))
; /field_value_functions_axioms.smt2 [Ref__Integer_value: Int]
(assert (forall ((vs $FVF<Ref__Integer_value>) (ws $FVF<Ref__Integer_value>)) (!
    (=>
      (and
        (Set_equal ($FVF.domain_Ref__Integer_value vs) ($FVF.domain_Ref__Integer_value ws))
        (forall ((x $Ref)) (!
          (=>
            (Set_in x ($FVF.domain_Ref__Integer_value vs))
            (= ($FVF.lookup_Ref__Integer_value vs x) ($FVF.lookup_Ref__Integer_value ws x)))
          :pattern (($FVF.lookup_Ref__Integer_value vs x) ($FVF.lookup_Ref__Integer_value ws x))
          :qid |qp.$FVF<Ref__Integer_value>-eq-inner|
          )))
      (= vs ws))
    :pattern (($SortWrappers.$FVF<Ref__Integer_value>To$Snap vs)
              ($SortWrappers.$FVF<Ref__Integer_value>To$Snap ws)
              )
    :qid |qp.$FVF<Ref__Integer_value>-eq-outer|
    )))
(assert (forall ((r $Ref) (pm $FPM)) (!
    ($Perm.isValidVar ($FVF.perm_Ref__Integer_value pm r))
    :pattern (($FVF.perm_Ref__Integer_value pm r)))))
(assert (forall ((r $Ref) (f Int)) (!
    (= ($FVF.loc_Ref__Integer_value f r) true)
    :pattern (($FVF.loc_Ref__Integer_value f r)))))
; End preamble
; ------------------------------------------------------------
; State saturation: after preamble
(set-option :timeout 100)
(check-sat)
; unknown
; ------------------------------------------------------------
; Begin function- and predicate-related preamble
; Declaring symbols related to program functions (from verification)
(assert (forall ((s@$ $Snap) (N@0@00 Int) (k@1@00 Int)) (!
  (= (demo__bin%limited s@$ N@0@00 k@1@00) (demo__bin s@$ N@0@00 k@1@00))
  :pattern ((demo__bin s@$ N@0@00 k@1@00))
  :qid |quant-u-9140|)))
(assert (forall ((s@$ $Snap) (N@0@00 Int) (k@1@00 Int)) (!
  (demo__bin%stateless N@0@00 k@1@00)
  :pattern ((demo__bin%limited s@$ N@0@00 k@1@00))
  :qid |quant-u-9141|)))
(assert (forall ((s@$ $Snap) (N@0@00 Int) (k@1@00 Int)) (!
  (=>
    (demo__bin%precondition s@$ N@0@00 k@1@00)
    (=
      (demo__bin s@$ N@0@00 k@1@00)
      (ite
        (or (= k@1@00 0) (or (= k@1@00 N@0@00) (<= N@0@00 0)))
        1
        (+
          (demo__bin%limited ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (- N@0@00 1) (- k@1@00 1))
          (demo__bin%limited ($Snap.combine
            $Snap.unit
            ($Snap.combine $Snap.unit $Snap.unit)) (- N@0@00 1) k@1@00)))))
  :pattern ((demo__bin s@$ N@0@00 k@1@00))
  :qid |quant-u-9142|)))
(assert (forall ((s@$ $Snap) (N@0@00 Int) (k@1@00 Int)) (!
  (=>
    (demo__bin%precondition s@$ N@0@00 k@1@00)
    (ite
      (or (= k@1@00 0) (or (= k@1@00 N@0@00) (<= N@0@00 0)))
      true
      (and
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (- N@0@00 1) (- k@1@00 1))
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) (- N@0@00 1) k@1@00))))
  :pattern ((demo__bin s@$ N@0@00 k@1@00))
  :qid |quant-u-9143|)))
; End function- and predicate-related preamble
; ------------------------------------------------------------
; ---------- demo__main_main ----------
(declare-const diz@0@01 $Ref)
(declare-const current_thread_id@1@01 Int)
(declare-const tcount@2@01 Int)
(declare-const gsize@3@01 Int)
(declare-const tid@4@01 Int)
(declare-const gid@5@01 Int)
(declare-const lid@6@01 Int)
(declare-const diz@7@01 $Ref)
(declare-const current_thread_id@8@01 Int)
(declare-const tcount@9@01 Int)
(declare-const gsize@10@01 Int)
(declare-const tid@11@01 Int)
(declare-const gid@12@01 Int)
(declare-const lid@13@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@14@01 $Snap)
(assert (= $t@14@01 ($Snap.combine ($Snap.first $t@14@01) ($Snap.second $t@14@01))))
(assert (= ($Snap.first $t@14@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@7@01 $Ref.null)))
(assert (=
  ($Snap.second $t@14@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@14@01))
    ($Snap.second ($Snap.second $t@14@01)))))
(assert (= ($Snap.first ($Snap.second $t@14@01)) $Snap.unit))
; [eval] current_thread_id >= 0
(assert (>= current_thread_id@8@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@14@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@14@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@14@01))) $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@11@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@14@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  $Snap.unit))
; [eval] tid < tcount
(assert (< tid@11@01 tcount@9@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  $Snap.unit))
; [eval] tid == lid
(assert (= tid@11@01 lid@13@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@9@01 gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@12@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
(declare-const $k@15@01 $Perm)
(assert ($Perm.isReadVar $k@15@01))
(assert (<= $Perm.No $k@15@01))
(assert (<= $k@15@01 $Perm.Write))
(assert (=> (< $Perm.No $k@15@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(declare-const $k@16@01 $Perm)
(assert ($Perm.isReadVar $k@16@01))
(assert (<= $Perm.No $k@16@01))
(assert (<= $k@16@01 $Perm.Write))
(assert (=> (< $Perm.No $k@16@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (> gsize@10@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
      tid@11@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(push) ; 2
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
    tid@11@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
    tid@11@01))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
      tid@11@01)
    $Ref.null)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@17@01 $Snap)
(assert (= $t@17@01 ($Snap.combine ($Snap.first $t@17@01) ($Snap.second $t@17@01))))
(assert (= ($Snap.first $t@17@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@17@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@17@01))
    ($Snap.second ($Snap.second $t@17@01)))))
(assert (= ($Snap.first ($Snap.second $t@17@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@17@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@17@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@17@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@17@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@17@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
(declare-const $k@18@01 $Perm)
(assert ($Perm.isReadVar $k@18@01))
(assert (<= $Perm.No $k@18@01))
(assert (<= $k@18@01 $Perm.Write))
(assert (=> (< $Perm.No $k@18@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))
(declare-const $k@19@01 $Perm)
(assert ($Perm.isReadVar $k@19@01))
(assert (<= $Perm.No $k@19@01))
(assert (<= $k@19@01 $Perm.Write))
(assert (=> (< $Perm.No $k@19@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@19@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))
      tid@11@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))))
  $Snap.unit))
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(gsize - 1, tid)
; [eval] diz.demo__ar[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@18@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(gsize - 1, tid)
; [eval] gsize - 1
(push) ; 3
; [eval] N >= 0
(push) ; 4
(assert (not (>= (- gsize@10@01 1) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (>= (- gsize@10@01 1) 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 4
(assert (not (<= tid@11@01 (- gsize@10@01 1))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 (- gsize@10@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- gsize@10@01 1) tid@11@01))
(pop) ; 3
; Joined path conditions
(assert (and
  (>= (- gsize@10@01 1) 0)
  (<= tid@11@01 (- gsize@10@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- gsize@10@01 1) tid@11@01)))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@17@01))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    gsize@10@01
    1) tid@11@01)))
(pop) ; 2
(push) ; 2
; [exec]
; var __last_barrier: Int
(declare-const __last_barrier@20@01 Int)
; [exec]
; var N: Int
(declare-const N@21@01 Int)
; [exec]
; var __flatten_1: Int
(declare-const __flatten_1@22@01 Int)
; [exec]
; var __flatten_2: Int
(declare-const __flatten_2@23@01 Int)
; [exec]
; var __flatten_3: Ref
(declare-const __flatten_3@24@01 $Ref)
; [exec]
; var __flatten_4: Int
(declare-const __flatten_4@25@01 Int)
; [exec]
; var __flatten_5: Ref
(declare-const __flatten_5@26@01 $Ref)
; [exec]
; var __flatten_6: Int
(declare-const __flatten_6@27@01 Int)
; [exec]
; var __flatten_7: Ref
(declare-const __flatten_7@28@01 $Ref)
; [exec]
; var __flatten_9: Ref
(declare-const __flatten_9@29@01 $Ref)
; [exec]
; var __flatten_10: Int
(declare-const __flatten_10@30@01 Int)
; [exec]
; var __flatten_11: Ref
(declare-const __flatten_11@31@01 $Ref)
; [exec]
; var __flatten_12: Ref
(declare-const __flatten_12@32@01 $Ref)
; [exec]
; __last_barrier := 0
; [exec]
; N := 1
; [exec]
; __flatten_3 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_3@33@01 $Ref)
(assert (=
  __flatten_3@33@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
    tid@11@01)))
; [exec]
; __flatten_4 := 1
; [exec]
; __flatten_3.Ref__Integer_value := __flatten_4
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
    tid@11@01)
  __flatten_3@33@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))
    tid@11@01)
  __flatten_3@33@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
    tid@11@01)
  __flatten_3@33@01)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not (= __flatten_3@33@01 $Ref.null)))
(declare-const __flatten_5@34@01 $Ref)
(declare-const __flatten_7@35@01 $Ref)
(declare-const __flatten_6@36@01 Int)
(declare-const __flatten_1@37@01 Int)
(declare-const __last_barrier@38@01 Int)
(declare-const N@39@01 Int)
(declare-const __flatten_9@40@01 $Ref)
(declare-const __flatten_11@41@01 $Ref)
(declare-const __flatten_12@42@01 $Ref)
(declare-const __flatten_10@43@01 Int)
(declare-const __flatten_2@44@01 Int)
(set-option :timeout 0)
(push) ; 3
; Loop head block: Check well-definedness of invariant
(declare-const $t@45@01 $Snap)
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@45@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@01))
    ($Snap.second ($Snap.second $t@45@01)))))
(assert (= ($Snap.first ($Snap.second $t@45@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@45@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@45@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@45@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@45@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
(declare-const $k@46@01 $Perm)
(assert ($Perm.isReadVar $k@46@01))
(assert (<= $Perm.No $k@46@01))
(assert (<= $k@46@01 $Perm.Write))
(assert (=> (< $Perm.No $k@46@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(declare-const $k@47@01 $Perm)
(assert ($Perm.isReadVar $k@47@01))
(assert (<= $Perm.No $k@47@01))
(assert (<= $k@47@01 $Perm.Write))
(assert (=> (< $Perm.No $k@47@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  $Snap.unit))
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 0 | False | live]
; [else-branch: 0 | True | live]
(push) ; 5
; [then-branch: 0 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 0 | True]
; [eval] __last_barrier == 0
(push) ; 6
; [then-branch: 1 | __last_barrier@38@01 == 0 | live]
; [else-branch: 1 | __last_barrier@38@01 != 0 | live]
(push) ; 7
; [then-branch: 1 | __last_barrier@38@01 == 0]
(assert (= __last_barrier@38@01 0))
(pop) ; 7
(push) ; 7
; [else-branch: 1 | __last_barrier@38@01 != 0]
(assert (not (= __last_barrier@38@01 0)))
; [eval] __last_barrier == 2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (= __last_barrier@38@01 0)) (= __last_barrier@38@01 0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= __last_barrier@38@01 0)) (= __last_barrier@38@01 0)))
(assert (or (= __last_barrier@38@01 0) (= __last_barrier@38@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
; [eval] __last_barrier == 2
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 2))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= __last_barrier@38@01 2)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 2 | __last_barrier@38@01 == 2 | live]
; [else-branch: 2 | __last_barrier@38@01 != 2 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 2 | __last_barrier@38@01 == 2]
(assert (= __last_barrier@38@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
      tid@11@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      tid@11@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
; [eval] __last_barrier == 1
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 1))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 3 | __last_barrier@38@01 == 1 | dead]
; [else-branch: 3 | __last_barrier@38@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 3 | __last_barrier@38@01 != 1]
(assert (not (= __last_barrier@38@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
; [eval] __last_barrier == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 0))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 4 | __last_barrier@38@01 == 0 | dead]
; [else-branch: 4 | __last_barrier@38@01 != 0 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 4 | __last_barrier@38@01 != 0]
(assert (not (= __last_barrier@38@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (< 0 N@39@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (< N@39@01 gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 5 | tid@11@01 < N@39@01 | live]
; [else-branch: 5 | !(tid@11@01 < N@39@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 5 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 9
; [eval] N >= 0
(push) ; 10
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 5 | !(tid@11@01 < N@39@01)]
(assert (not (< tid@11@01 N@39@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (< tid@11@01 N@39@01)
  (and
    (< tid@11@01 N@39@01)
    (>= N@39@01 0)
    (<= tid@11@01 N@39@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))))
; Joined path conditions
(assert (or (not (< tid@11@01 N@39@01)) (< tid@11@01 N@39@01)))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  (ite
    (< tid@11@01 N@39@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)
    1)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 2 | __last_barrier@38@01 != 2]
(assert (not (= __last_barrier@38@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
; [eval] __last_barrier == 1
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 1))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 6 | __last_barrier@38@01 == 1 | dead]
; [else-branch: 6 | __last_barrier@38@01 != 1 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 6 | __last_barrier@38@01 != 1]
(assert (not (= __last_barrier@38@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
; [eval] __last_barrier == 0
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 0))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= __last_barrier@38@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 7 | __last_barrier@38@01 == 0 | live]
; [else-branch: 7 | __last_barrier@38@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 7 | __last_barrier@38@01 == 0]
(assert (= __last_barrier@38@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
      tid@11@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      tid@11@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (< 0 N@39@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (< N@39@01 gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 8 | tid@11@01 < N@39@01 | live]
; [else-branch: 8 | !(tid@11@01 < N@39@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 8 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 9
; [eval] N >= 0
(push) ; 10
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 8 | !(tid@11@01 < N@39@01)]
(assert (not (< tid@11@01 N@39@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (< tid@11@01 N@39@01)
  (and
    (< tid@11@01 N@39@01)
    (>= N@39@01 0)
    (<= tid@11@01 N@39@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))))
; Joined path conditions
(assert (or (not (< tid@11@01 N@39@01)) (< tid@11@01 N@39@01)))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  (ite
    (< tid@11@01 N@39@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)
    1)))
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; Loop head block: Establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@48@01 $Perm)
(assert ($Perm.isReadVar $k@48@01))
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= $k@15@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $k@48@01 $k@15@01))
(assert (<= $Perm.No (- $k@15@01 $k@48@01)))
(assert (<= (- $k@15@01 $k@48@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@15@01 $k@48@01)) (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const $k@49@01 $Perm)
(assert ($Perm.isReadVar $k@49@01))
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= $k@16@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (< $k@49@01 $k@16@01))
(assert (<= $Perm.No (- $k@16@01 $k@49@01)))
(assert (<= (- $k@16@01 $k@49@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@16@01 $k@49@01)) (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 4
; [then-branch: 9 | False | live]
; [else-branch: 9 | True | live]
(push) ; 5
; [then-branch: 9 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 9 | True]
; [eval] __last_barrier == 0
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
; [eval] __last_barrier == 2
; [then-branch: 10 | False | dead]
; [else-branch: 10 | True | live]
(push) ; 4
; [else-branch: 10 | True]
; [eval] __last_barrier == 1
; [then-branch: 11 | False | dead]
; [else-branch: 11 | True | live]
(push) ; 5
; [else-branch: 11 | True]
; [eval] __last_barrier == 0
(push) ; 6
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 12 | True | live]
; [else-branch: 12 | False | dead]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 12 | True]
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
(push) ; 7
(assert (not (< 1 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (< 1 gsize@10@01))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< tid@11@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< tid@11@01 1)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 13 | tid@11@01 < 1 | live]
; [else-branch: 13 | !(tid@11@01 < 1) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 13 | tid@11@01 < 1]
(assert (< tid@11@01 1))
; [eval] demo__bin(N, tid)
(push) ; 9
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@11@01 1)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 1))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) 1 tid@11@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (<= tid@11@01 1)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) 1 tid@11@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 13 | !(tid@11@01 < 1)]
(assert (not (< tid@11@01 1)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (< tid@11@01 1)
  (and
    (< tid@11@01 1)
    (<= tid@11@01 1)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) 1 tid@11@01))))
; Joined path conditions
(assert (or (not (< tid@11@01 1)) (< tid@11@01 1)))
(push) ; 7
(assert (not (=
  1
  (ite
    (< tid@11@01 1)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) 1 tid@11@01)
    1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  1
  (ite
    (< tid@11@01 1)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) 1 tid@11@01)
    1)))
; Loop head block: Execute statements of loop head block (in invariant state)
(push) ; 7
(assert (not (= __last_barrier@38@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  $Snap.unit))
(assert (< 0 N@39@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
(assert (< N@39@01 gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (< tid@11@01 N@39@01)
  (and
    (< tid@11@01 N@39@01)
    (>= N@39@01 0)
    (<= tid@11@01 N@39@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))))
(assert (or (not (< tid@11@01 N@39@01)) (< tid@11@01 N@39@01)))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  (ite
    (< tid@11@01 N@39@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)
    1)))
(assert (not (= __last_barrier@38@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
(assert (= __last_barrier@38@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
      tid@11@01)
    $Ref.null)))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      tid@11@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
(assert ($Perm.isReadVar $k@46@01))
(assert ($Perm.isReadVar $k@47@01))
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
(assert (=
  ($Snap.second $t@45@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@01))
    ($Snap.second ($Snap.second $t@45@01)))))
(assert (= ($Snap.first ($Snap.second $t@45@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@45@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@45@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@45@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@45@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
(assert (<= $Perm.No $k@46@01))
(assert (<= $k@46@01 $Perm.Write))
(assert (=> (< $Perm.No $k@46@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(assert (<= $Perm.No $k@47@01))
(assert (<= $k@47@01 $Perm.Write))
(assert (=> (< $Perm.No $k@47@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  $Snap.unit))
(assert (or (not (= __last_barrier@38@01 0)) (= __last_barrier@38@01 0)))
(assert (or (= __last_barrier@38@01 0) (= __last_barrier@38@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] N < gsize - 1
; [eval] gsize - 1
(pop) ; 8
(push) ; 8
; [eval] !(N < gsize - 1)
; [eval] N < gsize - 1
; [eval] gsize - 1
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] N < gsize - 1
; [eval] gsize - 1
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< N@39@01 (- gsize@10@01 1)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< N@39@01 (- gsize@10@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 14 | N@39@01 < gsize@10@01 - 1 | live]
; [else-branch: 14 | !(N@39@01 < gsize@10@01 - 1) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 14 | N@39@01 < gsize@10@01 - 1]
(assert (< N@39@01 (- gsize@10@01 1)))
; [exec]
; __flatten_5 := diz.demo__tmp[tid]
; [eval] diz.demo__tmp[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_5@50@01 $Ref)
(assert (=
  __flatten_5@50@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)))
; [exec]
; __flatten_7 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_7@51@01 $Ref)
(assert (=
  __flatten_7@51@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)))
; [exec]
; __flatten_6 := __flatten_7.Ref__Integer_value
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  __flatten_7@51@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  __flatten_7@51@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_6@52@01 Int)
(assert (=
  __flatten_6@52@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
; [exec]
; __flatten_5.Ref__Integer_value := __flatten_6
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  __flatten_5@50@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  __flatten_5@50@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= __flatten_5@50@01 $Ref.null)))
; [exec]
; __flatten_1 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 1, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 15 | True | live]
; [else-branch: 15 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 15 | True]
; [eval] false || (last_barrier == 0 || last_barrier == 2)
(push) ; 11
; [then-branch: 16 | False | live]
; [else-branch: 16 | True | live]
(push) ; 12
; [then-branch: 16 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 16 | True]
; [eval] last_barrier == 0
(push) ; 13
; [then-branch: 17 | __last_barrier@38@01 == 0 | live]
; [else-branch: 17 | __last_barrier@38@01 != 0 | live]
(push) ; 14
; [then-branch: 17 | __last_barrier@38@01 == 0]
(assert (= __last_barrier@38@01 0))
(pop) ; 14
(push) ; 14
; [else-branch: 17 | __last_barrier@38@01 != 0]
; [eval] last_barrier == 2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 18 | False | dead]
; [else-branch: 18 | True | live]
(push) ; 10
; [else-branch: 18 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@53@01 $Perm)
(assert ($Perm.isReadVar $k@53@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= $k@46@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@53@01 $k@46@01))
(assert (<= $Perm.No (- $k@46@01 $k@53@01)))
(assert (<= (- $k@46@01 $k@53@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@46@01 $k@53@01)) (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@54@01 $Perm)
(assert ($Perm.isReadVar $k@54@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= $k@47@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@54@01 $k@47@01))
(assert (<= $Perm.No (- $k@47@01 $k@54@01)))
(assert (<= (- $k@47@01 $k@54@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@47@01 $k@54@01)) (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 2))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 19 | __last_barrier@38@01 == 2 | live]
; [else-branch: 19 | __last_barrier@38@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 19 | __last_barrier@38@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 1
; [then-branch: 20 | __last_barrier@38@01 == 1 | dead]
; [else-branch: 20 | __last_barrier@38@01 != 1 | live]
(push) ; 10
; [else-branch: 20 | __last_barrier@38@01 != 1]
; [eval] last_barrier == 0
; [then-branch: 21 | __last_barrier@38@01 == 0 | dead]
; [else-branch: 21 | __last_barrier@38@01 != 0 | live]
(push) ; 11
; [else-branch: 21 | __last_barrier@38@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 22 | True | live]
; [else-branch: 22 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 22 | True]
; [eval] gsize > 1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 23 | True | live]
; [else-branch: 23 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 23 | True]
; [eval] 0 < N
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 24 | True | live]
; [else-branch: 24 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 24 | True]
; [eval] N < gsize
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 25 | True | live]
; [else-branch: 25 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 25 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 26 | tid@11@01 < N@39@01 | live]
; [else-branch: 26 | !(tid@11@01 < N@39@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 26 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 16
; [eval] N >= 0
(push) ; 17
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 17
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 26 | !(tid@11@01 < N@39@01)]
(assert (not (< tid@11@01 N@39@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 27 | True | live]
; [else-branch: 27 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 27 | True]
; [eval] diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] diz.demo__tmp[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 28 | False | dead]
; [else-branch: 28 | True | live]
(push) ; 13
; [else-branch: 28 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 29 | False | dead]
; [else-branch: 29 | True | live]
(push) ; 13
; [else-branch: 29 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 30 | False | dead]
; [else-branch: 30 | True | live]
(push) ; 13
; [else-branch: 30 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 31 | False | dead]
; [else-branch: 31 | True | live]
(push) ; 13
; [else-branch: 31 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(declare-const sys__result@55@01 Int)
(declare-const $t@56@01 $Snap)
(assert (= $t@56@01 ($Snap.combine ($Snap.first $t@56@01) ($Snap.second $t@56@01))))
(assert (= ($Snap.first $t@56@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@56@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@56@01))
    ($Snap.second ($Snap.second $t@56@01)))))
(assert (= ($Snap.first ($Snap.second $t@56@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@56@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@56@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@56@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@56@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@56@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))
(declare-const $k@57@01 $Perm)
(assert ($Perm.isReadVar $k@57@01))
(declare-const $t@58@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- $k@46@01 $k@53@01))
    (Seq_equal
      $t@58@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (=>
    (< $Perm.No $k@57@01)
    (Seq_equal
      $t@58@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))
(assert (<= $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01)))
(assert (<= (+ (- $k@46@01 $k@53@01) $k@57@01) $Perm.Write))
(assert (=> (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01)) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@58@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))
(declare-const $k@59@01 $Perm)
(assert ($Perm.isReadVar $k@59@01))
(declare-const $t@60@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- $k@47@01 $k@54@01))
    (Seq_equal
      $t@60@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  (=>
    (< $Perm.No $k@59@01)
    (Seq_equal
      $t@60@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
(assert (<= $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01)))
(assert (<= (+ (- $k@47@01 $k@54@01) $k@59@01) $Perm.Write))
(assert (=> (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01)) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@60@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@58@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@60@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 2))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= sys__result@55@01 2)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 32 | sys__result@55@01 == 2 | live]
; [else-branch: 32 | sys__result@55@01 != 2 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 32 | sys__result@55@01 == 2]
(assert (= sys__result@55@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@58@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< tid@11@01 (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= (Seq_index $t@58@01 tid@11@01) (Seq_index $t@60@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@60@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 1))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 33 | sys__result@55@01 == 1 | dead]
; [else-branch: 33 | sys__result@55@01 != 1 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 33 | sys__result@55@01 != 1]
(assert (not (= sys__result@55@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 34 | sys__result@55@01 == 0 | dead]
; [else-branch: 34 | sys__result@55@01 != 0 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 34 | sys__result@55@01 != 0]
(assert (not (= sys__result@55@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@55@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 35 | True | dead]
; [else-branch: 35 | False | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 35 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 36 | True | dead]
; [else-branch: 36 | False | live]
(push) ; 16
; [else-branch: 36 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 37 | True | dead]
; [else-branch: 37 | False | live]
(push) ; 16
; [else-branch: 37 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 38 | True | dead]
; [else-branch: 38 | False | live]
(push) ; 16
; [else-branch: 38 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 39 | True | dead]
; [else-branch: 39 | False | live]
(push) ; 16
; [else-branch: 39 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 40 | False | dead]
; [else-branch: 40 | True | live]
(push) ; 16
; [else-branch: 40 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 41 | False | dead]
; [else-branch: 41 | True | live]
(push) ; 16
; [else-branch: 41 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 42 | False | dead]
; [else-branch: 42 | True | live]
(push) ; 16
; [else-branch: 42 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 43 | False | dead]
; [else-branch: 43 | True | live]
(push) ; 16
; [else-branch: 43 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@61@01 Int)
(assert (= N@61@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 15
; [then-branch: 44 | !(0 < tid@11@01) | live]
; [else-branch: 44 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 44 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 44 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@61@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 45 | 0 < tid@11@01 && tid@11@01 < N@61@01 | dead]
; [else-branch: 45 | !(0 < tid@11@01 && tid@11@01 < N@61@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 45 | !(0 < tid@11@01 && tid@11@01 < N@61@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@61@01))))
(pop) ; 15
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 15
; [then-branch: 46 | !(0 < tid@11@01) | live]
; [else-branch: 46 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 46 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 46 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@61@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 47 | !(0 < tid@11@01 && tid@11@01 < N@61@01) | dead]
; [else-branch: 47 | 0 < tid@11@01 && tid@11@01 < N@61@01 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 47 | 0 < tid@11@01 && tid@11@01 < N@61@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@61@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 32 | sys__result@55@01 != 2]
(assert (not (= sys__result@55@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 1))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= sys__result@55@01 1)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 48 | sys__result@55@01 == 1 | live]
; [else-branch: 48 | sys__result@55@01 != 1 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 48 | sys__result@55@01 == 1]
(assert (= sys__result@55@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@58@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
(push) ; 14
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (> tid@11@01 0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 49 | tid@11@01 > 0 | live]
; [else-branch: 49 | !(tid@11@01 > 0) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 49 | tid@11@01 > 0]
(assert (> tid@11@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 15
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< (- tid@11@01 1) (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (= (Seq_index $t@58@01 tid@11@01) (Seq_index $t@60@01 (- tid@11@01 1)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@60@01 (- tid@11@01 1)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 50 | sys__result@55@01 == 0 | dead]
; [else-branch: 50 | sys__result@55@01 != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 50 | sys__result@55@01 != 0]
(assert (not (= sys__result@55@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 51 | True | live]
; [else-branch: 51 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 51 | True]
; [eval] gsize > 1
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 52 | True | live]
; [else-branch: 52 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 52 | True]
; [eval] 0 < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 53 | True | live]
; [else-branch: 53 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 53 | True]
; [eval] N < gsize
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 54 | True | live]
; [else-branch: 54 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 54 | True]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 18
; [then-branch: 55 | !(0 < tid@11@01) | live]
; [else-branch: 55 | 0 < tid@11@01 | live]
(push) ; 19
; [then-branch: 55 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 55 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid <= N
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 56 | 0 < tid@11@01 && tid@11@01 <= N@39@01 | live]
; [else-branch: 56 | !(0 < tid@11@01 && tid@11@01 <= N@39@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 56 | 0 < tid@11@01 && tid@11@01 <= N@39@01]
(assert (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (< (- tid@11@01 1) (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid - 1)
; [eval] tid - 1
(push) ; 20
; [eval] N >= 0
(push) ; 21
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
(push) ; 21
(assert (not (<= 0 (- tid@11@01 1))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@11@01 1)))
; [eval] k <= N
(push) ; 21
(assert (not (<= (- tid@11@01 1) N@39@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@11@01 1) N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1)))
(pop) ; 20
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= 0 (- tid@11@01 1))
  (<= (- tid@11@01 1) N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1))))
(pop) ; 19
(push) ; 19
; [else-branch: 56 | !(0 < tid@11@01 && tid@11@01 <= N@39@01)]
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))
  (and
    (< 0 tid@11@01)
    (<= tid@11@01 N@39@01)
    (>= N@39@01 0)
    (<= 0 (- tid@11@01 1))
    (<= (- tid@11@01 1) N@39@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1)))))
; Joined path conditions
(assert (or
  (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))
  (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (or (< 0 tid@11@01) (not (< 0 tid@11@01)))
  (=>
    (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))
    (and
      (< 0 tid@11@01)
      (<= tid@11@01 N@39@01)
      (>= N@39@01 0)
      (<= 0 (- tid@11@01 1))
      (<= (- tid@11@01 1) N@39@01)
      (demo__bin%precondition ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1))))
  (or
    (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))
    (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(assert (=>
  (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (-
      tid@11@01
      1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 57 | True | live]
; [else-branch: 57 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 57 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 58 | tid@11@01 < N@39@01 | live]
; [else-branch: 58 | !(tid@11@01 < N@39@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 58 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 20
; [eval] N >= 0
(push) ; 21
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 21
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 58 | !(tid@11@01 < N@39@01)]
(assert (not (< tid@11@01 N@39@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (ite
    (< tid@11@01 N@39@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 59 | False | dead]
; [else-branch: 59 | True | live]
(push) ; 17
; [else-branch: 59 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 60 | False | dead]
; [else-branch: 60 | True | live]
(push) ; 17
; [else-branch: 60 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 61 | False | dead]
; [else-branch: 61 | True | live]
(push) ; 17
; [else-branch: 61 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 62 | False | dead]
; [else-branch: 62 | True | live]
(push) ; 17
; [else-branch: 62 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@62@01 Int)
(assert (= N@62@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 16
; [then-branch: 63 | !(0 < tid@11@01) | live]
; [else-branch: 63 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 63 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 63 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@62@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@62@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 64 | 0 < tid@11@01 && tid@11@01 < N@62@01 | live]
; [else-branch: 64 | !(0 < tid@11@01 && tid@11@01 < N@62@01) | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 64 | 0 < tid@11@01 && tid@11@01 < N@62@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@62@01)))
; [exec]
; assert diz.demo__tmp[tid - 1].Ref__Integer_value ==
;   demo__bin(N - 1, tid - 1) &&
;   diz.demo__ar[tid].Ref__Integer_value == demo__bin(N - 1, tid)
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N - 1, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 17
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< (- tid@11@01 1) (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N - 1, tid - 1)
; [eval] N - 1
; [eval] tid - 1
(push) ; 17
; [eval] N >= 0
(push) ; 18
(assert (not (>= (- N@62@01 1) 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (>= (- N@62@01 1) 0))
; [eval] 0 <= k
(push) ; 18
(assert (not (<= 0 (- tid@11@01 1))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@11@01 1)))
; [eval] k <= N
(push) ; 18
(assert (not (<= (- tid@11@01 1) (- N@62@01 1))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@11@01 1) (- N@62@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- N@62@01 1) (- tid@11@01 1)))
(pop) ; 17
; Joined path conditions
(assert (and
  (>= (- N@62@01 1) 0)
  (<= 0 (- tid@11@01 1))
  (<= (- tid@11@01 1) (- N@62@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- N@62@01 1) (- tid@11@01 1))))
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@62@01
    1) (- tid@11@01 1)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@62@01
    1) (- tid@11@01 1))))
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(N - 1, tid)
; [eval] diz.demo__ar[tid]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N - 1, tid)
; [eval] N - 1
(push) ; 17
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(push) ; 18
(assert (not (<= tid@11@01 (- N@62@01 1))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 (- N@62@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- N@62@01 1) tid@11@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (<= tid@11@01 (- N@62@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- N@62@01 1) tid@11@01)))
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@62@01
    1) tid@11@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@62@01
    1) tid@11@01)))
; [exec]
; __flatten_9 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_9@63@01 $Ref)
(assert (= __flatten_9@63@01 (Seq_index $t@58@01 tid@11@01)))
; [exec]
; __flatten_11 := diz.demo__tmp[tid - 1]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 17
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< (- tid@11@01 1) (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_11@64@01 $Ref)
(assert (= __flatten_11@64@01 (Seq_index $t@60@01 (- tid@11@01 1))))
; [exec]
; __flatten_12 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_12@65@01 $Ref)
(assert (= __flatten_12@65@01 (Seq_index $t@58@01 tid@11@01)))
; [exec]
; __flatten_10 := __flatten_11.Ref__Integer_value +
;   __flatten_12.Ref__Integer_value
; [eval] __flatten_11.Ref__Integer_value + __flatten_12.Ref__Integer_value
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@60@01 (- tid@11@01 1)) __flatten_11@64@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@60@01 (- tid@11@01 1)) __flatten_12@65@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@58@01 tid@11@01) __flatten_12@65@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_10@66@01 Int)
(assert (=
  __flatten_10@66@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
; [exec]
; __flatten_9.Ref__Integer_value := __flatten_10
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@60@01 (- tid@11@01 1)) __flatten_9@63@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@58@01 tid@11@01) __flatten_9@63@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@60@01 (- tid@11@01 1)) __flatten_9@63@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= __flatten_9@63@01 $Ref.null)))
; [exec]
; assert diz.demo__ar[tid].Ref__Integer_value == demo__bin(N, tid)
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(N, tid)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid)
(push) ; 17
; [eval] N >= 0
(push) ; 18
(assert (not (>= N@62@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (>= N@62@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 18
(assert (not (<= tid@11@01 N@62@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@62@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@62@01 tid@11@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (>= N@62@01 0)
  (<= tid@11@01 N@62@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@62@01 tid@11@01)))
(push) ; 17
(assert (not (=
  __flatten_10@66@01
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@62@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  __flatten_10@66@01
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@62@01 tid@11@01)))
; [exec]
; __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 2, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 17
; [then-branch: 65 | False | dead]
; [else-branch: 65 | True | live]
(push) ; 18
; [else-branch: 65 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 66 | True | live]
; [else-branch: 66 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 66 | True]
; [eval] false || last_barrier == 1
(push) ; 19
; [then-branch: 67 | False | live]
; [else-branch: 67 | True | live]
(push) ; 20
; [then-branch: 67 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 67 | True]
; [eval] last_barrier == 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@67@01 $Perm)
(assert ($Perm.isReadVar $k@67@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@46@01 $k@53@01) $k@57@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@67@01 (+ (- $k@46@01 $k@53@01) $k@57@01)))
(assert (<= $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01)))
(assert (<= (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const $k@68@01 $Perm)
(assert ($Perm.isReadVar $k@68@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@47@01 $k@54@01) $k@59@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@68@01 (+ (- $k@47@01 $k@54@01) $k@59@01)))
(assert (<= $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01)))
(assert (<= (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 68 | sys__result@55@01 == 2 | dead]
; [else-branch: 68 | sys__result@55@01 != 2 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 68 | sys__result@55@01 != 2]
; [eval] last_barrier == 1
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 1))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 69 | sys__result@55@01 == 1 | live]
; [else-branch: 69 | sys__result@55@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 69 | sys__result@55@01 == 1]
; [eval] diz.demo__ar[tid]
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] tid > 0
(push) ; 19
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 70 | tid@11@01 > 0 | live]
; [else-branch: 70 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 70 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (< (- tid@11@01 1) (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 0
; [then-branch: 71 | sys__result@55@01 == 0 | dead]
; [else-branch: 71 | sys__result@55@01 != 0 | live]
(push) ; 20
; [else-branch: 71 | sys__result@55@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 72 | False | dead]
; [else-branch: 72 | True | live]
(push) ; 22
; [else-branch: 72 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 73 | False | dead]
; [else-branch: 73 | True | live]
(push) ; 22
; [else-branch: 73 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 74 | False | dead]
; [else-branch: 74 | True | live]
(push) ; 22
; [else-branch: 74 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 75 | False | dead]
; [else-branch: 75 | True | live]
(push) ; 22
; [else-branch: 75 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 76 | False | dead]
; [else-branch: 76 | True | live]
(push) ; 22
; [else-branch: 76 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 77 | True | live]
; [else-branch: 77 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 77 | True]
; [eval] gsize > 1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 78 | True | live]
; [else-branch: 78 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 78 | True]
; [eval] 0 < N
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< 0 N@62@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< 0 N@62@01))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 79 | True | live]
; [else-branch: 79 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 79 | True]
; [eval] N < gsize
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< N@62@01 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< N@62@01 gsize@10@01))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 80 | True | live]
; [else-branch: 80 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 80 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@62@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 81 | tid@11@01 < N@62@01 | live]
; [else-branch: 81 | !(tid@11@01 < N@62@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 81 | tid@11@01 < N@62@01]
; [eval] demo__bin(N, tid)
(push) ; 25
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
(declare-const sys__result@69@01 Int)
(declare-const $t@70@01 $Snap)
(assert (= $t@70@01 ($Snap.combine ($Snap.first $t@70@01) ($Snap.second $t@70@01))))
(assert (= ($Snap.first $t@70@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@70@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@70@01))
    ($Snap.second ($Snap.second $t@70@01)))))
(assert (= ($Snap.first ($Snap.second $t@70@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@70@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@70@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@70@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@70@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
(declare-const $k@71@01 $Perm)
(assert ($Perm.isReadVar $k@71@01))
(declare-const $t@72@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01))
    (Seq_equal $t@72@01 $t@58@01))
  (=>
    (< $Perm.No $k@71@01)
    (Seq_equal
      $t@72@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01)))
(assert (<= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@72@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))
(declare-const $k@73@01 $Perm)
(assert ($Perm.isReadVar $k@73@01))
(declare-const $t@74@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01))
    (Seq_equal $t@74@01 $t@60@01))
  (=>
    (< $Perm.No $k@73@01)
    (Seq_equal
      $t@74@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01)))
(assert (<= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@74@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@72@01 $t@58@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@74@01 $t@60@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 2))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (= sys__result@69@01 2)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 82 | sys__result@69@01 == 2 | live]
; [else-branch: 82 | sys__result@69@01 != 2 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 82 | sys__result@69@01 == 2]
(assert (= sys__result@69@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@72@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@74@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= (Seq_index $t@72@01 tid@11@01) (Seq_index $t@74@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@74@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 1))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 83 | sys__result@69@01 == 1 | dead]
; [else-branch: 83 | sys__result@69@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 83 | sys__result@69@01 != 1]
(assert (not (= sys__result@69@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 84 | sys__result@69@01 == 0 | dead]
; [else-branch: 84 | sys__result@69@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 84 | sys__result@69@01 != 0]
(assert (not (= sys__result@69@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 85 | False | dead]
; [else-branch: 85 | True | live]
(push) ; 25
; [else-branch: 85 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 86 | False | dead]
; [else-branch: 86 | True | live]
(push) ; 25
; [else-branch: 86 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 87 | False | dead]
; [else-branch: 87 | True | live]
(push) ; 25
; [else-branch: 87 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 88 | False | dead]
; [else-branch: 88 | True | live]
(push) ; 25
; [else-branch: 88 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 89 | False | dead]
; [else-branch: 89 | True | live]
(push) ; 25
; [else-branch: 89 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 90 | True | live]
; [else-branch: 90 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 90 | True]
; [eval] gsize > 1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 91 | True | live]
; [else-branch: 91 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 91 | True]
; [eval] 0 < N
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 92 | True | live]
; [else-branch: 92 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 92 | True]
; [eval] N < gsize
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 93 | True | live]
; [else-branch: 93 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 93 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@62@01))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 94 | tid@11@01 < N@62@01 | live]
; [else-branch: 94 | !(tid@11@01 < N@62@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 94 | tid@11@01 < N@62@01]
; [eval] demo__bin(N, tid)
(push) ; 28
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@62@01 tid@11@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@75@01 $Perm)
(assert ($Perm.isReadVar $k@75@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@75@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@75@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@75@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@75@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@76@01 $Perm)
(assert ($Perm.isReadVar $k@76@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@76@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@76@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@76@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@76@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 95 | False | live]
; [else-branch: 95 | True | live]
(push) ; 25
; [then-branch: 95 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 95 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 96 | sys__result@69@01 == 0 | live]
; [else-branch: 96 | sys__result@69@01 != 0 | live]
(push) ; 27
; [then-branch: 96 | sys__result@69@01 == 0]
(assert (= sys__result@69@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 96 | sys__result@69@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(push) ; 24
(assert (not (or (= sys__result@69@01 0) (= sys__result@69@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@69@01 0) (= sys__result@69@01 2)))
; [eval] __last_barrier == 2
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 2))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 97 | sys__result@69@01 == 2 | live]
; [else-branch: 97 | sys__result@69@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 97 | sys__result@69@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@74@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] __last_barrier == 1
; [then-branch: 98 | sys__result@69@01 == 1 | dead]
; [else-branch: 98 | sys__result@69@01 != 1 | live]
(push) ; 25
; [else-branch: 98 | sys__result@69@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 99 | sys__result@69@01 == 0 | dead]
; [else-branch: 99 | sys__result@69@01 != 0 | live]
(push) ; 26
; [else-branch: 99 | sys__result@69@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@62@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 100 | tid@11@01 < N@62@01 | live]
; [else-branch: 100 | !(tid@11@01 < N@62@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 100 | tid@11@01 < N@62@01]
; [eval] demo__bin(N, tid)
(push) ; 29
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(pop) ; 29
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 82 | sys__result@69@01 != 2]
(assert (not (= sys__result@69@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 1))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= sys__result@69@01 1)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 101 | sys__result@69@01 == 1 | live]
; [else-branch: 101 | sys__result@69@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 101 | sys__result@69@01 == 1]
(assert (= sys__result@69@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@72@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 102 | tid@11@01 > 0 | live]
; [else-branch: 102 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 102 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 24
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< (- tid@11@01 1) (Seq_length $t@74@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@72@01 tid@11@01) (Seq_index $t@74@01 (- tid@11@01 1)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@74@01 (- tid@11@01 1)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 103 | sys__result@69@01 == 0 | dead]
; [else-branch: 103 | sys__result@69@01 != 0 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 103 | sys__result@69@01 != 0]
(assert (not (= sys__result@69@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@69@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 104 | False | dead]
; [else-branch: 104 | True | live]
(push) ; 26
; [else-branch: 104 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 105 | False | dead]
; [else-branch: 105 | True | live]
(push) ; 26
; [else-branch: 105 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 106 | False | dead]
; [else-branch: 106 | True | live]
(push) ; 26
; [else-branch: 106 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 107 | False | dead]
; [else-branch: 107 | True | live]
(push) ; 26
; [else-branch: 107 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 108 | False | dead]
; [else-branch: 108 | True | live]
(push) ; 26
; [else-branch: 108 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 109 | True | dead]
; [else-branch: 109 | False | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 109 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 110 | True | dead]
; [else-branch: 110 | False | live]
(push) ; 26
; [else-branch: 110 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 111 | True | dead]
; [else-branch: 111 | False | live]
(push) ; 26
; [else-branch: 111 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 112 | True | dead]
; [else-branch: 112 | False | live]
(push) ; 26
; [else-branch: 112 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@77@01 $Perm)
(assert ($Perm.isReadVar $k@77@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@77@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@77@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@77@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@77@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const $k@78@01 $Perm)
(assert ($Perm.isReadVar $k@78@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@78@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@78@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@78@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@78@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 113 | False | live]
; [else-branch: 113 | True | live]
(push) ; 26
; [then-branch: 113 | False]
(pop) ; 26
(push) ; 26
; [else-branch: 113 | True]
; [eval] __last_barrier == 0
(push) ; 27
; [then-branch: 114 | sys__result@69@01 == 0 | live]
; [else-branch: 114 | sys__result@69@01 != 0 | live]
(push) ; 28
; [then-branch: 114 | sys__result@69@01 == 0]
(assert (= sys__result@69@01 0))
(pop) ; 28
(push) ; 28
; [else-branch: 114 | sys__result@69@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(push) ; 25
(assert (not (or (= sys__result@69@01 0) (= sys__result@69@01 2))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@69@01 0) (= sys__result@69@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 115 | sys__result@69@01 == 2 | dead]
; [else-branch: 115 | sys__result@69@01 != 2 | live]
(push) ; 25
; [else-branch: 115 | sys__result@69@01 != 2]
; [eval] __last_barrier == 1
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 1))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 116 | sys__result@69@01 == 1 | dead]
; [else-branch: 116 | sys__result@69@01 != 1 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 116 | sys__result@69@01 != 1]
(assert (not (= sys__result@69@01 1)))
; [eval] __last_barrier == 0
; [then-branch: 117 | sys__result@69@01 == 0 | dead]
; [else-branch: 117 | sys__result@69@01 != 0 | live]
(push) ; 27
; [else-branch: 117 | sys__result@69@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@62@01))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 118 | tid@11@01 < N@62@01 | dead]
; [else-branch: 118 | !(tid@11@01 < N@62@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 118 | !(tid@11@01 < N@62@01)]
(assert (not (< tid@11@01 N@62@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (not (< tid@11@01 N@62@01)))
(push) ; 28
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  1))
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 101 | sys__result@69@01 != 1]
(assert (not (= sys__result@69@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (= sys__result@69@01 0)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 119 | sys__result@69@01 == 0 | live]
; [else-branch: 119 | sys__result@69@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 119 | sys__result@69@01 == 0]
(assert (= sys__result@69@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@72@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@74@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@72@01 tid@11@01) (Seq_index $t@74@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@74@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@69@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 120 | False | dead]
; [else-branch: 120 | True | live]
(push) ; 25
; [else-branch: 120 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 121 | False | dead]
; [else-branch: 121 | True | live]
(push) ; 25
; [else-branch: 121 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 122 | False | dead]
; [else-branch: 122 | True | live]
(push) ; 25
; [else-branch: 122 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 123 | False | dead]
; [else-branch: 123 | True | live]
(push) ; 25
; [else-branch: 123 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 124 | False | dead]
; [else-branch: 124 | True | live]
(push) ; 25
; [else-branch: 124 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 125 | True | dead]
; [else-branch: 125 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 125 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 126 | True | dead]
; [else-branch: 126 | False | live]
(push) ; 25
; [else-branch: 126 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 127 | True | dead]
; [else-branch: 127 | False | live]
(push) ; 25
; [else-branch: 127 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 128 | True | dead]
; [else-branch: 128 | False | live]
(push) ; 25
; [else-branch: 128 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@79@01 $Perm)
(assert ($Perm.isReadVar $k@79@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@79@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@79@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@79@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@79@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@80@01 $Perm)
(assert ($Perm.isReadVar $k@80@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@80@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@80@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@80@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@80@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 129 | False | live]
; [else-branch: 129 | True | live]
(push) ; 25
; [then-branch: 129 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 129 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 130 | sys__result@69@01 == 0 | live]
; [else-branch: 130 | sys__result@69@01 != 0 | live]
(push) ; 27
; [then-branch: 130 | sys__result@69@01 == 0]
(pop) ; 27
(push) ; 27
; [else-branch: 130 | sys__result@69@01 != 0]
(assert (not (= sys__result@69@01 0)))
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(push) ; 24
(assert (not (or (= sys__result@69@01 0) (= sys__result@69@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@69@01 0) (= sys__result@69@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 131 | sys__result@69@01 == 2 | dead]
; [else-branch: 131 | sys__result@69@01 != 2 | live]
(push) ; 24
; [else-branch: 131 | sys__result@69@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 132 | sys__result@69@01 == 1 | dead]
; [else-branch: 132 | sys__result@69@01 != 1 | live]
(push) ; 25
; [else-branch: 132 | sys__result@69@01 != 1]
; [eval] __last_barrier == 0
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@69@01 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 133 | sys__result@69@01 == 0 | dead]
; [else-branch: 133 | sys__result@69@01 != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 133 | sys__result@69@01 != 0]
(assert (not (= sys__result@69@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@62@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 134 | tid@11@01 < N@62@01 | dead]
; [else-branch: 134 | !(tid@11@01 < N@62@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 134 | !(tid@11@01 < N@62@01)]
(assert (not (< tid@11@01 N@62@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (< tid@11@01 N@62@01)))
(push) ; 27
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  1))
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(push) ; 23
; [else-branch: 119 | sys__result@69@01 != 0]
(assert (not (= sys__result@69@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@69@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 135 | False | dead]
; [else-branch: 135 | True | live]
(push) ; 25
; [else-branch: 135 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 136 | False | dead]
; [else-branch: 136 | True | live]
(push) ; 25
; [else-branch: 136 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 137 | False | dead]
; [else-branch: 137 | True | live]
(push) ; 25
; [else-branch: 137 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 138 | False | dead]
; [else-branch: 138 | True | live]
(push) ; 25
; [else-branch: 138 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 139 | False | dead]
; [else-branch: 139 | True | live]
(push) ; 25
; [else-branch: 139 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 140 | True | dead]
; [else-branch: 140 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 140 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 141 | True | dead]
; [else-branch: 141 | False | live]
(push) ; 25
; [else-branch: 141 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 142 | True | dead]
; [else-branch: 142 | False | live]
(push) ; 25
; [else-branch: 142 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@70@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 143 | True | dead]
; [else-branch: 143 | False | live]
(push) ; 25
; [else-branch: 143 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@81@01 $Perm)
(assert ($Perm.isReadVar $k@81@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@81@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@81@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@81@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01) $k@81@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@82@01 $Perm)
(assert ($Perm.isReadVar $k@82@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@82@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@82@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@82@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01) $k@82@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@68@01) $k@73@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 144 | False | live]
; [else-branch: 144 | True | live]
(push) ; 25
; [then-branch: 144 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 144 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 145 | sys__result@69@01 == 0 | live]
; [else-branch: 145 | sys__result@69@01 != 0 | live]
(push) ; 27
; [then-branch: 145 | sys__result@69@01 == 0]
(assert (= sys__result@69@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 145 | sys__result@69@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@69@01 0)) (= sys__result@69@01 0)))
(push) ; 24
(assert (not (or (= sys__result@69@01 0) (= sys__result@69@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@69@01 0) (= sys__result@69@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 146 | sys__result@69@01 == 2 | dead]
; [else-branch: 146 | sys__result@69@01 != 2 | live]
(push) ; 24
; [else-branch: 146 | sys__result@69@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 147 | sys__result@69@01 == 1 | dead]
; [else-branch: 147 | sys__result@69@01 != 1 | live]
(push) ; 25
; [else-branch: 147 | sys__result@69@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 148 | sys__result@69@01 == 0 | dead]
; [else-branch: 148 | sys__result@69@01 != 0 | live]
(push) ; 26
; [else-branch: 148 | sys__result@69@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@67@01) $k@71@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@72@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 64 | !(0 < tid@11@01 && tid@11@01 < N@62@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@62@01))))
(pop) ; 16
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 16
; [then-branch: 149 | !(0 < tid@11@01) | live]
; [else-branch: 149 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 149 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 149 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@62@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@62@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 150 | !(0 < tid@11@01 && tid@11@01 < N@62@01) | live]
; [else-branch: 150 | 0 < tid@11@01 && tid@11@01 < N@62@01 | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 150 | !(0 < tid@11@01 && tid@11@01 < N@62@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@62@01))))
; [exec]
; __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 2, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 17
; [then-branch: 151 | False | dead]
; [else-branch: 151 | True | live]
(push) ; 18
; [else-branch: 151 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 152 | True | live]
; [else-branch: 152 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 152 | True]
; [eval] false || last_barrier == 1
(push) ; 19
; [then-branch: 153 | False | live]
; [else-branch: 153 | True | live]
(push) ; 20
; [then-branch: 153 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 153 | True]
; [eval] last_barrier == 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@83@01 $Perm)
(assert ($Perm.isReadVar $k@83@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@46@01 $k@53@01) $k@57@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@83@01 (+ (- $k@46@01 $k@53@01) $k@57@01)))
(assert (<= $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01)))
(assert (<= (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const $k@84@01 $Perm)
(assert ($Perm.isReadVar $k@84@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@47@01 $k@54@01) $k@59@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@84@01 (+ (- $k@47@01 $k@54@01) $k@59@01)))
(assert (<= $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01)))
(assert (<= (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 154 | sys__result@55@01 == 2 | dead]
; [else-branch: 154 | sys__result@55@01 != 2 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 154 | sys__result@55@01 != 2]
; [eval] last_barrier == 1
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 1))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 155 | sys__result@55@01 == 1 | live]
; [else-branch: 155 | sys__result@55@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 155 | sys__result@55@01 == 1]
; [eval] diz.demo__ar[tid]
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] tid > 0
(push) ; 19
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 156 | tid@11@01 > 0 | live]
; [else-branch: 156 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 156 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (< (- tid@11@01 1) (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 0
; [then-branch: 157 | sys__result@55@01 == 0 | dead]
; [else-branch: 157 | sys__result@55@01 != 0 | live]
(push) ; 20
; [else-branch: 157 | sys__result@55@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 158 | False | dead]
; [else-branch: 158 | True | live]
(push) ; 22
; [else-branch: 158 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 159 | False | dead]
; [else-branch: 159 | True | live]
(push) ; 22
; [else-branch: 159 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 160 | False | dead]
; [else-branch: 160 | True | live]
(push) ; 22
; [else-branch: 160 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 161 | False | dead]
; [else-branch: 161 | True | live]
(push) ; 22
; [else-branch: 161 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 162 | False | dead]
; [else-branch: 162 | True | live]
(push) ; 22
; [else-branch: 162 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 163 | True | live]
; [else-branch: 163 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 163 | True]
; [eval] gsize > 1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 164 | True | live]
; [else-branch: 164 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 164 | True]
; [eval] 0 < N
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< 0 N@62@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< 0 N@62@01))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 165 | True | live]
; [else-branch: 165 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 165 | True]
; [eval] N < gsize
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< N@62@01 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< N@62@01 gsize@10@01))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 166 | True | live]
; [else-branch: 166 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 166 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@62@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 167 | tid@11@01 < N@62@01 | dead]
; [else-branch: 167 | !(tid@11@01 < N@62@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 167 | !(tid@11@01 < N@62@01)]
(assert (not (< tid@11@01 N@62@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not (< tid@11@01 N@62@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (not (< tid@11@01 N@62@01)))
(push) ; 21
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  1))
(declare-const sys__result@85@01 Int)
(declare-const $t@86@01 $Snap)
(assert (= $t@86@01 ($Snap.combine ($Snap.first $t@86@01) ($Snap.second $t@86@01))))
(assert (= ($Snap.first $t@86@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@86@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@86@01))
    ($Snap.second ($Snap.second $t@86@01)))))
(assert (= ($Snap.first ($Snap.second $t@86@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@86@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@86@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@86@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@86@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
(declare-const $k@87@01 $Perm)
(assert ($Perm.isReadVar $k@87@01))
(declare-const $t@88@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01))
    (Seq_equal $t@88@01 $t@58@01))
  (=>
    (< $Perm.No $k@87@01)
    (Seq_equal
      $t@88@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01)))
(assert (<= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@88@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
(declare-const $k@89@01 $Perm)
(assert ($Perm.isReadVar $k@89@01))
(declare-const $t@90@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01))
    (Seq_equal $t@90@01 $t@60@01))
  (=>
    (< $Perm.No $k@89@01)
    (Seq_equal
      $t@90@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01)))
(assert (<= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@90@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@88@01 $t@58@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@90@01 $t@60@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 2))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (= sys__result@85@01 2)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 168 | sys__result@85@01 == 2 | live]
; [else-branch: 168 | sys__result@85@01 != 2 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 168 | sys__result@85@01 == 2]
(assert (= sys__result@85@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@88@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@90@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= (Seq_index $t@88@01 tid@11@01) (Seq_index $t@90@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@90@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 1))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 169 | sys__result@85@01 == 1 | dead]
; [else-branch: 169 | sys__result@85@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 169 | sys__result@85@01 != 1]
(assert (not (= sys__result@85@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 170 | sys__result@85@01 == 0 | dead]
; [else-branch: 170 | sys__result@85@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 170 | sys__result@85@01 != 0]
(assert (not (= sys__result@85@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 171 | False | dead]
; [else-branch: 171 | True | live]
(push) ; 25
; [else-branch: 171 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 172 | False | dead]
; [else-branch: 172 | True | live]
(push) ; 25
; [else-branch: 172 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 173 | False | dead]
; [else-branch: 173 | True | live]
(push) ; 25
; [else-branch: 173 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 174 | False | dead]
; [else-branch: 174 | True | live]
(push) ; 25
; [else-branch: 174 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 175 | False | dead]
; [else-branch: 175 | True | live]
(push) ; 25
; [else-branch: 175 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 176 | True | live]
; [else-branch: 176 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 176 | True]
; [eval] gsize > 1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 177 | True | live]
; [else-branch: 177 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 177 | True]
; [eval] 0 < N
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 178 | True | live]
; [else-branch: 178 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 178 | True]
; [eval] N < gsize
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 179 | True | live]
; [else-branch: 179 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 179 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 26
; [then-branch: 180 | tid@11@01 < N@62@01 | dead]
; [else-branch: 180 | !(tid@11@01 < N@62@01) | live]
(push) ; 27
; [else-branch: 180 | !(tid@11@01 < N@62@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  1))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@91@01 $Perm)
(assert ($Perm.isReadVar $k@91@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@91@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@91@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@91@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@91@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@92@01 $Perm)
(assert ($Perm.isReadVar $k@92@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@92@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@92@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@92@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@92@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 181 | False | live]
; [else-branch: 181 | True | live]
(push) ; 25
; [then-branch: 181 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 181 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 182 | sys__result@85@01 == 0 | live]
; [else-branch: 182 | sys__result@85@01 != 0 | live]
(push) ; 27
; [then-branch: 182 | sys__result@85@01 == 0]
(assert (= sys__result@85@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 182 | sys__result@85@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(push) ; 24
(assert (not (or (= sys__result@85@01 0) (= sys__result@85@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@85@01 0) (= sys__result@85@01 2)))
; [eval] __last_barrier == 2
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 2))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 183 | sys__result@85@01 == 2 | live]
; [else-branch: 183 | sys__result@85@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 183 | sys__result@85@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@90@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] __last_barrier == 1
; [then-branch: 184 | sys__result@85@01 == 1 | dead]
; [else-branch: 184 | sys__result@85@01 != 1 | live]
(push) ; 25
; [else-branch: 184 | sys__result@85@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 185 | sys__result@85@01 == 0 | dead]
; [else-branch: 185 | sys__result@85@01 != 0 | live]
(push) ; 26
; [else-branch: 185 | sys__result@85@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
; [then-branch: 186 | tid@11@01 < N@62@01 | dead]
; [else-branch: 186 | !(tid@11@01 < N@62@01) | live]
(push) ; 28
; [else-branch: 186 | !(tid@11@01 < N@62@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 168 | sys__result@85@01 != 2]
(assert (not (= sys__result@85@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 1))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= sys__result@85@01 1)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 187 | sys__result@85@01 == 1 | live]
; [else-branch: 187 | sys__result@85@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 187 | sys__result@85@01 == 1]
(assert (= sys__result@85@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@88@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 188 | tid@11@01 > 0 | live]
; [else-branch: 188 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 188 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 24
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< (- tid@11@01 1) (Seq_length $t@90@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@88@01 tid@11@01) (Seq_index $t@90@01 (- tid@11@01 1)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@90@01 (- tid@11@01 1)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 189 | sys__result@85@01 == 0 | dead]
; [else-branch: 189 | sys__result@85@01 != 0 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 189 | sys__result@85@01 != 0]
(assert (not (= sys__result@85@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@85@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 190 | False | dead]
; [else-branch: 190 | True | live]
(push) ; 26
; [else-branch: 190 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 191 | False | dead]
; [else-branch: 191 | True | live]
(push) ; 26
; [else-branch: 191 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 192 | False | dead]
; [else-branch: 192 | True | live]
(push) ; 26
; [else-branch: 192 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 193 | False | dead]
; [else-branch: 193 | True | live]
(push) ; 26
; [else-branch: 193 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 194 | False | dead]
; [else-branch: 194 | True | live]
(push) ; 26
; [else-branch: 194 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 195 | True | dead]
; [else-branch: 195 | False | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 195 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 196 | True | dead]
; [else-branch: 196 | False | live]
(push) ; 26
; [else-branch: 196 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 197 | True | dead]
; [else-branch: 197 | False | live]
(push) ; 26
; [else-branch: 197 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 198 | True | dead]
; [else-branch: 198 | False | live]
(push) ; 26
; [else-branch: 198 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@93@01 $Perm)
(assert ($Perm.isReadVar $k@93@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@93@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@93@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@93@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@93@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const $k@94@01 $Perm)
(assert ($Perm.isReadVar $k@94@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@94@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@94@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@94@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@94@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 199 | False | live]
; [else-branch: 199 | True | live]
(push) ; 26
; [then-branch: 199 | False]
(pop) ; 26
(push) ; 26
; [else-branch: 199 | True]
; [eval] __last_barrier == 0
(push) ; 27
; [then-branch: 200 | sys__result@85@01 == 0 | live]
; [else-branch: 200 | sys__result@85@01 != 0 | live]
(push) ; 28
; [then-branch: 200 | sys__result@85@01 == 0]
(assert (= sys__result@85@01 0))
(pop) ; 28
(push) ; 28
; [else-branch: 200 | sys__result@85@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(push) ; 25
(assert (not (or (= sys__result@85@01 0) (= sys__result@85@01 2))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@85@01 0) (= sys__result@85@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 201 | sys__result@85@01 == 2 | dead]
; [else-branch: 201 | sys__result@85@01 != 2 | live]
(push) ; 25
; [else-branch: 201 | sys__result@85@01 != 2]
; [eval] __last_barrier == 1
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 1))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 202 | sys__result@85@01 == 1 | dead]
; [else-branch: 202 | sys__result@85@01 != 1 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 202 | sys__result@85@01 != 1]
(assert (not (= sys__result@85@01 1)))
; [eval] __last_barrier == 0
; [then-branch: 203 | sys__result@85@01 == 0 | dead]
; [else-branch: 203 | sys__result@85@01 != 0 | live]
(push) ; 27
; [else-branch: 203 | sys__result@85@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 28
; [then-branch: 204 | tid@11@01 < N@62@01 | dead]
; [else-branch: 204 | !(tid@11@01 < N@62@01) | live]
(push) ; 29
; [else-branch: 204 | !(tid@11@01 < N@62@01)]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(push) ; 28
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  1))
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 187 | sys__result@85@01 != 1]
(assert (not (= sys__result@85@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (= sys__result@85@01 0)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 205 | sys__result@85@01 == 0 | live]
; [else-branch: 205 | sys__result@85@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 205 | sys__result@85@01 == 0]
(assert (= sys__result@85@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@88@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@90@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@88@01 tid@11@01) (Seq_index $t@90@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@90@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@85@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 206 | False | dead]
; [else-branch: 206 | True | live]
(push) ; 25
; [else-branch: 206 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 207 | False | dead]
; [else-branch: 207 | True | live]
(push) ; 25
; [else-branch: 207 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 208 | False | dead]
; [else-branch: 208 | True | live]
(push) ; 25
; [else-branch: 208 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 209 | False | dead]
; [else-branch: 209 | True | live]
(push) ; 25
; [else-branch: 209 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 210 | False | dead]
; [else-branch: 210 | True | live]
(push) ; 25
; [else-branch: 210 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 211 | True | dead]
; [else-branch: 211 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 211 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 212 | True | dead]
; [else-branch: 212 | False | live]
(push) ; 25
; [else-branch: 212 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 213 | True | dead]
; [else-branch: 213 | False | live]
(push) ; 25
; [else-branch: 213 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 214 | True | dead]
; [else-branch: 214 | False | live]
(push) ; 25
; [else-branch: 214 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@95@01 $Perm)
(assert ($Perm.isReadVar $k@95@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@95@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@95@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@95@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@95@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@96@01 $Perm)
(assert ($Perm.isReadVar $k@96@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@96@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@96@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@96@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@96@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 215 | False | live]
; [else-branch: 215 | True | live]
(push) ; 25
; [then-branch: 215 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 215 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 216 | sys__result@85@01 == 0 | live]
; [else-branch: 216 | sys__result@85@01 != 0 | live]
(push) ; 27
; [then-branch: 216 | sys__result@85@01 == 0]
(pop) ; 27
(push) ; 27
; [else-branch: 216 | sys__result@85@01 != 0]
(assert (not (= sys__result@85@01 0)))
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(push) ; 24
(assert (not (or (= sys__result@85@01 0) (= sys__result@85@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@85@01 0) (= sys__result@85@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 217 | sys__result@85@01 == 2 | dead]
; [else-branch: 217 | sys__result@85@01 != 2 | live]
(push) ; 24
; [else-branch: 217 | sys__result@85@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 218 | sys__result@85@01 == 1 | dead]
; [else-branch: 218 | sys__result@85@01 != 1 | live]
(push) ; 25
; [else-branch: 218 | sys__result@85@01 != 1]
; [eval] __last_barrier == 0
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@85@01 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 219 | sys__result@85@01 == 0 | dead]
; [else-branch: 219 | sys__result@85@01 != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 219 | sys__result@85@01 != 0]
(assert (not (= sys__result@85@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
; [then-branch: 220 | tid@11@01 < N@62@01 | dead]
; [else-branch: 220 | !(tid@11@01 < N@62@01) | live]
(push) ; 28
; [else-branch: 220 | !(tid@11@01 < N@62@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  1))
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(push) ; 23
; [else-branch: 205 | sys__result@85@01 != 0]
(assert (not (= sys__result@85@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@85@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 221 | False | dead]
; [else-branch: 221 | True | live]
(push) ; 25
; [else-branch: 221 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 222 | False | dead]
; [else-branch: 222 | True | live]
(push) ; 25
; [else-branch: 222 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 223 | False | dead]
; [else-branch: 223 | True | live]
(push) ; 25
; [else-branch: 223 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 224 | False | dead]
; [else-branch: 224 | True | live]
(push) ; 25
; [else-branch: 224 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 225 | False | dead]
; [else-branch: 225 | True | live]
(push) ; 25
; [else-branch: 225 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 226 | True | dead]
; [else-branch: 226 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 226 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 227 | True | dead]
; [else-branch: 227 | False | live]
(push) ; 25
; [else-branch: 227 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 228 | True | dead]
; [else-branch: 228 | False | live]
(push) ; 25
; [else-branch: 228 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@86@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 229 | True | dead]
; [else-branch: 229 | False | live]
(push) ; 25
; [else-branch: 229 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@97@01 $Perm)
(assert ($Perm.isReadVar $k@97@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@97@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@97@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@97@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01) $k@97@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@98@01 $Perm)
(assert ($Perm.isReadVar $k@98@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@98@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@98@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@98@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01) $k@98@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@84@01) $k@89@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 230 | False | live]
; [else-branch: 230 | True | live]
(push) ; 25
; [then-branch: 230 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 230 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 231 | sys__result@85@01 == 0 | live]
; [else-branch: 231 | sys__result@85@01 != 0 | live]
(push) ; 27
; [then-branch: 231 | sys__result@85@01 == 0]
(assert (= sys__result@85@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 231 | sys__result@85@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@85@01 0)) (= sys__result@85@01 0)))
(push) ; 24
(assert (not (or (= sys__result@85@01 0) (= sys__result@85@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@85@01 0) (= sys__result@85@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 232 | sys__result@85@01 == 2 | dead]
; [else-branch: 232 | sys__result@85@01 != 2 | live]
(push) ; 24
; [else-branch: 232 | sys__result@85@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 233 | sys__result@85@01 == 1 | dead]
; [else-branch: 233 | sys__result@85@01 != 1 | live]
(push) ; 25
; [else-branch: 233 | sys__result@85@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 234 | sys__result@85@01 == 0 | dead]
; [else-branch: 234 | sys__result@85@01 != 0 | live]
(push) ; 26
; [else-branch: 234 | sys__result@85@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@83@01) $k@87@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@88@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 150 | 0 < tid@11@01 && tid@11@01 < N@62@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@62@01)))
(pop) ; 16
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 49 | !(tid@11@01 > 0)]
(assert (not (> tid@11@01 0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 235 | sys__result@55@01 == 0 | dead]
; [else-branch: 235 | sys__result@55@01 != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 235 | sys__result@55@01 != 0]
(assert (not (= sys__result@55@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 236 | True | live]
; [else-branch: 236 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 236 | True]
; [eval] gsize > 1
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 237 | True | live]
; [else-branch: 237 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 237 | True]
; [eval] 0 < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 238 | True | live]
; [else-branch: 238 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 238 | True]
; [eval] N < gsize
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 239 | True | live]
; [else-branch: 239 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 239 | True]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 18
; [then-branch: 240 | !(0 < tid@11@01) | live]
; [else-branch: 240 | 0 < tid@11@01 | live]
(push) ; 19
; [then-branch: 240 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 240 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid <= N
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 241 | 0 < tid@11@01 && tid@11@01 <= N@39@01 | dead]
; [else-branch: 241 | !(0 < tid@11@01 && tid@11@01 <= N@39@01) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 241 | !(0 < tid@11@01 && tid@11@01 <= N@39@01)]
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (or (< 0 tid@11@01) (not (< 0 tid@11@01)))
  (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 242 | True | live]
; [else-branch: 242 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 242 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 243 | tid@11@01 < N@39@01 | live]
; [else-branch: 243 | !(tid@11@01 < N@39@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 243 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 20
; [eval] N >= 0
(push) ; 21
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 21
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (< tid@11@01 N@39@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (< tid@11@01 N@39@01))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 244 | False | dead]
; [else-branch: 244 | True | live]
(push) ; 17
; [else-branch: 244 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 245 | False | dead]
; [else-branch: 245 | True | live]
(push) ; 17
; [else-branch: 245 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 246 | False | dead]
; [else-branch: 246 | True | live]
(push) ; 17
; [else-branch: 246 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 247 | False | dead]
; [else-branch: 247 | True | live]
(push) ; 17
; [else-branch: 247 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@99@01 Int)
(assert (= N@99@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 16
; [then-branch: 248 | !(0 < tid@11@01) | live]
; [else-branch: 248 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 248 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 248 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@99@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 249 | 0 < tid@11@01 && tid@11@01 < N@99@01 | dead]
; [else-branch: 249 | !(0 < tid@11@01 && tid@11@01 < N@99@01) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 249 | !(0 < tid@11@01 && tid@11@01 < N@99@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@99@01))))
(pop) ; 16
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 16
; [then-branch: 250 | !(0 < tid@11@01) | live]
; [else-branch: 250 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 250 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 250 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@99@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@99@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 251 | !(0 < tid@11@01 && tid@11@01 < N@99@01) | live]
; [else-branch: 251 | 0 < tid@11@01 && tid@11@01 < N@99@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 251 | !(0 < tid@11@01 && tid@11@01 < N@99@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@99@01))))
; [exec]
; __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 2, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 17
; [then-branch: 252 | False | dead]
; [else-branch: 252 | True | live]
(push) ; 18
; [else-branch: 252 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 253 | True | live]
; [else-branch: 253 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 253 | True]
; [eval] false || last_barrier == 1
(push) ; 19
; [then-branch: 254 | False | live]
; [else-branch: 254 | True | live]
(push) ; 20
; [then-branch: 254 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 254 | True]
; [eval] last_barrier == 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@100@01 $Perm)
(assert ($Perm.isReadVar $k@100@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@46@01 $k@53@01) $k@57@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@100@01 (+ (- $k@46@01 $k@53@01) $k@57@01)))
(assert (<= $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01)))
(assert (<= (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const $k@101@01 $Perm)
(assert ($Perm.isReadVar $k@101@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@47@01 $k@54@01) $k@59@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@101@01 (+ (- $k@47@01 $k@54@01) $k@59@01)))
(assert (<= $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01)))
(assert (<= (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 255 | sys__result@55@01 == 2 | dead]
; [else-branch: 255 | sys__result@55@01 != 2 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 255 | sys__result@55@01 != 2]
; [eval] last_barrier == 1
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 1))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 256 | sys__result@55@01 == 1 | live]
; [else-branch: 256 | sys__result@55@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 256 | sys__result@55@01 == 1]
; [eval] diz.demo__ar[tid]
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] tid > 0
; [then-branch: 257 | tid@11@01 > 0 | dead]
; [else-branch: 257 | !(tid@11@01 > 0) | live]
(push) ; 19
; [else-branch: 257 | !(tid@11@01 > 0)]
; [eval] last_barrier == 0
; [then-branch: 258 | sys__result@55@01 == 0 | dead]
; [else-branch: 258 | sys__result@55@01 != 0 | live]
(push) ; 20
; [else-branch: 258 | sys__result@55@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 259 | False | dead]
; [else-branch: 259 | True | live]
(push) ; 22
; [else-branch: 259 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 260 | False | dead]
; [else-branch: 260 | True | live]
(push) ; 22
; [else-branch: 260 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 261 | False | dead]
; [else-branch: 261 | True | live]
(push) ; 22
; [else-branch: 261 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 262 | False | dead]
; [else-branch: 262 | True | live]
(push) ; 22
; [else-branch: 262 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 263 | False | dead]
; [else-branch: 263 | True | live]
(push) ; 22
; [else-branch: 263 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 264 | True | live]
; [else-branch: 264 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 264 | True]
; [eval] gsize > 1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 265 | True | live]
; [else-branch: 265 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 265 | True]
; [eval] 0 < N
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< 0 N@99@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< 0 N@99@01))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 266 | True | live]
; [else-branch: 266 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 266 | True]
; [eval] N < gsize
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< N@99@01 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< N@99@01 gsize@10@01))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 267 | True | live]
; [else-branch: 267 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 267 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@99@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< tid@11@01 N@99@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 268 | tid@11@01 < N@99@01 | live]
; [else-branch: 268 | !(tid@11@01 < N@99@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 268 | tid@11@01 < N@99@01]
(assert (< tid@11@01 N@99@01))
; [eval] demo__bin(N, tid)
(push) ; 25
; [eval] N >= 0
(push) ; 26
(assert (not (>= N@99@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (>= N@99@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 26
(assert (not (<= tid@11@01 N@99@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@99@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (>= N@99@01 0)
  (<= tid@11@01 N@99@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (=>
  (< tid@11@01 N@99@01)
  (and
    (< tid@11@01 N@99@01)
    (>= N@99@01 0)
    (<= tid@11@01 N@99@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))))
(assert (< tid@11@01 N@99@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (and
  (=>
    (< tid@11@01 N@99@01)
    (and
      (< tid@11@01 N@99@01)
      (>= N@99@01 0)
      (<= tid@11@01 N@99@01)
      (demo__bin%precondition ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01)))
  (< tid@11@01 N@99@01)))
(push) ; 21
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01)))
(declare-const sys__result@102@01 Int)
(declare-const $t@103@01 $Snap)
(assert (= $t@103@01 ($Snap.combine ($Snap.first $t@103@01) ($Snap.second $t@103@01))))
(assert (= ($Snap.first $t@103@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@103@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@103@01))
    ($Snap.second ($Snap.second $t@103@01)))))
(assert (= ($Snap.first ($Snap.second $t@103@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@103@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@103@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@103@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@103@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
(declare-const $k@104@01 $Perm)
(assert ($Perm.isReadVar $k@104@01))
(declare-const $t@105@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01))
    (Seq_equal $t@105@01 $t@58@01))
  (=>
    (< $Perm.No $k@104@01)
    (Seq_equal
      $t@105@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01)))
(assert (<= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@105@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
(declare-const $k@106@01 $Perm)
(assert ($Perm.isReadVar $k@106@01))
(declare-const $t@107@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01))
    (Seq_equal $t@107@01 $t@60@01))
  (=>
    (< $Perm.No $k@106@01)
    (Seq_equal
      $t@107@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01)))
(assert (<= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@107@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@105@01 $t@58@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@107@01 $t@60@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 2))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (= sys__result@102@01 2)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 269 | sys__result@102@01 == 2 | live]
; [else-branch: 269 | sys__result@102@01 != 2 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 269 | sys__result@102@01 == 2]
(assert (= sys__result@102@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@105@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@107@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= (Seq_index $t@105@01 tid@11@01) (Seq_index $t@107@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@107@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 1))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 270 | sys__result@102@01 == 1 | dead]
; [else-branch: 270 | sys__result@102@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 270 | sys__result@102@01 != 1]
(assert (not (= sys__result@102@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 271 | sys__result@102@01 == 0 | dead]
; [else-branch: 271 | sys__result@102@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 271 | sys__result@102@01 != 0]
(assert (not (= sys__result@102@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 272 | False | dead]
; [else-branch: 272 | True | live]
(push) ; 25
; [else-branch: 272 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 273 | False | dead]
; [else-branch: 273 | True | live]
(push) ; 25
; [else-branch: 273 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 274 | False | dead]
; [else-branch: 274 | True | live]
(push) ; 25
; [else-branch: 274 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 275 | False | dead]
; [else-branch: 275 | True | live]
(push) ; 25
; [else-branch: 275 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 276 | False | dead]
; [else-branch: 276 | True | live]
(push) ; 25
; [else-branch: 276 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 277 | True | live]
; [else-branch: 277 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 277 | True]
; [eval] gsize > 1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 278 | True | live]
; [else-branch: 278 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 278 | True]
; [eval] 0 < N
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 279 | True | live]
; [else-branch: 279 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 279 | True]
; [eval] N < gsize
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 280 | True | live]
; [else-branch: 280 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 280 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@99@01))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 281 | tid@11@01 < N@99@01 | live]
; [else-branch: 281 | !(tid@11@01 < N@99@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 281 | tid@11@01 < N@99@01]
; [eval] demo__bin(N, tid)
(push) ; 28
; [eval] N >= 0
(push) ; 29
(assert (not (>= N@99@01 0)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (>= N@99@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 29
(assert (not (<= tid@11@01 N@99@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@99@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))
(pop) ; 28
; Joined path conditions
(assert (and
  (>= N@99@01 0)
  (<= tid@11@01 N@99@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (< tid@11@01 N@99@01)
  (and
    (>= N@99@01 0)
    (<= tid@11@01 N@99@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (< tid@11@01 N@99@01)
  (and
    (>= N@99@01 0)
    (<= tid@11@01 N@99@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@108@01 $Perm)
(assert ($Perm.isReadVar $k@108@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@108@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@108@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@108@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@108@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@109@01 $Perm)
(assert ($Perm.isReadVar $k@109@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@109@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@109@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@109@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@109@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 282 | False | live]
; [else-branch: 282 | True | live]
(push) ; 25
; [then-branch: 282 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 282 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 283 | sys__result@102@01 == 0 | live]
; [else-branch: 283 | sys__result@102@01 != 0 | live]
(push) ; 27
; [then-branch: 283 | sys__result@102@01 == 0]
(assert (= sys__result@102@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 283 | sys__result@102@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(push) ; 24
(assert (not (or (= sys__result@102@01 0) (= sys__result@102@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@102@01 0) (= sys__result@102@01 2)))
; [eval] __last_barrier == 2
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 2))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 284 | sys__result@102@01 == 2 | live]
; [else-branch: 284 | sys__result@102@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 284 | sys__result@102@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@107@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] __last_barrier == 1
; [then-branch: 285 | sys__result@102@01 == 1 | dead]
; [else-branch: 285 | sys__result@102@01 != 1 | live]
(push) ; 25
; [else-branch: 285 | sys__result@102@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 286 | sys__result@102@01 == 0 | dead]
; [else-branch: 286 | sys__result@102@01 != 0 | live]
(push) ; 26
; [else-branch: 286 | sys__result@102@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@99@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 287 | tid@11@01 < N@99@01 | live]
; [else-branch: 287 | !(tid@11@01 < N@99@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 287 | tid@11@01 < N@99@01]
; [eval] demo__bin(N, tid)
(push) ; 29
; [eval] N >= 0
(push) ; 30
(assert (not (>= N@99@01 0)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (>= N@99@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 30
(assert (not (<= tid@11@01 N@99@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@99@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (>= N@99@01 0)
  (<= tid@11@01 N@99@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@99@01 tid@11@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 269 | sys__result@102@01 != 2]
(assert (not (= sys__result@102@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 1))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= sys__result@102@01 1)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 288 | sys__result@102@01 == 1 | live]
; [else-branch: 288 | sys__result@102@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 288 | sys__result@102@01 == 1]
(assert (= sys__result@102@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@105@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
; [then-branch: 289 | tid@11@01 > 0 | dead]
; [else-branch: 289 | !(tid@11@01 > 0) | live]
(push) ; 23
; [else-branch: 289 | !(tid@11@01 > 0)]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 290 | sys__result@102@01 == 0 | dead]
; [else-branch: 290 | sys__result@102@01 != 0 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 290 | sys__result@102@01 != 0]
(assert (not (= sys__result@102@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@102@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 291 | False | dead]
; [else-branch: 291 | True | live]
(push) ; 26
; [else-branch: 291 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 292 | False | dead]
; [else-branch: 292 | True | live]
(push) ; 26
; [else-branch: 292 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 293 | False | dead]
; [else-branch: 293 | True | live]
(push) ; 26
; [else-branch: 293 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 294 | False | dead]
; [else-branch: 294 | True | live]
(push) ; 26
; [else-branch: 294 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 295 | False | dead]
; [else-branch: 295 | True | live]
(push) ; 26
; [else-branch: 295 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 296 | True | dead]
; [else-branch: 296 | False | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 296 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 297 | True | dead]
; [else-branch: 297 | False | live]
(push) ; 26
; [else-branch: 297 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 298 | True | dead]
; [else-branch: 298 | False | live]
(push) ; 26
; [else-branch: 298 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 299 | True | dead]
; [else-branch: 299 | False | live]
(push) ; 26
; [else-branch: 299 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@110@01 $Perm)
(assert ($Perm.isReadVar $k@110@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@110@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@110@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@110@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@110@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const $k@111@01 $Perm)
(assert ($Perm.isReadVar $k@111@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@111@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@111@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@111@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@111@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 300 | False | live]
; [else-branch: 300 | True | live]
(push) ; 26
; [then-branch: 300 | False]
(pop) ; 26
(push) ; 26
; [else-branch: 300 | True]
; [eval] __last_barrier == 0
(push) ; 27
; [then-branch: 301 | sys__result@102@01 == 0 | live]
; [else-branch: 301 | sys__result@102@01 != 0 | live]
(push) ; 28
; [then-branch: 301 | sys__result@102@01 == 0]
(assert (= sys__result@102@01 0))
(pop) ; 28
(push) ; 28
; [else-branch: 301 | sys__result@102@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(push) ; 25
(assert (not (or (= sys__result@102@01 0) (= sys__result@102@01 2))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@102@01 0) (= sys__result@102@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 302 | sys__result@102@01 == 2 | dead]
; [else-branch: 302 | sys__result@102@01 != 2 | live]
(push) ; 25
; [else-branch: 302 | sys__result@102@01 != 2]
; [eval] __last_barrier == 1
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 1))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 303 | sys__result@102@01 == 1 | dead]
; [else-branch: 303 | sys__result@102@01 != 1 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 303 | sys__result@102@01 != 1]
(assert (not (= sys__result@102@01 1)))
; [eval] __last_barrier == 0
; [then-branch: 304 | sys__result@102@01 == 0 | dead]
; [else-branch: 304 | sys__result@102@01 != 0 | live]
(push) ; 27
; [else-branch: 304 | sys__result@102@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@99@01))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 305 | tid@11@01 < N@99@01 | dead]
; [else-branch: 305 | !(tid@11@01 < N@99@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 305 | !(tid@11@01 < N@99@01)]
(assert (not (< tid@11@01 N@99@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (not (< tid@11@01 N@99@01)))
(push) ; 28
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  1))
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 288 | sys__result@102@01 != 1]
(assert (not (= sys__result@102@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (= sys__result@102@01 0)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 306 | sys__result@102@01 == 0 | live]
; [else-branch: 306 | sys__result@102@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 306 | sys__result@102@01 == 0]
(assert (= sys__result@102@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@105@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@107@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@105@01 tid@11@01) (Seq_index $t@107@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@107@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@102@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 307 | False | dead]
; [else-branch: 307 | True | live]
(push) ; 25
; [else-branch: 307 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 308 | False | dead]
; [else-branch: 308 | True | live]
(push) ; 25
; [else-branch: 308 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 309 | False | dead]
; [else-branch: 309 | True | live]
(push) ; 25
; [else-branch: 309 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 310 | False | dead]
; [else-branch: 310 | True | live]
(push) ; 25
; [else-branch: 310 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 311 | False | dead]
; [else-branch: 311 | True | live]
(push) ; 25
; [else-branch: 311 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 312 | True | dead]
; [else-branch: 312 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 312 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 313 | True | dead]
; [else-branch: 313 | False | live]
(push) ; 25
; [else-branch: 313 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 314 | True | dead]
; [else-branch: 314 | False | live]
(push) ; 25
; [else-branch: 314 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 315 | True | dead]
; [else-branch: 315 | False | live]
(push) ; 25
; [else-branch: 315 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@112@01 $Perm)
(assert ($Perm.isReadVar $k@112@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@112@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@112@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@112@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@112@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@113@01 $Perm)
(assert ($Perm.isReadVar $k@113@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@113@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@113@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@113@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@113@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 316 | False | live]
; [else-branch: 316 | True | live]
(push) ; 25
; [then-branch: 316 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 316 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 317 | sys__result@102@01 == 0 | live]
; [else-branch: 317 | sys__result@102@01 != 0 | live]
(push) ; 27
; [then-branch: 317 | sys__result@102@01 == 0]
(pop) ; 27
(push) ; 27
; [else-branch: 317 | sys__result@102@01 != 0]
(assert (not (= sys__result@102@01 0)))
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(push) ; 24
(assert (not (or (= sys__result@102@01 0) (= sys__result@102@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@102@01 0) (= sys__result@102@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 318 | sys__result@102@01 == 2 | dead]
; [else-branch: 318 | sys__result@102@01 != 2 | live]
(push) ; 24
; [else-branch: 318 | sys__result@102@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 319 | sys__result@102@01 == 1 | dead]
; [else-branch: 319 | sys__result@102@01 != 1 | live]
(push) ; 25
; [else-branch: 319 | sys__result@102@01 != 1]
; [eval] __last_barrier == 0
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@102@01 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 320 | sys__result@102@01 == 0 | dead]
; [else-branch: 320 | sys__result@102@01 != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 320 | sys__result@102@01 != 0]
(assert (not (= sys__result@102@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@99@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 321 | tid@11@01 < N@99@01 | dead]
; [else-branch: 321 | !(tid@11@01 < N@99@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 321 | !(tid@11@01 < N@99@01)]
(assert (not (< tid@11@01 N@99@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (< tid@11@01 N@99@01)))
(push) ; 27
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  1))
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(push) ; 23
; [else-branch: 306 | sys__result@102@01 != 0]
(assert (not (= sys__result@102@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@102@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 322 | False | dead]
; [else-branch: 322 | True | live]
(push) ; 25
; [else-branch: 322 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 323 | False | dead]
; [else-branch: 323 | True | live]
(push) ; 25
; [else-branch: 323 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 324 | False | dead]
; [else-branch: 324 | True | live]
(push) ; 25
; [else-branch: 324 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 325 | False | dead]
; [else-branch: 325 | True | live]
(push) ; 25
; [else-branch: 325 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 326 | False | dead]
; [else-branch: 326 | True | live]
(push) ; 25
; [else-branch: 326 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 327 | True | dead]
; [else-branch: 327 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 327 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 328 | True | dead]
; [else-branch: 328 | False | live]
(push) ; 25
; [else-branch: 328 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 329 | True | dead]
; [else-branch: 329 | False | live]
(push) ; 25
; [else-branch: 329 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@103@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 330 | True | dead]
; [else-branch: 330 | False | live]
(push) ; 25
; [else-branch: 330 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@114@01 $Perm)
(assert ($Perm.isReadVar $k@114@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@114@01 (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@114@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@114@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01) $k@114@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@115@01 $Perm)
(assert ($Perm.isReadVar $k@115@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@115@01 (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@115@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@115@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (- (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01) $k@115@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@54@01) $k@59@01) $k@101@01) $k@106@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 331 | False | live]
; [else-branch: 331 | True | live]
(push) ; 25
; [then-branch: 331 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 331 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 332 | sys__result@102@01 == 0 | live]
; [else-branch: 332 | sys__result@102@01 != 0 | live]
(push) ; 27
; [then-branch: 332 | sys__result@102@01 == 0]
(assert (= sys__result@102@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 332 | sys__result@102@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@102@01 0)) (= sys__result@102@01 0)))
(push) ; 24
(assert (not (or (= sys__result@102@01 0) (= sys__result@102@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@102@01 0) (= sys__result@102@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 333 | sys__result@102@01 == 2 | dead]
; [else-branch: 333 | sys__result@102@01 != 2 | live]
(push) ; 24
; [else-branch: 333 | sys__result@102@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 334 | sys__result@102@01 == 1 | dead]
; [else-branch: 334 | sys__result@102@01 != 1 | live]
(push) ; 25
; [else-branch: 334 | sys__result@102@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 335 | sys__result@102@01 == 0 | dead]
; [else-branch: 335 | sys__result@102@01 != 0 | live]
(push) ; 26
; [else-branch: 335 | sys__result@102@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@53@01) $k@57@01) $k@100@01) $k@104@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@105@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 48 | sys__result@55@01 != 1]
(assert (not (= sys__result@55@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= sys__result@55@01 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= sys__result@55@01 0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 336 | sys__result@55@01 == 0 | live]
; [else-branch: 336 | sys__result@55@01 != 0 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 336 | sys__result@55@01 == 0]
(assert (= sys__result@55@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@53@01) $k@57@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< tid@11@01 (Seq_length $t@58@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@58@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@54@01) $k@59@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< tid@11@01 (Seq_length $t@60@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (= (Seq_index $t@58@01 tid@11@01) (Seq_index $t@60@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@60@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@55@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 337 | True | dead]
; [else-branch: 337 | False | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 337 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 338 | True | dead]
; [else-branch: 338 | False | live]
(push) ; 16
; [else-branch: 338 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 339 | True | dead]
; [else-branch: 339 | False | live]
(push) ; 16
; [else-branch: 339 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 340 | True | dead]
; [else-branch: 340 | False | live]
(push) ; 16
; [else-branch: 340 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 341 | True | dead]
; [else-branch: 341 | False | live]
(push) ; 16
; [else-branch: 341 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 342 | False | dead]
; [else-branch: 342 | True | live]
(push) ; 16
; [else-branch: 342 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 343 | False | dead]
; [else-branch: 343 | True | live]
(push) ; 16
; [else-branch: 343 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 344 | False | dead]
; [else-branch: 344 | True | live]
(push) ; 16
; [else-branch: 344 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 345 | False | dead]
; [else-branch: 345 | True | live]
(push) ; 16
; [else-branch: 345 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@116@01 Int)
(assert (= N@116@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 15
; [then-branch: 346 | !(0 < tid@11@01) | live]
; [else-branch: 346 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 346 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 346 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@116@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 347 | 0 < tid@11@01 && tid@11@01 < N@116@01 | dead]
; [else-branch: 347 | !(0 < tid@11@01 && tid@11@01 < N@116@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 347 | !(0 < tid@11@01 && tid@11@01 < N@116@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@116@01))))
(pop) ; 15
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 15
; [then-branch: 348 | !(0 < tid@11@01) | live]
; [else-branch: 348 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 348 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 348 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@116@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 349 | !(0 < tid@11@01 && tid@11@01 < N@116@01) | dead]
; [else-branch: 349 | 0 < tid@11@01 && tid@11@01 < N@116@01 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 349 | 0 < tid@11@01 && tid@11@01 < N@116@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@116@01)))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 336 | sys__result@55@01 != 0]
(assert (not (= sys__result@55@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@55@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 350 | True | dead]
; [else-branch: 350 | False | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 350 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 351 | True | dead]
; [else-branch: 351 | False | live]
(push) ; 16
; [else-branch: 351 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 352 | True | dead]
; [else-branch: 352 | False | live]
(push) ; 16
; [else-branch: 352 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 353 | True | dead]
; [else-branch: 353 | False | live]
(push) ; 16
; [else-branch: 353 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 354 | True | dead]
; [else-branch: 354 | False | live]
(push) ; 16
; [else-branch: 354 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 355 | False | dead]
; [else-branch: 355 | True | live]
(push) ; 16
; [else-branch: 355 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 356 | False | dead]
; [else-branch: 356 | True | live]
(push) ; 16
; [else-branch: 356 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 357 | False | dead]
; [else-branch: 357 | True | live]
(push) ; 16
; [else-branch: 357 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@56@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 358 | False | dead]
; [else-branch: 358 | True | live]
(push) ; 16
; [else-branch: 358 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@117@01 Int)
(assert (= N@117@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 15
; [then-branch: 359 | !(0 < tid@11@01) | live]
; [else-branch: 359 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 359 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 359 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@117@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 360 | 0 < tid@11@01 && tid@11@01 < N@117@01 | dead]
; [else-branch: 360 | !(0 < tid@11@01 && tid@11@01 < N@117@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 360 | !(0 < tid@11@01 && tid@11@01 < N@117@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@117@01))))
(pop) ; 15
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 15
; [then-branch: 361 | !(0 < tid@11@01) | live]
; [else-branch: 361 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 361 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 361 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@117@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 362 | !(0 < tid@11@01 && tid@11@01 < N@117@01) | dead]
; [else-branch: 362 | 0 < tid@11@01 && tid@11@01 < N@117@01 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 362 | 0 < tid@11@01 && tid@11@01 < N@117@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@117@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 14 | !(N@39@01 < gsize@10@01 - 1)]
(assert (not (< N@39@01 (- gsize@10@01 1))))
(pop) ; 8
(declare-const $t@118@01 Seq<$Ref>)
(declare-const $t@119@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No $k@46@01)
    (Seq_equal
      $t@118@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (=>
    (< $Perm.No (- $k@15@01 $k@48@01))
    (Seq_equal
      $t@118@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(assert (and
  (=>
    (< $Perm.No $k@47@01)
    (Seq_equal
      $t@119@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  (=>
    (< $Perm.No (- $k@16@01 $k@49@01))
    (Seq_equal
      $t@119@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
(assert (<= $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01))))
(assert (<= (+ $k@47@01 (- $k@16@01 $k@49@01)) $Perm.Write))
(assert (=> (< $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01))) (not (= diz@7@01 $Ref.null))))
(assert (<= $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01))))
(assert (<= (+ $k@46@01 (- $k@15@01 $k@48@01)) $Perm.Write))
(assert (=> (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01))) (not (= diz@7@01 $Ref.null))))
; [eval] !(N < gsize - 1)
; [eval] N < gsize - 1
; [eval] gsize - 1
(push) ; 8
(set-option :timeout 10)
(assert (not (< N@39@01 (- gsize@10@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< N@39@01 (- gsize@10@01 1)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 363 | !(N@39@01 < gsize@10@01 - 1) | live]
; [else-branch: 363 | N@39@01 < gsize@10@01 - 1 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 363 | !(N@39@01 < gsize@10@01 - 1)]
(assert (not (< N@39@01 (- gsize@10@01 1))))
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@120@01 $Perm)
(assert ($Perm.isReadVar $k@120@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (+ $k@46@01 (- $k@15@01 $k@48@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@120@01 (+ $k@46@01 (- $k@15@01 $k@48@01))))
(assert (<= $Perm.No (- (+ $k@46@01 (- $k@15@01 $k@48@01)) $k@120@01)))
(assert (<= (- (+ $k@46@01 (- $k@15@01 $k@48@01)) $k@120@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ $k@46@01 (- $k@15@01 $k@48@01)) $k@120@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (= (Seq_length $t@118@01) gsize@10@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@118@01) gsize@10@01))
(declare-const $k@121@01 $Perm)
(assert ($Perm.isReadVar $k@121@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (+ $k@47@01 (- $k@16@01 $k@49@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@121@01 (+ $k@47@01 (- $k@16@01 $k@49@01))))
(assert (<= $Perm.No (- (+ $k@47@01 (- $k@16@01 $k@49@01)) $k@121@01)))
(assert (<= (- (+ $k@47@01 (- $k@16@01 $k@49@01)) $k@121@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ $k@47@01 (- $k@16@01 $k@49@01)) $k@121@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (= (Seq_length $t@119@01) gsize@10@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@119@01) gsize@10@01))
; [eval] diz.demo__ar == old(diz.demo__ar)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  $t@118@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@118@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  $t@119@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@119@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
; [eval] gsize > 1
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< tid@11@01 (Seq_length $t@118@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  (Seq_index $t@118@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  (Seq_index $t@118@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(gsize - 1, tid)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< tid@11@01 (Seq_length $t@118@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  (Seq_index $t@118@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  (Seq_index $t@118@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(gsize - 1, tid)
; [eval] gsize - 1
(set-option :timeout 0)
(push) ; 9
; [eval] N >= 0
(push) ; 10
(assert (not (>= (- gsize@10@01 1) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>= (- gsize@10@01 1) 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@11@01 (- gsize@10@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 (- gsize@10@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- gsize@10@01 1) tid@11@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (>= (- gsize@10@01 1) 0)
  (<= tid@11@01 (- gsize@10@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- gsize@10@01 1) tid@11@01)))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    gsize@10@01
    1) tid@11@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    gsize@10@01
    1) tid@11@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 363 | N@39@01 < gsize@10@01 - 1]
(assert (< N@39@01 (- gsize@10@01 1)))
(pop) ; 8
(pop) ; 7
(push) ; 7
(assert (= __last_barrier@38@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
      tid@11@01)
    $Ref.null)))
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
      tid@11@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  $Snap.unit))
(assert (< 0 N@39@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
(assert (< N@39@01 gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
  $Snap.unit))
(assert (=>
  (< tid@11@01 N@39@01)
  (and
    (< tid@11@01 N@39@01)
    (>= N@39@01 0)
    (<= tid@11@01 N@39@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))))
(assert (or (not (< tid@11@01 N@39@01)) (< tid@11@01 N@39@01)))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  (ite
    (< tid@11@01 N@39@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)
    1)))
(assert (not (= __last_barrier@38@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))))
(assert (not (= __last_barrier@38@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
(assert ($Perm.isReadVar $k@46@01))
(assert ($Perm.isReadVar $k@47@01))
(assert (= $t@45@01 ($Snap.combine ($Snap.first $t@45@01) ($Snap.second $t@45@01))))
(assert (= ($Snap.first $t@45@01) $Snap.unit))
(assert (=
  ($Snap.second $t@45@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@45@01))
    ($Snap.second ($Snap.second $t@45@01)))))
(assert (= ($Snap.first ($Snap.second $t@45@01)) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second $t@45@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@45@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@45@01))) $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@45@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
(assert (<= $Perm.No $k@46@01))
(assert (<= $k@46@01 $Perm.Write))
(assert (=> (< $Perm.No $k@46@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(assert (<= $Perm.No $k@47@01))
(assert (<= $k@47@01 $Perm.Write))
(assert (=> (< $Perm.No $k@47@01) (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  $Snap.unit))
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  $Snap.unit))
(assert (or (not (= __last_barrier@38@01 0)) (= __last_barrier@38@01 0)))
(assert (or (= __last_barrier@38@01 0) (= __last_barrier@38@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01))))))))))))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 10)
(check-sat)
; unknown
; Loop head block: Check well-definedness of edge conditions
(set-option :timeout 0)
(push) ; 8
; [eval] N < gsize - 1
; [eval] gsize - 1
(pop) ; 8
(push) ; 8
; [eval] !(N < gsize - 1)
; [eval] N < gsize - 1
; [eval] gsize - 1
(pop) ; 8
; Loop head block: Follow loop-internal edges
; [eval] N < gsize - 1
; [eval] gsize - 1
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< N@39@01 (- gsize@10@01 1)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< N@39@01 (- gsize@10@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 364 | N@39@01 < gsize@10@01 - 1 | live]
; [else-branch: 364 | !(N@39@01 < gsize@10@01 - 1) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 364 | N@39@01 < gsize@10@01 - 1]
(assert (< N@39@01 (- gsize@10@01 1)))
; [exec]
; __flatten_5 := diz.demo__tmp[tid]
; [eval] diz.demo__tmp[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_5@122@01 $Ref)
(assert (=
  __flatten_5@122@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)))
; [exec]
; __flatten_7 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_7@123@01 $Ref)
(assert (=
  __flatten_7@123@01
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)))
; [exec]
; __flatten_6 := __flatten_7.Ref__Integer_value
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  __flatten_7@123@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  __flatten_7@123@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_6@124@01 Int)
(assert (=
  __flatten_6@124@01
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))))
; [exec]
; __flatten_5.Ref__Integer_value := __flatten_6
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  __flatten_5@122@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  __flatten_5@122@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not (= __flatten_5@122@01 $Ref.null)))
; [exec]
; __flatten_1 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 1, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 365 | True | live]
; [else-branch: 365 | False | dead]
(set-option :timeout 0)
(push) ; 10
; [then-branch: 365 | True]
; [eval] false || (last_barrier == 0 || last_barrier == 2)
(push) ; 11
; [then-branch: 366 | False | live]
; [else-branch: 366 | True | live]
(push) ; 12
; [then-branch: 366 | False]
(assert false)
(pop) ; 12
(push) ; 12
; [else-branch: 366 | True]
; [eval] last_barrier == 0
(push) ; 13
; [then-branch: 367 | __last_barrier@38@01 == 0 | live]
; [else-branch: 367 | __last_barrier@38@01 != 0 | live]
(push) ; 14
; [then-branch: 367 | __last_barrier@38@01 == 0]
(pop) ; 14
(push) ; 14
; [else-branch: 367 | __last_barrier@38@01 != 0]
(assert (not (= __last_barrier@38@01 0)))
; [eval] last_barrier == 2
(pop) ; 14
(pop) ; 13
; Joined path conditions
; Joined path conditions
(pop) ; 12
(pop) ; 11
; Joined path conditions
; Joined path conditions
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 368 | False | dead]
; [else-branch: 368 | True | live]
(push) ; 10
; [else-branch: 368 | True]
(pop) ; 10
(pop) ; 9
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@125@01 $Perm)
(assert ($Perm.isReadVar $k@125@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= $k@46@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@125@01 $k@46@01))
(assert (<= $Perm.No (- $k@46@01 $k@125@01)))
(assert (<= (- $k@46@01 $k@125@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@46@01 $k@125@01)) (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(declare-const $k@126@01 $Perm)
(assert ($Perm.isReadVar $k@126@01))
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= $k@47@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@126@01 $k@47@01))
(assert (<= $Perm.No (- $k@47@01 $k@126@01)))
(assert (<= (- $k@47@01 $k@126@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@47@01 $k@126@01)) (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 369 | __last_barrier@38@01 == 2 | dead]
; [else-branch: 369 | __last_barrier@38@01 != 2 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 369 | __last_barrier@38@01 != 2]
; [eval] last_barrier == 1
; [then-branch: 370 | __last_barrier@38@01 == 1 | dead]
; [else-branch: 370 | __last_barrier@38@01 != 1 | live]
(push) ; 10
; [else-branch: 370 | __last_barrier@38@01 != 1]
; [eval] last_barrier == 0
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= __last_barrier@38@01 0))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 371 | __last_barrier@38@01 == 0 | live]
; [else-branch: 371 | __last_barrier@38@01 != 0 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 371 | __last_barrier@38@01 == 0]
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 372 | True | live]
; [else-branch: 372 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 372 | True]
; [eval] gsize > 1
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 373 | True | live]
; [else-branch: 373 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 373 | True]
; [eval] 0 < N
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 374 | True | live]
; [else-branch: 374 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 374 | True]
; [eval] N < gsize
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 375 | True | live]
; [else-branch: 375 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 375 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 14
(push) ; 15
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 376 | tid@11@01 < N@39@01 | live]
; [else-branch: 376 | !(tid@11@01 < N@39@01) | live]
(set-option :timeout 0)
(push) ; 15
; [then-branch: 376 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 16
; [eval] N >= 0
(push) ; 17
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 17
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 16
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 15
(push) ; 15
; [else-branch: 376 | !(tid@11@01 < N@39@01)]
(assert (not (< tid@11@01 N@39@01)))
(pop) ; 15
(pop) ; 14
; Joined path conditions
; Joined path conditions
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 377 | True | live]
; [else-branch: 377 | False | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 377 | True]
; [eval] diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] diz.demo__tmp[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  tid@11@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 378 | False | dead]
; [else-branch: 378 | True | live]
(push) ; 13
; [else-branch: 378 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 379 | False | dead]
; [else-branch: 379 | True | live]
(push) ; 13
; [else-branch: 379 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 380 | False | dead]
; [else-branch: 380 | True | live]
(push) ; 13
; [else-branch: 380 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 12
; [then-branch: 381 | False | dead]
; [else-branch: 381 | True | live]
(push) ; 13
; [else-branch: 381 | True]
(pop) ; 13
(pop) ; 12
; Joined path conditions
(declare-const sys__result@127@01 Int)
(declare-const $t@128@01 $Snap)
(assert (= $t@128@01 ($Snap.combine ($Snap.first $t@128@01) ($Snap.second $t@128@01))))
(assert (= ($Snap.first $t@128@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@128@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@128@01))
    ($Snap.second ($Snap.second $t@128@01)))))
(assert (= ($Snap.first ($Snap.second $t@128@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@128@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@128@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@128@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@128@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@128@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@128@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))
(declare-const $k@129@01 $Perm)
(assert ($Perm.isReadVar $k@129@01))
(declare-const $t@130@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- $k@46@01 $k@125@01))
    (Seq_equal
      $t@130@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (=>
    (< $Perm.No $k@129@01)
    (Seq_equal
      $t@130@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))
(assert (<= $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01)))
(assert (<= (+ (- $k@46@01 $k@125@01) $k@129@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@130@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))
(declare-const $k@131@01 $Perm)
(assert ($Perm.isReadVar $k@131@01))
(declare-const $t@132@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- $k@47@01 $k@126@01))
    (Seq_equal
      $t@132@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  (=>
    (< $Perm.No $k@131@01)
    (Seq_equal
      $t@132@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
(assert (<= $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01)))
(assert (<= (+ (- $k@47@01 $k@126@01) $k@131@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@132@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@46@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@130@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@47@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@132@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 2))))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(set-option :timeout 10)
(assert (not (= sys__result@127@01 2)))
(check-sat)
; unknown
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 382 | sys__result@127@01 == 2 | live]
; [else-branch: 382 | sys__result@127@01 != 2 | live]
(set-option :timeout 0)
(push) ; 12
; [then-branch: 382 | sys__result@127@01 == 2]
(assert (= sys__result@127@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@130@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 13
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(assert (not (< tid@11@01 (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(push) ; 13
(set-option :timeout 10)
(assert (not (= (Seq_index $t@130@01 tid@11@01) (Seq_index $t@132@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@132@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 1))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 383 | sys__result@127@01 == 1 | dead]
; [else-branch: 383 | sys__result@127@01 != 1 | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 383 | sys__result@127@01 != 1]
(assert (not (= sys__result@127@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 0))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 384 | sys__result@127@01 == 0 | dead]
; [else-branch: 384 | sys__result@127@01 != 0 | live]
(set-option :timeout 0)
(push) ; 14
; [else-branch: 384 | sys__result@127@01 != 0]
(assert (not (= sys__result@127@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@127@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 385 | True | dead]
; [else-branch: 385 | False | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 385 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 386 | True | dead]
; [else-branch: 386 | False | live]
(push) ; 16
; [else-branch: 386 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 387 | True | dead]
; [else-branch: 387 | False | live]
(push) ; 16
; [else-branch: 387 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 388 | True | dead]
; [else-branch: 388 | False | live]
(push) ; 16
; [else-branch: 388 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 389 | True | dead]
; [else-branch: 389 | False | live]
(push) ; 16
; [else-branch: 389 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 390 | False | dead]
; [else-branch: 390 | True | live]
(push) ; 16
; [else-branch: 390 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 391 | False | dead]
; [else-branch: 391 | True | live]
(push) ; 16
; [else-branch: 391 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 392 | False | dead]
; [else-branch: 392 | True | live]
(push) ; 16
; [else-branch: 392 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 393 | False | dead]
; [else-branch: 393 | True | live]
(push) ; 16
; [else-branch: 393 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@133@01 Int)
(assert (= N@133@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 15
; [then-branch: 394 | !(0 < tid@11@01) | live]
; [else-branch: 394 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 394 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 394 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@133@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 395 | 0 < tid@11@01 && tid@11@01 < N@133@01 | dead]
; [else-branch: 395 | !(0 < tid@11@01 && tid@11@01 < N@133@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 395 | !(0 < tid@11@01 && tid@11@01 < N@133@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@133@01))))
(pop) ; 15
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 15
; [then-branch: 396 | !(0 < tid@11@01) | live]
; [else-branch: 396 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 396 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 396 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@133@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 397 | !(0 < tid@11@01 && tid@11@01 < N@133@01) | dead]
; [else-branch: 397 | 0 < tid@11@01 && tid@11@01 < N@133@01 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 397 | 0 < tid@11@01 && tid@11@01 < N@133@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@133@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(push) ; 12
; [else-branch: 382 | sys__result@127@01 != 2]
(assert (not (= sys__result@127@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 13
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 1))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (= sys__result@127@01 1)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 398 | sys__result@127@01 == 1 | live]
; [else-branch: 398 | sys__result@127@01 != 1 | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 398 | sys__result@127@01 == 1]
(assert (= sys__result@127@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@130@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
(push) ; 14
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (> tid@11@01 0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 399 | tid@11@01 > 0 | live]
; [else-branch: 399 | !(tid@11@01 > 0) | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 399 | tid@11@01 > 0]
(assert (> tid@11@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 15
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< (- tid@11@01 1) (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (= (Seq_index $t@130@01 tid@11@01) (Seq_index $t@132@01 (- tid@11@01 1)))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@132@01 (- tid@11@01 1)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 400 | sys__result@127@01 == 0 | dead]
; [else-branch: 400 | sys__result@127@01 != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 400 | sys__result@127@01 != 0]
(assert (not (= sys__result@127@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 401 | True | live]
; [else-branch: 401 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 401 | True]
; [eval] gsize > 1
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 402 | True | live]
; [else-branch: 402 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 402 | True]
; [eval] 0 < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 403 | True | live]
; [else-branch: 403 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 403 | True]
; [eval] N < gsize
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 404 | True | live]
; [else-branch: 404 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 404 | True]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 18
; [then-branch: 405 | !(0 < tid@11@01) | live]
; [else-branch: 405 | 0 < tid@11@01 | live]
(push) ; 19
; [then-branch: 405 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 405 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid <= N
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 406 | 0 < tid@11@01 && tid@11@01 <= N@39@01 | live]
; [else-branch: 406 | !(0 < tid@11@01 && tid@11@01 <= N@39@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 406 | 0 < tid@11@01 && tid@11@01 <= N@39@01]
(assert (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (< (- tid@11@01 1) (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid - 1)
; [eval] tid - 1
(push) ; 20
; [eval] N >= 0
(push) ; 21
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
(push) ; 21
(assert (not (<= 0 (- tid@11@01 1))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@11@01 1)))
; [eval] k <= N
(push) ; 21
(assert (not (<= (- tid@11@01 1) N@39@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@11@01 1) N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1)))
(pop) ; 20
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= 0 (- tid@11@01 1))
  (<= (- tid@11@01 1) N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1))))
(pop) ; 19
(push) ; 19
; [else-branch: 406 | !(0 < tid@11@01 && tid@11@01 <= N@39@01)]
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (=>
  (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))
  (and
    (< 0 tid@11@01)
    (<= tid@11@01 N@39@01)
    (>= N@39@01 0)
    (<= 0 (- tid@11@01 1))
    (<= (- tid@11@01 1) N@39@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1)))))
; Joined path conditions
(assert (or
  (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))
  (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (or (< 0 tid@11@01) (not (< 0 tid@11@01)))
  (=>
    (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))
    (and
      (< 0 tid@11@01)
      (<= tid@11@01 N@39@01)
      (>= N@39@01 0)
      (<= 0 (- tid@11@01 1))
      (<= (- tid@11@01 1) N@39@01)
      (demo__bin%precondition ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (- tid@11@01 1))))
  (or
    (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))
    (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(assert (=>
  (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 (-
      tid@11@01
      1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 407 | True | live]
; [else-branch: 407 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 407 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 408 | tid@11@01 < N@39@01 | live]
; [else-branch: 408 | !(tid@11@01 < N@39@01) | live]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 408 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 20
; [eval] N >= 0
(push) ; 21
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 21
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 408 | !(tid@11@01 < N@39@01)]
(assert (not (< tid@11@01 N@39@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (ite
    (< tid@11@01 N@39@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)
    1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 409 | False | dead]
; [else-branch: 409 | True | live]
(push) ; 17
; [else-branch: 409 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 410 | False | dead]
; [else-branch: 410 | True | live]
(push) ; 17
; [else-branch: 410 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 411 | False | dead]
; [else-branch: 411 | True | live]
(push) ; 17
; [else-branch: 411 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 412 | False | dead]
; [else-branch: 412 | True | live]
(push) ; 17
; [else-branch: 412 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@134@01 Int)
(assert (= N@134@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 16
; [then-branch: 413 | !(0 < tid@11@01) | live]
; [else-branch: 413 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 413 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 413 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@134@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@134@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 414 | 0 < tid@11@01 && tid@11@01 < N@134@01 | live]
; [else-branch: 414 | !(0 < tid@11@01 && tid@11@01 < N@134@01) | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 414 | 0 < tid@11@01 && tid@11@01 < N@134@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@134@01)))
; [exec]
; assert diz.demo__tmp[tid - 1].Ref__Integer_value ==
;   demo__bin(N - 1, tid - 1) &&
;   diz.demo__ar[tid].Ref__Integer_value == demo__bin(N - 1, tid)
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N - 1, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 17
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< (- tid@11@01 1) (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N - 1, tid - 1)
; [eval] N - 1
; [eval] tid - 1
(push) ; 17
; [eval] N >= 0
(push) ; 18
(assert (not (>= (- N@134@01 1) 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (>= (- N@134@01 1) 0))
; [eval] 0 <= k
(push) ; 18
(assert (not (<= 0 (- tid@11@01 1))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@11@01 1)))
; [eval] k <= N
(push) ; 18
(assert (not (<= (- tid@11@01 1) (- N@134@01 1))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@11@01 1) (- N@134@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- N@134@01 1) (- tid@11@01 1)))
(pop) ; 17
; Joined path conditions
(assert (and
  (>= (- N@134@01 1) 0)
  (<= 0 (- tid@11@01 1))
  (<= (- tid@11@01 1) (- N@134@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- N@134@01 1) (- tid@11@01 1))))
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@134@01
    1) (- tid@11@01 1)))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@134@01
    1) (- tid@11@01 1))))
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(N - 1, tid)
; [eval] diz.demo__ar[tid]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N - 1, tid)
; [eval] N - 1
(push) ; 17
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(push) ; 18
(assert (not (<= tid@11@01 (- N@134@01 1))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 (- N@134@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- N@134@01 1) tid@11@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (<= tid@11@01 (- N@134@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- N@134@01 1) tid@11@01)))
(push) ; 17
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@134@01
    1) tid@11@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    N@134@01
    1) tid@11@01)))
; [exec]
; __flatten_9 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_9@135@01 $Ref)
(assert (= __flatten_9@135@01 (Seq_index $t@130@01 tid@11@01)))
; [exec]
; __flatten_11 := diz.demo__tmp[tid - 1]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 17
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< (- tid@11@01 1) (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_11@136@01 $Ref)
(assert (= __flatten_11@136@01 (Seq_index $t@132@01 (- tid@11@01 1))))
; [exec]
; __flatten_12 := diz.demo__ar[tid]
; [eval] diz.demo__ar[tid]
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_12@137@01 $Ref)
(assert (= __flatten_12@137@01 (Seq_index $t@130@01 tid@11@01)))
; [exec]
; __flatten_10 := __flatten_11.Ref__Integer_value +
;   __flatten_12.Ref__Integer_value
; [eval] __flatten_11.Ref__Integer_value + __flatten_12.Ref__Integer_value
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@132@01 (- tid@11@01 1)) __flatten_11@136@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@132@01 (- tid@11@01 1)) __flatten_12@137@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@130@01 tid@11@01) __flatten_12@137@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const __flatten_10@138@01 Int)
(assert (=
  __flatten_10@138@01
  (+
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
; [exec]
; __flatten_9.Ref__Integer_value := __flatten_10
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@132@01 (- tid@11@01 1)) __flatten_9@135@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@130@01 tid@11@01) __flatten_9@135@01)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (= (Seq_index $t@132@01 (- tid@11@01 1)) __flatten_9@135@01)))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (not (= __flatten_9@135@01 $Ref.null)))
; [exec]
; assert diz.demo__ar[tid].Ref__Integer_value == demo__bin(N, tid)
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(N, tid)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 17
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(push) ; 17
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid)
(push) ; 17
; [eval] N >= 0
(push) ; 18
(assert (not (>= N@134@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (>= N@134@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 18
(assert (not (<= tid@11@01 N@134@01)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@134@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@134@01 tid@11@01))
(pop) ; 17
; Joined path conditions
(assert (and
  (>= N@134@01 0)
  (<= tid@11@01 N@134@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@134@01 tid@11@01)))
(push) ; 17
(assert (not (=
  __flatten_10@138@01
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@134@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (=
  __flatten_10@138@01
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@134@01 tid@11@01)))
; [exec]
; __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 2, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 17
; [then-branch: 415 | False | dead]
; [else-branch: 415 | True | live]
(push) ; 18
; [else-branch: 415 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 416 | True | live]
; [else-branch: 416 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 416 | True]
; [eval] false || last_barrier == 1
(push) ; 19
; [then-branch: 417 | False | live]
; [else-branch: 417 | True | live]
(push) ; 20
; [then-branch: 417 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 417 | True]
; [eval] last_barrier == 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@139@01 $Perm)
(assert ($Perm.isReadVar $k@139@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@46@01 $k@125@01) $k@129@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@139@01 (+ (- $k@46@01 $k@125@01) $k@129@01)))
(assert (<= $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01)))
(assert (<= (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const $k@140@01 $Perm)
(assert ($Perm.isReadVar $k@140@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@47@01 $k@126@01) $k@131@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@140@01 (+ (- $k@47@01 $k@126@01) $k@131@01)))
(assert (<= $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01)))
(assert (<= (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 418 | sys__result@127@01 == 2 | dead]
; [else-branch: 418 | sys__result@127@01 != 2 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 418 | sys__result@127@01 != 2]
; [eval] last_barrier == 1
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 1))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 419 | sys__result@127@01 == 1 | live]
; [else-branch: 419 | sys__result@127@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 419 | sys__result@127@01 == 1]
; [eval] diz.demo__ar[tid]
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] tid > 0
(push) ; 19
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 420 | tid@11@01 > 0 | live]
; [else-branch: 420 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 420 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (< (- tid@11@01 1) (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 0
; [then-branch: 421 | sys__result@127@01 == 0 | dead]
; [else-branch: 421 | sys__result@127@01 != 0 | live]
(push) ; 20
; [else-branch: 421 | sys__result@127@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 422 | False | dead]
; [else-branch: 422 | True | live]
(push) ; 22
; [else-branch: 422 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 423 | False | dead]
; [else-branch: 423 | True | live]
(push) ; 22
; [else-branch: 423 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 424 | False | dead]
; [else-branch: 424 | True | live]
(push) ; 22
; [else-branch: 424 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 425 | False | dead]
; [else-branch: 425 | True | live]
(push) ; 22
; [else-branch: 425 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 426 | False | dead]
; [else-branch: 426 | True | live]
(push) ; 22
; [else-branch: 426 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 427 | True | live]
; [else-branch: 427 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 427 | True]
; [eval] gsize > 1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 428 | True | live]
; [else-branch: 428 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 428 | True]
; [eval] 0 < N
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< 0 N@134@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< 0 N@134@01))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 429 | True | live]
; [else-branch: 429 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 429 | True]
; [eval] N < gsize
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< N@134@01 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< N@134@01 gsize@10@01))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 430 | True | live]
; [else-branch: 430 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 430 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@134@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 431 | tid@11@01 < N@134@01 | live]
; [else-branch: 431 | !(tid@11@01 < N@134@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 431 | tid@11@01 < N@134@01]
; [eval] demo__bin(N, tid)
(push) ; 25
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(pop) ; 25
; Joined path conditions
(pop) ; 24
(pop) ; 23
; Joined path conditions
(pop) ; 22
(pop) ; 21
; Joined path conditions
(declare-const sys__result@141@01 Int)
(declare-const $t@142@01 $Snap)
(assert (= $t@142@01 ($Snap.combine ($Snap.first $t@142@01) ($Snap.second $t@142@01))))
(assert (= ($Snap.first $t@142@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@142@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@142@01))
    ($Snap.second ($Snap.second $t@142@01)))))
(assert (= ($Snap.first ($Snap.second $t@142@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@142@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@142@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@142@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@142@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@142@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@142@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))
(declare-const $k@143@01 $Perm)
(assert ($Perm.isReadVar $k@143@01))
(declare-const $t@144@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01))
    (Seq_equal $t@144@01 $t@130@01))
  (=>
    (< $Perm.No $k@143@01)
    (Seq_equal
      $t@144@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)))
(assert (<= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@144@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))
(declare-const $k@145@01 $Perm)
(assert ($Perm.isReadVar $k@145@01))
(declare-const $t@146@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01))
    (Seq_equal $t@146@01 $t@132@01))
  (=>
    (< $Perm.No $k@145@01)
    (Seq_equal
      $t@146@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)))
(assert (<= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@146@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@144@01 $t@130@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@146@01 $t@132@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 2))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (= sys__result@141@01 2)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 432 | sys__result@141@01 == 2 | live]
; [else-branch: 432 | sys__result@141@01 != 2 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 432 | sys__result@141@01 == 2]
(assert (= sys__result@141@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@144@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@146@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= (Seq_index $t@144@01 tid@11@01) (Seq_index $t@146@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@146@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 1))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 433 | sys__result@141@01 == 1 | dead]
; [else-branch: 433 | sys__result@141@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 433 | sys__result@141@01 != 1]
(assert (not (= sys__result@141@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 434 | sys__result@141@01 == 0 | dead]
; [else-branch: 434 | sys__result@141@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 434 | sys__result@141@01 != 0]
(assert (not (= sys__result@141@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 435 | False | dead]
; [else-branch: 435 | True | live]
(push) ; 25
; [else-branch: 435 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 436 | False | dead]
; [else-branch: 436 | True | live]
(push) ; 25
; [else-branch: 436 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 437 | False | dead]
; [else-branch: 437 | True | live]
(push) ; 25
; [else-branch: 437 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 438 | False | dead]
; [else-branch: 438 | True | live]
(push) ; 25
; [else-branch: 438 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 439 | False | dead]
; [else-branch: 439 | True | live]
(push) ; 25
; [else-branch: 439 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 440 | True | live]
; [else-branch: 440 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 440 | True]
; [eval] gsize > 1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 441 | True | live]
; [else-branch: 441 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 441 | True]
; [eval] 0 < N
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 442 | True | live]
; [else-branch: 442 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 442 | True]
; [eval] N < gsize
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 443 | True | live]
; [else-branch: 443 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 443 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@134@01))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 444 | tid@11@01 < N@134@01 | live]
; [else-branch: 444 | !(tid@11@01 < N@134@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 444 | tid@11@01 < N@134@01]
; [eval] demo__bin(N, tid)
(push) ; 28
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(pop) ; 28
; Joined path conditions
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@134@01 tid@11@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@147@01 $Perm)
(assert ($Perm.isReadVar $k@147@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@147@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@147@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@147@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)
      $k@147@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@148@01 $Perm)
(assert ($Perm.isReadVar $k@148@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@148@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@148@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@148@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)
      $k@148@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 445 | False | live]
; [else-branch: 445 | True | live]
(push) ; 25
; [then-branch: 445 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 445 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 446 | sys__result@141@01 == 0 | live]
; [else-branch: 446 | sys__result@141@01 != 0 | live]
(push) ; 27
; [then-branch: 446 | sys__result@141@01 == 0]
(assert (= sys__result@141@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 446 | sys__result@141@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(push) ; 24
(assert (not (or (= sys__result@141@01 0) (= sys__result@141@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@141@01 0) (= sys__result@141@01 2)))
; [eval] __last_barrier == 2
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 2))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 447 | sys__result@141@01 == 2 | live]
; [else-branch: 447 | sys__result@141@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 447 | sys__result@141@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@146@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] __last_barrier == 1
; [then-branch: 448 | sys__result@141@01 == 1 | dead]
; [else-branch: 448 | sys__result@141@01 != 1 | live]
(push) ; 25
; [else-branch: 448 | sys__result@141@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 449 | sys__result@141@01 == 0 | dead]
; [else-branch: 449 | sys__result@141@01 != 0 | live]
(push) ; 26
; [else-branch: 449 | sys__result@141@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@134@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 450 | tid@11@01 < N@134@01 | live]
; [else-branch: 450 | !(tid@11@01 < N@134@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 450 | tid@11@01 < N@134@01]
; [eval] demo__bin(N, tid)
(push) ; 29
; [eval] N >= 0
; [eval] 0 <= k
; [eval] k <= N
(pop) ; 29
; Joined path conditions
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 432 | sys__result@141@01 != 2]
(assert (not (= sys__result@141@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 1))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= sys__result@141@01 1)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 451 | sys__result@141@01 == 1 | live]
; [else-branch: 451 | sys__result@141@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 451 | sys__result@141@01 == 1]
(assert (= sys__result@141@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@144@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 452 | tid@11@01 > 0 | live]
; [else-branch: 452 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 452 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 24
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< (- tid@11@01 1) (Seq_length $t@146@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@144@01 tid@11@01) (Seq_index $t@146@01 (- tid@11@01 1)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@146@01 (- tid@11@01 1)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 453 | sys__result@141@01 == 0 | dead]
; [else-branch: 453 | sys__result@141@01 != 0 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 453 | sys__result@141@01 != 0]
(assert (not (= sys__result@141@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@141@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 454 | False | dead]
; [else-branch: 454 | True | live]
(push) ; 26
; [else-branch: 454 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 455 | False | dead]
; [else-branch: 455 | True | live]
(push) ; 26
; [else-branch: 455 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 456 | False | dead]
; [else-branch: 456 | True | live]
(push) ; 26
; [else-branch: 456 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 457 | False | dead]
; [else-branch: 457 | True | live]
(push) ; 26
; [else-branch: 457 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 458 | False | dead]
; [else-branch: 458 | True | live]
(push) ; 26
; [else-branch: 458 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 459 | True | dead]
; [else-branch: 459 | False | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 459 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 460 | True | dead]
; [else-branch: 460 | False | live]
(push) ; 26
; [else-branch: 460 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 461 | True | dead]
; [else-branch: 461 | False | live]
(push) ; 26
; [else-branch: 461 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 462 | True | dead]
; [else-branch: 462 | False | live]
(push) ; 26
; [else-branch: 462 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@149@01 $Perm)
(assert ($Perm.isReadVar $k@149@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@149@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@149@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@149@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)
      $k@149@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const $k@150@01 $Perm)
(assert ($Perm.isReadVar $k@150@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@150@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@150@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@150@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)
      $k@150@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 463 | False | live]
; [else-branch: 463 | True | live]
(push) ; 26
; [then-branch: 463 | False]
(pop) ; 26
(push) ; 26
; [else-branch: 463 | True]
; [eval] __last_barrier == 0
(push) ; 27
; [then-branch: 464 | sys__result@141@01 == 0 | live]
; [else-branch: 464 | sys__result@141@01 != 0 | live]
(push) ; 28
; [then-branch: 464 | sys__result@141@01 == 0]
(assert (= sys__result@141@01 0))
(pop) ; 28
(push) ; 28
; [else-branch: 464 | sys__result@141@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(push) ; 25
(assert (not (or (= sys__result@141@01 0) (= sys__result@141@01 2))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@141@01 0) (= sys__result@141@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 465 | sys__result@141@01 == 2 | dead]
; [else-branch: 465 | sys__result@141@01 != 2 | live]
(push) ; 25
; [else-branch: 465 | sys__result@141@01 != 2]
; [eval] __last_barrier == 1
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 1))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 466 | sys__result@141@01 == 1 | dead]
; [else-branch: 466 | sys__result@141@01 != 1 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 466 | sys__result@141@01 != 1]
(assert (not (= sys__result@141@01 1)))
; [eval] __last_barrier == 0
; [then-branch: 467 | sys__result@141@01 == 0 | dead]
; [else-branch: 467 | sys__result@141@01 != 0 | live]
(push) ; 27
; [else-branch: 467 | sys__result@141@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@134@01))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 468 | tid@11@01 < N@134@01 | dead]
; [else-branch: 468 | !(tid@11@01 < N@134@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 468 | !(tid@11@01 < N@134@01)]
(assert (not (< tid@11@01 N@134@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (not (< tid@11@01 N@134@01)))
(push) ; 28
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  1))
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 451 | sys__result@141@01 != 1]
(assert (not (= sys__result@141@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (= sys__result@141@01 0)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 469 | sys__result@141@01 == 0 | live]
; [else-branch: 469 | sys__result@141@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 469 | sys__result@141@01 == 0]
(assert (= sys__result@141@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@144@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@146@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@144@01 tid@11@01) (Seq_index $t@146@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@146@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@141@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 470 | False | dead]
; [else-branch: 470 | True | live]
(push) ; 25
; [else-branch: 470 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 471 | False | dead]
; [else-branch: 471 | True | live]
(push) ; 25
; [else-branch: 471 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 472 | False | dead]
; [else-branch: 472 | True | live]
(push) ; 25
; [else-branch: 472 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 473 | False | dead]
; [else-branch: 473 | True | live]
(push) ; 25
; [else-branch: 473 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 474 | False | dead]
; [else-branch: 474 | True | live]
(push) ; 25
; [else-branch: 474 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 475 | True | dead]
; [else-branch: 475 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 475 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 476 | True | dead]
; [else-branch: 476 | False | live]
(push) ; 25
; [else-branch: 476 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 477 | True | dead]
; [else-branch: 477 | False | live]
(push) ; 25
; [else-branch: 477 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 478 | True | dead]
; [else-branch: 478 | False | live]
(push) ; 25
; [else-branch: 478 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@151@01 $Perm)
(assert ($Perm.isReadVar $k@151@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@151@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@151@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@151@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)
      $k@151@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@152@01 $Perm)
(assert ($Perm.isReadVar $k@152@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@152@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@152@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@152@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)
      $k@152@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 479 | False | live]
; [else-branch: 479 | True | live]
(push) ; 25
; [then-branch: 479 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 479 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 480 | sys__result@141@01 == 0 | live]
; [else-branch: 480 | sys__result@141@01 != 0 | live]
(push) ; 27
; [then-branch: 480 | sys__result@141@01 == 0]
(pop) ; 27
(push) ; 27
; [else-branch: 480 | sys__result@141@01 != 0]
(assert (not (= sys__result@141@01 0)))
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(push) ; 24
(assert (not (or (= sys__result@141@01 0) (= sys__result@141@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@141@01 0) (= sys__result@141@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 481 | sys__result@141@01 == 2 | dead]
; [else-branch: 481 | sys__result@141@01 != 2 | live]
(push) ; 24
; [else-branch: 481 | sys__result@141@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 482 | sys__result@141@01 == 1 | dead]
; [else-branch: 482 | sys__result@141@01 != 1 | live]
(push) ; 25
; [else-branch: 482 | sys__result@141@01 != 1]
; [eval] __last_barrier == 0
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@141@01 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 483 | sys__result@141@01 == 0 | dead]
; [else-branch: 483 | sys__result@141@01 != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 483 | sys__result@141@01 != 0]
(assert (not (= sys__result@141@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@134@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 484 | tid@11@01 < N@134@01 | dead]
; [else-branch: 484 | !(tid@11@01 < N@134@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 484 | !(tid@11@01 < N@134@01)]
(assert (not (< tid@11@01 N@134@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (< tid@11@01 N@134@01)))
(push) ; 27
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  1))
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(push) ; 23
; [else-branch: 469 | sys__result@141@01 != 0]
(assert (not (= sys__result@141@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@141@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 485 | False | dead]
; [else-branch: 485 | True | live]
(push) ; 25
; [else-branch: 485 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 486 | False | dead]
; [else-branch: 486 | True | live]
(push) ; 25
; [else-branch: 486 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 487 | False | dead]
; [else-branch: 487 | True | live]
(push) ; 25
; [else-branch: 487 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 488 | False | dead]
; [else-branch: 488 | True | live]
(push) ; 25
; [else-branch: 488 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 489 | False | dead]
; [else-branch: 489 | True | live]
(push) ; 25
; [else-branch: 489 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 490 | True | dead]
; [else-branch: 490 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 490 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 491 | True | dead]
; [else-branch: 491 | False | live]
(push) ; 25
; [else-branch: 491 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 492 | True | dead]
; [else-branch: 492 | False | live]
(push) ; 25
; [else-branch: 492 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@142@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 493 | True | dead]
; [else-branch: 493 | False | live]
(push) ; 25
; [else-branch: 493 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@153@01 $Perm)
(assert ($Perm.isReadVar $k@153@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@153@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@153@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01) $k@153@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01)
      $k@153@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@154@01 $Perm)
(assert ($Perm.isReadVar $k@154@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@154@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@154@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01) $k@154@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01)
      $k@154@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@140@01) $k@145@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 494 | False | live]
; [else-branch: 494 | True | live]
(push) ; 25
; [then-branch: 494 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 494 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 495 | sys__result@141@01 == 0 | live]
; [else-branch: 495 | sys__result@141@01 != 0 | live]
(push) ; 27
; [then-branch: 495 | sys__result@141@01 == 0]
(assert (= sys__result@141@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 495 | sys__result@141@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@141@01 0)) (= sys__result@141@01 0)))
(push) ; 24
(assert (not (or (= sys__result@141@01 0) (= sys__result@141@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@141@01 0) (= sys__result@141@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 496 | sys__result@141@01 == 2 | dead]
; [else-branch: 496 | sys__result@141@01 != 2 | live]
(push) ; 24
; [else-branch: 496 | sys__result@141@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 497 | sys__result@141@01 == 1 | dead]
; [else-branch: 497 | sys__result@141@01 != 1 | live]
(push) ; 25
; [else-branch: 497 | sys__result@141@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 498 | sys__result@141@01 == 0 | dead]
; [else-branch: 498 | sys__result@141@01 != 0 | live]
(push) ; 26
; [else-branch: 498 | sys__result@141@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@139@01) $k@143@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@144@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 414 | !(0 < tid@11@01 && tid@11@01 < N@134@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@134@01))))
(pop) ; 16
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 16
; [then-branch: 499 | !(0 < tid@11@01) | live]
; [else-branch: 499 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 499 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 499 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@134@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@134@01)))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 500 | !(0 < tid@11@01 && tid@11@01 < N@134@01) | live]
; [else-branch: 500 | 0 < tid@11@01 && tid@11@01 < N@134@01 | live]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 500 | !(0 < tid@11@01 && tid@11@01 < N@134@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@134@01))))
; [exec]
; __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 2, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 17
; [then-branch: 501 | False | dead]
; [else-branch: 501 | True | live]
(push) ; 18
; [else-branch: 501 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 502 | True | live]
; [else-branch: 502 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 502 | True]
; [eval] false || last_barrier == 1
(push) ; 19
; [then-branch: 503 | False | live]
; [else-branch: 503 | True | live]
(push) ; 20
; [then-branch: 503 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 503 | True]
; [eval] last_barrier == 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@155@01 $Perm)
(assert ($Perm.isReadVar $k@155@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@46@01 $k@125@01) $k@129@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@155@01 (+ (- $k@46@01 $k@125@01) $k@129@01)))
(assert (<= $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01)))
(assert (<= (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const $k@156@01 $Perm)
(assert ($Perm.isReadVar $k@156@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@47@01 $k@126@01) $k@131@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@156@01 (+ (- $k@47@01 $k@126@01) $k@131@01)))
(assert (<= $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01)))
(assert (<= (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 504 | sys__result@127@01 == 2 | dead]
; [else-branch: 504 | sys__result@127@01 != 2 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 504 | sys__result@127@01 != 2]
; [eval] last_barrier == 1
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 1))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 505 | sys__result@127@01 == 1 | live]
; [else-branch: 505 | sys__result@127@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 505 | sys__result@127@01 == 1]
; [eval] diz.demo__ar[tid]
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] tid > 0
(push) ; 19
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 506 | tid@11@01 > 0 | live]
; [else-branch: 506 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 506 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 20
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 20
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
(push) ; 20
(assert (not (< (- tid@11@01 1) (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 20
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 0
; [then-branch: 507 | sys__result@127@01 == 0 | dead]
; [else-branch: 507 | sys__result@127@01 != 0 | live]
(push) ; 20
; [else-branch: 507 | sys__result@127@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 508 | False | dead]
; [else-branch: 508 | True | live]
(push) ; 22
; [else-branch: 508 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 509 | False | dead]
; [else-branch: 509 | True | live]
(push) ; 22
; [else-branch: 509 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 510 | False | dead]
; [else-branch: 510 | True | live]
(push) ; 22
; [else-branch: 510 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 511 | False | dead]
; [else-branch: 511 | True | live]
(push) ; 22
; [else-branch: 511 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 512 | False | dead]
; [else-branch: 512 | True | live]
(push) ; 22
; [else-branch: 512 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 513 | True | live]
; [else-branch: 513 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 513 | True]
; [eval] gsize > 1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 514 | True | live]
; [else-branch: 514 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 514 | True]
; [eval] 0 < N
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< 0 N@134@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< 0 N@134@01))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 515 | True | live]
; [else-branch: 515 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 515 | True]
; [eval] N < gsize
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< N@134@01 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< N@134@01 gsize@10@01))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 516 | True | live]
; [else-branch: 516 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 516 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@134@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 517 | tid@11@01 < N@134@01 | dead]
; [else-branch: 517 | !(tid@11@01 < N@134@01) | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 517 | !(tid@11@01 < N@134@01)]
(assert (not (< tid@11@01 N@134@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (not (< tid@11@01 N@134@01)))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (not (< tid@11@01 N@134@01)))
(push) ; 21
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  1))
(declare-const sys__result@157@01 Int)
(declare-const $t@158@01 $Snap)
(assert (= $t@158@01 ($Snap.combine ($Snap.first $t@158@01) ($Snap.second $t@158@01))))
(assert (= ($Snap.first $t@158@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@158@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@158@01))
    ($Snap.second ($Snap.second $t@158@01)))))
(assert (= ($Snap.first ($Snap.second $t@158@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@158@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@158@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@158@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@158@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@158@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@158@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))
(declare-const $k@159@01 $Perm)
(assert ($Perm.isReadVar $k@159@01))
(declare-const $t@160@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01))
    (Seq_equal $t@160@01 $t@130@01))
  (=>
    (< $Perm.No $k@159@01)
    (Seq_equal
      $t@160@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)))
(assert (<= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@160@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))
(declare-const $k@161@01 $Perm)
(assert ($Perm.isReadVar $k@161@01))
(declare-const $t@162@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01))
    (Seq_equal $t@162@01 $t@132@01))
  (=>
    (< $Perm.No $k@161@01)
    (Seq_equal
      $t@162@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)))
(assert (<= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@162@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@160@01 $t@130@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@162@01 $t@132@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 2))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (= sys__result@157@01 2)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 518 | sys__result@157@01 == 2 | live]
; [else-branch: 518 | sys__result@157@01 != 2 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 518 | sys__result@157@01 == 2]
(assert (= sys__result@157@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@160@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@162@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= (Seq_index $t@160@01 tid@11@01) (Seq_index $t@162@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@162@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 1))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 519 | sys__result@157@01 == 1 | dead]
; [else-branch: 519 | sys__result@157@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 519 | sys__result@157@01 != 1]
(assert (not (= sys__result@157@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 520 | sys__result@157@01 == 0 | dead]
; [else-branch: 520 | sys__result@157@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 520 | sys__result@157@01 != 0]
(assert (not (= sys__result@157@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 521 | False | dead]
; [else-branch: 521 | True | live]
(push) ; 25
; [else-branch: 521 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 522 | False | dead]
; [else-branch: 522 | True | live]
(push) ; 25
; [else-branch: 522 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 523 | False | dead]
; [else-branch: 523 | True | live]
(push) ; 25
; [else-branch: 523 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 524 | False | dead]
; [else-branch: 524 | True | live]
(push) ; 25
; [else-branch: 524 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 525 | False | dead]
; [else-branch: 525 | True | live]
(push) ; 25
; [else-branch: 525 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 526 | True | live]
; [else-branch: 526 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 526 | True]
; [eval] gsize > 1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 527 | True | live]
; [else-branch: 527 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 527 | True]
; [eval] 0 < N
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 528 | True | live]
; [else-branch: 528 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 528 | True]
; [eval] N < gsize
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 529 | True | live]
; [else-branch: 529 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 529 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 26
; [then-branch: 530 | tid@11@01 < N@134@01 | dead]
; [else-branch: 530 | !(tid@11@01 < N@134@01) | live]
(push) ; 27
; [else-branch: 530 | !(tid@11@01 < N@134@01)]
(pop) ; 27
(pop) ; 26
; Joined path conditions
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  1))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@163@01 $Perm)
(assert ($Perm.isReadVar $k@163@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@163@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@163@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@163@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)
      $k@163@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@164@01 $Perm)
(assert ($Perm.isReadVar $k@164@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@164@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@164@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@164@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)
      $k@164@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 531 | False | live]
; [else-branch: 531 | True | live]
(push) ; 25
; [then-branch: 531 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 531 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 532 | sys__result@157@01 == 0 | live]
; [else-branch: 532 | sys__result@157@01 != 0 | live]
(push) ; 27
; [then-branch: 532 | sys__result@157@01 == 0]
(assert (= sys__result@157@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 532 | sys__result@157@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(push) ; 24
(assert (not (or (= sys__result@157@01 0) (= sys__result@157@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@157@01 0) (= sys__result@157@01 2)))
; [eval] __last_barrier == 2
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 2))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 533 | sys__result@157@01 == 2 | live]
; [else-branch: 533 | sys__result@157@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 533 | sys__result@157@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@162@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] __last_barrier == 1
; [then-branch: 534 | sys__result@157@01 == 1 | dead]
; [else-branch: 534 | sys__result@157@01 != 1 | live]
(push) ; 25
; [else-branch: 534 | sys__result@157@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 535 | sys__result@157@01 == 0 | dead]
; [else-branch: 535 | sys__result@157@01 != 0 | live]
(push) ; 26
; [else-branch: 535 | sys__result@157@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
; [then-branch: 536 | tid@11@01 < N@134@01 | dead]
; [else-branch: 536 | !(tid@11@01 < N@134@01) | live]
(push) ; 28
; [else-branch: 536 | !(tid@11@01 < N@134@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 518 | sys__result@157@01 != 2]
(assert (not (= sys__result@157@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 1))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= sys__result@157@01 1)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 537 | sys__result@157@01 == 1 | live]
; [else-branch: 537 | sys__result@157@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 537 | sys__result@157@01 == 1]
(assert (= sys__result@157@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@160@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (> tid@11@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 538 | tid@11@01 > 0 | live]
; [else-branch: 538 | !(tid@11@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 538 | tid@11@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 24
(assert (not (>= (- tid@11@01 1) 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< (- tid@11@01 1) (Seq_length $t@162@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@160@01 tid@11@01) (Seq_index $t@162@01 (- tid@11@01 1)))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@162@01 (- tid@11@01 1)) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 539 | sys__result@157@01 == 0 | dead]
; [else-branch: 539 | sys__result@157@01 != 0 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 539 | sys__result@157@01 != 0]
(assert (not (= sys__result@157@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@157@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 540 | False | dead]
; [else-branch: 540 | True | live]
(push) ; 26
; [else-branch: 540 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 541 | False | dead]
; [else-branch: 541 | True | live]
(push) ; 26
; [else-branch: 541 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 542 | False | dead]
; [else-branch: 542 | True | live]
(push) ; 26
; [else-branch: 542 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 543 | False | dead]
; [else-branch: 543 | True | live]
(push) ; 26
; [else-branch: 543 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 544 | False | dead]
; [else-branch: 544 | True | live]
(push) ; 26
; [else-branch: 544 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 545 | True | dead]
; [else-branch: 545 | False | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 545 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 546 | True | dead]
; [else-branch: 546 | False | live]
(push) ; 26
; [else-branch: 546 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 547 | True | dead]
; [else-branch: 547 | False | live]
(push) ; 26
; [else-branch: 547 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 548 | True | dead]
; [else-branch: 548 | False | live]
(push) ; 26
; [else-branch: 548 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@165@01 $Perm)
(assert ($Perm.isReadVar $k@165@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@165@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@165@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@165@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)
      $k@165@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const $k@166@01 $Perm)
(assert ($Perm.isReadVar $k@166@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@166@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@166@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@166@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)
      $k@166@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 549 | False | live]
; [else-branch: 549 | True | live]
(push) ; 26
; [then-branch: 549 | False]
(pop) ; 26
(push) ; 26
; [else-branch: 549 | True]
; [eval] __last_barrier == 0
(push) ; 27
; [then-branch: 550 | sys__result@157@01 == 0 | live]
; [else-branch: 550 | sys__result@157@01 != 0 | live]
(push) ; 28
; [then-branch: 550 | sys__result@157@01 == 0]
(assert (= sys__result@157@01 0))
(pop) ; 28
(push) ; 28
; [else-branch: 550 | sys__result@157@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(push) ; 25
(assert (not (or (= sys__result@157@01 0) (= sys__result@157@01 2))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@157@01 0) (= sys__result@157@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 551 | sys__result@157@01 == 2 | dead]
; [else-branch: 551 | sys__result@157@01 != 2 | live]
(push) ; 25
; [else-branch: 551 | sys__result@157@01 != 2]
; [eval] __last_barrier == 1
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 1))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 552 | sys__result@157@01 == 1 | dead]
; [else-branch: 552 | sys__result@157@01 != 1 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 552 | sys__result@157@01 != 1]
(assert (not (= sys__result@157@01 1)))
; [eval] __last_barrier == 0
; [then-branch: 553 | sys__result@157@01 == 0 | dead]
; [else-branch: 553 | sys__result@157@01 != 0 | live]
(push) ; 27
; [else-branch: 553 | sys__result@157@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 28
; [then-branch: 554 | tid@11@01 < N@134@01 | dead]
; [else-branch: 554 | !(tid@11@01 < N@134@01) | live]
(push) ; 29
; [else-branch: 554 | !(tid@11@01 < N@134@01)]
(pop) ; 29
(pop) ; 28
; Joined path conditions
(push) ; 28
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  1))
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 537 | sys__result@157@01 != 1]
(assert (not (= sys__result@157@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (= sys__result@157@01 0)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 555 | sys__result@157@01 == 0 | live]
; [else-branch: 555 | sys__result@157@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 555 | sys__result@157@01 == 0]
(assert (= sys__result@157@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@160@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@162@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@160@01 tid@11@01) (Seq_index $t@162@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@162@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@157@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 556 | False | dead]
; [else-branch: 556 | True | live]
(push) ; 25
; [else-branch: 556 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 557 | False | dead]
; [else-branch: 557 | True | live]
(push) ; 25
; [else-branch: 557 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 558 | False | dead]
; [else-branch: 558 | True | live]
(push) ; 25
; [else-branch: 558 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 559 | False | dead]
; [else-branch: 559 | True | live]
(push) ; 25
; [else-branch: 559 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 560 | False | dead]
; [else-branch: 560 | True | live]
(push) ; 25
; [else-branch: 560 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 561 | True | dead]
; [else-branch: 561 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 561 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 562 | True | dead]
; [else-branch: 562 | False | live]
(push) ; 25
; [else-branch: 562 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 563 | True | dead]
; [else-branch: 563 | False | live]
(push) ; 25
; [else-branch: 563 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 564 | True | dead]
; [else-branch: 564 | False | live]
(push) ; 25
; [else-branch: 564 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@167@01 $Perm)
(assert ($Perm.isReadVar $k@167@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@167@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@167@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@167@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)
      $k@167@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@168@01 $Perm)
(assert ($Perm.isReadVar $k@168@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@168@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@168@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@168@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)
      $k@168@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 565 | False | live]
; [else-branch: 565 | True | live]
(push) ; 25
; [then-branch: 565 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 565 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 566 | sys__result@157@01 == 0 | live]
; [else-branch: 566 | sys__result@157@01 != 0 | live]
(push) ; 27
; [then-branch: 566 | sys__result@157@01 == 0]
(pop) ; 27
(push) ; 27
; [else-branch: 566 | sys__result@157@01 != 0]
(assert (not (= sys__result@157@01 0)))
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(push) ; 24
(assert (not (or (= sys__result@157@01 0) (= sys__result@157@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@157@01 0) (= sys__result@157@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 567 | sys__result@157@01 == 2 | dead]
; [else-branch: 567 | sys__result@157@01 != 2 | live]
(push) ; 24
; [else-branch: 567 | sys__result@157@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 568 | sys__result@157@01 == 1 | dead]
; [else-branch: 568 | sys__result@157@01 != 1 | live]
(push) ; 25
; [else-branch: 568 | sys__result@157@01 != 1]
; [eval] __last_barrier == 0
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@157@01 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 569 | sys__result@157@01 == 0 | dead]
; [else-branch: 569 | sys__result@157@01 != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 569 | sys__result@157@01 != 0]
(assert (not (= sys__result@157@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
; [then-branch: 570 | tid@11@01 < N@134@01 | dead]
; [else-branch: 570 | !(tid@11@01 < N@134@01) | live]
(push) ; 28
; [else-branch: 570 | !(tid@11@01 < N@134@01)]
(pop) ; 28
(pop) ; 27
; Joined path conditions
(push) ; 27
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  1))
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(push) ; 23
; [else-branch: 555 | sys__result@157@01 != 0]
(assert (not (= sys__result@157@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@157@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 571 | False | dead]
; [else-branch: 571 | True | live]
(push) ; 25
; [else-branch: 571 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 572 | False | dead]
; [else-branch: 572 | True | live]
(push) ; 25
; [else-branch: 572 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 573 | False | dead]
; [else-branch: 573 | True | live]
(push) ; 25
; [else-branch: 573 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 574 | False | dead]
; [else-branch: 574 | True | live]
(push) ; 25
; [else-branch: 574 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 575 | False | dead]
; [else-branch: 575 | True | live]
(push) ; 25
; [else-branch: 575 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 576 | True | dead]
; [else-branch: 576 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 576 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 577 | True | dead]
; [else-branch: 577 | False | live]
(push) ; 25
; [else-branch: 577 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 578 | True | dead]
; [else-branch: 578 | False | live]
(push) ; 25
; [else-branch: 578 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@158@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 579 | True | dead]
; [else-branch: 579 | False | live]
(push) ; 25
; [else-branch: 579 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@169@01 $Perm)
(assert ($Perm.isReadVar $k@169@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@169@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@169@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01) $k@169@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01)
      $k@169@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@170@01 $Perm)
(assert ($Perm.isReadVar $k@170@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@170@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@170@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01) $k@170@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01)
      $k@170@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@156@01) $k@161@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 580 | False | live]
; [else-branch: 580 | True | live]
(push) ; 25
; [then-branch: 580 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 580 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 581 | sys__result@157@01 == 0 | live]
; [else-branch: 581 | sys__result@157@01 != 0 | live]
(push) ; 27
; [then-branch: 581 | sys__result@157@01 == 0]
(assert (= sys__result@157@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 581 | sys__result@157@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@157@01 0)) (= sys__result@157@01 0)))
(push) ; 24
(assert (not (or (= sys__result@157@01 0) (= sys__result@157@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@157@01 0) (= sys__result@157@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 582 | sys__result@157@01 == 2 | dead]
; [else-branch: 582 | sys__result@157@01 != 2 | live]
(push) ; 24
; [else-branch: 582 | sys__result@157@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 583 | sys__result@157@01 == 1 | dead]
; [else-branch: 583 | sys__result@157@01 != 1 | live]
(push) ; 25
; [else-branch: 583 | sys__result@157@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 584 | sys__result@157@01 == 0 | dead]
; [else-branch: 584 | sys__result@157@01 != 0 | live]
(push) ; 26
; [else-branch: 584 | sys__result@157@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@155@01) $k@159@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@160@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(push) ; 16
; [else-branch: 500 | 0 < tid@11@01 && tid@11@01 < N@134@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@134@01)))
(pop) ; 16
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 399 | !(tid@11@01 > 0)]
(assert (not (> tid@11@01 0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 15
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 0))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 585 | sys__result@127@01 == 0 | dead]
; [else-branch: 585 | sys__result@127@01 != 0 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 585 | sys__result@127@01 != 0]
(assert (not (= sys__result@127@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 586 | True | live]
; [else-branch: 586 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 586 | True]
; [eval] gsize > 1
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 587 | True | live]
; [else-branch: 587 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 587 | True]
; [eval] 0 < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 588 | True | live]
; [else-branch: 588 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 588 | True]
; [eval] N < gsize
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 589 | True | live]
; [else-branch: 589 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 589 | True]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 18
; [then-branch: 590 | !(0 < tid@11@01) | live]
; [else-branch: 590 | 0 < tid@11@01 | live]
(push) ; 19
; [then-branch: 590 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 19
(push) ; 19
; [else-branch: 590 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid <= N
(pop) ; 19
(pop) ; 18
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 591 | 0 < tid@11@01 && tid@11@01 <= N@39@01 | dead]
; [else-branch: 591 | !(0 < tid@11@01 && tid@11@01 <= N@39@01) | live]
(set-option :timeout 0)
(push) ; 19
; [else-branch: 591 | !(0 < tid@11@01 && tid@11@01 <= N@39@01)]
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01))))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (and
  (or (< 0 tid@11@01) (not (< 0 tid@11@01)))
  (not (and (< 0 tid@11@01) (<= tid@11@01 N@39@01)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 16
(push) ; 17
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [then-branch: 592 | True | live]
; [else-branch: 592 | False | dead]
(set-option :timeout 0)
(push) ; 17
; [then-branch: 592 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 18
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 18
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
(push) ; 18
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 18
(push) ; 19
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@39@01))))
(check-sat)
; unknown
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(set-option :timeout 10)
(assert (not (< tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [then-branch: 593 | tid@11@01 < N@39@01 | live]
; [else-branch: 593 | !(tid@11@01 < N@39@01) | dead]
(set-option :timeout 0)
(push) ; 19
; [then-branch: 593 | tid@11@01 < N@39@01]
(assert (< tid@11@01 N@39@01))
; [eval] demo__bin(N, tid)
(push) ; 20
; [eval] N >= 0
(push) ; 21
(assert (not (>= N@39@01 0)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (>= N@39@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 21
(assert (not (<= tid@11@01 N@39@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@39@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01))
(pop) ; 20
; Joined path conditions
(assert (and
  (>= N@39@01 0)
  (<= tid@11@01 N@39@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(pop) ; 19
(pop) ; 18
; Joined path conditions
(assert (< tid@11@01 N@39@01))
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (< tid@11@01 N@39@01))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@39@01 tid@11@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 594 | False | dead]
; [else-branch: 594 | True | live]
(push) ; 17
; [else-branch: 594 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 595 | False | dead]
; [else-branch: 595 | True | live]
(push) ; 17
; [else-branch: 595 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 596 | False | dead]
; [else-branch: 596 | True | live]
(push) ; 17
; [else-branch: 596 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 16
; [then-branch: 597 | False | dead]
; [else-branch: 597 | True | live]
(push) ; 17
; [else-branch: 597 | True]
(pop) ; 17
(pop) ; 16
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@171@01 Int)
(assert (= N@171@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 16
; [then-branch: 598 | !(0 < tid@11@01) | live]
; [else-branch: 598 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 598 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 598 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@171@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 599 | 0 < tid@11@01 && tid@11@01 < N@171@01 | dead]
; [else-branch: 599 | !(0 < tid@11@01 && tid@11@01 < N@171@01) | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 599 | !(0 < tid@11@01 && tid@11@01 < N@171@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@171@01))))
(pop) ; 16
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 16
; [then-branch: 600 | !(0 < tid@11@01) | live]
; [else-branch: 600 | 0 < tid@11@01 | live]
(push) ; 17
; [then-branch: 600 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 17
(push) ; 17
; [else-branch: 600 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 17
(pop) ; 16
; Joined path conditions
; Joined path conditions
(push) ; 16
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@171@01))))
(check-sat)
; unknown
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 16
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@171@01)))))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 601 | !(0 < tid@11@01 && tid@11@01 < N@171@01) | live]
; [else-branch: 601 | 0 < tid@11@01 && tid@11@01 < N@171@01 | dead]
(set-option :timeout 0)
(push) ; 16
; [then-branch: 601 | !(0 < tid@11@01 && tid@11@01 < N@171@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@171@01))))
; [exec]
; __flatten_2 := demo__main_barrier(diz, current_thread_id, tcount, gsize, tid,
;   gid, lid, 2, __last_barrier, N)
; [eval] diz != null
; [eval] current_thread_id >= 0
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 17
; [then-branch: 602 | False | dead]
; [else-branch: 602 | True | live]
(push) ; 18
; [else-branch: 602 | True]
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 17
(push) ; 18
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 603 | True | live]
; [else-branch: 603 | False | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 603 | True]
; [eval] false || last_barrier == 1
(push) ; 19
; [then-branch: 604 | False | live]
; [else-branch: 604 | True | live]
(push) ; 20
; [then-branch: 604 | False]
(assert false)
(pop) ; 20
(push) ; 20
; [else-branch: 604 | True]
; [eval] last_barrier == 1
(pop) ; 20
(pop) ; 19
; Joined path conditions
; Joined path conditions
(pop) ; 18
(pop) ; 17
; Joined path conditions
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@172@01 $Perm)
(assert ($Perm.isReadVar $k@172@01))
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@46@01 $k@125@01) $k@129@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@172@01 (+ (- $k@46@01 $k@125@01) $k@129@01)))
(assert (<= $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01)))
(assert (<= (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(declare-const $k@173@01 $Perm)
(assert ($Perm.isReadVar $k@173@01))
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (not (= (+ (- $k@47@01 $k@126@01) $k@131@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
(assert (< $k@173@01 (+ (- $k@47@01 $k@126@01) $k@131@01)))
(assert (<= $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01)))
(assert (<= (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 17
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 17
; 0.00s
; (get-info :all-statistics)
; [eval] last_barrier == 2
; [then-branch: 605 | sys__result@127@01 == 2 | dead]
; [else-branch: 605 | sys__result@127@01 != 2 | live]
(set-option :timeout 0)
(push) ; 17
; [else-branch: 605 | sys__result@127@01 != 2]
; [eval] last_barrier == 1
(push) ; 18
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 1))))
(check-sat)
; unknown
(pop) ; 18
; 0.00s
; (get-info :all-statistics)
; [then-branch: 606 | sys__result@127@01 == 1 | live]
; [else-branch: 606 | sys__result@127@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 18
; [then-branch: 606 | sys__result@127@01 == 1]
; [eval] diz.demo__ar[tid]
(push) ; 19
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 19
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
(push) ; 19
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 19
; 0.00s
; (get-info :all-statistics)
; [eval] tid > 0
; [then-branch: 607 | tid@11@01 > 0 | dead]
; [else-branch: 607 | !(tid@11@01 > 0) | live]
(push) ; 19
; [else-branch: 607 | !(tid@11@01 > 0)]
; [eval] last_barrier == 0
; [then-branch: 608 | sys__result@127@01 == 0 | dead]
; [else-branch: 608 | sys__result@127@01 != 0 | live]
(push) ; 20
; [else-branch: 608 | sys__result@127@01 != 0]
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 609 | False | dead]
; [else-branch: 609 | True | live]
(push) ; 22
; [else-branch: 609 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 610 | False | dead]
; [else-branch: 610 | True | live]
(push) ; 22
; [else-branch: 610 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 611 | False | dead]
; [else-branch: 611 | True | live]
(push) ; 22
; [else-branch: 611 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 612 | False | dead]
; [else-branch: 612 | True | live]
(push) ; 22
; [else-branch: 612 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 21
; [then-branch: 613 | False | dead]
; [else-branch: 613 | True | live]
(push) ; 22
; [else-branch: 613 | True]
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 614 | True | live]
; [else-branch: 614 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 614 | True]
; [eval] gsize > 1
(pop) ; 22
(pop) ; 21
; Joined path conditions
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 615 | True | live]
; [else-branch: 615 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 615 | True]
; [eval] 0 < N
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< 0 N@171@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< 0 N@171@01))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 616 | True | live]
; [else-branch: 616 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 616 | True]
; [eval] N < gsize
(pop) ; 22
(pop) ; 21
; Joined path conditions
(push) ; 21
(assert (not (< N@171@01 gsize@10@01)))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (< N@171@01 gsize@10@01))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 21
(push) ; 22
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 617 | True | live]
; [else-branch: 617 | False | dead]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 617 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 23
(push) ; 24
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@171@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< tid@11@01 N@171@01)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 618 | tid@11@01 < N@171@01 | live]
; [else-branch: 618 | !(tid@11@01 < N@171@01) | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 618 | tid@11@01 < N@171@01]
(assert (< tid@11@01 N@171@01))
; [eval] demo__bin(N, tid)
(push) ; 25
; [eval] N >= 0
(push) ; 26
(assert (not (>= N@171@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (>= N@171@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 26
(assert (not (<= tid@11@01 N@171@01)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@171@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))
(pop) ; 25
; Joined path conditions
(assert (and
  (>= N@171@01 0)
  (<= tid@11@01 N@171@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01)))
(pop) ; 24
(pop) ; 23
; Joined path conditions
(assert (=>
  (< tid@11@01 N@171@01)
  (and
    (< tid@11@01 N@171@01)
    (>= N@171@01 0)
    (<= tid@11@01 N@171@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))))
(assert (< tid@11@01 N@171@01))
(pop) ; 22
(pop) ; 21
; Joined path conditions
(assert (and
  (=>
    (< tid@11@01 N@171@01)
    (and
      (< tid@11@01 N@171@01)
      (>= N@171@01 0)
      (<= tid@11@01 N@171@01)
      (demo__bin%precondition ($Snap.combine
        $Snap.unit
        ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01)))
  (< tid@11@01 N@171@01)))
(push) ; 21
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01)))
(declare-const sys__result@174@01 Int)
(declare-const $t@175@01 $Snap)
(assert (= $t@175@01 ($Snap.combine ($Snap.first $t@175@01) ($Snap.second $t@175@01))))
(assert (= ($Snap.first $t@175@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@175@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@175@01))
    ($Snap.second ($Snap.second $t@175@01)))))
(assert (= ($Snap.first ($Snap.second $t@175@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@175@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@175@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@175@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@175@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@175@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@175@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
(declare-const $k@176@01 $Perm)
(assert ($Perm.isReadVar $k@176@01))
(declare-const $t@177@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01))
    (Seq_equal $t@177@01 $t@130@01))
  (=>
    (< $Perm.No $k@176@01)
    (Seq_equal
      $t@177@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)))
(assert (<= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@177@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
(declare-const $k@178@01 $Perm)
(assert ($Perm.isReadVar $k@178@01))
(declare-const $t@179@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01))
    (Seq_equal $t@179@01 $t@132@01))
  (=>
    (< $Perm.No $k@178@01)
    (Seq_equal
      $t@179@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
(assert (<= $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)))
(assert (<= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $Perm.Write))
(assert (=>
  (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))
  (not (= diz@7@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@179@01) gsize@10@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@177@01 $t@130@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal $t@179@01 $t@132@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 2))))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 21
(set-option :timeout 10)
(assert (not (= sys__result@174@01 2)))
(check-sat)
; unknown
(pop) ; 21
; 0.00s
; (get-info :all-statistics)
; [then-branch: 619 | sys__result@174@01 == 2 | live]
; [else-branch: 619 | sys__result@174@01 != 2 | live]
(set-option :timeout 0)
(push) ; 21
; [then-branch: 619 | sys__result@174@01 == 2]
(assert (= sys__result@174@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@177@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 22
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(assert (not (< tid@11@01 (Seq_length $t@179@01))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(push) ; 22
(set-option :timeout 10)
(assert (not (= (Seq_index $t@177@01 tid@11@01) (Seq_index $t@179@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@179@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 1))))
(check-sat)
; unsat
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 620 | sys__result@174@01 == 1 | dead]
; [else-branch: 620 | sys__result@174@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [else-branch: 620 | sys__result@174@01 != 1]
(assert (not (= sys__result@174@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 0))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 621 | sys__result@174@01 == 0 | dead]
; [else-branch: 621 | sys__result@174@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [else-branch: 621 | sys__result@174@01 != 0]
(assert (not (= sys__result@174@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 622 | False | dead]
; [else-branch: 622 | True | live]
(push) ; 25
; [else-branch: 622 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 623 | False | dead]
; [else-branch: 623 | True | live]
(push) ; 25
; [else-branch: 623 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 624 | False | dead]
; [else-branch: 624 | True | live]
(push) ; 25
; [else-branch: 624 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 625 | False | dead]
; [else-branch: 625 | True | live]
(push) ; 25
; [else-branch: 625 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 626 | False | dead]
; [else-branch: 626 | True | live]
(push) ; 25
; [else-branch: 626 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 627 | True | live]
; [else-branch: 627 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 627 | True]
; [eval] gsize > 1
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 628 | True | live]
; [else-branch: 628 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 628 | True]
; [eval] 0 < N
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 629 | True | live]
; [else-branch: 629 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 629 | True]
; [eval] N < gsize
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 630 | True | live]
; [else-branch: 630 | False | dead]
(set-option :timeout 0)
(push) ; 25
; [then-branch: 630 | True]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 26
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 26
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
(push) ; 26
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 26
(push) ; 27
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@171@01))))
(check-sat)
; unknown
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [then-branch: 631 | tid@11@01 < N@171@01 | live]
; [else-branch: 631 | !(tid@11@01 < N@171@01) | dead]
(set-option :timeout 0)
(push) ; 27
; [then-branch: 631 | tid@11@01 < N@171@01]
; [eval] demo__bin(N, tid)
(push) ; 28
; [eval] N >= 0
(push) ; 29
(assert (not (>= N@171@01 0)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (>= N@171@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 29
(assert (not (<= tid@11@01 N@171@01)))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@171@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))
(pop) ; 28
; Joined path conditions
(assert (and
  (>= N@171@01 0)
  (<= tid@11@01 N@171@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01)))
(pop) ; 27
(pop) ; 26
; Joined path conditions
(assert (=>
  (< tid@11@01 N@171@01)
  (and
    (>= N@171@01 0)
    (<= tid@11@01 N@171@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))))
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=>
  (< tid@11@01 N@171@01)
  (and
    (>= N@171@01 0)
    (<= tid@11@01 N@171@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))))
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@180@01 $Perm)
(assert ($Perm.isReadVar $k@180@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@180@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@180@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@180@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)
      $k@180@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@181@01 $Perm)
(assert ($Perm.isReadVar $k@181@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@181@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@181@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@181@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)
      $k@181@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 632 | False | live]
; [else-branch: 632 | True | live]
(push) ; 25
; [then-branch: 632 | False]
(assert false)
(pop) ; 25
(push) ; 25
; [else-branch: 632 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 633 | sys__result@174@01 == 0 | live]
; [else-branch: 633 | sys__result@174@01 != 0 | live]
(push) ; 27
; [then-branch: 633 | sys__result@174@01 == 0]
(assert (= sys__result@174@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 633 | sys__result@174@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(push) ; 24
(assert (not (or (= sys__result@174@01 0) (= sys__result@174@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@174@01 0) (= sys__result@174@01 2)))
; [eval] __last_barrier == 2
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 2))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 634 | sys__result@174@01 == 2 | live]
; [else-branch: 634 | sys__result@174@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 24
; [then-branch: 634 | sys__result@174@01 == 2]
; [eval] diz.demo__ar[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[tid]
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 25
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(push) ; 25
(assert (not (< tid@11@01 (Seq_length $t@179@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] __last_barrier == 1
; [then-branch: 635 | sys__result@174@01 == 1 | dead]
; [else-branch: 635 | sys__result@174@01 != 1 | live]
(push) ; 25
; [else-branch: 635 | sys__result@174@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 636 | sys__result@174@01 == 0 | dead]
; [else-branch: 636 | sys__result@174@01 != 0 | live]
(push) ; 26
; [else-branch: 636 | sys__result@174@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@171@01))))
(check-sat)
; unknown
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 637 | tid@11@01 < N@171@01 | live]
; [else-branch: 637 | !(tid@11@01 < N@171@01) | dead]
(set-option :timeout 0)
(push) ; 28
; [then-branch: 637 | tid@11@01 < N@171@01]
; [eval] demo__bin(N, tid)
(push) ; 29
; [eval] N >= 0
(push) ; 30
(assert (not (>= N@171@01 0)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (>= N@171@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 30
(assert (not (<= tid@11@01 N@171@01)))
(check-sat)
; unsat
(pop) ; 30
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 N@171@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01))
(pop) ; 29
; Joined path conditions
(assert (and
  (>= N@171@01 0)
  (<= tid@11@01 N@171@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@171@01 tid@11@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(push) ; 21
; [else-branch: 619 | sys__result@174@01 != 2]
(assert (not (= sys__result@174@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 22
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 1))))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 22
(set-option :timeout 10)
(assert (not (= sys__result@174@01 1)))
(check-sat)
; unknown
(pop) ; 22
; 0.00s
; (get-info :all-statistics)
; [then-branch: 638 | sys__result@174@01 == 1 | live]
; [else-branch: 638 | sys__result@174@01 != 1 | live]
(set-option :timeout 0)
(push) ; 22
; [then-branch: 638 | sys__result@174@01 == 1]
(assert (= sys__result@174@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 23
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(push) ; 23
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@177@01 tid@11@01) $Ref.null)))
; [eval] tid > 0
; [then-branch: 639 | tid@11@01 > 0 | dead]
; [else-branch: 639 | !(tid@11@01 > 0) | live]
(push) ; 23
; [else-branch: 639 | !(tid@11@01 > 0)]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 24
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 0))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [then-branch: 640 | sys__result@174@01 == 0 | dead]
; [else-branch: 640 | sys__result@174@01 != 0 | live]
(set-option :timeout 0)
(push) ; 24
; [else-branch: 640 | sys__result@174@01 != 0]
(assert (not (= sys__result@174@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@174@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 641 | False | dead]
; [else-branch: 641 | True | live]
(push) ; 26
; [else-branch: 641 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 642 | False | dead]
; [else-branch: 642 | True | live]
(push) ; 26
; [else-branch: 642 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 643 | False | dead]
; [else-branch: 643 | True | live]
(push) ; 26
; [else-branch: 643 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 644 | False | dead]
; [else-branch: 644 | True | live]
(push) ; 26
; [else-branch: 644 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 25
; [then-branch: 645 | False | dead]
; [else-branch: 645 | True | live]
(push) ; 26
; [else-branch: 645 | True]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 25
(push) ; 26
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 646 | True | dead]
; [else-branch: 646 | False | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 646 | False]
(assert false)
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 647 | True | dead]
; [else-branch: 647 | False | live]
(push) ; 26
; [else-branch: 647 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 648 | True | dead]
; [else-branch: 648 | False | live]
(push) ; 26
; [else-branch: 648 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 25
; [then-branch: 649 | True | dead]
; [else-branch: 649 | False | live]
(push) ; 26
; [else-branch: 649 | False]
(pop) ; 26
(pop) ; 25
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@182@01 $Perm)
(assert ($Perm.isReadVar $k@182@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@182@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@182@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@182@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)
      $k@182@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(declare-const $k@183@01 $Perm)
(assert ($Perm.isReadVar $k@183@01))
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (< $k@183@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@183@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@183@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)
      $k@183@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 25
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 25
; [then-branch: 650 | False | live]
; [else-branch: 650 | True | live]
(push) ; 26
; [then-branch: 650 | False]
(pop) ; 26
(push) ; 26
; [else-branch: 650 | True]
; [eval] __last_barrier == 0
(push) ; 27
; [then-branch: 651 | sys__result@174@01 == 0 | live]
; [else-branch: 651 | sys__result@174@01 != 0 | live]
(push) ; 28
; [then-branch: 651 | sys__result@174@01 == 0]
(assert (= sys__result@174@01 0))
(pop) ; 28
(push) ; 28
; [else-branch: 651 | sys__result@174@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 28
(pop) ; 27
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(pop) ; 26
(pop) ; 25
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(push) ; 25
(assert (not (or (= sys__result@174@01 0) (= sys__result@174@01 2))))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@174@01 0) (= sys__result@174@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 652 | sys__result@174@01 == 2 | dead]
; [else-branch: 652 | sys__result@174@01 != 2 | live]
(push) ; 25
; [else-branch: 652 | sys__result@174@01 != 2]
; [eval] __last_barrier == 1
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 1))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 653 | sys__result@174@01 == 1 | dead]
; [else-branch: 653 | sys__result@174@01 != 1 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 653 | sys__result@174@01 != 1]
(assert (not (= sys__result@174@01 1)))
; [eval] __last_barrier == 0
; [then-branch: 654 | sys__result@174@01 == 0 | dead]
; [else-branch: 654 | sys__result@174@01 != 0 | live]
(push) ; 27
; [else-branch: 654 | sys__result@174@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 28
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 28
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(push) ; 28
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 28
(push) ; 29
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@171@01))))
(check-sat)
; unsat
(pop) ; 29
; 0.00s
; (get-info :all-statistics)
; [then-branch: 655 | tid@11@01 < N@171@01 | dead]
; [else-branch: 655 | !(tid@11@01 < N@171@01) | live]
(set-option :timeout 0)
(push) ; 29
; [else-branch: 655 | !(tid@11@01 < N@171@01)]
(assert (not (< tid@11@01 N@171@01)))
(pop) ; 29
(pop) ; 28
; Joined path conditions
(assert (not (< tid@11@01 N@171@01)))
(push) ; 28
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  1))
(pop) ; 27
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(push) ; 22
; [else-branch: 638 | sys__result@174@01 != 1]
(assert (not (= sys__result@174@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 23
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 0))))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 23
(set-option :timeout 10)
(assert (not (= sys__result@174@01 0)))
(check-sat)
; unknown
(pop) ; 23
; 0.00s
; (get-info :all-statistics)
; [then-branch: 656 | sys__result@174@01 == 0 | live]
; [else-branch: 656 | sys__result@174@01 != 0 | live]
(set-option :timeout 0)
(push) ; 23
; [then-branch: 656 | sys__result@174@01 == 0]
(assert (= sys__result@174@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@177@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 24
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(assert (not (< tid@11@01 (Seq_length $t@179@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(push) ; 24
(set-option :timeout 10)
(assert (not (= (Seq_index $t@177@01 tid@11@01) (Seq_index $t@179@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@179@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@174@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 24
; [then-branch: 657 | False | dead]
; [else-branch: 657 | True | live]
(push) ; 25
; [else-branch: 657 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 658 | False | dead]
; [else-branch: 658 | True | live]
(push) ; 25
; [else-branch: 658 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 659 | False | dead]
; [else-branch: 659 | True | live]
(push) ; 25
; [else-branch: 659 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 660 | False | dead]
; [else-branch: 660 | True | live]
(push) ; 25
; [else-branch: 660 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 661 | False | dead]
; [else-branch: 661 | True | live]
(push) ; 25
; [else-branch: 661 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 662 | True | dead]
; [else-branch: 662 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 662 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 663 | True | dead]
; [else-branch: 663 | False | live]
(push) ; 25
; [else-branch: 663 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 664 | True | dead]
; [else-branch: 664 | False | live]
(push) ; 25
; [else-branch: 664 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 665 | True | dead]
; [else-branch: 665 | False | live]
(push) ; 25
; [else-branch: 665 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@184@01 $Perm)
(assert ($Perm.isReadVar $k@184@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@184@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@184@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@184@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)
      $k@184@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@185@01 $Perm)
(assert ($Perm.isReadVar $k@185@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@185@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@185@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@185@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)
      $k@185@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 666 | False | live]
; [else-branch: 666 | True | live]
(push) ; 25
; [then-branch: 666 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 666 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 667 | sys__result@174@01 == 0 | live]
; [else-branch: 667 | sys__result@174@01 != 0 | live]
(push) ; 27
; [then-branch: 667 | sys__result@174@01 == 0]
(pop) ; 27
(push) ; 27
; [else-branch: 667 | sys__result@174@01 != 0]
(assert (not (= sys__result@174@01 0)))
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(push) ; 24
(assert (not (or (= sys__result@174@01 0) (= sys__result@174@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@174@01 0) (= sys__result@174@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 668 | sys__result@174@01 == 2 | dead]
; [else-branch: 668 | sys__result@174@01 != 2 | live]
(push) ; 24
; [else-branch: 668 | sys__result@174@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 669 | sys__result@174@01 == 1 | dead]
; [else-branch: 669 | sys__result@174@01 != 1 | live]
(push) ; 25
; [else-branch: 669 | sys__result@174@01 != 1]
; [eval] __last_barrier == 0
(push) ; 26
(set-option :timeout 10)
(assert (not (not (= sys__result@174@01 0))))
(check-sat)
; unsat
(pop) ; 26
; 0.00s
; (get-info :all-statistics)
; [then-branch: 670 | sys__result@174@01 == 0 | dead]
; [else-branch: 670 | sys__result@174@01 != 0 | live]
(set-option :timeout 0)
(push) ; 26
; [else-branch: 670 | sys__result@174@01 != 0]
(assert (not (= sys__result@174@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 27
(push) ; 28
(set-option :timeout 10)
(assert (not (not (< tid@11@01 N@171@01))))
(check-sat)
; unsat
(pop) ; 28
; 0.00s
; (get-info :all-statistics)
; [then-branch: 671 | tid@11@01 < N@171@01 | dead]
; [else-branch: 671 | !(tid@11@01 < N@171@01) | live]
(set-option :timeout 0)
(push) ; 28
; [else-branch: 671 | !(tid@11@01 < N@171@01)]
(assert (not (< tid@11@01 N@171@01)))
(pop) ; 28
(pop) ; 27
; Joined path conditions
(assert (not (< tid@11@01 N@171@01)))
(push) ; 27
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  1)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  1))
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(push) ; 23
; [else-branch: 656 | sys__result@174@01 != 0]
(assert (not (= sys__result@174@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@174@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 672 | False | dead]
; [else-branch: 672 | True | live]
(push) ; 25
; [else-branch: 672 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 673 | False | dead]
; [else-branch: 673 | True | live]
(push) ; 25
; [else-branch: 673 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 674 | False | dead]
; [else-branch: 674 | True | live]
(push) ; 25
; [else-branch: 674 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 675 | False | dead]
; [else-branch: 675 | True | live]
(push) ; 25
; [else-branch: 675 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 24
; [then-branch: 676 | False | dead]
; [else-branch: 676 | True | live]
(push) ; 25
; [else-branch: 676 | True]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 24
(push) ; 25
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 25
; 0.00s
; (get-info :all-statistics)
; [then-branch: 677 | True | dead]
; [else-branch: 677 | False | live]
(set-option :timeout 0)
(push) ; 25
; [else-branch: 677 | False]
(assert false)
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 678 | True | dead]
; [else-branch: 678 | False | live]
(push) ; 25
; [else-branch: 678 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 679 | True | dead]
; [else-branch: 679 | False | live]
(push) ; 25
; [else-branch: 679 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@175@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 24
; [then-branch: 680 | True | dead]
; [else-branch: 680 | False | live]
(push) ; 25
; [else-branch: 680 | False]
(pop) ; 25
(pop) ; 24
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_2
; Loop head block: Re-establish invariant
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@186@01 $Perm)
(assert ($Perm.isReadVar $k@186@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@186@01 (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@186@01)))
(assert (<=
  (- (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01) $k@186@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01)
      $k@186@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(declare-const $k@187@01 $Perm)
(assert ($Perm.isReadVar $k@187@01))
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (not
  (= (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $Perm.No))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (< $k@187@01 (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)))
(assert (<=
  $Perm.No
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@187@01)))
(assert (<=
  (- (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01) $k@187@01)
  $Perm.Write))
(assert (=>
  (<
    $Perm.No
    (-
      (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01)
      $k@187@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 24
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@47@01 $k@126@01) $k@131@01) $k@173@01) $k@178@01))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
; [eval] false || (__last_barrier == 0 || __last_barrier == 2)
(set-option :timeout 0)
(push) ; 24
; [then-branch: 681 | False | live]
; [else-branch: 681 | True | live]
(push) ; 25
; [then-branch: 681 | False]
(pop) ; 25
(push) ; 25
; [else-branch: 681 | True]
; [eval] __last_barrier == 0
(push) ; 26
; [then-branch: 682 | sys__result@174@01 == 0 | live]
; [else-branch: 682 | sys__result@174@01 != 0 | live]
(push) ; 27
; [then-branch: 682 | sys__result@174@01 == 0]
(assert (= sys__result@174@01 0))
(pop) ; 27
(push) ; 27
; [else-branch: 682 | sys__result@174@01 != 0]
; [eval] __last_barrier == 2
(pop) ; 27
(pop) ; 26
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(pop) ; 25
(pop) ; 24
; Joined path conditions
; Joined path conditions
(assert (or (not (= sys__result@174@01 0)) (= sys__result@174@01 0)))
(push) ; 24
(assert (not (or (= sys__result@174@01 0) (= sys__result@174@01 2))))
(check-sat)
; unsat
(pop) ; 24
; 0.00s
; (get-info :all-statistics)
(assert (or (= sys__result@174@01 0) (= sys__result@174@01 2)))
; [eval] __last_barrier == 2
; [then-branch: 683 | sys__result@174@01 == 2 | dead]
; [else-branch: 683 | sys__result@174@01 != 2 | live]
(push) ; 24
; [else-branch: 683 | sys__result@174@01 != 2]
; [eval] __last_barrier == 1
; [then-branch: 684 | sys__result@174@01 == 1 | dead]
; [else-branch: 684 | sys__result@174@01 != 1 | live]
(push) ; 25
; [else-branch: 684 | sys__result@174@01 != 1]
; [eval] __last_barrier == 0
; [then-branch: 685 | sys__result@174@01 == 0 | dead]
; [else-branch: 685 | sys__result@174@01 != 0 | live]
(push) ; 26
; [else-branch: 685 | sys__result@174@01 != 0]
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 27
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- (+ (- $k@46@01 $k@125@01) $k@129@01) $k@172@01) $k@176@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 27
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(push) ; 27
(assert (not (< tid@11@01 (Seq_length $t@177@01))))
(check-sat)
; unsat
(pop) ; 27
; 0.00s
; (get-info :all-statistics)
(check-sat)
; unsat
(pop) ; 26
(pop) ; 25
(pop) ; 24
(pop) ; 23
(pop) ; 22
(pop) ; 21
(pop) ; 20
(pop) ; 19
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(push) ; 13
; [else-branch: 398 | sys__result@127@01 != 1]
(assert (not (= sys__result@127@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 14
(set-option :timeout 10)
(assert (not (not (= sys__result@127@01 0))))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 14
(set-option :timeout 10)
(assert (not (= sys__result@127@01 0)))
(check-sat)
; unknown
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [then-branch: 686 | sys__result@127@01 == 0 | live]
; [else-branch: 686 | sys__result@127@01 != 0 | live]
(set-option :timeout 0)
(push) ; 14
; [then-branch: 686 | sys__result@127@01 == 0]
(assert (= sys__result@127@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@46@01 $k@125@01) $k@129@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< tid@11@01 (Seq_length $t@130@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@130@01 tid@11@01) $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 15
(set-option :timeout 10)
(assert (not (< $Perm.No (+ (- $k@47@01 $k@126@01) $k@131@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 15
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(assert (not (< tid@11@01 (Seq_length $t@132@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(push) ; 15
(set-option :timeout 10)
(assert (not (= (Seq_index $t@130@01 tid@11@01) (Seq_index $t@132@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (not (= (Seq_index $t@132@01 tid@11@01) $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@127@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 687 | True | dead]
; [else-branch: 687 | False | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 687 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 688 | True | dead]
; [else-branch: 688 | False | live]
(push) ; 16
; [else-branch: 688 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 689 | True | dead]
; [else-branch: 689 | False | live]
(push) ; 16
; [else-branch: 689 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 690 | True | dead]
; [else-branch: 690 | False | live]
(push) ; 16
; [else-branch: 690 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 691 | True | dead]
; [else-branch: 691 | False | live]
(push) ; 16
; [else-branch: 691 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 692 | False | dead]
; [else-branch: 692 | True | live]
(push) ; 16
; [else-branch: 692 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 693 | False | dead]
; [else-branch: 693 | True | live]
(push) ; 16
; [else-branch: 693 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 694 | False | dead]
; [else-branch: 694 | True | live]
(push) ; 16
; [else-branch: 694 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 695 | False | dead]
; [else-branch: 695 | True | live]
(push) ; 16
; [else-branch: 695 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@188@01 Int)
(assert (= N@188@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 15
; [then-branch: 696 | !(0 < tid@11@01) | live]
; [else-branch: 696 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 696 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 696 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@188@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 697 | 0 < tid@11@01 && tid@11@01 < N@188@01 | dead]
; [else-branch: 697 | !(0 < tid@11@01 && tid@11@01 < N@188@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 697 | !(0 < tid@11@01 && tid@11@01 < N@188@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@188@01))))
(pop) ; 15
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 15
; [then-branch: 698 | !(0 < tid@11@01) | live]
; [else-branch: 698 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 698 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 698 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@188@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 699 | !(0 < tid@11@01 && tid@11@01 < N@188@01) | dead]
; [else-branch: 699 | 0 < tid@11@01 && tid@11@01 < N@188@01 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 699 | 0 < tid@11@01 && tid@11@01 < N@188@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@188@01)))
(pop) ; 15
(pop) ; 14
(push) ; 14
; [else-branch: 686 | sys__result@127@01 != 0]
(assert (not (= sys__result@127@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@127@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 15
(push) ; 16
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unsat
(pop) ; 16
; 0.00s
; (get-info :all-statistics)
; [then-branch: 700 | True | dead]
; [else-branch: 700 | False | live]
(set-option :timeout 0)
(push) ; 16
; [else-branch: 700 | False]
(assert false)
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert false)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 701 | True | dead]
; [else-branch: 701 | False | live]
(push) ; 16
; [else-branch: 701 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 702 | True | dead]
; [else-branch: 702 | False | live]
(push) ; 16
; [else-branch: 702 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 703 | True | dead]
; [else-branch: 703 | False | live]
(push) ; 16
; [else-branch: 703 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 15
; [then-branch: 704 | True | dead]
; [else-branch: 704 | False | live]
(push) ; 16
; [else-branch: 704 | False]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 705 | False | dead]
; [else-branch: 705 | True | live]
(push) ; 16
; [else-branch: 705 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 706 | False | dead]
; [else-branch: 706 | True | live]
(push) ; 16
; [else-branch: 706 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 707 | False | dead]
; [else-branch: 707 | True | live]
(push) ; 16
; [else-branch: 707 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@128@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 15
; [then-branch: 708 | False | dead]
; [else-branch: 708 | True | live]
(push) ; 16
; [else-branch: 708 | True]
(pop) ; 16
(pop) ; 15
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unsat
; [exec]
; __last_barrier := __flatten_1
; [exec]
; N := N + 1
; [eval] N + 1
(declare-const N@189@01 Int)
(assert (= N@189@01 (+ N@39@01 1)))
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 15
; [then-branch: 709 | !(0 < tid@11@01) | live]
; [else-branch: 709 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 709 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 709 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@11@01) (not (< 0 tid@11@01))))
(push) ; 15
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@11@01) (< tid@11@01 N@189@01)))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 710 | 0 < tid@11@01 && tid@11@01 < N@189@01 | dead]
; [else-branch: 710 | !(0 < tid@11@01 && tid@11@01 < N@189@01) | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 710 | !(0 < tid@11@01 && tid@11@01 < N@189@01)]
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@189@01))))
(pop) ; 15
; [eval] !(0 < tid && tid < N)
; [eval] 0 < tid && tid < N
; [eval] 0 < tid
(push) ; 15
; [then-branch: 711 | !(0 < tid@11@01) | live]
; [else-branch: 711 | 0 < tid@11@01 | live]
(push) ; 16
; [then-branch: 711 | !(0 < tid@11@01)]
(assert (not (< 0 tid@11@01)))
(pop) ; 16
(push) ; 16
; [else-branch: 711 | 0 < tid@11@01]
(assert (< 0 tid@11@01))
; [eval] tid < N
(pop) ; 16
(pop) ; 15
; Joined path conditions
; Joined path conditions
(push) ; 15
(set-option :timeout 10)
(assert (not (and (< 0 tid@11@01) (< tid@11@01 N@189@01))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
; [then-branch: 712 | !(0 < tid@11@01 && tid@11@01 < N@189@01) | dead]
; [else-branch: 712 | 0 < tid@11@01 && tid@11@01 < N@189@01 | live]
(set-option :timeout 0)
(push) ; 15
; [else-branch: 712 | 0 < tid@11@01 && tid@11@01 < N@189@01]
(assert (and (< 0 tid@11@01) (< tid@11@01 N@189@01)))
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 364 | !(N@39@01 < gsize@10@01 - 1)]
(assert (not (< N@39@01 (- gsize@10@01 1))))
(pop) ; 8
(declare-const $t@190@01 Seq<$Ref>)
(declare-const $t@191@01 Seq<$Ref>)
(assert (and
  (=>
    (< $Perm.No $k@46@01)
    (Seq_equal
      $t@190@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
  (=>
    (< $Perm.No (- $k@15@01 $k@48@01))
    (Seq_equal
      $t@190@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
(assert (and
  (=>
    (< $Perm.No $k@47@01)
    (Seq_equal
      $t@191@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))
  (=>
    (< $Perm.No (- $k@16@01 $k@49@01))
    (Seq_equal
      $t@191@01
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))))
(assert (<= $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01))))
(assert (<= (+ $k@47@01 (- $k@16@01 $k@49@01)) $Perm.Write))
(assert (=> (< $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01))) (not (= diz@7@01 $Ref.null))))
(assert (<= $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01))))
(assert (<= (+ $k@46@01 (- $k@15@01 $k@48@01)) $Perm.Write))
(assert (=> (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01))) (not (= diz@7@01 $Ref.null))))
; [eval] !(N < gsize - 1)
; [eval] N < gsize - 1
; [eval] gsize - 1
(push) ; 8
(set-option :timeout 10)
(assert (not (< N@39@01 (- gsize@10@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< N@39@01 (- gsize@10@01 1)))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 713 | !(N@39@01 < gsize@10@01 - 1) | live]
; [else-branch: 713 | N@39@01 < gsize@10@01 - 1 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 713 | !(N@39@01 < gsize@10@01 - 1)]
(assert (not (< N@39@01 (- gsize@10@01 1))))
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@192@01 $Perm)
(assert ($Perm.isReadVar $k@192@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (+ $k@46@01 (- $k@15@01 $k@48@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@192@01 (+ $k@46@01 (- $k@15@01 $k@48@01))))
(assert (<= $Perm.No (- (+ $k@46@01 (- $k@15@01 $k@48@01)) $k@192@01)))
(assert (<= (- (+ $k@46@01 (- $k@15@01 $k@48@01)) $k@192@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ $k@46@01 (- $k@15@01 $k@48@01)) $k@192@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (= (Seq_length $t@190@01) gsize@10@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@190@01) gsize@10@01))
(declare-const $k@193@01 $Perm)
(assert ($Perm.isReadVar $k@193@01))
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= (+ $k@47@01 (- $k@16@01 $k@49@01)) $Perm.No))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (< $k@193@01 (+ $k@47@01 (- $k@16@01 $k@49@01))))
(assert (<= $Perm.No (- (+ $k@47@01 (- $k@16@01 $k@49@01)) $k@193@01)))
(assert (<= (- (+ $k@47@01 (- $k@16@01 $k@49@01)) $k@193@01) $Perm.Write))
(assert (=>
  (< $Perm.No (- (+ $k@47@01 (- $k@16@01 $k@49@01)) $k@193@01))
  (not (= diz@7@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (= (Seq_length $t@191@01) gsize@10@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (= (Seq_length $t@191@01) gsize@10@01))
; [eval] diz.demo__ar == old(diz.demo__ar)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@15@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  $t@190@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@190@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@47@01 (- $k@16@01 $k@49@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@16@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (Seq_equal
  $t@191@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01))))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  $t@191@01
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@14@01)))))))))))))
; [eval] gsize > 1
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< tid@11@01 (Seq_length $t@190@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  (Seq_index $t@190@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  (Seq_index $t@190@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid].Ref__Integer_value == demo__bin(gsize - 1, tid)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No (+ $k@46@01 (- $k@15@01 $k@48@01)))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@11@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (< tid@11@01 (Seq_length $t@190@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))
    tid@11@01)
  (Seq_index $t@190@01 tid@11@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))
    tid@11@01)
  (Seq_index $t@190@01 tid@11@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(gsize - 1, tid)
; [eval] gsize - 1
(set-option :timeout 0)
(push) ; 9
; [eval] N >= 0
(push) ; 10
(assert (not (>= (- gsize@10@01 1) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>= (- gsize@10@01 1) 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@11@01 (- gsize@10@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@11@01 (- gsize@10@01 1)))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) (- gsize@10@01 1) tid@11@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (>= (- gsize@10@01 1) 0)
  (<= tid@11@01 (- gsize@10@01 1))
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) (- gsize@10@01 1) tid@11@01)))
(push) ; 9
(assert (not (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    gsize@10@01
    1) tid@11@01))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@45@01)))))))))))))))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) (-
    gsize@10@01
    1) tid@11@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 713 | N@39@01 < gsize@10@01 - 1]
(assert (< N@39@01 (- gsize@10@01 1)))
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- demo__main_barrier ----------
(declare-const diz@194@01 $Ref)
(declare-const current_thread_id@195@01 Int)
(declare-const tcount@196@01 Int)
(declare-const gsize@197@01 Int)
(declare-const tid@198@01 Int)
(declare-const gid@199@01 Int)
(declare-const lid@200@01 Int)
(declare-const this_barrier@201@01 Int)
(declare-const last_barrier@202@01 Int)
(declare-const N@203@01 Int)
(declare-const sys__result@204@01 Int)
(declare-const diz@205@01 $Ref)
(declare-const current_thread_id@206@01 Int)
(declare-const tcount@207@01 Int)
(declare-const gsize@208@01 Int)
(declare-const tid@209@01 Int)
(declare-const gid@210@01 Int)
(declare-const lid@211@01 Int)
(declare-const this_barrier@212@01 Int)
(declare-const last_barrier@213@01 Int)
(declare-const N@214@01 Int)
(declare-const sys__result@215@01 Int)
(push) ; 1
(declare-const $t@216@01 $Snap)
(assert (= $t@216@01 ($Snap.combine ($Snap.first $t@216@01) ($Snap.second $t@216@01))))
(assert (= ($Snap.first $t@216@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@205@01 $Ref.null)))
(assert (=
  ($Snap.second $t@216@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@216@01))
    ($Snap.second ($Snap.second $t@216@01)))))
(assert (= ($Snap.first ($Snap.second $t@216@01)) $Snap.unit))
; [eval] current_thread_id >= 0
(assert (>= current_thread_id@206@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@216@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@216@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@216@01))) $Snap.unit))
; [eval] this_barrier == 1 ==> false || (last_barrier == 0 || last_barrier == 2)
; [eval] this_barrier == 1
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 714 | this_barrier@212@01 == 1 | live]
; [else-branch: 714 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 714 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] false || (last_barrier == 0 || last_barrier == 2)
(push) ; 4
; [then-branch: 715 | False | live]
; [else-branch: 715 | True | live]
(push) ; 5
; [then-branch: 715 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 715 | True]
; [eval] last_barrier == 0
(push) ; 6
; [then-branch: 716 | last_barrier@213@01 == 0 | live]
; [else-branch: 716 | last_barrier@213@01 != 0 | live]
(push) ; 7
; [then-branch: 716 | last_barrier@213@01 == 0]
(assert (= last_barrier@213@01 0))
(pop) ; 7
(push) ; 7
; [else-branch: 716 | last_barrier@213@01 != 0]
(assert (not (= last_barrier@213@01 0)))
; [eval] last_barrier == 2
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (or (not (= last_barrier@213@01 0)) (= last_barrier@213@01 0)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (not (= last_barrier@213@01 0)) (= last_barrier@213@01 0)))
(pop) ; 3
(push) ; 3
; [else-branch: 714 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (= this_barrier@212@01 1)
    (or (not (= last_barrier@213@01 0)) (= last_barrier@213@01 0)))))
; Joined path conditions
(assert (or (not (= this_barrier@212@01 1)) (= this_barrier@212@01 1)))
(assert (=>
  (= this_barrier@212@01 1)
  (or (= last_barrier@213@01 0) (= last_barrier@213@01 2))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@216@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@216@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@216@01))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> false || last_barrier == 1
; [eval] this_barrier == 2
(push) ; 2
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 717 | this_barrier@212@01 == 2 | live]
; [else-branch: 717 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 717 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] false || last_barrier == 1
(push) ; 4
; [then-branch: 718 | False | live]
; [else-branch: 718 | True | live]
(push) ; 5
; [then-branch: 718 | False]
(assert false)
(pop) ; 5
(push) ; 5
; [else-branch: 718 | True]
; [eval] last_barrier == 1
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(pop) ; 3
(push) ; 3
; [else-branch: 717 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 3
(pop) ; 2
; Joined path conditions
; Joined path conditions
(assert (or (not (= this_barrier@212@01 2)) (= this_barrier@212@01 2)))
(assert (=> (= this_barrier@212@01 2) (= last_barrier@213@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))
  $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@209@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))
  $Snap.unit))
; [eval] tid < tcount
(assert (< tid@209@01 tcount@207@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))
  $Snap.unit))
; [eval] tid == lid
(assert (= tid@209@01 lid@211@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@207@01 gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@210@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
(declare-const $k@217@01 $Perm)
(assert ($Perm.isReadVar $k@217@01))
(assert (<= $Perm.No $k@217@01))
(assert (<= $k@217@01 $Perm.Write))
(assert (=> (< $Perm.No $k@217@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(declare-const $k@218@01 $Perm)
(assert ($Perm.isReadVar $k@218@01))
(assert (<= $Perm.No $k@218@01))
(assert (<= $k@218@01 $Perm.Write))
(assert (=> (< $Perm.No $k@218@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
; [eval] last_barrier == 2
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 2))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (= last_barrier@213@01 2)))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; [then-branch: 719 | last_barrier@213@01 == 2 | live]
; [else-branch: 719 | last_barrier@213@01 != 2 | live]
(set-option :timeout 0)
(push) ; 2
; [then-branch: 719 | last_barrier@213@01 == 2]
(assert (= last_barrier@213@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
; [eval] last_barrier == 1
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 720 | last_barrier@213@01 == 1 | dead]
; [else-branch: 720 | last_barrier@213@01 != 1 | live]
(set-option :timeout 0)
(push) ; 3
; [else-branch: 720 | last_barrier@213@01 != 1]
(assert (not (= last_barrier@213@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
; [eval] last_barrier == 0
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 0))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 721 | last_barrier@213@01 == 0 | dead]
; [else-branch: 721 | last_barrier@213@01 != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [else-branch: 721 | last_barrier@213@01 != 0]
(assert (not (= last_barrier@213@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 722 | this_barrier@212@01 == 1 | live]
; [else-branch: 722 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 722 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] gsize > 1
(pop) ; 6
(push) ; 6
; [else-branch: 722 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 1) (> gsize@208@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 723 | this_barrier@212@01 == 1 | live]
; [else-branch: 723 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 723 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] 0 < N
(pop) ; 6
(push) ; 6
; [else-branch: 723 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 1) (< 0 N@214@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 724 | this_barrier@212@01 == 1 | live]
; [else-branch: 724 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 724 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] N < gsize
(pop) ; 6
(push) ; 6
; [else-branch: 724 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 1) (< N@214@01 gsize@208@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 725 | this_barrier@212@01 == 1 | live]
; [else-branch: 725 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 725 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 726 | tid@209@01 < N@214@01 | live]
; [else-branch: 726 | !(tid@209@01 < N@214@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 726 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 9
; [eval] N >= 0
(push) ; 10
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 726 | !(tid@209@01 < N@214@01)]
(assert (not (< tid@209@01 N@214@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; Joined path conditions
(assert (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 725 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (= this_barrier@212@01 1)
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))))
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    (ite
      (< tid@209@01 N@214@01)
      (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 727 | this_barrier@212@01 == 1 | live]
; [else-branch: 727 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 727 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 727 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 728 | this_barrier@212@01 == 2 | dead]
; [else-branch: 728 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 728 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 729 | this_barrier@212@01 == 2 | dead]
; [else-branch: 729 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 729 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 730 | this_barrier@212@01 == 2 | dead]
; [else-branch: 730 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 730 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 731 | this_barrier@212@01 == 2 | dead]
; [else-branch: 731 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 731 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(declare-const $t@219@01 $Snap)
(assert (= $t@219@01 ($Snap.combine ($Snap.first $t@219@01) ($Snap.second $t@219@01))))
(assert (= ($Snap.first $t@219@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@219@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@219@01))
    ($Snap.second ($Snap.second $t@219@01)))))
(assert (= ($Snap.first ($Snap.second $t@219@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@219@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@219@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@219@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@219@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
(declare-const $k@220@01 $Perm)
(assert ($Perm.isReadVar $k@220@01))
(assert (<= $Perm.No $k@220@01))
(assert (<= $k@220@01 $Perm.Write))
(assert (=> (< $Perm.No $k@220@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(declare-const $k@221@01 $Perm)
(assert ($Perm.isReadVar $k@221@01))
(assert (<= $Perm.No $k@221@01))
(assert (<= $k@221@01 $Perm.Write))
(assert (=> (< $Perm.No $k@221@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 2))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= sys__result@215@01 2)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 732 | sys__result@215@01 == 2 | live]
; [else-branch: 732 | sys__result@215@01 != 2 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 732 | sys__result@215@01 == 2]
(assert (= sys__result@215@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 733 | sys__result@215@01 == 1 | dead]
; [else-branch: 733 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 733 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 734 | sys__result@215@01 == 0 | dead]
; [else-branch: 734 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 734 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 735 | this_barrier@212@01 == 1 | dead]
; [else-branch: 735 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 735 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 736 | this_barrier@212@01 == 1 | dead]
; [else-branch: 736 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 736 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 737 | this_barrier@212@01 == 1 | dead]
; [else-branch: 737 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 737 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 738 | this_barrier@212@01 == 1 | dead]
; [else-branch: 738 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 738 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 739 | this_barrier@212@01 == 1 | dead]
; [else-branch: 739 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 739 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 740 | this_barrier@212@01 == 2 | dead]
; [else-branch: 740 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 740 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 741 | this_barrier@212@01 == 2 | dead]
; [else-branch: 741 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 741 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 742 | this_barrier@212@01 == 2 | dead]
; [else-branch: 742 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 742 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 743 | this_barrier@212@01 == 2 | dead]
; [else-branch: 743 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 743 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 732 | sys__result@215@01 != 2]
(assert (not (= sys__result@215@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@215@01 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 744 | sys__result@215@01 == 1 | live]
; [else-branch: 744 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 744 | sys__result@215@01 == 1]
(assert (= sys__result@215@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] tid > 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (> tid@209@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (> tid@209@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 745 | tid@209@01 > 0 | live]
; [else-branch: 745 | !(tid@209@01 > 0) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 745 | tid@209@01 > 0]
(assert (> tid@209@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 9
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
    (- tid@209@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
      (- tid@209@01 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 746 | sys__result@215@01 == 0 | dead]
; [else-branch: 746 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 746 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 747 | this_barrier@212@01 == 1 | live]
; [else-branch: 747 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 747 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] gsize > 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= this_barrier@212@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 748 | this_barrier@212@01 == 1 | live]
; [else-branch: 748 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 748 | this_barrier@212@01 == 1]
; [eval] 0 < N
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 749 | this_barrier@212@01 == 1 | live]
; [else-branch: 749 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 749 | this_barrier@212@01 == 1]
; [eval] N < gsize
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 750 | this_barrier@212@01 == 1 | live]
; [else-branch: 750 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 750 | this_barrier@212@01 == 1]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 12
; [then-branch: 751 | !(0 < tid@209@01) | live]
; [else-branch: 751 | 0 < tid@209@01 | live]
(push) ; 13
; [then-branch: 751 | !(0 < tid@209@01)]
(assert (not (< 0 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 751 | 0 < tid@209@01]
(assert (< 0 tid@209@01))
; [eval] tid <= N
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@209@01) (not (< 0 tid@209@01))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 752 | 0 < tid@209@01 && tid@209@01 <= N@214@01 | live]
; [else-branch: 752 | !(0 < tid@209@01 && tid@209@01 <= N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 752 | 0 < tid@209@01 && tid@209@01 <= N@214@01]
(assert (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 14
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid - 1)
; [eval] tid - 1
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
(push) ; 15
(assert (not (<= 0 (- tid@209@01 1))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@209@01 1)))
; [eval] k <= N
(push) ; 15
(assert (not (<= (- tid@209@01 1) N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@209@01 1) N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1)))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= 0 (- tid@209@01 1))
  (<= (- tid@209@01 1) N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 752 | !(0 < tid@209@01 && tid@209@01 <= N@214@01)]
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))
  (and
    (< 0 tid@209@01)
    (<= tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= 0 (- tid@209@01 1))
    (<= (- tid@209@01 1) N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1)))))
; Joined path conditions
(assert (or
  (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
  (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (or (< 0 tid@209@01) (not (< 0 tid@209@01)))
    (=>
      (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))
      (and
        (< 0 tid@209@01)
        (<= tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= 0 (- tid@209@01 1))
        (<= (- tid@209@01 1) N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1))))
    (or
      (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
      (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))))
(assert (=>
  (and (= this_barrier@212@01 1) (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (-
      tid@209@01
      1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 753 | this_barrier@212@01 == 1 | live]
; [else-branch: 753 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 753 | this_barrier@212@01 == 1]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 754 | tid@209@01 < N@214@01 | live]
; [else-branch: 754 | !(tid@209@01 < N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 754 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 15
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 754 | !(tid@209@01 < N@214@01)]
(assert (not (< tid@209@01 N@214@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; Joined path conditions
(assert (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))))
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    (ite
      (< tid@209@01 N@214@01)
      (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 755 | this_barrier@212@01 == 2 | dead]
; [else-branch: 755 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 755 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 756 | this_barrier@212@01 == 2 | dead]
; [else-branch: 756 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 756 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 757 | this_barrier@212@01 == 2 | dead]
; [else-branch: 757 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 757 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 758 | this_barrier@212@01 == 2 | dead]
; [else-branch: 758 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 758 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 745 | !(tid@209@01 > 0)]
(assert (not (> tid@209@01 0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 759 | sys__result@215@01 == 0 | dead]
; [else-branch: 759 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 759 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 760 | this_barrier@212@01 == 1 | live]
; [else-branch: 760 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 760 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] gsize > 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= this_barrier@212@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 761 | this_barrier@212@01 == 1 | live]
; [else-branch: 761 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 761 | this_barrier@212@01 == 1]
; [eval] 0 < N
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 762 | this_barrier@212@01 == 1 | live]
; [else-branch: 762 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 762 | this_barrier@212@01 == 1]
; [eval] N < gsize
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 763 | this_barrier@212@01 == 1 | live]
; [else-branch: 763 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 763 | this_barrier@212@01 == 1]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 12
; [then-branch: 764 | !(0 < tid@209@01) | live]
; [else-branch: 764 | 0 < tid@209@01 | live]
(push) ; 13
; [then-branch: 764 | !(0 < tid@209@01)]
(assert (not (< 0 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 764 | 0 < tid@209@01]
(assert (< 0 tid@209@01))
; [eval] tid <= N
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@209@01) (not (< 0 tid@209@01))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 765 | 0 < tid@209@01 && tid@209@01 <= N@214@01 | dead]
; [else-branch: 765 | !(0 < tid@209@01 && tid@209@01 <= N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 765 | !(0 < tid@209@01 && tid@209@01 <= N@214@01)]
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (or (< 0 tid@209@01) (not (< 0 tid@209@01)))
    (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 766 | this_barrier@212@01 == 1 | live]
; [else-branch: 766 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 766 | this_barrier@212@01 == 1]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 767 | tid@209@01 < N@214@01 | live]
; [else-branch: 767 | !(tid@209@01 < N@214@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 767 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 15
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(assert (< tid@209@01 N@214@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (< tid@209@01 N@214@01))))
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 768 | this_barrier@212@01 == 2 | dead]
; [else-branch: 768 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 768 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 769 | this_barrier@212@01 == 2 | dead]
; [else-branch: 769 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 769 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 770 | this_barrier@212@01 == 2 | dead]
; [else-branch: 770 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 770 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 771 | this_barrier@212@01 == 2 | dead]
; [else-branch: 771 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 771 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 744 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@215@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 772 | sys__result@215@01 == 0 | live]
; [else-branch: 772 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 772 | sys__result@215@01 == 0]
(assert (= sys__result@215@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@220@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@221@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 773 | this_barrier@212@01 == 1 | dead]
; [else-branch: 773 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 773 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 774 | this_barrier@212@01 == 1 | dead]
; [else-branch: 774 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 774 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 775 | this_barrier@212@01 == 1 | dead]
; [else-branch: 775 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 775 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 776 | this_barrier@212@01 == 1 | dead]
; [else-branch: 776 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 776 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 777 | this_barrier@212@01 == 1 | dead]
; [else-branch: 777 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 777 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 778 | this_barrier@212@01 == 2 | dead]
; [else-branch: 778 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 778 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 779 | this_barrier@212@01 == 2 | dead]
; [else-branch: 779 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 779 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 780 | this_barrier@212@01 == 2 | dead]
; [else-branch: 780 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 780 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 781 | this_barrier@212@01 == 2 | dead]
; [else-branch: 781 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 781 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 772 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 782 | this_barrier@212@01 == 1 | dead]
; [else-branch: 782 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 782 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 783 | this_barrier@212@01 == 1 | dead]
; [else-branch: 783 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 783 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 784 | this_barrier@212@01 == 1 | dead]
; [else-branch: 784 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 784 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 785 | this_barrier@212@01 == 1 | dead]
; [else-branch: 785 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 785 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 786 | this_barrier@212@01 == 1 | dead]
; [else-branch: 786 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 786 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 787 | this_barrier@212@01 == 2 | dead]
; [else-branch: 787 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 787 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 788 | this_barrier@212@01 == 2 | dead]
; [else-branch: 788 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 788 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 789 | this_barrier@212@01 == 2 | dead]
; [else-branch: 789 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 789 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@219@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 790 | this_barrier@212@01 == 2 | dead]
; [else-branch: 790 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 790 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(push) ; 2
; [else-branch: 719 | last_barrier@213@01 != 2]
(assert (not (= last_barrier@213@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
; [eval] last_barrier == 1
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 1))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (= last_barrier@213@01 1)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 791 | last_barrier@213@01 == 1 | live]
; [else-branch: 791 | last_barrier@213@01 != 1 | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 791 | last_barrier@213@01 == 1]
(assert (= last_barrier@213@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
      tid@209@01)
    $Ref.null)))
; [eval] tid > 0
(push) ; 4
(set-option :timeout 10)
(assert (not (not (> tid@209@01 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (> tid@209@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 792 | tid@209@01 > 0 | live]
; [else-branch: 792 | !(tid@209@01 > 0) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 792 | tid@209@01 > 0]
(assert (> tid@209@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 5
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
    (- tid@209@01 1)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
      (- tid@209@01 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
; [eval] last_barrier == 0
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 793 | last_barrier@213@01 == 0 | dead]
; [else-branch: 793 | last_barrier@213@01 != 0 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 793 | last_barrier@213@01 != 0]
(assert (not (= last_barrier@213@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 794 | this_barrier@212@01 == 1 | dead]
; [else-branch: 794 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 794 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 795 | this_barrier@212@01 == 1 | dead]
; [else-branch: 795 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 795 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 796 | this_barrier@212@01 == 1 | dead]
; [else-branch: 796 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 796 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 797 | this_barrier@212@01 == 1 | dead]
; [else-branch: 797 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 797 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 798 | this_barrier@212@01 == 1 | dead]
; [else-branch: 798 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 798 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 799 | this_barrier@212@01 == 2 | live]
; [else-branch: 799 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 799 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] gsize > 1
(pop) ; 7
(push) ; 7
; [else-branch: 799 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 2) (> gsize@208@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 800 | this_barrier@212@01 == 2 | live]
; [else-branch: 800 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 800 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] 0 < N
(pop) ; 7
(push) ; 7
; [else-branch: 800 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 2) (< 0 N@214@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 801 | this_barrier@212@01 == 2 | live]
; [else-branch: 801 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 801 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] N < gsize
(pop) ; 7
(push) ; 7
; [else-branch: 801 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 2) (< N@214@01 gsize@208@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 802 | this_barrier@212@01 == 2 | live]
; [else-branch: 802 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 802 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 803 | tid@209@01 < N@214@01 | live]
; [else-branch: 803 | !(tid@209@01 < N@214@01) | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 803 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 10
; [eval] N >= 0
(push) ; 11
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 11
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 9
(push) ; 9
; [else-branch: 803 | !(tid@209@01 < N@214@01)]
(assert (not (< tid@209@01 N@214@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; Joined path conditions
(assert (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))
(pop) ; 7
(push) ; 7
; [else-branch: 802 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 2)
  (and
    (= this_barrier@212@01 2)
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))))
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 2)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    (ite
      (< tid@209@01 N@214@01)
      (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)
      1))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@222@01 $Snap)
(assert (= $t@222@01 ($Snap.combine ($Snap.first $t@222@01) ($Snap.second $t@222@01))))
(assert (= ($Snap.first $t@222@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@222@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@222@01))
    ($Snap.second ($Snap.second $t@222@01)))))
(assert (= ($Snap.first ($Snap.second $t@222@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@222@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@222@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@222@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@222@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@222@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@222@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
(declare-const $k@223@01 $Perm)
(assert ($Perm.isReadVar $k@223@01))
(assert (<= $Perm.No $k@223@01))
(assert (<= $k@223@01 $Perm.Write))
(assert (=> (< $Perm.No $k@223@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
(declare-const $k@224@01 $Perm)
(assert ($Perm.isReadVar $k@224@01))
(assert (<= $Perm.No $k@224@01))
(assert (<= $k@224@01 $Perm.Write))
(assert (=> (< $Perm.No $k@224@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@215@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 804 | sys__result@215@01 == 2 | live]
; [else-branch: 804 | sys__result@215@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 804 | sys__result@215@01 == 2]
(assert (= sys__result@215@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 805 | sys__result@215@01 == 1 | dead]
; [else-branch: 805 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 805 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 806 | sys__result@215@01 == 0 | dead]
; [else-branch: 806 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 806 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 807 | this_barrier@212@01 == 1 | dead]
; [else-branch: 807 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 807 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 808 | this_barrier@212@01 == 1 | dead]
; [else-branch: 808 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 808 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 809 | this_barrier@212@01 == 1 | dead]
; [else-branch: 809 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 809 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 810 | this_barrier@212@01 == 1 | dead]
; [else-branch: 810 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 810 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 811 | this_barrier@212@01 == 1 | dead]
; [else-branch: 811 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 811 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 812 | this_barrier@212@01 == 2 | live]
; [else-branch: 812 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 812 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] gsize > 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= this_barrier@212@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 813 | this_barrier@212@01 == 2 | live]
; [else-branch: 813 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 813 | this_barrier@212@01 == 2]
; [eval] 0 < N
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 814 | this_barrier@212@01 == 2 | live]
; [else-branch: 814 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 814 | this_barrier@212@01 == 2]
; [eval] N < gsize
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 815 | this_barrier@212@01 == 2 | live]
; [else-branch: 815 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 815 | this_barrier@212@01 == 2]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 816 | tid@209@01 < N@214@01 | live]
; [else-branch: 816 | !(tid@209@01 < N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 816 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 15
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 816 | !(tid@209@01 < N@214@01)]
(assert (not (< tid@209@01 N@214@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; Joined path conditions
(assert (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 2)
  (and
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))))
(assert (=>
  (= this_barrier@212@01 2)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
    (ite
      (< tid@209@01 N@214@01)
      (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)
      1))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 804 | sys__result@215@01 != 2]
(assert (not (= sys__result@215@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@215@01 1)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 817 | sys__result@215@01 == 1 | live]
; [else-branch: 817 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 817 | sys__result@215@01 == 1]
(assert (= sys__result@215@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] tid > 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (> tid@209@01 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 818 | tid@209@01 > 0 | live]
; [else-branch: 818 | !(tid@209@01 > 0) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 818 | tid@209@01 > 0]
; [eval] diz.demo__tmp[tid - 1]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 10
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
    (- tid@209@01 1)))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
      (- tid@209@01 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 819 | sys__result@215@01 == 0 | dead]
; [else-branch: 819 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 819 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 820 | this_barrier@212@01 == 1 | dead]
; [else-branch: 820 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 820 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 821 | this_barrier@212@01 == 1 | dead]
; [else-branch: 821 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 821 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 822 | this_barrier@212@01 == 1 | dead]
; [else-branch: 822 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 822 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 823 | this_barrier@212@01 == 1 | dead]
; [else-branch: 823 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 823 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 824 | this_barrier@212@01 == 1 | dead]
; [else-branch: 824 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 824 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 825 | this_barrier@212@01 == 2 | dead]
; [else-branch: 825 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 825 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 11
; [then-branch: 826 | this_barrier@212@01 == 2 | dead]
; [else-branch: 826 | this_barrier@212@01 != 2 | live]
(push) ; 12
; [else-branch: 826 | this_barrier@212@01 != 2]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 11
; [then-branch: 827 | this_barrier@212@01 == 2 | dead]
; [else-branch: 827 | this_barrier@212@01 != 2 | live]
(push) ; 12
; [else-branch: 827 | this_barrier@212@01 != 2]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 11
; [then-branch: 828 | this_barrier@212@01 == 2 | dead]
; [else-branch: 828 | this_barrier@212@01 != 2 | live]
(push) ; 12
; [else-branch: 828 | this_barrier@212@01 != 2]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 817 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= sys__result@215@01 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 829 | sys__result@215@01 == 0 | live]
; [else-branch: 829 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 829 | sys__result@215@01 == 0]
(assert (= sys__result@215@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@223@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@224@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 10
; [then-branch: 830 | this_barrier@212@01 == 1 | dead]
; [else-branch: 830 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 830 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 831 | this_barrier@212@01 == 1 | dead]
; [else-branch: 831 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 831 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 832 | this_barrier@212@01 == 1 | dead]
; [else-branch: 832 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 832 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 833 | this_barrier@212@01 == 1 | dead]
; [else-branch: 833 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 833 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 834 | this_barrier@212@01 == 1 | dead]
; [else-branch: 834 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 834 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 835 | this_barrier@212@01 == 2 | dead]
; [else-branch: 835 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 835 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 836 | this_barrier@212@01 == 2 | dead]
; [else-branch: 836 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 836 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 837 | this_barrier@212@01 == 2 | dead]
; [else-branch: 837 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 837 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 838 | this_barrier@212@01 == 2 | dead]
; [else-branch: 838 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 838 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 829 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 839 | this_barrier@212@01 == 1 | dead]
; [else-branch: 839 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 839 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 840 | this_barrier@212@01 == 1 | dead]
; [else-branch: 840 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 840 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 841 | this_barrier@212@01 == 1 | dead]
; [else-branch: 841 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 841 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 842 | this_barrier@212@01 == 1 | dead]
; [else-branch: 842 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 842 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 843 | this_barrier@212@01 == 1 | dead]
; [else-branch: 843 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 843 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 844 | this_barrier@212@01 == 2 | dead]
; [else-branch: 844 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 844 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 845 | this_barrier@212@01 == 2 | dead]
; [else-branch: 845 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 845 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 846 | this_barrier@212@01 == 2 | dead]
; [else-branch: 846 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 846 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@222@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 847 | this_barrier@212@01 == 2 | dead]
; [else-branch: 847 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 847 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 792 | !(tid@209@01 > 0)]
(assert (not (> tid@209@01 0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
; [eval] last_barrier == 0
(push) ; 5
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 0))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 848 | last_barrier@213@01 == 0 | dead]
; [else-branch: 848 | last_barrier@213@01 != 0 | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 848 | last_barrier@213@01 != 0]
(assert (not (= last_barrier@213@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 849 | this_barrier@212@01 == 1 | dead]
; [else-branch: 849 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 849 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 850 | this_barrier@212@01 == 1 | dead]
; [else-branch: 850 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 850 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 851 | this_barrier@212@01 == 1 | dead]
; [else-branch: 851 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 851 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 852 | this_barrier@212@01 == 1 | dead]
; [else-branch: 852 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 852 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 6
; [then-branch: 853 | this_barrier@212@01 == 1 | dead]
; [else-branch: 853 | this_barrier@212@01 != 1 | live]
(push) ; 7
; [else-branch: 853 | this_barrier@212@01 != 1]
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 854 | this_barrier@212@01 == 2 | live]
; [else-branch: 854 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 854 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] gsize > 1
(pop) ; 7
(push) ; 7
; [else-branch: 854 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 2) (> gsize@208@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 855 | this_barrier@212@01 == 2 | live]
; [else-branch: 855 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 855 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] 0 < N
(pop) ; 7
(push) ; 7
; [else-branch: 855 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 2) (< 0 N@214@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 856 | this_barrier@212@01 == 2 | live]
; [else-branch: 856 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 856 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] N < gsize
(pop) ; 7
(push) ; 7
; [else-branch: 856 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 2) (< N@214@01 gsize@208@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 6
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 857 | this_barrier@212@01 == 2 | live]
; [else-branch: 857 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 857 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 8
(push) ; 9
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 858 | tid@209@01 < N@214@01 | live]
; [else-branch: 858 | !(tid@209@01 < N@214@01) | dead]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 858 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 10
; [eval] N >= 0
(push) ; 11
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 11
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 10
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 9
(pop) ; 8
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(assert (< tid@209@01 N@214@01))
(pop) ; 7
(push) ; 7
; [else-branch: 857 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 7
(pop) ; 6
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 2)
  (and
    (= this_barrier@212@01 2)
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (< tid@209@01 N@214@01))))
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 2)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 6
(declare-const $t@225@01 $Snap)
(assert (= $t@225@01 ($Snap.combine ($Snap.first $t@225@01) ($Snap.second $t@225@01))))
(assert (= ($Snap.first $t@225@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@225@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@225@01))
    ($Snap.second ($Snap.second $t@225@01)))))
(assert (= ($Snap.first ($Snap.second $t@225@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@225@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@225@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@225@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@225@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
(declare-const $k@226@01 $Perm)
(assert ($Perm.isReadVar $k@226@01))
(assert (<= $Perm.No $k@226@01))
(assert (<= $k@226@01 $Perm.Write))
(assert (=> (< $Perm.No $k@226@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(declare-const $k@227@01 $Perm)
(assert ($Perm.isReadVar $k@227@01))
(assert (<= $Perm.No $k@227@01))
(assert (<= $k@227@01 $Perm.Write))
(assert (=> (< $Perm.No $k@227@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 2))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@215@01 2)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 859 | sys__result@215@01 == 2 | live]
; [else-branch: 859 | sys__result@215@01 != 2 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 859 | sys__result@215@01 == 2]
(assert (= sys__result@215@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 860 | sys__result@215@01 == 1 | dead]
; [else-branch: 860 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 860 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 861 | sys__result@215@01 == 0 | dead]
; [else-branch: 861 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 861 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 862 | this_barrier@212@01 == 1 | dead]
; [else-branch: 862 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 862 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 863 | this_barrier@212@01 == 1 | dead]
; [else-branch: 863 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 863 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 864 | this_barrier@212@01 == 1 | dead]
; [else-branch: 864 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 864 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 865 | this_barrier@212@01 == 1 | dead]
; [else-branch: 865 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 865 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 866 | this_barrier@212@01 == 1 | dead]
; [else-branch: 866 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 866 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 2)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 867 | this_barrier@212@01 == 2 | live]
; [else-branch: 867 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 867 | this_barrier@212@01 == 2]
(assert (= this_barrier@212@01 2))
; [eval] gsize > 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= this_barrier@212@01 2))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 868 | this_barrier@212@01 == 2 | live]
; [else-branch: 868 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 868 | this_barrier@212@01 == 2]
; [eval] 0 < N
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 869 | this_barrier@212@01 == 2 | live]
; [else-branch: 869 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 869 | this_barrier@212@01 == 2]
; [eval] N < gsize
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 870 | this_barrier@212@01 == 2 | live]
; [else-branch: 870 | this_barrier@212@01 != 2 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 870 | this_barrier@212@01 == 2]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 871 | tid@209@01 < N@214@01 | live]
; [else-branch: 871 | !(tid@209@01 < N@214@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 871 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 15
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(assert (< tid@209@01 N@214@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 2)
  (and
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (< tid@209@01 N@214@01))))
(assert (=>
  (= this_barrier@212@01 2)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 859 | sys__result@215@01 != 2]
(assert (not (= sys__result@215@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@215@01 1)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 872 | sys__result@215@01 == 1 | live]
; [else-branch: 872 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 872 | sys__result@215@01 == 1]
(assert (= sys__result@215@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] tid > 0
; [then-branch: 873 | tid@209@01 > 0 | dead]
; [else-branch: 873 | !(tid@209@01 > 0) | live]
(push) ; 9
; [else-branch: 873 | !(tid@209@01 > 0)]
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 874 | sys__result@215@01 == 0 | dead]
; [else-branch: 874 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 874 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 875 | this_barrier@212@01 == 1 | dead]
; [else-branch: 875 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 875 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 876 | this_barrier@212@01 == 1 | dead]
; [else-branch: 876 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 876 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 877 | this_barrier@212@01 == 1 | dead]
; [else-branch: 877 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 877 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 878 | this_barrier@212@01 == 1 | dead]
; [else-branch: 878 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 878 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 11
; [then-branch: 879 | this_barrier@212@01 == 1 | dead]
; [else-branch: 879 | this_barrier@212@01 != 1 | live]
(push) ; 12
; [else-branch: 879 | this_barrier@212@01 != 1]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 11
(push) ; 12
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [then-branch: 880 | this_barrier@212@01 == 2 | dead]
; [else-branch: 880 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 12
; [else-branch: 880 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 11
; [then-branch: 881 | this_barrier@212@01 == 2 | dead]
; [else-branch: 881 | this_barrier@212@01 != 2 | live]
(push) ; 12
; [else-branch: 881 | this_barrier@212@01 != 2]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 11
; [then-branch: 882 | this_barrier@212@01 == 2 | dead]
; [else-branch: 882 | this_barrier@212@01 != 2 | live]
(push) ; 12
; [else-branch: 882 | this_barrier@212@01 != 2]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 11
; [then-branch: 883 | this_barrier@212@01 == 2 | dead]
; [else-branch: 883 | this_barrier@212@01 != 2 | live]
(push) ; 12
; [else-branch: 883 | this_barrier@212@01 != 2]
(pop) ; 12
(pop) ; 11
; Joined path conditions
(pop) ; 10
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 872 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (= sys__result@215@01 0)))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 884 | sys__result@215@01 == 0 | live]
; [else-branch: 884 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [then-branch: 884 | sys__result@215@01 == 0]
(assert (= sys__result@215@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@226@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 10
(set-option :timeout 10)
(assert (not (< $Perm.No $k@227@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 10
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(push) ; 10
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 10
; [then-branch: 885 | this_barrier@212@01 == 1 | dead]
; [else-branch: 885 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 885 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 886 | this_barrier@212@01 == 1 | dead]
; [else-branch: 886 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 886 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 887 | this_barrier@212@01 == 1 | dead]
; [else-branch: 887 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 887 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 888 | this_barrier@212@01 == 1 | dead]
; [else-branch: 888 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 888 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 889 | this_barrier@212@01 == 1 | dead]
; [else-branch: 889 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 889 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 890 | this_barrier@212@01 == 2 | dead]
; [else-branch: 890 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 890 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 891 | this_barrier@212@01 == 2 | dead]
; [else-branch: 891 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 891 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 892 | this_barrier@212@01 == 2 | dead]
; [else-branch: 892 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 892 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 893 | this_barrier@212@01 == 2 | dead]
; [else-branch: 893 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 893 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(push) ; 9
; [else-branch: 884 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 894 | this_barrier@212@01 == 1 | dead]
; [else-branch: 894 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 894 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 895 | this_barrier@212@01 == 1 | dead]
; [else-branch: 895 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 895 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 896 | this_barrier@212@01 == 1 | dead]
; [else-branch: 896 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 896 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 897 | this_barrier@212@01 == 1 | dead]
; [else-branch: 897 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 897 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 898 | this_barrier@212@01 == 1 | dead]
; [else-branch: 898 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 898 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 899 | this_barrier@212@01 == 2 | dead]
; [else-branch: 899 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 11
; [else-branch: 899 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 900 | this_barrier@212@01 == 2 | dead]
; [else-branch: 900 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 900 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 901 | this_barrier@212@01 == 2 | dead]
; [else-branch: 901 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 901 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@225@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 902 | this_barrier@212@01 == 2 | dead]
; [else-branch: 902 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 902 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch: 791 | last_barrier@213@01 != 1]
(assert (not (= last_barrier@213@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
; [eval] last_barrier == 0
(push) ; 4
(set-option :timeout 10)
(assert (not (not (= last_barrier@213@01 0))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (= last_barrier@213@01 0)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 903 | last_barrier@213@01 == 0 | live]
; [else-branch: 903 | last_barrier@213@01 != 0 | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 903 | last_barrier@213@01 == 0]
(assert (= last_barrier@213@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 904 | this_barrier@212@01 == 1 | live]
; [else-branch: 904 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 904 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] gsize > 1
(pop) ; 6
(push) ; 6
; [else-branch: 904 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 1) (> gsize@208@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 905 | this_barrier@212@01 == 1 | live]
; [else-branch: 905 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 905 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] 0 < N
(pop) ; 6
(push) ; 6
; [else-branch: 905 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 1) (< 0 N@214@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 906 | this_barrier@212@01 == 1 | live]
; [else-branch: 906 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 906 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] N < gsize
(pop) ; 6
(push) ; 6
; [else-branch: 906 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=> (= this_barrier@212@01 1) (< N@214@01 gsize@208@01)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 907 | this_barrier@212@01 == 1 | live]
; [else-branch: 907 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 907 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 7
(push) ; 8
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 908 | tid@209@01 < N@214@01 | live]
; [else-branch: 908 | !(tid@209@01 < N@214@01) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 908 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 9
; [eval] N >= 0
(push) ; 10
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 10
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 9
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 8
(push) ; 8
; [else-branch: 908 | !(tid@209@01 < N@214@01)]
(assert (not (< tid@209@01 N@214@01)))
(pop) ; 8
(pop) ; 7
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; Joined path conditions
(assert (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 907 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (= this_barrier@212@01 1)
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))))
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    (ite
      (< tid@209@01 N@214@01)
      (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 909 | this_barrier@212@01 == 1 | live]
; [else-branch: 909 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 909 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(pop) ; 6
(push) ; 6
; [else-branch: 909 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 910 | this_barrier@212@01 == 2 | dead]
; [else-branch: 910 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 910 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 911 | this_barrier@212@01 == 2 | dead]
; [else-branch: 911 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 911 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 912 | this_barrier@212@01 == 2 | dead]
; [else-branch: 912 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 912 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 913 | this_barrier@212@01 == 2 | dead]
; [else-branch: 913 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 913 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(declare-const $t@228@01 $Snap)
(assert (= $t@228@01 ($Snap.combine ($Snap.first $t@228@01) ($Snap.second $t@228@01))))
(assert (= ($Snap.first $t@228@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@228@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@228@01))
    ($Snap.second ($Snap.second $t@228@01)))))
(assert (= ($Snap.first ($Snap.second $t@228@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@228@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@228@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@228@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@228@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
(declare-const $k@229@01 $Perm)
(assert ($Perm.isReadVar $k@229@01))
(assert (<= $Perm.No $k@229@01))
(assert (<= $k@229@01 $Perm.Write))
(assert (=> (< $Perm.No $k@229@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(declare-const $k@230@01 $Perm)
(assert ($Perm.isReadVar $k@230@01))
(assert (<= $Perm.No $k@230@01))
(assert (<= $k@230@01 $Perm.Write))
(assert (=> (< $Perm.No $k@230@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 2))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= sys__result@215@01 2)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 914 | sys__result@215@01 == 2 | live]
; [else-branch: 914 | sys__result@215@01 != 2 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 914 | sys__result@215@01 == 2]
(assert (= sys__result@215@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 915 | sys__result@215@01 == 1 | dead]
; [else-branch: 915 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 915 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 916 | sys__result@215@01 == 0 | dead]
; [else-branch: 916 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 916 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 917 | this_barrier@212@01 == 1 | dead]
; [else-branch: 917 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 917 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 918 | this_barrier@212@01 == 1 | dead]
; [else-branch: 918 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 918 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 919 | this_barrier@212@01 == 1 | dead]
; [else-branch: 919 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 919 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 920 | this_barrier@212@01 == 1 | dead]
; [else-branch: 920 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 920 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 921 | this_barrier@212@01 == 1 | dead]
; [else-branch: 921 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 921 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 922 | this_barrier@212@01 == 2 | dead]
; [else-branch: 922 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 922 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 923 | this_barrier@212@01 == 2 | dead]
; [else-branch: 923 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 923 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 924 | this_barrier@212@01 == 2 | dead]
; [else-branch: 924 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 924 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 925 | this_barrier@212@01 == 2 | dead]
; [else-branch: 925 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 925 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 914 | sys__result@215@01 != 2]
(assert (not (= sys__result@215@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@215@01 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 926 | sys__result@215@01 == 1 | live]
; [else-branch: 926 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 926 | sys__result@215@01 == 1]
(assert (= sys__result@215@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] tid > 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (> tid@209@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (> tid@209@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 927 | tid@209@01 > 0 | live]
; [else-branch: 927 | !(tid@209@01 > 0) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 927 | tid@209@01 > 0]
(assert (> tid@209@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 9
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
    (- tid@209@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
      (- tid@209@01 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 928 | sys__result@215@01 == 0 | dead]
; [else-branch: 928 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 928 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 929 | this_barrier@212@01 == 1 | live]
; [else-branch: 929 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 929 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] gsize > 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= this_barrier@212@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 930 | this_barrier@212@01 == 1 | live]
; [else-branch: 930 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 930 | this_barrier@212@01 == 1]
; [eval] 0 < N
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 931 | this_barrier@212@01 == 1 | live]
; [else-branch: 931 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 931 | this_barrier@212@01 == 1]
; [eval] N < gsize
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 932 | this_barrier@212@01 == 1 | live]
; [else-branch: 932 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 932 | this_barrier@212@01 == 1]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 12
; [then-branch: 933 | !(0 < tid@209@01) | live]
; [else-branch: 933 | 0 < tid@209@01 | live]
(push) ; 13
; [then-branch: 933 | !(0 < tid@209@01)]
(assert (not (< 0 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 933 | 0 < tid@209@01]
(assert (< 0 tid@209@01))
; [eval] tid <= N
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@209@01) (not (< 0 tid@209@01))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 934 | 0 < tid@209@01 && tid@209@01 <= N@214@01 | live]
; [else-branch: 934 | !(0 < tid@209@01 && tid@209@01 <= N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 934 | 0 < tid@209@01 && tid@209@01 <= N@214@01]
(assert (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 14
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 14
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
(push) ; 14
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(check-sat)
; unsat
(pop) ; 14
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid - 1)
; [eval] tid - 1
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
(push) ; 15
(assert (not (<= 0 (- tid@209@01 1))))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@209@01 1)))
; [eval] k <= N
(push) ; 15
(assert (not (<= (- tid@209@01 1) N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@209@01 1) N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1)))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= 0 (- tid@209@01 1))
  (<= (- tid@209@01 1) N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1))))
(pop) ; 13
(push) ; 13
; [else-branch: 934 | !(0 < tid@209@01 && tid@209@01 <= N@214@01)]
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))
  (and
    (< 0 tid@209@01)
    (<= tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= 0 (- tid@209@01 1))
    (<= (- tid@209@01 1) N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1)))))
; Joined path conditions
(assert (or
  (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
  (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (or (< 0 tid@209@01) (not (< 0 tid@209@01)))
    (=>
      (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))
      (and
        (< 0 tid@209@01)
        (<= tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= 0 (- tid@209@01 1))
        (<= (- tid@209@01 1) N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (- tid@209@01 1))))
    (or
      (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
      (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))))
(assert (=>
  (and (= this_barrier@212@01 1) (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))
  (=
    ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 (-
      tid@209@01
      1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 935 | this_barrier@212@01 == 1 | live]
; [else-branch: 935 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 935 | this_barrier@212@01 == 1]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 936 | tid@209@01 < N@214@01 | live]
; [else-branch: 936 | !(tid@209@01 < N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 936 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 15
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 936 | !(tid@209@01 < N@214@01)]
(assert (not (< tid@209@01 N@214@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
; Joined path conditions
(assert (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (or (not (< tid@209@01 N@214@01)) (< tid@209@01 N@214@01)))))
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    (ite
      (< tid@209@01 N@214@01)
      (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)
      1))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 937 | this_barrier@212@01 == 2 | dead]
; [else-branch: 937 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 937 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 938 | this_barrier@212@01 == 2 | dead]
; [else-branch: 938 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 938 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 939 | this_barrier@212@01 == 2 | dead]
; [else-branch: 939 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 939 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 940 | this_barrier@212@01 == 2 | dead]
; [else-branch: 940 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 940 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 927 | !(tid@209@01 > 0)]
(assert (not (> tid@209@01 0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 941 | sys__result@215@01 == 0 | dead]
; [else-branch: 941 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 941 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 11
(set-option :timeout 10)
(assert (not (= this_barrier@212@01 1)))
(check-sat)
; unsat
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 942 | this_barrier@212@01 == 1 | live]
; [else-branch: 942 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 942 | this_barrier@212@01 == 1]
(assert (= this_barrier@212@01 1))
; [eval] gsize > 1
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (= this_barrier@212@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 943 | this_barrier@212@01 == 1 | live]
; [else-branch: 943 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 943 | this_barrier@212@01 == 1]
; [eval] 0 < N
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 944 | this_barrier@212@01 == 1 | live]
; [else-branch: 944 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 944 | this_barrier@212@01 == 1]
; [eval] N < gsize
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 945 | this_barrier@212@01 == 1 | live]
; [else-branch: 945 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 945 | this_barrier@212@01 == 1]
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 12
; [then-branch: 946 | !(0 < tid@209@01) | live]
; [else-branch: 946 | 0 < tid@209@01 | live]
(push) ; 13
; [then-branch: 946 | !(0 < tid@209@01)]
(assert (not (< 0 tid@209@01)))
(pop) ; 13
(push) ; 13
; [else-branch: 946 | 0 < tid@209@01]
(assert (< 0 tid@209@01))
; [eval] tid <= N
(pop) ; 13
(pop) ; 12
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@209@01) (not (< 0 tid@209@01))))
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01)))))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 947 | 0 < tid@209@01 && tid@209@01 <= N@214@01 | dead]
; [else-branch: 947 | !(0 < tid@209@01 && tid@209@01 <= N@214@01) | live]
(set-option :timeout 0)
(push) ; 13
; [else-branch: 947 | !(0 < tid@209@01 && tid@209@01 <= N@214@01)]
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (or (< 0 tid@209@01) (not (< 0 tid@209@01)))
    (not (and (< 0 tid@209@01) (<= tid@209@01 N@214@01))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
(push) ; 11
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unknown
(pop) ; 11
; 0.00s
; (get-info :all-statistics)
; [then-branch: 948 | this_barrier@212@01 == 1 | live]
; [else-branch: 948 | this_barrier@212@01 != 1 | dead]
(set-option :timeout 0)
(push) ; 11
; [then-branch: 948 | this_barrier@212@01 == 1]
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 12
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 12
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
(push) ; 12
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 12
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 12
(push) ; 13
(set-option :timeout 10)
(assert (not (not (< tid@209@01 N@214@01))))
(check-sat)
; unknown
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 13
(set-option :timeout 10)
(assert (not (< tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 13
; 0.00s
; (get-info :all-statistics)
; [then-branch: 949 | tid@209@01 < N@214@01 | live]
; [else-branch: 949 | !(tid@209@01 < N@214@01) | dead]
(set-option :timeout 0)
(push) ; 13
; [then-branch: 949 | tid@209@01 < N@214@01]
(assert (< tid@209@01 N@214@01))
; [eval] demo__bin(N, tid)
(push) ; 14
; [eval] N >= 0
(push) ; 15
(assert (not (>= N@214@01 0)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (>= N@214@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 15
(assert (not (<= tid@209@01 N@214@01)))
(check-sat)
; unsat
(pop) ; 15
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@209@01 N@214@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))
(pop) ; 14
; Joined path conditions
(assert (and
  (>= N@214@01 0)
  (<= tid@209@01 N@214@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
(pop) ; 13
(pop) ; 12
; Joined path conditions
(assert (=>
  (< tid@209@01 N@214@01)
  (and
    (< tid@209@01 N@214@01)
    (>= N@214@01 0)
    (<= tid@209@01 N@214@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(assert (< tid@209@01 N@214@01))
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=>
  (= this_barrier@212@01 1)
  (and
    (=>
      (< tid@209@01 N@214@01)
      (and
        (< tid@209@01 N@214@01)
        (>= N@214@01 0)
        (<= tid@209@01 N@214@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01)))
    (< tid@209@01 N@214@01))))
(assert (=>
  (= this_barrier@212@01 1)
  (=
    ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@214@01 tid@209@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 950 | this_barrier@212@01 == 2 | dead]
; [else-branch: 950 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 950 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 951 | this_barrier@212@01 == 2 | dead]
; [else-branch: 951 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 951 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 952 | this_barrier@212@01 == 2 | dead]
; [else-branch: 952 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 952 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 953 | this_barrier@212@01 == 2 | dead]
; [else-branch: 953 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 953 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 926 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@215@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 954 | sys__result@215@01 == 0 | live]
; [else-branch: 954 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 954 | sys__result@215@01 == 0]
(assert (= sys__result@215@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@229@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@230@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 955 | this_barrier@212@01 == 1 | dead]
; [else-branch: 955 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 955 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 956 | this_barrier@212@01 == 1 | dead]
; [else-branch: 956 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 956 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 957 | this_barrier@212@01 == 1 | dead]
; [else-branch: 957 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 957 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 958 | this_barrier@212@01 == 1 | dead]
; [else-branch: 958 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 958 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 959 | this_barrier@212@01 == 1 | dead]
; [else-branch: 959 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 959 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 960 | this_barrier@212@01 == 2 | dead]
; [else-branch: 960 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 960 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 961 | this_barrier@212@01 == 2 | dead]
; [else-branch: 961 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 961 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 962 | this_barrier@212@01 == 2 | dead]
; [else-branch: 962 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 962 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 963 | this_barrier@212@01 == 2 | dead]
; [else-branch: 963 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 963 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 954 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 9
(push) ; 10
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 10
; 0.00s
; (get-info :all-statistics)
; [then-branch: 964 | this_barrier@212@01 == 1 | dead]
; [else-branch: 964 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 10
; [else-branch: 964 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 965 | this_barrier@212@01 == 1 | dead]
; [else-branch: 965 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 965 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 966 | this_barrier@212@01 == 1 | dead]
; [else-branch: 966 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 966 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 967 | this_barrier@212@01 == 1 | dead]
; [else-branch: 967 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 967 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 968 | this_barrier@212@01 == 1 | dead]
; [else-branch: 968 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 968 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 969 | this_barrier@212@01 == 2 | dead]
; [else-branch: 969 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 969 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 970 | this_barrier@212@01 == 2 | dead]
; [else-branch: 970 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 970 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 971 | this_barrier@212@01 == 2 | dead]
; [else-branch: 971 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 971 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@228@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 972 | this_barrier@212@01 == 2 | dead]
; [else-branch: 972 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 972 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(push) ; 4
; [else-branch: 903 | last_barrier@213@01 != 0]
(assert (not (= last_barrier@213@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 1))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 973 | this_barrier@212@01 == 1 | dead]
; [else-branch: 973 | this_barrier@212@01 != 1 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 973 | this_barrier@212@01 != 1]
(assert (not (= this_barrier@212@01 1)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= this_barrier@212@01 1)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 5
; [then-branch: 974 | this_barrier@212@01 == 1 | dead]
; [else-branch: 974 | this_barrier@212@01 != 1 | live]
(push) ; 6
; [else-branch: 974 | this_barrier@212@01 != 1]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 5
; [then-branch: 975 | this_barrier@212@01 == 1 | dead]
; [else-branch: 975 | this_barrier@212@01 != 1 | live]
(push) ; 6
; [else-branch: 975 | this_barrier@212@01 != 1]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 5
; [then-branch: 976 | this_barrier@212@01 == 1 | dead]
; [else-branch: 976 | this_barrier@212@01 != 1 | live]
(push) ; 6
; [else-branch: 976 | this_barrier@212@01 != 1]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__tmp[tid].Ref__Integer_value == diz.demo__ar[tid].Ref__Integer_value
; [eval] this_barrier == 1
(push) ; 5
; [then-branch: 977 | this_barrier@212@01 == 1 | dead]
; [else-branch: 977 | this_barrier@212@01 != 1 | live]
(push) ; 6
; [else-branch: 977 | this_barrier@212@01 != 1]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 5
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= this_barrier@212@01 2))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 978 | this_barrier@212@01 == 2 | dead]
; [else-branch: 978 | this_barrier@212@01 != 2 | live]
(set-option :timeout 0)
(push) ; 6
; [else-branch: 978 | this_barrier@212@01 != 2]
(assert (not (= this_barrier@212@01 2)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (not (= this_barrier@212@01 2)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 979 | this_barrier@212@01 == 2 | dead]
; [else-branch: 979 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 979 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 980 | this_barrier@212@01 == 2 | dead]
; [else-branch: 980 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 980 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01))))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 5
; [then-branch: 981 | this_barrier@212@01 == 2 | dead]
; [else-branch: 981 | this_barrier@212@01 != 2 | live]
(push) ; 6
; [else-branch: 981 | this_barrier@212@01 != 2]
(pop) ; 6
(pop) ; 5
; Joined path conditions
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 5
(declare-const $t@231@01 $Snap)
(assert (= $t@231@01 ($Snap.combine ($Snap.first $t@231@01) ($Snap.second $t@231@01))))
(assert (= ($Snap.first $t@231@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@231@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@231@01))
    ($Snap.second ($Snap.second $t@231@01)))))
(assert (= ($Snap.first ($Snap.second $t@231@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@231@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@231@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@231@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@231@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@231@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@231@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
(declare-const $k@232@01 $Perm)
(assert ($Perm.isReadVar $k@232@01))
(assert (<= $Perm.No $k@232@01))
(assert (<= $k@232@01 $Perm.Write))
(assert (=> (< $Perm.No $k@232@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
(declare-const $k@233@01 $Perm)
(assert ($Perm.isReadVar $k@233@01))
(assert (<= $Perm.No $k@233@01))
(assert (<= $k@233@01 $Perm.Write))
(assert (=> (< $Perm.No $k@233@01) (not (= diz@205@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))
  gsize@208@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@217@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@218@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@216@01)))))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
; [eval] sys__result == 2
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 2))))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 6
(set-option :timeout 10)
(assert (not (= sys__result@215@01 2)))
(check-sat)
; unknown
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [then-branch: 982 | sys__result@215@01 == 2 | live]
; [else-branch: 982 | sys__result@215@01 != 2 | live]
(set-option :timeout 0)
(push) ; 6
; [then-branch: 982 | sys__result@215@01 == 2]
(assert (= sys__result@215@01 2))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 7
(set-option :timeout 10)
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(push) ; 7
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
; [eval] sys__result == 1
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 983 | sys__result@215@01 == 1 | dead]
; [else-branch: 983 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [else-branch: 983 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 984 | sys__result@215@01 == 0 | dead]
; [else-branch: 984 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [else-branch: 984 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 985 | this_barrier@212@01 == 1 | dead]
; [else-branch: 985 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 985 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 986 | this_barrier@212@01 == 1 | dead]
; [else-branch: 986 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 986 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 987 | this_barrier@212@01 == 1 | dead]
; [else-branch: 987 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 987 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 988 | this_barrier@212@01 == 1 | dead]
; [else-branch: 988 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 988 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 989 | this_barrier@212@01 == 1 | dead]
; [else-branch: 989 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 989 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 990 | this_barrier@212@01 == 2 | dead]
; [else-branch: 990 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 990 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 991 | this_barrier@212@01 == 2 | dead]
; [else-branch: 991 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 991 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 992 | this_barrier@212@01 == 2 | dead]
; [else-branch: 992 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 992 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 993 | this_barrier@212@01 == 2 | dead]
; [else-branch: 993 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 993 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch: 982 | sys__result@215@01 != 2]
(assert (not (= sys__result@215@01 2)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
; [eval] sys__result == 1
(push) ; 7
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 1))))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 7
(set-option :timeout 10)
(assert (not (= sys__result@215@01 1)))
(check-sat)
; unknown
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
; [then-branch: 994 | sys__result@215@01 == 1 | live]
; [else-branch: 994 | sys__result@215@01 != 1 | live]
(set-option :timeout 0)
(push) ; 7
; [then-branch: 994 | sys__result@215@01 == 1]
(assert (= sys__result@215@01 1))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 8
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(push) ; 8
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] tid > 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (> tid@209@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (> tid@209@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 995 | tid@209@01 > 0 | live]
; [else-branch: 995 | !(tid@209@01 > 0) | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 995 | tid@209@01 > 0]
(assert (> tid@209@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 9
(assert (not (>= (- tid@209@01 1) 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  (- tid@209@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
    (- tid@209@01 1)))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
      (- tid@209@01 1))
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
; [eval] sys__result == 0
(set-option :timeout 0)
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 996 | sys__result@215@01 == 0 | dead]
; [else-branch: 996 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 996 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 997 | this_barrier@212@01 == 1 | dead]
; [else-branch: 997 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 997 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 998 | this_barrier@212@01 == 1 | dead]
; [else-branch: 998 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 998 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 999 | this_barrier@212@01 == 1 | dead]
; [else-branch: 999 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 999 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1000 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1000 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1000 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1001 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1001 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1001 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1002 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1002 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1002 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1003 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1003 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1003 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1004 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1004 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1004 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1005 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1005 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1005 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch: 995 | !(tid@209@01 > 0)]
(assert (not (> tid@209@01 0)))
(assert (=
  ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 9
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1006 | sys__result@215@01 == 0 | dead]
; [else-branch: 1006 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 9
; [else-branch: 1006 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1007 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1007 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1007 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1008 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1008 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1008 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1009 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1009 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1009 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1010 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1010 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1010 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 10
; [then-branch: 1011 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1011 | this_barrier@212@01 != 1 | live]
(push) ; 11
; [else-branch: 1011 | this_barrier@212@01 != 1]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1012 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1012 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1012 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1013 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1013 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1013 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1014 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1014 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1014 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 10
; [then-branch: 1015 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1015 | this_barrier@212@01 != 2 | live]
(push) ; 11
; [else-branch: 1015 | this_barrier@212@01 != 2]
(pop) ; 11
(pop) ; 10
; Joined path conditions
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch: 994 | sys__result@215@01 != 1]
(assert (not (= sys__result@215@01 1)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
; [eval] sys__result == 0
(push) ; 8
(set-option :timeout 10)
(assert (not (not (= sys__result@215@01 0))))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 8
(set-option :timeout 10)
(assert (not (= sys__result@215@01 0)))
(check-sat)
; unknown
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1016 | sys__result@215@01 == 0 | live]
; [else-branch: 1016 | sys__result@215@01 != 0 | live]
(set-option :timeout 0)
(push) ; 8
; [then-branch: 1016 | sys__result@215@01 == 0]
(assert (= sys__result@215@01 0))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
    ($Snap.second ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
; [eval] diz.demo__ar[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@232@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
      tid@209@01)
    $Ref.null)))
; [eval] diz.demo__tmp[tid]
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@233@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
(assert (not (>= tid@209@01 0)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(assert (not (<
  tid@209@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(push) ; 9
(set-option :timeout 10)
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))
    tid@209@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
    tid@209@01))))
(check-sat)
; unknown
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(assert (not
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))
      tid@209@01)
    $Ref.null)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1017 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1017 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1017 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1018 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1018 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1018 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1019 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1019 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1019 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1020 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1020 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1020 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1021 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1021 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1021 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1022 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1022 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1022 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1023 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1023 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1023 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1024 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1024 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1024 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1025 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1025 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1025 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(push) ; 8
; [else-branch: 1016 | sys__result@215@01 != 0]
(assert (not (= sys__result@215@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  $Snap.unit))
; [eval] sys__result == this_barrier
(assert (= sys__result@215@01 this_barrier@212@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> gsize > 1
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1026 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1026 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1026 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < N
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1027 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1027 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1027 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> N < gsize
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1028 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1028 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1028 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1029 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1029 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1029 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 1 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 1
(push) ; 9
; [then-branch: 1030 | this_barrier@212@01 == 1 | dead]
; [else-branch: 1030 | this_barrier@212@01 != 1 | live]
(push) ; 10
; [else-branch: 1030 | this_barrier@212@01 != 1]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> gsize > 1
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1031 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1031 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1031 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> 0 < N
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1032 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1032 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1032 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01))))))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> N < gsize
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1033 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1033 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1033 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@231@01)))))))))))))))))))))))
  $Snap.unit))
; [eval] this_barrier == 2 ==> diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] this_barrier == 2
(push) ; 9
; [then-branch: 1034 | this_barrier@212@01 == 2 | dead]
; [else-branch: 1034 | this_barrier@212@01 != 2 | live]
(push) ; 10
; [else-branch: 1034 | this_barrier@212@01 != 2]
(pop) ; 10
(pop) ; 9
; Joined path conditions
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- demo__main_resources_of_1 ----------
(declare-const diz@234@01 $Ref)
(declare-const current_thread_id@235@01 Int)
(declare-const tcount@236@01 Int)
(declare-const gsize@237@01 Int)
(declare-const gid@238@01 Int)
(declare-const N@239@01 Int)
(declare-const diz@240@01 $Ref)
(declare-const current_thread_id@241@01 Int)
(declare-const tcount@242@01 Int)
(declare-const gsize@243@01 Int)
(declare-const gid@244@01 Int)
(declare-const N@245@01 Int)
(push) ; 1
(declare-const $t@246@01 $Snap)
(assert (= $t@246@01 ($Snap.combine ($Snap.first $t@246@01) ($Snap.second $t@246@01))))
(assert (= ($Snap.first $t@246@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@240@01 $Ref.null)))
(assert (=
  ($Snap.second $t@246@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@246@01))
    ($Snap.second ($Snap.second $t@246@01)))))
(assert (= ($Snap.first ($Snap.second $t@246@01)) $Snap.unit))
; [eval] current_thread_id >= 0
(assert (>= current_thread_id@241@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@246@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@246@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@246@01))) $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@242@01 gsize@243@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@246@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@246@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@246@01))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@244@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
(declare-const $k@247@01 $Perm)
(assert ($Perm.isReadVar $k@247@01))
(assert (<= $Perm.No $k@247@01))
(assert (<= $k@247@01 $Perm.Write))
(assert (=> (< $Perm.No $k@247@01) (not (= diz@240@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
  gsize@243@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(declare-const $k@248@01 $Perm)
(assert ($Perm.isReadVar $k@248@01))
(assert (<= $Perm.No $k@248@01))
(assert (<= $k@248@01 $Perm.Write))
(assert (=> (< $Perm.No $k@248@01) (not (= diz@240@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
  gsize@243@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (> gsize@243@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__ar[i], diz.demo__ar[j] } i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j])
(declare-const i@249@01 Int)
(declare-const j@250@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j]
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1035 | !(i@249@01 >= 0) | live]
; [else-branch: 1035 | i@249@01 >= 0 | live]
(push) ; 4
; [then-branch: 1035 | !(i@249@01 >= 0)]
(assert (not (>= i@249@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1035 | i@249@01 >= 0]
(assert (>= i@249@01 0))
; [eval] i < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1036 | !(i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))|) | live]
; [else-branch: 1036 | i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| | live]
(push) ; 6
; [then-branch: 1036 | !(i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))|)]
(assert (not
  (<
    i@249@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1036 | i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))|]
(assert (<
  i@249@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1037 | !(j@250@01 >= 0) | live]
; [else-branch: 1037 | j@250@01 >= 0 | live]
(push) ; 8
; [then-branch: 1037 | !(j@250@01 >= 0)]
(assert (not (>= j@250@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1037 | j@250@01 >= 0]
(assert (>= j@250@01 0))
; [eval] j < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1038 | !(j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))|) | live]
; [else-branch: 1038 | j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| | live]
(push) ; 10
; [then-branch: 1038 | !(j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))|)]
(assert (not
  (<
    j@250@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1038 | j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))|]
(assert (<
  j@250@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@250@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  (not
    (<
      j@250@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@250@01 0)
  (and
    (>= j@250@01 0)
    (or
      (<
        j@250@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      (not
        (<
          j@250@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))
(assert (or (>= j@250@01 0) (not (>= j@250@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@249@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  (and
    (<
      i@249@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    (=>
      (>= j@250@01 0)
      (and
        (>= j@250@01 0)
        (or
          (<
            j@250@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (not
            (<
              j@250@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
    (or (>= j@250@01 0) (not (>= j@250@01 0))))))
(assert (or
  (<
    i@249@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
  (not
    (<
      i@249@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@249@01 0)
  (and
    (>= i@249@01 0)
    (=>
      (<
        i@249@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      (and
        (<
          i@249@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (=>
          (>= j@250@01 0)
          (and
            (>= j@250@01 0)
            (or
              (<
                j@250@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
              (not
                (<
                  j@250@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
        (or (>= j@250@01 0) (not (>= j@250@01 0)))))
    (or
      (<
        i@249@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      (not
        (<
          i@249@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))
(assert (or (>= i@249@01 0) (not (>= i@249@01 0))))
(push) ; 3
; [then-branch: 1039 | i@249@01 >= 0 && i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && j@250@01 >= 0 && j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && i@249@01 != j@250@01 | live]
; [else-branch: 1039 | !(i@249@01 >= 0 && i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && j@250@01 >= 0 && j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && i@249@01 != j@250@01) | live]
(push) ; 4
; [then-branch: 1039 | i@249@01 >= 0 && i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && j@250@01 >= 0 && j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && i@249@01 != j@250@01]
(assert (and
  (>= i@249@01 0)
  (and
    (<
      i@249@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    (and
      (>= j@250@01 0)
      (and
        (<
          j@250@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (not (= i@249@01 j@250@01)))))))
; [eval] diz.demo__ar[i] != diz.demo__ar[j]
; [eval] diz.demo__ar[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1039 | !(i@249@01 >= 0 && i@249@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && j@250@01 >= 0 && j@250@01 < |First:(Second:(Second:(Second:(Second:($t@246@01)))))| && i@249@01 != j@250@01)]
(assert (not
  (and
    (>= i@249@01 0)
    (and
      (<
        i@249@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      (and
        (>= j@250@01 0)
        (and
          (<
            j@250@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (not (= i@249@01 j@250@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@249@01 0)
    (and
      (<
        i@249@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      (and
        (>= j@250@01 0)
        (and
          (<
            j@250@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (not (= i@249@01 j@250@01))))))
  (and
    (>= i@249@01 0)
    (<
      i@249@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    (>= j@250@01 0)
    (<
      j@250@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    (not (= i@249@01 j@250@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@249@01 0)
      (and
        (<
          i@249@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (and
          (>= j@250@01 0)
          (and
            (<
              j@250@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
            (not (= i@249@01 j@250@01)))))))
  (and
    (>= i@249@01 0)
    (and
      (<
        i@249@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      (and
        (>= j@250@01 0)
        (and
          (<
            j@250@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (not (= i@249@01 j@250@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@249@01 Int) (j@250@01 Int)) (!
  (and
    (=>
      (>= i@249@01 0)
      (and
        (>= i@249@01 0)
        (=>
          (<
            i@249@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (and
            (<
              i@249@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
            (=>
              (>= j@250@01 0)
              (and
                (>= j@250@01 0)
                (or
                  (<
                    j@250@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
                  (not
                    (<
                      j@250@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
            (or (>= j@250@01 0) (not (>= j@250@01 0)))))
        (or
          (<
            i@249@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (not
            (<
              i@249@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
    (or (>= i@249@01 0) (not (>= i@249@01 0)))
    (=>
      (and
        (>= i@249@01 0)
        (and
          (<
            i@249@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (and
            (>= j@250@01 0)
            (and
              (<
                j@250@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
              (not (= i@249@01 j@250@01))))))
      (and
        (>= i@249@01 0)
        (<
          i@249@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (>= j@250@01 0)
        (<
          j@250@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (not (= i@249@01 j@250@01))))
    (or
      (not
        (and
          (>= i@249@01 0)
          (and
            (<
              i@249@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
            (and
              (>= j@250@01 0)
              (and
                (<
                  j@250@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
                (not (= i@249@01 j@250@01)))))))
      (and
        (>= i@249@01 0)
        (and
          (<
            i@249@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (and
            (>= j@250@01 0)
            (and
              (<
                j@250@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
              (not (= i@249@01 j@250@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    i@249@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    j@250@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@170@12@170@144-aux|)))
(assert (forall ((i@249@01 Int) (j@250@01 Int)) (!
  (=>
    (and
      (>= i@249@01 0)
      (and
        (<
          i@249@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (and
          (>= j@250@01 0)
          (and
            (<
              j@250@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
            (not (= i@249@01 j@250@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          i@249@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          j@250@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    i@249@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    j@250@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@170@12@170@144|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__tmp[i], diz.demo__tmp[j] } i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j])
(declare-const i@251@01 Int)
(declare-const j@252@01 Int)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1040 | !(i@251@01 >= 0) | live]
; [else-branch: 1040 | i@251@01 >= 0 | live]
(push) ; 4
; [then-branch: 1040 | !(i@251@01 >= 0)]
(assert (not (>= i@251@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1040 | i@251@01 >= 0]
(assert (>= i@251@01 0))
; [eval] i < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1041 | !(i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))|) | live]
; [else-branch: 1041 | i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| | live]
(push) ; 6
; [then-branch: 1041 | !(i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))|)]
(assert (not
  (<
    i@251@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1041 | i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))|]
(assert (<
  i@251@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1042 | !(j@252@01 >= 0) | live]
; [else-branch: 1042 | j@252@01 >= 0 | live]
(push) ; 8
; [then-branch: 1042 | !(j@252@01 >= 0)]
(assert (not (>= j@252@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1042 | j@252@01 >= 0]
(assert (>= j@252@01 0))
; [eval] j < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1043 | !(j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))|) | live]
; [else-branch: 1043 | j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| | live]
(push) ; 10
; [then-branch: 1043 | !(j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))|)]
(assert (not
  (<
    j@252@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1043 | j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))|]
(assert (<
  j@252@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@252@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
  (not
    (<
      j@252@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@252@01 0)
  (and
    (>= j@252@01 0)
    (or
      (<
        j@252@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
      (not
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))))
(assert (or (>= j@252@01 0) (not (>= j@252@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@251@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
  (and
    (<
      i@251@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
    (=>
      (>= j@252@01 0)
      (and
        (>= j@252@01 0)
        (or
          (<
            j@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (not
            (<
              j@252@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))))
    (or (>= j@252@01 0) (not (>= j@252@01 0))))))
(assert (or
  (<
    i@251@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
  (not
    (<
      i@251@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@251@01 0)
  (and
    (>= i@251@01 0)
    (=>
      (<
        i@251@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
      (and
        (<
          i@251@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
        (=>
          (>= j@252@01 0)
          (and
            (>= j@252@01 0)
            (or
              (<
                j@252@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
              (not
                (<
                  j@252@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))))
        (or (>= j@252@01 0) (not (>= j@252@01 0)))))
    (or
      (<
        i@251@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
      (not
        (<
          i@251@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))))
(assert (or (>= i@251@01 0) (not (>= i@251@01 0))))
(push) ; 3
; [then-branch: 1044 | i@251@01 >= 0 && i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && j@252@01 >= 0 && j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && i@251@01 != j@252@01 | live]
; [else-branch: 1044 | !(i@251@01 >= 0 && i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && j@252@01 >= 0 && j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && i@251@01 != j@252@01) | live]
(push) ; 4
; [then-branch: 1044 | i@251@01 >= 0 && i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && j@252@01 >= 0 && j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && i@251@01 != j@252@01]
(assert (and
  (>= i@251@01 0)
  (and
    (<
      i@251@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
    (and
      (>= j@252@01 0)
      (and
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
        (not (= i@251@01 j@252@01)))))))
; [eval] diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] diz.demo__tmp[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1044 | !(i@251@01 >= 0 && i@251@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && j@252@01 >= 0 && j@252@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@246@01)))))))| && i@251@01 != j@252@01)]
(assert (not
  (and
    (>= i@251@01 0)
    (and
      (<
        i@251@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
      (and
        (>= j@252@01 0)
        (and
          (<
            j@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (not (= i@251@01 j@252@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@251@01 0)
    (and
      (<
        i@251@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
      (and
        (>= j@252@01 0)
        (and
          (<
            j@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (not (= i@251@01 j@252@01))))))
  (and
    (>= i@251@01 0)
    (<
      i@251@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
    (>= j@252@01 0)
    (<
      j@252@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
    (not (= i@251@01 j@252@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@251@01 0)
      (and
        (<
          i@251@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
        (and
          (>= j@252@01 0)
          (and
            (<
              j@252@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
            (not (= i@251@01 j@252@01)))))))
  (and
    (>= i@251@01 0)
    (and
      (<
        i@251@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
      (and
        (>= j@252@01 0)
        (and
          (<
            j@252@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (not (= i@251@01 j@252@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@251@01 Int) (j@252@01 Int)) (!
  (and
    (=>
      (>= i@251@01 0)
      (and
        (>= i@251@01 0)
        (=>
          (<
            i@251@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (and
            (<
              i@251@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
            (=>
              (>= j@252@01 0)
              (and
                (>= j@252@01 0)
                (or
                  (<
                    j@252@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
                  (not
                    (<
                      j@252@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))))
            (or (>= j@252@01 0) (not (>= j@252@01 0)))))
        (or
          (<
            i@251@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (not
            (<
              i@251@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))))
    (or (>= i@251@01 0) (not (>= i@251@01 0)))
    (=>
      (and
        (>= i@251@01 0)
        (and
          (<
            i@251@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (and
            (>= j@252@01 0)
            (and
              (<
                j@252@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
              (not (= i@251@01 j@252@01))))))
      (and
        (>= i@251@01 0)
        (<
          i@251@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
        (>= j@252@01 0)
        (<
          j@252@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
        (not (= i@251@01 j@252@01))))
    (or
      (not
        (and
          (>= i@251@01 0)
          (and
            (<
              i@251@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
            (and
              (>= j@252@01 0)
              (and
                (<
                  j@252@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
                (not (= i@251@01 j@252@01)))))))
      (and
        (>= i@251@01 0)
        (and
          (<
            i@251@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
          (and
            (>= j@252@01 0)
            (and
              (<
                j@252@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
              (not (= i@251@01 j@252@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    i@251@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    j@252@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@171@12@171@148-aux|)))
(assert (forall ((i@251@01 Int) (j@252@01 Int)) (!
  (=>
    (and
      (>= i@251@01 0)
      (and
        (<
          i@251@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
        (and
          (>= j@252@01 0)
          (and
            (<
              j@252@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
            (not (= i@251@01 j@252@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          i@251@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          j@252@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    i@251@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    j@252@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@171@12@171@148|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01)))))))))))))))
(declare-const tid@253@01 Int)
(push) ; 2
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 3
; [then-branch: 1045 | !(0 <= tid@253@01) | live]
; [else-branch: 1045 | 0 <= tid@253@01 | live]
(push) ; 4
; [then-branch: 1045 | !(0 <= tid@253@01)]
(assert (not (<= 0 tid@253@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1045 | 0 <= tid@253@01]
(assert (<= 0 tid@253@01))
; [eval] tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@253@01) (not (<= 0 tid@253@01))))
(assert (and (<= 0 tid@253@01) (< tid@253@01 gsize@243@01)))
; [eval] diz.demo__ar[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@253@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@253@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@254@01 ($Ref) Int)
(declare-fun img@255@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@253@01 Int)) (!
  (=>
    (and (<= 0 tid@253@01) (< tid@253@01 gsize@243@01))
    (or (<= 0 tid@253@01) (not (<= 0 tid@253@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    tid@253@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((tid1@253@01 Int) (tid2@253@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@253@01) (< tid1@253@01 gsize@243@01))
      (and (<= 0 tid2@253@01) (< tid2@253@01 gsize@243@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid1@253@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid2@253@01)))
    (= tid1@253@01 tid2@253@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@253@01 Int)) (!
  (=>
    (and (<= 0 tid@253@01) (< tid@253@01 gsize@243@01))
    (and
      (=
        (inv@254@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid@253@01))
        tid@253@01)
      (img@255@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
        tid@253@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    tid@253@01))
  :qid |quant-u-9145|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@255@01 r)
      (and (<= 0 (inv@254@01 r)) (< (inv@254@01 r) gsize@243@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
        (inv@254@01 r))
      r))
  :pattern ((inv@254@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@253@01 Int)) (!
  (=>
    (and (<= 0 tid@253@01) (< tid@253@01 gsize@243@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid@253@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    tid@253@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(declare-const tid@256@01 Int)
(push) ; 2
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 3
; [then-branch: 1046 | !(0 <= tid@256@01) | live]
; [else-branch: 1046 | 0 <= tid@256@01 | live]
(push) ; 4
; [then-branch: 1046 | !(0 <= tid@256@01)]
(assert (not (<= 0 tid@256@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1046 | 0 <= tid@256@01]
(assert (<= 0 tid@256@01))
; [eval] tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@256@01) (not (<= 0 tid@256@01))))
(assert (and (<= 0 tid@256@01) (< tid@256@01 gsize@243@01)))
; [eval] diz.demo__tmp[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@256@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@256@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@257@01 ($Ref) Int)
(declare-fun img@258@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@256@01 Int)) (!
  (=>
    (and (<= 0 tid@256@01) (< tid@256@01 gsize@243@01))
    (or (<= 0 tid@256@01) (not (<= 0 tid@256@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    tid@256@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((tid1@256@01 Int) (tid2@256@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@256@01) (< tid1@256@01 gsize@243@01))
      (and (<= 0 tid2@256@01) (< tid2@256@01 gsize@243@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid1@256@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid2@256@01)))
    (= tid1@256@01 tid2@256@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@256@01 Int)) (!
  (=>
    (and (<= 0 tid@256@01) (< tid@256@01 gsize@243@01))
    (and
      (=
        (inv@257@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid@256@01))
        tid@256@01)
      (img@258@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        tid@256@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    tid@256@01))
  :qid |quant-u-9147|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@258@01 r)
      (and (<= 0 (inv@257@01 r)) (< (inv@257@01 r) gsize@243@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (inv@257@01 r))
      r))
  :pattern ((inv@257@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@256@01 Int)) (!
  (=>
    (and (<= 0 tid@256@01) (< tid@256@01 gsize@243@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid@256@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    tid@256@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        tid@256@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
        tid@253@01))
    (=
      (and
        (img@258@01 r)
        (and (<= 0 (inv@257@01 r)) (< (inv@257@01 r) gsize@243@01)))
      (and
        (img@255@01 r)
        (and (<= 0 (inv@254@01 r)) (< (inv@254@01 r) gsize@243@01)))))
  
  :qid |quant-u-9148|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@259@01 $Snap)
(assert (= $t@259@01 ($Snap.combine ($Snap.first $t@259@01) ($Snap.second $t@259@01))))
(assert (= ($Snap.first $t@259@01) $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second $t@259@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@259@01))
    ($Snap.second ($Snap.second $t@259@01)))))
(assert (= ($Snap.first ($Snap.second $t@259@01)) $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second $t@259@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@259@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
(declare-const $k@260@01 $Perm)
(assert ($Perm.isReadVar $k@260@01))
(assert (<= $Perm.No $k@260@01))
(assert (<= $k@260@01 $Perm.Write))
(assert (=> (< $Perm.No $k@260@01) (not (= diz@240@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@259@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@259@01))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@260@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01)))))
  gsize@243@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
(declare-const $k@261@01 $Perm)
(assert ($Perm.isReadVar $k@261@01))
(assert (<= $Perm.No $k@261@01))
(assert (<= $k@261@01 $Perm.Write))
(assert (=> (< $Perm.No $k@261@01) (not (= diz@240@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@261@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
  gsize@243@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@260@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@261@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01)))))))))))))
(declare-const tid@262@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 4
; [then-branch: 1047 | !(0 <= tid@262@01) | live]
; [else-branch: 1047 | 0 <= tid@262@01 | live]
(push) ; 5
; [then-branch: 1047 | !(0 <= tid@262@01)]
(assert (not (<= 0 tid@262@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1047 | 0 <= tid@262@01]
(assert (<= 0 tid@262@01))
; [eval] tid < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@262@01) (not (<= 0 tid@262@01))))
(assert (and (<= 0 tid@262@01) (< tid@262@01 gsize@243@01)))
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@260@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@262@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@262@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@263@01 ($Ref) Int)
(declare-fun img@264@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@262@01 Int)) (!
  (=>
    (and (<= 0 tid@262@01) (< tid@262@01 gsize@243@01))
    (or (<= 0 tid@262@01) (not (<= 0 tid@262@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
    tid@262@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@262@01 Int) (tid2@262@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@262@01) (< tid1@262@01 gsize@243@01))
      (and (<= 0 tid2@262@01) (< tid2@262@01 gsize@243@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
          tid1@262@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
          tid2@262@01)))
    (= tid1@262@01 tid2@262@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@262@01 Int)) (!
  (=>
    (and (<= 0 tid@262@01) (< tid@262@01 gsize@243@01))
    (and
      (=
        (inv@263@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
          tid@262@01))
        tid@262@01)
      (img@264@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
        tid@262@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
    tid@262@01))
  :qid |quant-u-9150|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@264@01 r)
      (and (<= 0 (inv@263@01 r)) (< (inv@263@01 r) gsize@243@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
        (inv@263@01 r))
      r))
  :pattern ((inv@263@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@262@01 Int)) (!
  (=>
    (and (<= 0 tid@262@01) (< tid@262@01 gsize@243@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
          tid@262@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
    tid@262@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(declare-const tid@265@01 Int)
(push) ; 3
; [eval] (0 <= 0 ? 1 : 0) - 1 <= tid && tid < gsize - 1
; [eval] (0 <= 0 ? 1 : 0) - 1 <= tid
; [eval] (0 <= 0 ? 1 : 0) - 1
; [eval] (0 <= 0 ? 1 : 0)
; [eval] 0 <= 0
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1048 | True | live]
; [else-branch: 1048 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1048 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 1049 | !(0 <= tid@265@01) | live]
; [else-branch: 1049 | 0 <= tid@265@01 | live]
(push) ; 5
; [then-branch: 1049 | !(0 <= tid@265@01)]
(assert (not (<= 0 tid@265@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1049 | 0 <= tid@265@01]
(assert (<= 0 tid@265@01))
; [eval] tid < gsize - 1
; [eval] gsize - 1
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@265@01) (not (<= 0 tid@265@01))))
(assert (and (<= 0 tid@265@01) (< tid@265@01 (- gsize@243@01 1))))
; [eval] diz.demo__tmp[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@261@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@265@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@265@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@266@01 ($Ref) Int)
(declare-fun img@267@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@265@01 Int)) (!
  (=>
    (and (<= 0 tid@265@01) (< tid@265@01 (- gsize@243@01 1)))
    (or (<= 0 tid@265@01) (not (<= 0 tid@265@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
    tid@265@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@265@01 Int) (tid2@265@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@265@01) (< tid1@265@01 (- gsize@243@01 1)))
      (and (<= 0 tid2@265@01) (< tid2@265@01 (- gsize@243@01 1)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
          tid1@265@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
          tid2@265@01)))
    (= tid1@265@01 tid2@265@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@265@01 Int)) (!
  (=>
    (and (<= 0 tid@265@01) (< tid@265@01 (- gsize@243@01 1)))
    (and
      (=
        (inv@266@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
          tid@265@01))
        tid@265@01)
      (img@267@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
        tid@265@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
    tid@265@01))
  :qid |quant-u-9152|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@267@01 r)
      (and (<= 0 (inv@266@01 r)) (< (inv@266@01 r) (- gsize@243@01 1))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
        (inv@266@01 r))
      r))
  :pattern ((inv@266@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@265@01 Int)) (!
  (=>
    (and (<= 0 tid@265@01) (< tid@265@01 (- gsize@243@01 1)))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
          tid@265@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
    tid@265@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@259@01))))))
        tid@265@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@259@01))))
        tid@262@01))
    (=
      (and
        (img@267@01 r)
        (and (<= 0 (inv@266@01 r)) (< (inv@266@01 r) (- gsize@243@01 1))))
      (and
        (img@264@01 r)
        (and (<= 0 (inv@263@01 r)) (< (inv@263@01 r) gsize@243@01)))))
  
  :qid |quant-u-9153|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@268@01 $Perm)
(assert ($Perm.isReadVar $k@268@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@247@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@268@01 $k@247@01))
(assert (<= $Perm.No (- $k@247@01 $k@268@01)))
(assert (<= (- $k@247@01 $k@268@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@247@01 $k@268@01)) (not (= diz@240@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $k@269@01 $Perm)
(assert ($Perm.isReadVar $k@269@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@248@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@269@01 $k@248@01))
(assert (<= $Perm.No (- $k@248@01 $k@269@01)))
(assert (<= (- $k@248@01 $k@269@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@248@01 $k@269@01)) (not (= diz@240@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] gsize > 1
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const tid@270@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 4
; [then-branch: 1050 | !(0 <= tid@270@01) | live]
; [else-branch: 1050 | 0 <= tid@270@01 | live]
(push) ; 5
; [then-branch: 1050 | !(0 <= tid@270@01)]
(assert (not (<= 0 tid@270@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1050 | 0 <= tid@270@01]
(assert (<= 0 tid@270@01))
; [eval] tid < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@270@01) (not (<= 0 tid@270@01))))
(assert (and (<= 0 tid@270@01) (< tid@270@01 gsize@243@01)))
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@247@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@270@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@270@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@271@01 ($Ref) Int)
(declare-fun img@272@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@270@01 Int)) (!
  (=>
    (and (<= 0 tid@270@01) (< tid@270@01 gsize@243@01))
    (or (<= 0 tid@270@01) (not (<= 0 tid@270@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    tid@270@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@270@01 Int) (tid2@270@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@270@01) (< tid1@270@01 gsize@243@01))
      (and (<= 0 tid2@270@01) (< tid2@270@01 gsize@243@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid1@270@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid2@270@01)))
    (= tid1@270@01 tid2@270@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@270@01 Int)) (!
  (=>
    (and (<= 0 tid@270@01) (< tid@270@01 gsize@243@01))
    (and
      (=
        (inv@271@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          tid@270@01))
        tid@270@01)
      (img@272@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
        tid@270@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
    tid@270@01))
  :qid |Ref__Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@272@01 r)
      (and (<= 0 (inv@271@01 r)) (< (inv@271@01 r) gsize@243@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
        (inv@271@01 r))
      r))
  :pattern ((inv@271@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((tid@270@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
      tid@270@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
      tid@270@01))
  
  :qid |quant-u-9155|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@273@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@271@01 r)) (< (inv@271@01 r) gsize@243@01))
      (img@272@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          (inv@271@01 r))))
    ($Perm.min
      (ite
        (and
          (img@255@01 r)
          (and (<= 0 (inv@254@01 r)) (< (inv@254@01 r) gsize@243@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@274@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@271@01 r)) (< (inv@271@01 r) gsize@243@01))
      (img@272@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          (inv@271@01 r))))
    ($Perm.min
      (ite
        (and
          (img@258@01 r)
          (and (<= 0 (inv@257@01 r)) (< (inv@257@01 r) gsize@243@01)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@273@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@255@01 r)
          (and (<= 0 (inv@254@01 r)) (< (inv@254@01 r) gsize@243@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@273@01 r))
    $Perm.No)
  
  :qid |quant-u-9157|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@271@01 r)) (< (inv@271@01 r) gsize@243@01))
      (img@272@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))
          (inv@271@01 r))))
    (= (- $Perm.Write (pTaken@273@01 r)) $Perm.No))
  
  :qid |quant-u-9158|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const tid@275@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] (0 <= 0 ? 1 : 0) - 1 <= tid && tid < gsize - 1
; [eval] (0 <= 0 ? 1 : 0) - 1 <= tid
; [eval] (0 <= 0 ? 1 : 0) - 1
; [eval] (0 <= 0 ? 1 : 0)
; [eval] 0 <= 0
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not false))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1051 | True | live]
; [else-branch: 1051 | False | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1051 | True]
(pop) ; 5
(pop) ; 4
; Joined path conditions
(push) ; 4
; [then-branch: 1052 | !(0 <= tid@275@01) | live]
; [else-branch: 1052 | 0 <= tid@275@01 | live]
(push) ; 5
; [then-branch: 1052 | !(0 <= tid@275@01)]
(assert (not (<= 0 tid@275@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1052 | 0 <= tid@275@01]
(assert (<= 0 tid@275@01))
; [eval] tid < gsize - 1
; [eval] gsize - 1
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@275@01) (not (<= 0 tid@275@01))))
(assert (and (<= 0 tid@275@01) (< tid@275@01 (- gsize@243@01 1))))
; [eval] diz.demo__tmp[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@248@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@275@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@275@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@276@01 ($Ref) Int)
(declare-fun img@277@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@275@01 Int)) (!
  (=>
    (and (<= 0 tid@275@01) (< tid@275@01 (- gsize@243@01 1)))
    (or (<= 0 tid@275@01) (not (<= 0 tid@275@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    tid@275@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@275@01 Int) (tid2@275@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@275@01) (< tid1@275@01 (- gsize@243@01 1)))
      (and (<= 0 tid2@275@01) (< tid2@275@01 (- gsize@243@01 1)))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid1@275@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid2@275@01)))
    (= tid1@275@01 tid2@275@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@275@01 Int)) (!
  (=>
    (and (<= 0 tid@275@01) (< tid@275@01 (- gsize@243@01 1)))
    (and
      (=
        (inv@276@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          tid@275@01))
        tid@275@01)
      (img@277@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        tid@275@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
    tid@275@01))
  :qid |Ref__Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@277@01 r)
      (and (<= 0 (inv@276@01 r)) (< (inv@276@01 r) (- gsize@243@01 1))))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
        (inv@276@01 r))
      r))
  :pattern ((inv@276@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@278@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@276@01 r)) (< (inv@276@01 r) (- gsize@243@01 1)))
      (img@277@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (inv@276@01 r))))
    ($Perm.min
      (ite
        (and
          (img@258@01 r)
          (and (<= 0 (inv@257@01 r)) (< (inv@257@01 r) gsize@243@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@258@01 r)
          (and (<= 0 (inv@257@01 r)) (< (inv@257@01 r) gsize@243@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@278@01 r))
    $Perm.No)
  
  :qid |quant-u-9161|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@278@01 r) $Perm.No)
  
  :qid |quant-u-9162|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@276@01 r)) (< (inv@276@01 r) (- gsize@243@01 1)))
      (img@277@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@246@01))))))))
          (inv@276@01 r))))
    (= (- $Perm.Write (pTaken@278@01 r)) $Perm.No))
  
  :qid |quant-u-9163|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(pop) ; 2
(pop) ; 1
; ---------- demo__main_resources_of_2 ----------
(declare-const diz@279@01 $Ref)
(declare-const current_thread_id@280@01 Int)
(declare-const tcount@281@01 Int)
(declare-const gsize@282@01 Int)
(declare-const gid@283@01 Int)
(declare-const N@284@01 Int)
(declare-const diz@285@01 $Ref)
(declare-const current_thread_id@286@01 Int)
(declare-const tcount@287@01 Int)
(declare-const gsize@288@01 Int)
(declare-const gid@289@01 Int)
(declare-const N@290@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@291@01 $Snap)
(assert (= $t@291@01 ($Snap.combine ($Snap.first $t@291@01) ($Snap.second $t@291@01))))
(assert (= ($Snap.first $t@291@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@285@01 $Ref.null)))
(assert (=
  ($Snap.second $t@291@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@291@01))
    ($Snap.second ($Snap.second $t@291@01)))))
(assert (= ($Snap.first ($Snap.second $t@291@01)) $Snap.unit))
; [eval] current_thread_id >= 0
(assert (>= current_thread_id@286@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@291@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@291@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@291@01))) $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@287@01 gsize@288@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@291@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@289@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
(declare-const $k@292@01 $Perm)
(assert ($Perm.isReadVar $k@292@01))
(assert (<= $Perm.No $k@292@01))
(assert (<= $k@292@01 $Perm.Write))
(assert (=> (< $Perm.No $k@292@01) (not (= diz@285@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
  gsize@288@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(declare-const $k@293@01 $Perm)
(assert ($Perm.isReadVar $k@293@01))
(assert (<= $Perm.No $k@293@01))
(assert (<= $k@293@01 $Perm.Write))
(assert (=> (< $Perm.No $k@293@01) (not (= diz@285@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
  gsize@288@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (> gsize@288@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__ar[i], diz.demo__ar[j] } i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j])
(declare-const i@294@01 Int)
(declare-const j@295@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j]
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1053 | !(i@294@01 >= 0) | live]
; [else-branch: 1053 | i@294@01 >= 0 | live]
(push) ; 4
; [then-branch: 1053 | !(i@294@01 >= 0)]
(assert (not (>= i@294@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1053 | i@294@01 >= 0]
(assert (>= i@294@01 0))
; [eval] i < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1054 | !(i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))|) | live]
; [else-branch: 1054 | i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| | live]
(push) ; 6
; [then-branch: 1054 | !(i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))|)]
(assert (not
  (<
    i@294@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1054 | i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))|]
(assert (<
  i@294@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1055 | !(j@295@01 >= 0) | live]
; [else-branch: 1055 | j@295@01 >= 0 | live]
(push) ; 8
; [then-branch: 1055 | !(j@295@01 >= 0)]
(assert (not (>= j@295@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1055 | j@295@01 >= 0]
(assert (>= j@295@01 0))
; [eval] j < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1056 | !(j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))|) | live]
; [else-branch: 1056 | j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| | live]
(push) ; 10
; [then-branch: 1056 | !(j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))|)]
(assert (not
  (<
    j@295@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1056 | j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))|]
(assert (<
  j@295@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@295@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  (not
    (<
      j@295@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@295@01 0)
  (and
    (>= j@295@01 0)
    (or
      (<
        j@295@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      (not
        (<
          j@295@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))
(assert (or (>= j@295@01 0) (not (>= j@295@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@294@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  (and
    (<
      i@294@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    (=>
      (>= j@295@01 0)
      (and
        (>= j@295@01 0)
        (or
          (<
            j@295@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (not
            (<
              j@295@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
    (or (>= j@295@01 0) (not (>= j@295@01 0))))))
(assert (or
  (<
    i@294@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
  (not
    (<
      i@294@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@294@01 0)
  (and
    (>= i@294@01 0)
    (=>
      (<
        i@294@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      (and
        (<
          i@294@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (=>
          (>= j@295@01 0)
          (and
            (>= j@295@01 0)
            (or
              (<
                j@295@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
              (not
                (<
                  j@295@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
        (or (>= j@295@01 0) (not (>= j@295@01 0)))))
    (or
      (<
        i@294@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      (not
        (<
          i@294@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))
(assert (or (>= i@294@01 0) (not (>= i@294@01 0))))
(push) ; 3
; [then-branch: 1057 | i@294@01 >= 0 && i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && j@295@01 >= 0 && j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && i@294@01 != j@295@01 | live]
; [else-branch: 1057 | !(i@294@01 >= 0 && i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && j@295@01 >= 0 && j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && i@294@01 != j@295@01) | live]
(push) ; 4
; [then-branch: 1057 | i@294@01 >= 0 && i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && j@295@01 >= 0 && j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && i@294@01 != j@295@01]
(assert (and
  (>= i@294@01 0)
  (and
    (<
      i@294@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    (and
      (>= j@295@01 0)
      (and
        (<
          j@295@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (not (= i@294@01 j@295@01)))))))
; [eval] diz.demo__ar[i] != diz.demo__ar[j]
; [eval] diz.demo__ar[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1057 | !(i@294@01 >= 0 && i@294@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && j@295@01 >= 0 && j@295@01 < |First:(Second:(Second:(Second:(Second:($t@291@01)))))| && i@294@01 != j@295@01)]
(assert (not
  (and
    (>= i@294@01 0)
    (and
      (<
        i@294@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      (and
        (>= j@295@01 0)
        (and
          (<
            j@295@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (not (= i@294@01 j@295@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@294@01 0)
    (and
      (<
        i@294@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      (and
        (>= j@295@01 0)
        (and
          (<
            j@295@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (not (= i@294@01 j@295@01))))))
  (and
    (>= i@294@01 0)
    (<
      i@294@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    (>= j@295@01 0)
    (<
      j@295@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    (not (= i@294@01 j@295@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@294@01 0)
      (and
        (<
          i@294@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (and
          (>= j@295@01 0)
          (and
            (<
              j@295@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
            (not (= i@294@01 j@295@01)))))))
  (and
    (>= i@294@01 0)
    (and
      (<
        i@294@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      (and
        (>= j@295@01 0)
        (and
          (<
            j@295@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (not (= i@294@01 j@295@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@294@01 Int) (j@295@01 Int)) (!
  (and
    (=>
      (>= i@294@01 0)
      (and
        (>= i@294@01 0)
        (=>
          (<
            i@294@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (and
            (<
              i@294@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
            (=>
              (>= j@295@01 0)
              (and
                (>= j@295@01 0)
                (or
                  (<
                    j@295@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
                  (not
                    (<
                      j@295@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
            (or (>= j@295@01 0) (not (>= j@295@01 0)))))
        (or
          (<
            i@294@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (not
            (<
              i@294@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
    (or (>= i@294@01 0) (not (>= i@294@01 0)))
    (=>
      (and
        (>= i@294@01 0)
        (and
          (<
            i@294@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (and
            (>= j@295@01 0)
            (and
              (<
                j@295@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
              (not (= i@294@01 j@295@01))))))
      (and
        (>= i@294@01 0)
        (<
          i@294@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (>= j@295@01 0)
        (<
          j@295@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (not (= i@294@01 j@295@01))))
    (or
      (not
        (and
          (>= i@294@01 0)
          (and
            (<
              i@294@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
            (and
              (>= j@295@01 0)
              (and
                (<
                  j@295@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
                (not (= i@294@01 j@295@01)))))))
      (and
        (>= i@294@01 0)
        (and
          (<
            i@294@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (and
            (>= j@295@01 0)
            (and
              (<
                j@295@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
              (not (= i@294@01 j@295@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    i@294@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    j@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@198@12@198@144-aux|)))
(assert (forall ((i@294@01 Int) (j@295@01 Int)) (!
  (=>
    (and
      (>= i@294@01 0)
      (and
        (<
          i@294@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (and
          (>= j@295@01 0)
          (and
            (<
              j@295@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
            (not (= i@294@01 j@295@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          i@294@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          j@295@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    i@294@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    j@295@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@198@12@198@144|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__tmp[i], diz.demo__tmp[j] } i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j])
(declare-const i@296@01 Int)
(declare-const j@297@01 Int)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1058 | !(i@296@01 >= 0) | live]
; [else-branch: 1058 | i@296@01 >= 0 | live]
(push) ; 4
; [then-branch: 1058 | !(i@296@01 >= 0)]
(assert (not (>= i@296@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1058 | i@296@01 >= 0]
(assert (>= i@296@01 0))
; [eval] i < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1059 | !(i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))|) | live]
; [else-branch: 1059 | i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| | live]
(push) ; 6
; [then-branch: 1059 | !(i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))|)]
(assert (not
  (<
    i@296@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1059 | i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))|]
(assert (<
  i@296@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1060 | !(j@297@01 >= 0) | live]
; [else-branch: 1060 | j@297@01 >= 0 | live]
(push) ; 8
; [then-branch: 1060 | !(j@297@01 >= 0)]
(assert (not (>= j@297@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1060 | j@297@01 >= 0]
(assert (>= j@297@01 0))
; [eval] j < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1061 | !(j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))|) | live]
; [else-branch: 1061 | j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| | live]
(push) ; 10
; [then-branch: 1061 | !(j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))|)]
(assert (not
  (<
    j@297@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1061 | j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))|]
(assert (<
  j@297@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@297@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  (not
    (<
      j@297@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@297@01 0)
  (and
    (>= j@297@01 0)
    (or
      (<
        j@297@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
      (not
        (<
          j@297@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))))
(assert (or (>= j@297@01 0) (not (>= j@297@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@296@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  (and
    (<
      i@296@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
    (=>
      (>= j@297@01 0)
      (and
        (>= j@297@01 0)
        (or
          (<
            j@297@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (not
            (<
              j@297@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))))
    (or (>= j@297@01 0) (not (>= j@297@01 0))))))
(assert (or
  (<
    i@296@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
  (not
    (<
      i@296@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@296@01 0)
  (and
    (>= i@296@01 0)
    (=>
      (<
        i@296@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
      (and
        (<
          i@296@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
        (=>
          (>= j@297@01 0)
          (and
            (>= j@297@01 0)
            (or
              (<
                j@297@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
              (not
                (<
                  j@297@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))))
        (or (>= j@297@01 0) (not (>= j@297@01 0)))))
    (or
      (<
        i@296@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
      (not
        (<
          i@296@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))))
(assert (or (>= i@296@01 0) (not (>= i@296@01 0))))
(push) ; 3
; [then-branch: 1062 | i@296@01 >= 0 && i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && j@297@01 >= 0 && j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && i@296@01 != j@297@01 | live]
; [else-branch: 1062 | !(i@296@01 >= 0 && i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && j@297@01 >= 0 && j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && i@296@01 != j@297@01) | live]
(push) ; 4
; [then-branch: 1062 | i@296@01 >= 0 && i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && j@297@01 >= 0 && j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && i@296@01 != j@297@01]
(assert (and
  (>= i@296@01 0)
  (and
    (<
      i@296@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
    (and
      (>= j@297@01 0)
      (and
        (<
          j@297@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
        (not (= i@296@01 j@297@01)))))))
; [eval] diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] diz.demo__tmp[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1062 | !(i@296@01 >= 0 && i@296@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && j@297@01 >= 0 && j@297@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:($t@291@01)))))))| && i@296@01 != j@297@01)]
(assert (not
  (and
    (>= i@296@01 0)
    (and
      (<
        i@296@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
      (and
        (>= j@297@01 0)
        (and
          (<
            j@297@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (not (= i@296@01 j@297@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@296@01 0)
    (and
      (<
        i@296@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
      (and
        (>= j@297@01 0)
        (and
          (<
            j@297@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (not (= i@296@01 j@297@01))))))
  (and
    (>= i@296@01 0)
    (<
      i@296@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
    (>= j@297@01 0)
    (<
      j@297@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
    (not (= i@296@01 j@297@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@296@01 0)
      (and
        (<
          i@296@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
        (and
          (>= j@297@01 0)
          (and
            (<
              j@297@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
            (not (= i@296@01 j@297@01)))))))
  (and
    (>= i@296@01 0)
    (and
      (<
        i@296@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
      (and
        (>= j@297@01 0)
        (and
          (<
            j@297@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (not (= i@296@01 j@297@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@296@01 Int) (j@297@01 Int)) (!
  (and
    (=>
      (>= i@296@01 0)
      (and
        (>= i@296@01 0)
        (=>
          (<
            i@296@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (and
            (<
              i@296@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
            (=>
              (>= j@297@01 0)
              (and
                (>= j@297@01 0)
                (or
                  (<
                    j@297@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
                  (not
                    (<
                      j@297@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))))
            (or (>= j@297@01 0) (not (>= j@297@01 0)))))
        (or
          (<
            i@296@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (not
            (<
              i@296@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))))
    (or (>= i@296@01 0) (not (>= i@296@01 0)))
    (=>
      (and
        (>= i@296@01 0)
        (and
          (<
            i@296@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (and
            (>= j@297@01 0)
            (and
              (<
                j@297@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
              (not (= i@296@01 j@297@01))))))
      (and
        (>= i@296@01 0)
        (<
          i@296@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
        (>= j@297@01 0)
        (<
          j@297@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
        (not (= i@296@01 j@297@01))))
    (or
      (not
        (and
          (>= i@296@01 0)
          (and
            (<
              i@296@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
            (and
              (>= j@297@01 0)
              (and
                (<
                  j@297@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
                (not (= i@296@01 j@297@01)))))))
      (and
        (>= i@296@01 0)
        (and
          (<
            i@296@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
          (and
            (>= j@297@01 0)
            (and
              (<
                j@297@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
              (not (= i@296@01 j@297@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    i@296@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    j@297@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@199@12@199@148-aux|)))
(assert (forall ((i@296@01 Int) (j@297@01 Int)) (!
  (=>
    (and
      (>= i@296@01 0)
      (and
        (<
          i@296@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
        (and
          (>= j@297@01 0)
          (and
            (<
              j@297@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
            (not (= i@296@01 j@297@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          i@296@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          j@297@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    i@296@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    j@297@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@199@12@199@148|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01)))))))))))))))
(declare-const tid@298@01 Int)
(push) ; 2
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 3
; [then-branch: 1063 | !(0 <= tid@298@01) | live]
; [else-branch: 1063 | 0 <= tid@298@01 | live]
(push) ; 4
; [then-branch: 1063 | !(0 <= tid@298@01)]
(assert (not (<= 0 tid@298@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1063 | 0 <= tid@298@01]
(assert (<= 0 tid@298@01))
; [eval] tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@298@01) (not (<= 0 tid@298@01))))
(assert (and (<= 0 tid@298@01) (< tid@298@01 gsize@288@01)))
; [eval] diz.demo__ar[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@298@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@298@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@299@01 ($Ref) Int)
(declare-fun img@300@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@298@01 Int)) (!
  (=>
    (and (<= 0 tid@298@01) (< tid@298@01 gsize@288@01))
    (or (<= 0 tid@298@01) (not (<= 0 tid@298@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    tid@298@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((tid1@298@01 Int) (tid2@298@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@298@01) (< tid1@298@01 gsize@288@01))
      (and (<= 0 tid2@298@01) (< tid2@298@01 gsize@288@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid1@298@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid2@298@01)))
    (= tid1@298@01 tid2@298@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@298@01 Int)) (!
  (=>
    (and (<= 0 tid@298@01) (< tid@298@01 gsize@288@01))
    (and
      (=
        (inv@299@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid@298@01))
        tid@298@01)
      (img@300@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
        tid@298@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    tid@298@01))
  :qid |quant-u-9165|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@300@01 r)
      (and (<= 0 (inv@299@01 r)) (< (inv@299@01 r) gsize@288@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
        (inv@299@01 r))
      r))
  :pattern ((inv@299@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@298@01 Int)) (!
  (=>
    (and (<= 0 tid@298@01) (< tid@298@01 gsize@288@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid@298@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    tid@298@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(declare-const tid@301@01 Int)
(push) ; 2
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 3
; [then-branch: 1064 | !(0 <= tid@301@01) | live]
; [else-branch: 1064 | 0 <= tid@301@01 | live]
(push) ; 4
; [then-branch: 1064 | !(0 <= tid@301@01)]
(assert (not (<= 0 tid@301@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1064 | 0 <= tid@301@01]
(assert (<= 0 tid@301@01))
; [eval] tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@301@01) (not (<= 0 tid@301@01))))
(assert (and (<= 0 tid@301@01) (< tid@301@01 gsize@288@01)))
; [eval] diz.demo__tmp[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@301@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@301@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@302@01 ($Ref) Int)
(declare-fun img@303@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@301@01 Int)) (!
  (=>
    (and (<= 0 tid@301@01) (< tid@301@01 gsize@288@01))
    (or (<= 0 tid@301@01) (not (<= 0 tid@301@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    tid@301@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((tid1@301@01 Int) (tid2@301@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@301@01) (< tid1@301@01 gsize@288@01))
      (and (<= 0 tid2@301@01) (< tid2@301@01 gsize@288@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid1@301@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid2@301@01)))
    (= tid1@301@01 tid2@301@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@301@01 Int)) (!
  (=>
    (and (<= 0 tid@301@01) (< tid@301@01 gsize@288@01))
    (and
      (=
        (inv@302@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid@301@01))
        tid@301@01)
      (img@303@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        tid@301@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    tid@301@01))
  :qid |quant-u-9167|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@303@01 r)
      (and (<= 0 (inv@302@01 r)) (< (inv@302@01 r) gsize@288@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (inv@302@01 r))
      r))
  :pattern ((inv@302@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@301@01 Int)) (!
  (=>
    (and (<= 0 tid@301@01) (< tid@301@01 gsize@288@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid@301@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    tid@301@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        tid@301@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
        tid@298@01))
    (=
      (and
        (img@303@01 r)
        (and (<= 0 (inv@302@01 r)) (< (inv@302@01 r) gsize@288@01)))
      (and
        (img@300@01 r)
        (and (<= 0 (inv@299@01 r)) (< (inv@299@01 r) gsize@288@01)))))
  
  :qid |quant-u-9168|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@304@01 $Snap)
(assert (= $t@304@01 ($Snap.combine ($Snap.first $t@304@01) ($Snap.second $t@304@01))))
(assert (= ($Snap.first $t@304@01) $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second $t@304@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@304@01))
    ($Snap.second ($Snap.second $t@304@01)))))
(assert (= ($Snap.first ($Snap.second $t@304@01)) $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second $t@304@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@304@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
(declare-const $k@305@01 $Perm)
(assert ($Perm.isReadVar $k@305@01))
(assert (<= $Perm.No $k@305@01))
(assert (<= $k@305@01 $Perm.Write))
(assert (=> (< $Perm.No $k@305@01) (not (= diz@285@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@304@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@305@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01)))))
  gsize@288@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
(declare-const $k@306@01 $Perm)
(assert ($Perm.isReadVar $k@306@01))
(assert (<= $Perm.No $k@306@01))
(assert (<= $k@306@01 $Perm.Write))
(assert (=> (< $Perm.No $k@306@01) (not (= diz@285@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  gsize@288@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@305@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01)))))))))))))
(declare-const tid@307@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 4
; [then-branch: 1065 | !(0 <= tid@307@01) | live]
; [else-branch: 1065 | 0 <= tid@307@01 | live]
(push) ; 5
; [then-branch: 1065 | !(0 <= tid@307@01)]
(assert (not (<= 0 tid@307@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1065 | 0 <= tid@307@01]
(assert (<= 0 tid@307@01))
; [eval] tid < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@307@01) (not (<= 0 tid@307@01))))
(assert (and (<= 0 tid@307@01) (< tid@307@01 gsize@288@01)))
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@305@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@307@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@307@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@308@01 ($Ref) Int)
(declare-fun img@309@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@307@01 Int)) (!
  (=>
    (and (<= 0 tid@307@01) (< tid@307@01 gsize@288@01))
    (or (<= 0 tid@307@01) (not (<= 0 tid@307@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    tid@307@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@307@01 Int) (tid2@307@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@307@01) (< tid1@307@01 gsize@288@01))
      (and (<= 0 tid2@307@01) (< tid2@307@01 gsize@288@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
          tid1@307@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
          tid2@307@01)))
    (= tid1@307@01 tid2@307@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@307@01 Int)) (!
  (=>
    (and (<= 0 tid@307@01) (< tid@307@01 gsize@288@01))
    (and
      (=
        (inv@308@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
          tid@307@01))
        tid@307@01)
      (img@309@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
        tid@307@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    tid@307@01))
  :qid |quant-u-9170|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@309@01 r)
      (and (<= 0 (inv@308@01 r)) (< (inv@308@01 r) gsize@288@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
        (inv@308@01 r))
      r))
  :pattern ((inv@308@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@307@01 Int)) (!
  (=>
    (and (<= 0 tid@307@01) (< tid@307@01 gsize@288@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
          tid@307@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
    tid@307@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(declare-const tid@310@01 Int)
(push) ; 3
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 4
; [then-branch: 1066 | !(0 <= tid@310@01) | live]
; [else-branch: 1066 | 0 <= tid@310@01 | live]
(push) ; 5
; [then-branch: 1066 | !(0 <= tid@310@01)]
(assert (not (<= 0 tid@310@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1066 | 0 <= tid@310@01]
(assert (<= 0 tid@310@01))
; [eval] tid < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@310@01) (not (<= 0 tid@310@01))))
(assert (and (<= 0 tid@310@01) (< tid@310@01 gsize@288@01)))
; [eval] diz.demo__tmp[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@306@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@310@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@310@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@311@01 ($Ref) Int)
(declare-fun img@312@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@310@01 Int)) (!
  (=>
    (and (<= 0 tid@310@01) (< tid@310@01 gsize@288@01))
    (or (<= 0 tid@310@01) (not (<= 0 tid@310@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    tid@310@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@310@01 Int) (tid2@310@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@310@01) (< tid1@310@01 gsize@288@01))
      (and (<= 0 tid2@310@01) (< tid2@310@01 gsize@288@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
          tid1@310@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
          tid2@310@01)))
    (= tid1@310@01 tid2@310@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@310@01 Int)) (!
  (=>
    (and (<= 0 tid@310@01) (< tid@310@01 gsize@288@01))
    (and
      (=
        (inv@311@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
          tid@310@01))
        tid@310@01)
      (img@312@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
        tid@310@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    tid@310@01))
  :qid |quant-u-9172|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@312@01 r)
      (and (<= 0 (inv@311@01 r)) (< (inv@311@01 r) gsize@288@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
        (inv@311@01 r))
      r))
  :pattern ((inv@311@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((tid@310@01 Int)) (!
  (=>
    (and (<= 0 tid@310@01) (< tid@310@01 gsize@288@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
          tid@310@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
    tid@310@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@304@01))))))
        tid@310@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second $t@304@01))))
        tid@307@01))
    (=
      (and
        (img@312@01 r)
        (and (<= 0 (inv@311@01 r)) (< (inv@311@01 r) gsize@288@01)))
      (and
        (img@309@01 r)
        (and (<= 0 (inv@308@01 r)) (< (inv@308@01 r) gsize@288@01)))))
  
  :qid |quant-u-9173|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(set-option :timeout 0)
(push) ; 2
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@313@01 $Perm)
(assert ($Perm.isReadVar $k@313@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@292@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@313@01 $k@292@01))
(assert (<= $Perm.No (- $k@292@01 $k@313@01)))
(assert (<= (- $k@292@01 $k@313@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@292@01 $k@313@01)) (not (= diz@285@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $k@314@01 $Perm)
(assert ($Perm.isReadVar $k@314@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@293@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@314@01 $k@293@01))
(assert (<= $Perm.No (- $k@293@01 $k@314@01)))
(assert (<= (- $k@293@01 $k@314@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@293@01 $k@314@01)) (not (= diz@285@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] gsize > 1
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const tid@315@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 4
; [then-branch: 1067 | !(0 <= tid@315@01) | live]
; [else-branch: 1067 | 0 <= tid@315@01 | live]
(push) ; 5
; [then-branch: 1067 | !(0 <= tid@315@01)]
(assert (not (<= 0 tid@315@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1067 | 0 <= tid@315@01]
(assert (<= 0 tid@315@01))
; [eval] tid < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@315@01) (not (<= 0 tid@315@01))))
(assert (and (<= 0 tid@315@01) (< tid@315@01 gsize@288@01)))
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@292@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@315@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@315@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@316@01 ($Ref) Int)
(declare-fun img@317@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@315@01 Int)) (!
  (=>
    (and (<= 0 tid@315@01) (< tid@315@01 gsize@288@01))
    (or (<= 0 tid@315@01) (not (<= 0 tid@315@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    tid@315@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@315@01 Int) (tid2@315@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@315@01) (< tid1@315@01 gsize@288@01))
      (and (<= 0 tid2@315@01) (< tid2@315@01 gsize@288@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid1@315@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid2@315@01)))
    (= tid1@315@01 tid2@315@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@315@01 Int)) (!
  (=>
    (and (<= 0 tid@315@01) (< tid@315@01 gsize@288@01))
    (and
      (=
        (inv@316@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          tid@315@01))
        tid@315@01)
      (img@317@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
        tid@315@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
    tid@315@01))
  :qid |Ref__Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@317@01 r)
      (and (<= 0 (inv@316@01 r)) (< (inv@316@01 r) gsize@288@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
        (inv@316@01 r))
      r))
  :pattern ((inv@316@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((tid@315@01 Int)) (!
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
      tid@315@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
      tid@315@01))
  
  :qid |quant-u-9175|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@318@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@316@01 r)) (< (inv@316@01 r) gsize@288@01))
      (img@317@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          (inv@316@01 r))))
    ($Perm.min
      (ite
        (and
          (img@300@01 r)
          (and (<= 0 (inv@299@01 r)) (< (inv@299@01 r) gsize@288@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@319@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@316@01 r)) (< (inv@316@01 r) gsize@288@01))
      (img@317@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          (inv@316@01 r))))
    ($Perm.min
      (ite
        (and
          (img@303@01 r)
          (and (<= 0 (inv@302@01 r)) (< (inv@302@01 r) gsize@288@01)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@318@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@300@01 r)
          (and (<= 0 (inv@299@01 r)) (< (inv@299@01 r) gsize@288@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@318@01 r))
    $Perm.No)
  
  :qid |quant-u-9177|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@316@01 r)) (< (inv@316@01 r) gsize@288@01))
      (img@317@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))
          (inv@316@01 r))))
    (= (- $Perm.Write (pTaken@318@01 r)) $Perm.No))
  
  :qid |quant-u-9178|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(declare-const tid@320@01 Int)
(set-option :timeout 0)
(push) ; 3
; [eval] 0 <= tid && tid < gsize
; [eval] 0 <= tid
(push) ; 4
; [then-branch: 1068 | !(0 <= tid@320@01) | live]
; [else-branch: 1068 | 0 <= tid@320@01 | live]
(push) ; 5
; [then-branch: 1068 | !(0 <= tid@320@01)]
(assert (not (<= 0 tid@320@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1068 | 0 <= tid@320@01]
(assert (<= 0 tid@320@01))
; [eval] tid < gsize
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 tid@320@01) (not (<= 0 tid@320@01))))
(assert (and (<= 0 tid@320@01) (< tid@320@01 gsize@288@01)))
; [eval] diz.demo__tmp[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@293@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@320@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@320@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(pop) ; 3
(declare-fun inv@321@01 ($Ref) Int)
(declare-fun img@322@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((tid@320@01 Int)) (!
  (=>
    (and (<= 0 tid@320@01) (< tid@320@01 gsize@288@01))
    (or (<= 0 tid@320@01) (not (<= 0 tid@320@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    tid@320@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 3
(assert (not (forall ((tid1@320@01 Int) (tid2@320@01 Int)) (!
  (=>
    (and
      (and (<= 0 tid1@320@01) (< tid1@320@01 gsize@288@01))
      (and (<= 0 tid2@320@01) (< tid2@320@01 gsize@288@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid1@320@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid2@320@01)))
    (= tid1@320@01 tid2@320@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((tid@320@01 Int)) (!
  (=>
    (and (<= 0 tid@320@01) (< tid@320@01 gsize@288@01))
    (and
      (=
        (inv@321@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          tid@320@01))
        tid@320@01)
      (img@322@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        tid@320@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
    tid@320@01))
  :qid |Ref__Integer_value-invOfFct|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@322@01 r)
      (and (<= 0 (inv@321@01 r)) (< (inv@321@01 r) gsize@288@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
        (inv@321@01 r))
      r))
  :pattern ((inv@321@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Precomputing data for removing quantified permissions
(define-fun pTaken@323@01 ((r $Ref)) $Perm
  (ite
    (and
      (and (<= 0 (inv@321@01 r)) (< (inv@321@01 r) gsize@288@01))
      (img@322@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (inv@321@01 r))))
    ($Perm.min
      (ite
        (and
          (img@303@01 r)
          (and (<= 0 (inv@302@01 r)) (< (inv@302@01 r) gsize@288@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@303@01 r)
          (and (<= 0 (inv@302@01 r)) (< (inv@302@01 r) gsize@288@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@323@01 r))
    $Perm.No)
  
  :qid |quant-u-9181|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (and
      (and (<= 0 (inv@321@01 r)) (< (inv@321@01 r) gsize@288@01))
      (img@322@01 r)
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@291@01))))))))
          (inv@321@01 r))))
    (= (- $Perm.Write (pTaken@323@01 r)) $Perm.No))
  
  :qid |quant-u-9182|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
(pop) ; 2
(pop) ; 1
; ---------- demo__main_post_check_1 ----------
(declare-const diz@324@01 $Ref)
(declare-const current_thread_id@325@01 Int)
(declare-const tcount@326@01 Int)
(declare-const gsize@327@01 Int)
(declare-const tid@328@01 Int)
(declare-const gid@329@01 Int)
(declare-const lid@330@01 Int)
(declare-const N@331@01 Int)
(declare-const diz@332@01 $Ref)
(declare-const current_thread_id@333@01 Int)
(declare-const tcount@334@01 Int)
(declare-const gsize@335@01 Int)
(declare-const tid@336@01 Int)
(declare-const gid@337@01 Int)
(declare-const lid@338@01 Int)
(declare-const N@339@01 Int)
(set-option :timeout 0)
(push) ; 1
(declare-const $t@340@01 $Snap)
(assert (= $t@340@01 ($Snap.combine ($Snap.first $t@340@01) ($Snap.second $t@340@01))))
(assert (= ($Snap.first $t@340@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@332@01 $Ref.null)))
(assert (=
  ($Snap.second $t@340@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@340@01))
    ($Snap.second ($Snap.second $t@340@01)))))
(assert (= ($Snap.first ($Snap.second $t@340@01)) $Snap.unit))
; [eval] current_thread_id >= 0
(assert (>= current_thread_id@333@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@340@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@340@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@340@01))) $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@336@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@340@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
  $Snap.unit))
; [eval] tid < tcount
(assert (< tid@336@01 tcount@334@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
  $Snap.unit))
; [eval] tid == lid
(assert (= tid@336@01 lid@338@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@334@01 gsize@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@337@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
(declare-const $k@341@01 $Perm)
(assert ($Perm.isReadVar $k@341@01))
(assert (<= $Perm.No $k@341@01))
(assert (<= $k@341@01 $Perm.Write))
(assert (=> (< $Perm.No $k@341@01) (not (= diz@332@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))
  gsize@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(declare-const $k@342@01 $Perm)
(assert ($Perm.isReadVar $k@342@01))
(assert (<= $Perm.No $k@342@01))
(assert (<= $k@342@01 $Perm.Write))
(assert (=> (< $Perm.No $k@342@01) (not (= diz@332@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
  gsize@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__ar[i], diz.demo__ar[j] } i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j])
(declare-const i@343@01 Int)
(declare-const j@344@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j]
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1069 | !(i@343@01 >= 0) | live]
; [else-branch: 1069 | i@343@01 >= 0 | live]
(push) ; 4
; [then-branch: 1069 | !(i@343@01 >= 0)]
(assert (not (>= i@343@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1069 | i@343@01 >= 0]
(assert (>= i@343@01 0))
; [eval] i < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1070 | !(i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))|) | live]
; [else-branch: 1070 | i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| | live]
(push) ; 6
; [then-branch: 1070 | !(i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))|)]
(assert (not
  (<
    i@343@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1070 | i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))|]
(assert (<
  i@343@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1071 | !(j@344@01 >= 0) | live]
; [else-branch: 1071 | j@344@01 >= 0 | live]
(push) ; 8
; [then-branch: 1071 | !(j@344@01 >= 0)]
(assert (not (>= j@344@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1071 | j@344@01 >= 0]
(assert (>= j@344@01 0))
; [eval] j < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1072 | !(j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))|) | live]
; [else-branch: 1072 | j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| | live]
(push) ; 10
; [then-branch: 1072 | !(j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))|)]
(assert (not
  (<
    j@344@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1072 | j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))|]
(assert (<
  j@344@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@344@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
  (not
    (<
      j@344@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@344@01 0)
  (and
    (>= j@344@01 0)
    (or
      (<
        j@344@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (not
        (<
          j@344@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
(assert (or (>= j@344@01 0) (not (>= j@344@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@343@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
  (and
    (<
      i@343@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    (=>
      (>= j@344@01 0)
      (and
        (>= j@344@01 0)
        (or
          (<
            j@344@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (not
            (<
              j@344@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
    (or (>= j@344@01 0) (not (>= j@344@01 0))))))
(assert (or
  (<
    i@343@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
  (not
    (<
      i@343@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@343@01 0)
  (and
    (>= i@343@01 0)
    (=>
      (<
        i@343@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (and
        (<
          i@343@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (=>
          (>= j@344@01 0)
          (and
            (>= j@344@01 0)
            (or
              (<
                j@344@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (not
                (<
                  j@344@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
        (or (>= j@344@01 0) (not (>= j@344@01 0)))))
    (or
      (<
        i@343@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (not
        (<
          i@343@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
(assert (or (>= i@343@01 0) (not (>= i@343@01 0))))
(push) ; 3
; [then-branch: 1073 | i@343@01 >= 0 && i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && j@344@01 >= 0 && j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && i@343@01 != j@344@01 | live]
; [else-branch: 1073 | !(i@343@01 >= 0 && i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && j@344@01 >= 0 && j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && i@343@01 != j@344@01) | live]
(push) ; 4
; [then-branch: 1073 | i@343@01 >= 0 && i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && j@344@01 >= 0 && j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && i@343@01 != j@344@01]
(assert (and
  (>= i@343@01 0)
  (and
    (<
      i@343@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    (and
      (>= j@344@01 0)
      (and
        (<
          j@344@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (not (= i@343@01 j@344@01)))))))
; [eval] diz.demo__ar[i] != diz.demo__ar[j]
; [eval] diz.demo__ar[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1073 | !(i@343@01 >= 0 && i@343@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && j@344@01 >= 0 && j@344@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))| && i@343@01 != j@344@01)]
(assert (not
  (and
    (>= i@343@01 0)
    (and
      (<
        i@343@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (and
        (>= j@344@01 0)
        (and
          (<
            j@344@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (not (= i@343@01 j@344@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@343@01 0)
    (and
      (<
        i@343@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (and
        (>= j@344@01 0)
        (and
          (<
            j@344@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (not (= i@343@01 j@344@01))))))
  (and
    (>= i@343@01 0)
    (<
      i@343@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    (>= j@344@01 0)
    (<
      j@344@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    (not (= i@343@01 j@344@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@343@01 0)
      (and
        (<
          i@343@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (and
          (>= j@344@01 0)
          (and
            (<
              j@344@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
            (not (= i@343@01 j@344@01)))))))
  (and
    (>= i@343@01 0)
    (and
      (<
        i@343@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (and
        (>= j@344@01 0)
        (and
          (<
            j@344@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (not (= i@343@01 j@344@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@343@01 Int) (j@344@01 Int)) (!
  (and
    (=>
      (>= i@343@01 0)
      (and
        (>= i@343@01 0)
        (=>
          (<
            i@343@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (and
            (<
              i@343@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
            (=>
              (>= j@344@01 0)
              (and
                (>= j@344@01 0)
                (or
                  (<
                    j@344@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
                  (not
                    (<
                      j@344@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
            (or (>= j@344@01 0) (not (>= j@344@01 0)))))
        (or
          (<
            i@343@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (not
            (<
              i@343@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
    (or (>= i@343@01 0) (not (>= i@343@01 0)))
    (=>
      (and
        (>= i@343@01 0)
        (and
          (<
            i@343@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (and
            (>= j@344@01 0)
            (and
              (<
                j@344@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (not (= i@343@01 j@344@01))))))
      (and
        (>= i@343@01 0)
        (<
          i@343@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (>= j@344@01 0)
        (<
          j@344@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (not (= i@343@01 j@344@01))))
    (or
      (not
        (and
          (>= i@343@01 0)
          (and
            (<
              i@343@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
            (and
              (>= j@344@01 0)
              (and
                (<
                  j@344@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
                (not (= i@343@01 j@344@01)))))))
      (and
        (>= i@343@01 0)
        (and
          (<
            i@343@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (and
            (>= j@344@01 0)
            (and
              (<
                j@344@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (not (= i@343@01 j@344@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    i@343@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    j@344@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@228@12@228@144-aux|)))
(assert (forall ((i@343@01 Int) (j@344@01 Int)) (!
  (=>
    (and
      (>= i@343@01 0)
      (and
        (<
          i@343@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (and
          (>= j@344@01 0)
          (and
            (<
              j@344@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
            (not (= i@343@01 j@344@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          i@343@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          j@344@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    i@343@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    j@344@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@228@12@228@144|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__tmp[i], diz.demo__tmp[j] } i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j])
(declare-const i@345@01 Int)
(declare-const j@346@01 Int)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1074 | !(i@345@01 >= 0) | live]
; [else-branch: 1074 | i@345@01 >= 0 | live]
(push) ; 4
; [then-branch: 1074 | !(i@345@01 >= 0)]
(assert (not (>= i@345@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1074 | i@345@01 >= 0]
(assert (>= i@345@01 0))
; [eval] i < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1075 | !(i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))|) | live]
; [else-branch: 1075 | i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| | live]
(push) ; 6
; [then-branch: 1075 | !(i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))|)]
(assert (not
  (<
    i@345@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1075 | i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))|]
(assert (<
  i@345@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1076 | !(j@346@01 >= 0) | live]
; [else-branch: 1076 | j@346@01 >= 0 | live]
(push) ; 8
; [then-branch: 1076 | !(j@346@01 >= 0)]
(assert (not (>= j@346@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1076 | j@346@01 >= 0]
(assert (>= j@346@01 0))
; [eval] j < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1077 | !(j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))|) | live]
; [else-branch: 1077 | j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| | live]
(push) ; 10
; [then-branch: 1077 | !(j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))|)]
(assert (not
  (<
    j@346@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1077 | j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))|]
(assert (<
  j@346@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@346@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
  (not
    (<
      j@346@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@346@01 0)
  (and
    (>= j@346@01 0)
    (or
      (<
        j@346@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
      (not
        (<
          j@346@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))
(assert (or (>= j@346@01 0) (not (>= j@346@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@345@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
  (and
    (<
      i@345@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
    (=>
      (>= j@346@01 0)
      (and
        (>= j@346@01 0)
        (or
          (<
            j@346@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (not
            (<
              j@346@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
    (or (>= j@346@01 0) (not (>= j@346@01 0))))))
(assert (or
  (<
    i@345@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
  (not
    (<
      i@345@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@345@01 0)
  (and
    (>= i@345@01 0)
    (=>
      (<
        i@345@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
      (and
        (<
          i@345@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
        (=>
          (>= j@346@01 0)
          (and
            (>= j@346@01 0)
            (or
              (<
                j@346@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
              (not
                (<
                  j@346@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
        (or (>= j@346@01 0) (not (>= j@346@01 0)))))
    (or
      (<
        i@345@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
      (not
        (<
          i@345@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))
(assert (or (>= i@345@01 0) (not (>= i@345@01 0))))
(push) ; 3
; [then-branch: 1078 | i@345@01 >= 0 && i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && j@346@01 >= 0 && j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && i@345@01 != j@346@01 | live]
; [else-branch: 1078 | !(i@345@01 >= 0 && i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && j@346@01 >= 0 && j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && i@345@01 != j@346@01) | live]
(push) ; 4
; [then-branch: 1078 | i@345@01 >= 0 && i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && j@346@01 >= 0 && j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && i@345@01 != j@346@01]
(assert (and
  (>= i@345@01 0)
  (and
    (<
      i@345@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
    (and
      (>= j@346@01 0)
      (and
        (<
          j@346@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
        (not (= i@345@01 j@346@01)))))))
; [eval] diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] diz.demo__tmp[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1078 | !(i@345@01 >= 0 && i@345@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && j@346@01 >= 0 && j@346@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@340@01))))))))))| && i@345@01 != j@346@01)]
(assert (not
  (and
    (>= i@345@01 0)
    (and
      (<
        i@345@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
      (and
        (>= j@346@01 0)
        (and
          (<
            j@346@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (not (= i@345@01 j@346@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@345@01 0)
    (and
      (<
        i@345@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
      (and
        (>= j@346@01 0)
        (and
          (<
            j@346@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (not (= i@345@01 j@346@01))))))
  (and
    (>= i@345@01 0)
    (<
      i@345@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
    (>= j@346@01 0)
    (<
      j@346@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
    (not (= i@345@01 j@346@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@345@01 0)
      (and
        (<
          i@345@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
        (and
          (>= j@346@01 0)
          (and
            (<
              j@346@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
            (not (= i@345@01 j@346@01)))))))
  (and
    (>= i@345@01 0)
    (and
      (<
        i@345@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
      (and
        (>= j@346@01 0)
        (and
          (<
            j@346@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (not (= i@345@01 j@346@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@345@01 Int) (j@346@01 Int)) (!
  (and
    (=>
      (>= i@345@01 0)
      (and
        (>= i@345@01 0)
        (=>
          (<
            i@345@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (and
            (<
              i@345@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
            (=>
              (>= j@346@01 0)
              (and
                (>= j@346@01 0)
                (or
                  (<
                    j@346@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
                  (not
                    (<
                      j@346@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
            (or (>= j@346@01 0) (not (>= j@346@01 0)))))
        (or
          (<
            i@345@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (not
            (<
              i@345@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
    (or (>= i@345@01 0) (not (>= i@345@01 0)))
    (=>
      (and
        (>= i@345@01 0)
        (and
          (<
            i@345@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (and
            (>= j@346@01 0)
            (and
              (<
                j@346@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
              (not (= i@345@01 j@346@01))))))
      (and
        (>= i@345@01 0)
        (<
          i@345@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
        (>= j@346@01 0)
        (<
          j@346@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
        (not (= i@345@01 j@346@01))))
    (or
      (not
        (and
          (>= i@345@01 0)
          (and
            (<
              i@345@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
            (and
              (>= j@346@01 0)
              (and
                (<
                  j@346@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
                (not (= i@345@01 j@346@01)))))))
      (and
        (>= i@345@01 0)
        (and
          (<
            i@345@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
          (and
            (>= j@346@01 0)
            (and
              (<
                j@346@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
              (not (= i@345@01 j@346@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    i@345@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    j@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@229@12@229@148-aux|)))
(assert (forall ((i@345@01 Int) (j@346@01 Int)) (!
  (=>
    (and
      (>= i@345@01 0)
      (and
        (<
          i@345@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
        (and
          (>= j@346@01 0)
          (and
            (<
              j@346@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
            (not (= i@345@01 j@346@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          i@345@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          j@346@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    i@345@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    j@346@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@229@12@229@148|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
(declare-const _x_tid@347@01 Int)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1079 | !(0 <= _x_tid@347@01) | live]
; [else-branch: 1079 | 0 <= _x_tid@347@01 | live]
(push) ; 4
; [then-branch: 1079 | !(0 <= _x_tid@347@01)]
(assert (not (<= 0 _x_tid@347@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1079 | 0 <= _x_tid@347@01]
(assert (<= 0 _x_tid@347@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@347@01) (not (<= 0 _x_tid@347@01))))
(assert (and (<= 0 _x_tid@347@01) (< _x_tid@347@01 gsize@335@01)))
; [eval] diz.demo__ar[_x_tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= _x_tid@347@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  _x_tid@347@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@348@01 ($Ref) Int)
(declare-fun img@349@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((_x_tid@347@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@347@01) (< _x_tid@347@01 gsize@335@01))
    (or (<= 0 _x_tid@347@01) (not (<= 0 _x_tid@347@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@347@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((_x_tid1@347@01 Int) (_x_tid2@347@01 Int)) (!
  (=>
    (and
      (and (<= 0 _x_tid1@347@01) (< _x_tid1@347@01 gsize@335@01))
      (and (<= 0 _x_tid2@347@01) (< _x_tid2@347@01 gsize@335@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          _x_tid1@347@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          _x_tid2@347@01)))
    (= _x_tid1@347@01 _x_tid2@347@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((_x_tid@347@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@347@01) (< _x_tid@347@01 gsize@335@01))
    (and
      (=
        (inv@348@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          _x_tid@347@01))
        _x_tid@347@01)
      (img@349@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        _x_tid@347@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@347@01))
  :qid |quant-u-9184|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        (inv@348@01 r))
      r))
  :pattern ((inv@348@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((_x_tid@347@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@347@01) (< _x_tid@347@01 gsize@335@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          _x_tid@347@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@347@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))
(declare-const _x_tid@350@01 Int)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1080 | !(0 <= _x_tid@350@01) | live]
; [else-branch: 1080 | 0 <= _x_tid@350@01 | live]
(push) ; 4
; [then-branch: 1080 | !(0 <= _x_tid@350@01)]
(assert (not (<= 0 _x_tid@350@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1080 | 0 <= _x_tid@350@01]
(assert (<= 0 _x_tid@350@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@350@01) (not (<= 0 _x_tid@350@01))))
(assert (and (<= 0 _x_tid@350@01) (< _x_tid@350@01 gsize@335@01)))
; [eval] diz.demo__tmp[_x_tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= _x_tid@350@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  _x_tid@350@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@351@01 ($Ref) Int)
(declare-fun img@352@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((_x_tid@350@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@350@01) (< _x_tid@350@01 gsize@335@01))
    (or (<= 0 _x_tid@350@01) (not (<= 0 _x_tid@350@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    _x_tid@350@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((_x_tid1@350@01 Int) (_x_tid2@350@01 Int)) (!
  (=>
    (and
      (and (<= 0 _x_tid1@350@01) (< _x_tid1@350@01 gsize@335@01))
      (and (<= 0 _x_tid2@350@01) (< _x_tid2@350@01 gsize@335@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          _x_tid1@350@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          _x_tid2@350@01)))
    (= _x_tid1@350@01 _x_tid2@350@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((_x_tid@350@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@350@01) (< _x_tid@350@01 gsize@335@01))
    (and
      (=
        (inv@351@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          _x_tid@350@01))
        _x_tid@350@01)
      (img@352@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        _x_tid@350@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    _x_tid@350@01))
  :qid |quant-u-9186|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (inv@351@01 r))
      r))
  :pattern ((inv@351@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((_x_tid@350@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@350@01) (< _x_tid@350@01 gsize@335@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          _x_tid@350@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    _x_tid@350@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        _x_tid@350@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        _x_tid@347@01))
    (=
      (and
        (img@352@01 r)
        (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))))
  
  :qid |quant-u-9187|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (> gsize@335@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (< 0 N@339@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (< N@339@01 gsize@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))))
  $Snap.unit))
; [eval] (forall _x_tid: Int :: { diz.demo__ar[_x_tid] } { demo__bin(N, _x_tid) } 0 <= _x_tid && _x_tid < gsize ==> diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1))
(declare-const _x_tid@353@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize ==> diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1)
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1081 | !(0 <= _x_tid@353@01) | live]
; [else-branch: 1081 | 0 <= _x_tid@353@01 | live]
(push) ; 4
; [then-branch: 1081 | !(0 <= _x_tid@353@01)]
(assert (not (<= 0 _x_tid@353@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1081 | 0 <= _x_tid@353@01]
(assert (<= 0 _x_tid@353@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@353@01) (not (<= 0 _x_tid@353@01))))
(push) ; 3
; [then-branch: 1082 | 0 <= _x_tid@353@01 && _x_tid@353@01 < gsize@335@01 | live]
; [else-branch: 1082 | !(0 <= _x_tid@353@01 && _x_tid@353@01 < gsize@335@01) | live]
(push) ; 4
; [then-branch: 1082 | 0 <= _x_tid@353@01 && _x_tid@353@01 < gsize@335@01]
(assert (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01)))
; [eval] diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1)
; [eval] diz.demo__ar[_x_tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= _x_tid@353@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  _x_tid@353@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@354@01 $FVF<Ref__Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
  :qid |qp.fvfValDef1|)))
(declare-const pm@355@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) r)
    (+
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@352@01 r)
          (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
(push) ; 5
(assert (not (<
  $Perm.No
  ($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@353@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (_x_tid < N ? demo__bin(N, _x_tid) : 1)
; [eval] _x_tid < N
(push) ; 5
; [then-branch: 1083 | _x_tid@353@01 < N@339@01 | live]
; [else-branch: 1083 | !(_x_tid@353@01 < N@339@01) | live]
(push) ; 6
; [then-branch: 1083 | _x_tid@353@01 < N@339@01]
(assert (< _x_tid@353@01 N@339@01))
; [eval] demo__bin(N, _x_tid)
(push) ; 7
; [eval] N >= 0
(push) ; 8
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 8
(assert (not (<= _x_tid@353@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= _x_tid@353@01 N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= _x_tid@353@01 N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 1083 | !(_x_tid@353@01 < N@339@01)]
(assert (not (< _x_tid@353@01 N@339@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (< _x_tid@353@01 N@339@01)
  (and
    (< _x_tid@353@01 N@339@01)
    (>= N@339@01 0)
    (<= _x_tid@353@01 N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01))))
; Joined path conditions
(assert (or (not (< _x_tid@353@01 N@339@01)) (< _x_tid@353@01 N@339@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1082 | !(0 <= _x_tid@353@01 && _x_tid@353@01 < gsize@335@01)]
(assert (not (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) r)
    (+
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@352@01 r)
          (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
(assert (=>
  (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))
  (and
    (<= 0 _x_tid@353@01)
    (< _x_tid@353@01 gsize@335@01)
    (=>
      (< _x_tid@353@01 N@339@01)
      (and
        (< _x_tid@353@01 N@339@01)
        (>= N@339@01 0)
        (<= _x_tid@353@01 N@339@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01)))
    (or (not (< _x_tid@353@01 N@339@01)) (< _x_tid@353@01 N@339@01)))))
; Joined path conditions
(assert (or
  (not (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01)))
  (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
  :qid |qp.fvfValDef1|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) r)
    (+
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@352@01 r)
          (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@355@01  $FPM) r))
  :qid |qp.resPrmSumDef2|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((_x_tid@353@01 Int)) (!
  (and
    (or (<= 0 _x_tid@353@01) (not (<= 0 _x_tid@353@01)))
    (=>
      (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))
      (and
        (<= 0 _x_tid@353@01)
        (< _x_tid@353@01 gsize@335@01)
        (=>
          (< _x_tid@353@01 N@339@01)
          (and
            (< _x_tid@353@01 N@339@01)
            (>= N@339@01 0)
            (<= _x_tid@353@01 N@339@01)
            (demo__bin%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01)))
        (or (not (< _x_tid@353@01 N@339@01)) (< _x_tid@353@01 N@339@01))))
    (or
      (not (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01)))
      (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@353@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@235@13@235@157-aux|)))
(assert (forall ((_x_tid@353@01 Int)) (!
  (and
    (or (<= 0 _x_tid@353@01) (not (<= 0 _x_tid@353@01)))
    (=>
      (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))
      (and
        (<= 0 _x_tid@353@01)
        (< _x_tid@353@01 gsize@335@01)
        (=>
          (< _x_tid@353@01 N@339@01)
          (and
            (< _x_tid@353@01 N@339@01)
            (>= N@339@01 0)
            (<= _x_tid@353@01 N@339@01)
            (demo__bin%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01)))
        (or (not (< _x_tid@353@01 N@339@01)) (< _x_tid@353@01 N@339@01))))
    (or
      (not (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01)))
      (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))))
  :pattern ((demo__bin%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@235@13@235@157-aux|)))
(assert (forall ((_x_tid@353@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@353@01) (< _x_tid@353@01 gsize@335@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        _x_tid@353@01))
      (ite
        (< _x_tid@353@01 N@339@01)
        (demo__bin ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01)
        1)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@353@01))
  :pattern ((demo__bin%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 _x_tid@353@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@235@13@235@157|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))))))
  $Snap.unit))
; [eval] (forall _x_tid: Int :: { diz.demo__tmp[_x_tid] } { diz.demo__ar[_x_tid] } 0 <= _x_tid && _x_tid < gsize ==> diz.demo__tmp[_x_tid].Ref__Integer_value == diz.demo__ar[_x_tid].Ref__Integer_value)
(declare-const _x_tid@356@01 Int)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize ==> diz.demo__tmp[_x_tid].Ref__Integer_value == diz.demo__ar[_x_tid].Ref__Integer_value
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1084 | !(0 <= _x_tid@356@01) | live]
; [else-branch: 1084 | 0 <= _x_tid@356@01 | live]
(push) ; 4
; [then-branch: 1084 | !(0 <= _x_tid@356@01)]
(assert (not (<= 0 _x_tid@356@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1084 | 0 <= _x_tid@356@01]
(assert (<= 0 _x_tid@356@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@356@01) (not (<= 0 _x_tid@356@01))))
(push) ; 3
; [then-branch: 1085 | 0 <= _x_tid@356@01 && _x_tid@356@01 < gsize@335@01 | live]
; [else-branch: 1085 | !(0 <= _x_tid@356@01 && _x_tid@356@01 < gsize@335@01) | live]
(push) ; 4
; [then-branch: 1085 | 0 <= _x_tid@356@01 && _x_tid@356@01 < gsize@335@01]
(assert (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01)))
; [eval] diz.demo__tmp[_x_tid].Ref__Integer_value == diz.demo__ar[_x_tid].Ref__Integer_value
; [eval] diz.demo__tmp[_x_tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= _x_tid@356@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  _x_tid@356@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@352@01 r)
        (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
    :qid |qp.fvfValDef1|))))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@349@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          _x_tid@356@01))
        (and
          (<=
            0
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              _x_tid@356@01)))
          (<
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              _x_tid@356@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@352@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          _x_tid@356@01))
        (and
          (<=
            0
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              _x_tid@356@01)))
          (<
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              _x_tid@356@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[_x_tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= _x_tid@356@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  _x_tid@356@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@352@01 r)
        (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
    :qid |qp.fvfValDef1|))))
(push) ; 5
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@349@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          _x_tid@356@01))
        (and
          (<=
            0
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              _x_tid@356@01)))
          (<
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              _x_tid@356@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@352@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          _x_tid@356@01))
        (and
          (<=
            0
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              _x_tid@356@01)))
          (<
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              _x_tid@356@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(push) ; 4
; [else-branch: 1085 | !(0 <= _x_tid@356@01 && _x_tid@356@01 < gsize@335@01)]
(assert (not (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
  :qid |qp.fvfValDef1|)))
; Joined path conditions
(assert (or
  (not (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01)))
  (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
  :qid |qp.fvfValDef1|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((_x_tid@356@01 Int)) (!
  (and
    (or (<= 0 _x_tid@356@01) (not (<= 0 _x_tid@356@01)))
    (or
      (not (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01)))
      (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    _x_tid@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@236@13@236@158-aux|)))
(assert (forall ((_x_tid@356@01 Int)) (!
  (and
    (or (<= 0 _x_tid@356@01) (not (<= 0 _x_tid@356@01)))
    (or
      (not (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01)))
      (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@236@13@236@158-aux|)))
(assert (forall ((_x_tid@356@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@356@01) (< _x_tid@356@01 gsize@335@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        _x_tid@356@01))
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        _x_tid@356@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
    _x_tid@356@01))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    _x_tid@356@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@236@13@236@158|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@357@01 $Snap)
(assert (= $t@357@01 ($Snap.combine ($Snap.first $t@357@01) ($Snap.second $t@357@01))))
(assert (= ($Snap.first $t@357@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@357@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@357@01))
    ($Snap.second ($Snap.second $t@357@01)))))
(assert (= ($Snap.first ($Snap.second $t@357@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@357@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@357@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@357@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@357@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@357@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@357@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
(declare-const $k@358@01 $Perm)
(assert ($Perm.isReadVar $k@358@01))
(assert (<= $Perm.No $k@358@01))
(assert (<= $k@358@01 $Perm.Write))
(assert (=> (< $Perm.No $k@358@01) (not (= diz@332@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))
  gsize@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
(declare-const $k@359@01 $Perm)
(assert ($Perm.isReadVar $k@359@01))
(assert (<= $Perm.No $k@359@01))
(assert (<= $k@359@01 $Perm.Write))
(assert (=> (< $Perm.No $k@359@01) (not (= diz@332@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))
  gsize@335@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@336@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@336@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@360@01 $FVF<Ref__Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    tid@336@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
      tid@336@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
      tid@336@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
; [eval] tid > 0
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> tid@336@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> tid@336@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1086 | tid@336@01 > 0 | live]
; [else-branch: 1086 | !(tid@336@01 > 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1086 | tid@336@01 > 0]
(assert (> tid@336@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 4
(assert (not (>= (- tid@336@01 1) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  (- tid@336@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(declare-const sm@361@01 $FVF<Ref__Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
    (- tid@336@01 1)))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
(push) ; 4
(set-option :timeout 10)
(assert (not (and
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1))
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
      (- tid@336@01 1))
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
      tid@336@01)))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1))
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1)))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1))
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1)))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
      (- tid@336@01 1))
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
      (- tid@336@01 1)))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1))
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1087 | !(0 < tid@336@01) | live]
; [else-branch: 1087 | 0 < tid@336@01 | live]
(push) ; 5
; [then-branch: 1087 | !(0 < tid@336@01)]
(assert (not (< 0 tid@336@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1087 | 0 < tid@336@01]
(assert (< 0 tid@336@01))
; [eval] tid <= N
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@336@01) (not (< 0 tid@336@01))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1088 | 0 < tid@336@01 && tid@336@01 <= N@339@01 | live]
; [else-branch: 1088 | !(0 < tid@336@01 && tid@336@01 <= N@339@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1088 | 0 < tid@336@01 && tid@336@01 <= N@339@01]
(assert (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@359@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 6
(assert (not (>= (- tid@336@01 1) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  (- tid@336@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(declare-const sm@362@01 $FVF<Ref__Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) r))
  :qid |qp.fvfValDef4|)))
(declare-const pm@363@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@363@01  $FPM) r)
    (+
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
            tid@336@01))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
            (- tid@336@01 1)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@363@01  $FPM) r))
  :qid |qp.resPrmSumDef5|)))
(push) ; 6
(assert (not (<
  $Perm.No
  ($FVF.perm_Ref__Integer_value (as pm@363@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
    (- tid@336@01 1))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid - 1)
; [eval] tid - 1
(push) ; 6
; [eval] N >= 0
(push) ; 7
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
(push) ; 7
(assert (not (<= 0 (- tid@336@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@336@01 1)))
; [eval] k <= N
(push) ; 7
(assert (not (<= (- tid@336@01 1) N@339@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@336@01 1) N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (- tid@336@01 1)))
(pop) ; 6
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= 0 (- tid@336@01 1))
  (<= (- tid@336@01 1) N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (- tid@336@01 1))))
(pop) ; 5
(push) ; 5
; [else-branch: 1088 | !(0 < tid@336@01 && tid@336@01 <= N@339@01)]
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
        tid@336@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) r))
  :qid |qp.fvfValDef3|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
        (- tid@336@01 1)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) r))
  :qid |qp.fvfValDef4|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@363@01  $FPM) r)
    (+
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
            tid@336@01))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
            (- tid@336@01 1)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@363@01  $FPM) r))
  :qid |qp.resPrmSumDef5|)))
(assert (=>
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))
  (and
    (< 0 tid@336@01)
    (<= tid@336@01 N@339@01)
    (>= N@339@01 0)
    (<= 0 (- tid@336@01 1))
    (<= (- tid@336@01 1) N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (- tid@336@01 1)))))
; Joined path conditions
(assert (or
  (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(assert (=>
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))
  (=
    ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
      (- tid@336@01 1)))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (-
      tid@336@01
      1)))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@336@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@336@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
          tid@336@01))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) r))
    :qid |qp.fvfValDef3|))
  (forall ((r $Ref)) (!
    (=>
      (=
        r
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
          (- tid@336@01 1)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@361@01  $FVF<Ref__Integer_value>) r))
    :qid |qp.fvfValDef4|))))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
          tid@336@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
          tid@336@01))
      $Perm.Write
      $Perm.No)
    (ite
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
          tid@336@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))
          (- tid@336@01 1)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< tid@336@01 N@339@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< tid@336@01 N@339@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1089 | tid@336@01 < N@339@01 | live]
; [else-branch: 1089 | !(tid@336@01 < N@339@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1089 | tid@336@01 < N@339@01]
(assert (< tid@336@01 N@339@01))
; [eval] demo__bin(N, tid)
(push) ; 6
; [eval] N >= 0
(push) ; 7
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 7
(assert (not (<= tid@336@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@336@01 N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= tid@336@01 N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1089 | !(tid@336@01 < N@339@01)]
(assert (not (< tid@336@01 N@339@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (< tid@336@01 N@339@01)
  (and
    (< tid@336@01 N@339@01)
    (>= N@339@01 0)
    (<= tid@336@01 N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))))
; Joined path conditions
(assert (or (not (< tid@336@01 N@339@01)) (< tid@336@01 N@339@01)))
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@362@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    tid@336@01))
  (ite
    (< tid@336@01 N@339@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)
    1)))
(pop) ; 3
(push) ; 3
; [else-branch: 1086 | !(tid@336@01 > 0)]
(assert (not (> tid@336@01 0)))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
  $Snap.unit))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 4
; [then-branch: 1090 | !(0 < tid@336@01) | live]
; [else-branch: 1090 | 0 < tid@336@01 | live]
(push) ; 5
; [then-branch: 1090 | !(0 < tid@336@01)]
(assert (not (< 0 tid@336@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1090 | 0 < tid@336@01]
(assert (< 0 tid@336@01))
; [eval] tid <= N
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@336@01) (not (< 0 tid@336@01))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1091 | 0 < tid@336@01 && tid@336@01 <= N@339@01 | dead]
; [else-branch: 1091 | !(0 < tid@336@01 && tid@336@01 <= N@339@01) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 1091 | !(0 < tid@336@01 && tid@336@01 <= N@339@01)]
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))))))))
  $Snap.unit))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@358@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@336@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@336@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (=
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    tid@336@01)
  (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    tid@336@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< tid@336@01 N@339@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< tid@336@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1092 | tid@336@01 < N@339@01 | live]
; [else-branch: 1092 | !(tid@336@01 < N@339@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1092 | tid@336@01 < N@339@01]
(assert (< tid@336@01 N@339@01))
; [eval] demo__bin(N, tid)
(push) ; 6
; [eval] N >= 0
(push) ; 7
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 7
(assert (not (<= tid@336@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@336@01 N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= tid@336@01 N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (< tid@336@01 N@339@01)
  (and
    (< tid@336@01 N@339@01)
    (>= N@339@01 0)
    (<= tid@336@01 N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))))
(assert (< tid@336@01 N@339@01))
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@360@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@357@01)))))))
    tid@336@01))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)))
(pop) ; 3
(pop) ; 2
(push) ; 2
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@364@01 $Perm)
(assert ($Perm.isReadVar $k@364@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@341@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@364@01 $k@341@01))
(assert (<= $Perm.No (- $k@341@01 $k@364@01)))
(assert (<= (- $k@341@01 $k@364@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@341@01 $k@364@01)) (not (= diz@332@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $k@365@01 $Perm)
(assert ($Perm.isReadVar $k@365@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@342@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@365@01 $k@342@01))
(assert (<= $Perm.No (- $k@342@01 $k@365@01)))
(assert (<= (- $k@342@01 $k@365@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@342@01 $k@365@01)) (not (= diz@332@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@336@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@336@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@366@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        tid@336@01))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@367@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        tid@336@01))
    ($Perm.min
      (ite
        (and
          (img@352@01 r)
          (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@366@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@366@01 r))
    $Perm.No)
  
  :qid |quant-u-9189|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@366@01 r) $Perm.No)
  
  :qid |quant-u-9190|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
        tid@336@01))
    (= (- $Perm.Write (pTaken@366@01 r)) $Perm.No))
  
  :qid |quant-u-9191|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] tid > 0
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (> tid@336@01 0))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (> tid@336@01 0)))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1093 | tid@336@01 > 0 | live]
; [else-branch: 1093 | !(tid@336@01 > 0) | live]
(set-option :timeout 0)
(push) ; 3
; [then-branch: 1093 | tid@336@01 > 0]
(assert (> tid@336@01 0))
; [eval] diz.demo__tmp[tid - 1]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 4
(assert (not (>= (- tid@336@01 1) 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  (- tid@336@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@368@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (- tid@336@01 1)))
    ($Perm.min
      (ite
        (and
          (img@352@01 r)
          (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@369@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (- tid@336@01 1)))
    ($Perm.min
      (ite
        (and
          (img@349@01 r)
          (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
        (- $Perm.Write (pTaken@366@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@368@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@352@01 r)
          (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@368@01 r))
    $Perm.No)
  
  :qid |quant-u-9193|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@368@01 r) $Perm.No)
  
  :qid |quant-u-9194|))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
        (- tid@336@01 1)))
    (= (- $Perm.Write (pTaken@368@01 r)) $Perm.No))
  
  :qid |quant-u-9195|))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1094 | !(0 < tid@336@01) | live]
; [else-branch: 1094 | 0 < tid@336@01 | live]
(push) ; 5
; [then-branch: 1094 | !(0 < tid@336@01)]
(assert (not (< 0 tid@336@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1094 | 0 < tid@336@01]
(assert (< 0 tid@336@01))
; [eval] tid <= N
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@336@01) (not (< 0 tid@336@01))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1095 | 0 < tid@336@01 && tid@336@01 <= N@339@01 | live]
; [else-branch: 1095 | !(0 < tid@336@01 && tid@336@01 <= N@339@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1095 | 0 < tid@336@01 && tid@336@01 <= N@339@01]
(assert (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))
; [eval] diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] diz.demo__tmp[tid - 1]
(push) ; 6
(set-option :timeout 10)
(assert (not (< $Perm.No $k@342@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] tid - 1
(set-option :timeout 0)
(push) ; 6
(assert (not (>= (- tid@336@01 1) 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(push) ; 6
(assert (not (<
  (- tid@336@01 1)
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@352@01 r)
        (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
    :qid |qp.fvfValDef1|))))
(push) ; 6
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@349@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (- tid@336@01 1)))
        (and
          (<=
            0
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (- tid@336@01 1))))
          (<
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (- tid@336@01 1)))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@352@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
          (- tid@336@01 1)))
        (and
          (<=
            0
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (- tid@336@01 1))))
          (<
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
              (- tid@336@01 1)))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
; [eval] demo__bin(N, tid - 1)
; [eval] tid - 1
(push) ; 6
; [eval] N >= 0
(push) ; 7
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
(push) ; 7
(assert (not (<= 0 (- tid@336@01 1))))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= 0 (- tid@336@01 1)))
; [eval] k <= N
(push) ; 7
(assert (not (<= (- tid@336@01 1) N@339@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= (- tid@336@01 1) N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (- tid@336@01 1)))
(pop) ; 6
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= 0 (- tid@336@01 1))
  (<= (- tid@336@01 1) N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (- tid@336@01 1))))
(pop) ; 5
(push) ; 5
; [else-branch: 1095 | !(0 < tid@336@01 && tid@336@01 <= N@339@01)]
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@349@01 r)
      (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
  :qid |qp.fvfValDef0|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@352@01 r)
      (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
  :qid |qp.fvfValDef1|)))
(assert (=>
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))
  (and
    (< 0 tid@336@01)
    (<= tid@336@01 N@339@01)
    (>= N@339@01 0)
    (<= 0 (- tid@336@01 1))
    (<= (- tid@336@01 1) N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (- tid@336@01 1)))))
; Joined path conditions
(assert (or
  (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(push) ; 4
(assert (not (=>
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))
  (=
    ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (- tid@336@01 1)))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (-
      tid@336@01
      1))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=>
  (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))
  (=
    ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))
      (- tid@336@01 1)))
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 (-
      tid@336@01
      1)))))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@336@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@336@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@352@01 r)
        (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
    :qid |qp.fvfValDef1|))))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@349@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          tid@336@01))
        (and
          (<=
            0
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01)))
          (<
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@352@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          tid@336@01))
        (and
          (<=
            0
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01)))
          (<
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< tid@336@01 N@339@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< tid@336@01 N@339@01)))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1096 | tid@336@01 < N@339@01 | live]
; [else-branch: 1096 | !(tid@336@01 < N@339@01) | live]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1096 | tid@336@01 < N@339@01]
(assert (< tid@336@01 N@339@01))
; [eval] demo__bin(N, tid)
(push) ; 6
; [eval] N >= 0
(push) ; 7
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 7
(assert (not (<= tid@336@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@336@01 N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= tid@336@01 N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1096 | !(tid@336@01 < N@339@01)]
(assert (not (< tid@336@01 N@339@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (< tid@336@01 N@339@01)
  (and
    (< tid@336@01 N@339@01)
    (>= N@339@01 0)
    (<= tid@336@01 N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))))
; Joined path conditions
(assert (or (not (< tid@336@01 N@339@01)) (< tid@336@01 N@339@01)))
(push) ; 4
(assert (not (=
  ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    tid@336@01))
  (ite
    (< tid@336@01 N@339@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)
    1))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    tid@336@01))
  (ite
    (< tid@336@01 N@339@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)
    1)))
(pop) ; 3
(push) ; 3
; [else-branch: 1093 | !(tid@336@01 > 0)]
(assert (not (> tid@336@01 0)))
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] 0 < tid && tid <= N ==> diz.demo__tmp[tid - 1].Ref__Integer_value == demo__bin(N, tid - 1)
; [eval] 0 < tid && tid <= N
; [eval] 0 < tid
(push) ; 4
; [then-branch: 1097 | !(0 < tid@336@01) | live]
; [else-branch: 1097 | 0 < tid@336@01 | live]
(push) ; 5
; [then-branch: 1097 | !(0 < tid@336@01)]
(assert (not (< 0 tid@336@01)))
(pop) ; 5
(push) ; 5
; [else-branch: 1097 | 0 < tid@336@01]
(assert (< 0 tid@336@01))
; [eval] tid <= N
(pop) ; 5
(pop) ; 4
; Joined path conditions
; Joined path conditions
(assert (or (< 0 tid@336@01) (not (< 0 tid@336@01))))
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1098 | 0 < tid@336@01 && tid@336@01 <= N@339@01 | dead]
; [else-branch: 1098 | !(0 < tid@336@01 && tid@336@01 <= N@339@01) | live]
(set-option :timeout 0)
(push) ; 5
; [else-branch: 1098 | !(0 < tid@336@01 && tid@336@01 <= N@339@01)]
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (not (and (< 0 tid@336@01) (<= tid@336@01 N@339@01))))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(push) ; 4
(set-option :timeout 10)
(assert (not (< $Perm.No $k@341@01)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(assert (not (>= tid@336@01 0)))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(push) ; 4
(assert (not (<
  tid@336@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@349@01 r)
        (and (<= 0 (inv@348@01 r)) (< (inv@348@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01))))))))))))))) r))
    :qid |qp.fvfValDef0|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@352@01 r)
        (and (<= 0 (inv@351@01 r)) (< (inv@351@01 r) gsize@335@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))))))))) r))
    :qid |qp.fvfValDef1|))))
(push) ; 4
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@349@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          tid@336@01))
        (and
          (<=
            0
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01)))
          (<
            (inv@348@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@352@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
          tid@336@01))
        (and
          (<=
            0
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01)))
          (<
            (inv@351@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
              tid@336@01))
            gsize@335@01)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 4
(push) ; 5
(set-option :timeout 10)
(assert (not (not (< tid@336@01 N@339@01))))
(check-sat)
; unknown
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< tid@336@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1099 | tid@336@01 < N@339@01 | live]
; [else-branch: 1099 | !(tid@336@01 < N@339@01) | dead]
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1099 | tid@336@01 < N@339@01]
(assert (< tid@336@01 N@339@01))
; [eval] demo__bin(N, tid)
(push) ; 6
; [eval] N >= 0
(push) ; 7
(assert (not (>= N@339@01 0)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (>= N@339@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 7
(assert (not (<= tid@336@01 N@339@01)))
(check-sat)
; unsat
(pop) ; 7
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@336@01 N@339@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))
(pop) ; 6
; Joined path conditions
(assert (and
  (>= N@339@01 0)
  (<= tid@336@01 N@339@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)))
(pop) ; 5
(pop) ; 4
; Joined path conditions
(assert (=>
  (< tid@336@01 N@339@01)
  (and
    (< tid@336@01 N@339@01)
    (>= N@339@01 0)
    (<= tid@336@01 N@339@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))))
(assert (< tid@336@01 N@339@01))
(push) ; 4
(assert (not (=
  ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    tid@336@01))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01))))
(check-sat)
; unsat
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@354@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@340@01)))))))))
    tid@336@01))
  (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@339@01 tid@336@01)))
(pop) ; 3
(pop) ; 2
(pop) ; 1
; ---------- demo__main_post_check_2 ----------
(declare-const diz@370@01 $Ref)
(declare-const current_thread_id@371@01 Int)
(declare-const tcount@372@01 Int)
(declare-const gsize@373@01 Int)
(declare-const tid@374@01 Int)
(declare-const gid@375@01 Int)
(declare-const lid@376@01 Int)
(declare-const N@377@01 Int)
(declare-const diz@378@01 $Ref)
(declare-const current_thread_id@379@01 Int)
(declare-const tcount@380@01 Int)
(declare-const gsize@381@01 Int)
(declare-const tid@382@01 Int)
(declare-const gid@383@01 Int)
(declare-const lid@384@01 Int)
(declare-const N@385@01 Int)
(push) ; 1
(declare-const $t@386@01 $Snap)
(assert (= $t@386@01 ($Snap.combine ($Snap.first $t@386@01) ($Snap.second $t@386@01))))
(assert (= ($Snap.first $t@386@01) $Snap.unit))
; [eval] diz != null
(assert (not (= diz@378@01 $Ref.null)))
(assert (=
  ($Snap.second $t@386@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@386@01))
    ($Snap.second ($Snap.second $t@386@01)))))
(assert (= ($Snap.first ($Snap.second $t@386@01)) $Snap.unit))
; [eval] current_thread_id >= 0
(assert (>= current_thread_id@379@01 0))
(assert (=
  ($Snap.second ($Snap.second $t@386@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@386@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@386@01))) $Snap.unit))
; [eval] 0 <= tid
(assert (<= 0 tid@382@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@386@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@386@01))))
  $Snap.unit))
; [eval] tid < tcount
(assert (< tid@382@01 tcount@380@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
  $Snap.unit))
; [eval] tid == lid
(assert (= tid@382@01 lid@384@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (= tcount@380@01 gsize@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
  $Snap.unit))
; [eval] gid == 0
(assert (= gid@383@01 0))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
(declare-const $k@387@01 $Perm)
(assert ($Perm.isReadVar $k@387@01))
(assert (<= $Perm.No $k@387@01))
(assert (<= $k@387@01 $Perm.Write))
(assert (=> (< $Perm.No $k@387@01) (not (= diz@378@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
  gsize@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(declare-const $k@388@01 $Perm)
(assert ($Perm.isReadVar $k@388@01))
(assert (<= $Perm.No $k@388@01))
(assert (<= $k@388@01 $Perm.Write))
(assert (=> (< $Perm.No $k@388@01) (not (= diz@378@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 2
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
  gsize@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__ar[i], diz.demo__ar[j] } i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j])
(declare-const i@389@01 Int)
(declare-const j@390@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j))) ==> diz.demo__ar[i] != diz.demo__ar[j]
; [eval] i >= 0 && (i < |diz.demo__ar| && (j >= 0 && (j < |diz.demo__ar| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1100 | !(i@389@01 >= 0) | live]
; [else-branch: 1100 | i@389@01 >= 0 | live]
(push) ; 4
; [then-branch: 1100 | !(i@389@01 >= 0)]
(assert (not (>= i@389@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1100 | i@389@01 >= 0]
(assert (>= i@389@01 0))
; [eval] i < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1101 | !(i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))|) | live]
; [else-branch: 1101 | i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| | live]
(push) ; 6
; [then-branch: 1101 | !(i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))|)]
(assert (not
  (<
    i@389@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1101 | i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))|]
(assert (<
  i@389@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1102 | !(j@390@01 >= 0) | live]
; [else-branch: 1102 | j@390@01 >= 0 | live]
(push) ; 8
; [then-branch: 1102 | !(j@390@01 >= 0)]
(assert (not (>= j@390@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1102 | j@390@01 >= 0]
(assert (>= j@390@01 0))
; [eval] j < |diz.demo__ar|
; [eval] |diz.demo__ar|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1103 | !(j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))|) | live]
; [else-branch: 1103 | j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| | live]
(push) ; 10
; [then-branch: 1103 | !(j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))|)]
(assert (not
  (<
    j@390@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1103 | j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))|]
(assert (<
  j@390@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@390@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  (not
    (<
      j@390@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@390@01 0)
  (and
    (>= j@390@01 0)
    (or
      (<
        j@390@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
      (not
        (<
          j@390@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
(assert (or (>= j@390@01 0) (not (>= j@390@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@389@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  (and
    (<
      i@389@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    (=>
      (>= j@390@01 0)
      (and
        (>= j@390@01 0)
        (or
          (<
            j@390@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (not
            (<
              j@390@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
    (or (>= j@390@01 0) (not (>= j@390@01 0))))))
(assert (or
  (<
    i@389@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
  (not
    (<
      i@389@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@389@01 0)
  (and
    (>= i@389@01 0)
    (=>
      (<
        i@389@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
      (and
        (<
          i@389@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (=>
          (>= j@390@01 0)
          (and
            (>= j@390@01 0)
            (or
              (<
                j@390@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
              (not
                (<
                  j@390@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
        (or (>= j@390@01 0) (not (>= j@390@01 0)))))
    (or
      (<
        i@389@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
      (not
        (<
          i@389@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
(assert (or (>= i@389@01 0) (not (>= i@389@01 0))))
(push) ; 3
; [then-branch: 1104 | i@389@01 >= 0 && i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && j@390@01 >= 0 && j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && i@389@01 != j@390@01 | live]
; [else-branch: 1104 | !(i@389@01 >= 0 && i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && j@390@01 >= 0 && j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && i@389@01 != j@390@01) | live]
(push) ; 4
; [then-branch: 1104 | i@389@01 >= 0 && i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && j@390@01 >= 0 && j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && i@389@01 != j@390@01]
(assert (and
  (>= i@389@01 0)
  (and
    (<
      i@389@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    (and
      (>= j@390@01 0)
      (and
        (<
          j@390@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (not (= i@389@01 j@390@01)))))))
; [eval] diz.demo__ar[i] != diz.demo__ar[j]
; [eval] diz.demo__ar[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1104 | !(i@389@01 >= 0 && i@389@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && j@390@01 >= 0 && j@390@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))| && i@389@01 != j@390@01)]
(assert (not
  (and
    (>= i@389@01 0)
    (and
      (<
        i@389@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
      (and
        (>= j@390@01 0)
        (and
          (<
            j@390@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (not (= i@389@01 j@390@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@389@01 0)
    (and
      (<
        i@389@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
      (and
        (>= j@390@01 0)
        (and
          (<
            j@390@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (not (= i@389@01 j@390@01))))))
  (and
    (>= i@389@01 0)
    (<
      i@389@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    (>= j@390@01 0)
    (<
      j@390@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    (not (= i@389@01 j@390@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@389@01 0)
      (and
        (<
          i@389@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (and
          (>= j@390@01 0)
          (and
            (<
              j@390@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
            (not (= i@389@01 j@390@01)))))))
  (and
    (>= i@389@01 0)
    (and
      (<
        i@389@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
      (and
        (>= j@390@01 0)
        (and
          (<
            j@390@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (not (= i@389@01 j@390@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@389@01 Int) (j@390@01 Int)) (!
  (and
    (=>
      (>= i@389@01 0)
      (and
        (>= i@389@01 0)
        (=>
          (<
            i@389@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (and
            (<
              i@389@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
            (=>
              (>= j@390@01 0)
              (and
                (>= j@390@01 0)
                (or
                  (<
                    j@390@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
                  (not
                    (<
                      j@390@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
            (or (>= j@390@01 0) (not (>= j@390@01 0)))))
        (or
          (<
            i@389@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (not
            (<
              i@389@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
    (or (>= i@389@01 0) (not (>= i@389@01 0)))
    (=>
      (and
        (>= i@389@01 0)
        (and
          (<
            i@389@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (and
            (>= j@390@01 0)
            (and
              (<
                j@390@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
              (not (= i@389@01 j@390@01))))))
      (and
        (>= i@389@01 0)
        (<
          i@389@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (>= j@390@01 0)
        (<
          j@390@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (not (= i@389@01 j@390@01))))
    (or
      (not
        (and
          (>= i@389@01 0)
          (and
            (<
              i@389@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
            (and
              (>= j@390@01 0)
              (and
                (<
                  j@390@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
                (not (= i@389@01 j@390@01)))))))
      (and
        (>= i@389@01 0)
        (and
          (<
            i@389@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          (and
            (>= j@390@01 0)
            (and
              (<
                j@390@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
              (not (= i@389@01 j@390@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    i@389@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    j@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@270@12@270@144-aux|)))
(assert (forall ((i@389@01 Int) (j@390@01 Int)) (!
  (=>
    (and
      (>= i@389@01 0)
      (and
        (<
          i@389@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (and
          (>= j@390@01 0)
          (and
            (<
              j@390@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
            (not (= i@389@01 j@390@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          i@389@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          j@390@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    i@389@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    j@390@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@270@12@270@144|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  $Snap.unit))
; [eval] (forall i: Int, j: Int :: { diz.demo__tmp[i], diz.demo__tmp[j] } i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j])
(declare-const i@391@01 Int)
(declare-const j@392@01 Int)
(push) ; 2
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j))) ==> diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] i >= 0 && (i < |diz.demo__tmp| && (j >= 0 && (j < |diz.demo__tmp| && i != j)))
; [eval] i >= 0
(push) ; 3
; [then-branch: 1105 | !(i@391@01 >= 0) | live]
; [else-branch: 1105 | i@391@01 >= 0 | live]
(push) ; 4
; [then-branch: 1105 | !(i@391@01 >= 0)]
(assert (not (>= i@391@01 0)))
(pop) ; 4
(push) ; 4
; [else-branch: 1105 | i@391@01 >= 0]
(assert (>= i@391@01 0))
; [eval] i < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
; [then-branch: 1106 | !(i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))|) | live]
; [else-branch: 1106 | i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| | live]
(push) ; 6
; [then-branch: 1106 | !(i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))|)]
(assert (not
  (<
    i@391@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
(pop) ; 6
(push) ; 6
; [else-branch: 1106 | i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))|]
(assert (<
  i@391@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
; [eval] j >= 0
(push) ; 7
; [then-branch: 1107 | !(j@392@01 >= 0) | live]
; [else-branch: 1107 | j@392@01 >= 0 | live]
(push) ; 8
; [then-branch: 1107 | !(j@392@01 >= 0)]
(assert (not (>= j@392@01 0)))
(pop) ; 8
(push) ; 8
; [else-branch: 1107 | j@392@01 >= 0]
(assert (>= j@392@01 0))
; [eval] j < |diz.demo__tmp|
; [eval] |diz.demo__tmp|
(push) ; 9
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 9
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 9
; [then-branch: 1108 | !(j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))|) | live]
; [else-branch: 1108 | j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| | live]
(push) ; 10
; [then-branch: 1108 | !(j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))|)]
(assert (not
  (<
    j@392@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
(pop) ; 10
(push) ; 10
; [else-branch: 1108 | j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))|]
(assert (<
  j@392@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
; [eval] i != j
(pop) ; 10
(pop) ; 9
; Joined path conditions
; Joined path conditions
(assert (or
  (<
    j@392@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  (not
    (<
      j@392@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
(pop) ; 8
(pop) ; 7
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= j@392@01 0)
  (and
    (>= j@392@01 0)
    (or
      (<
        j@392@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
      (not
        (<
          j@392@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
(assert (or (>= j@392@01 0) (not (>= j@392@01 0))))
(pop) ; 6
(pop) ; 5
; Joined path conditions
; Joined path conditions
(assert (=>
  (<
    i@391@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  (and
    (<
      i@391@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
    (=>
      (>= j@392@01 0)
      (and
        (>= j@392@01 0)
        (or
          (<
            j@392@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (not
            (<
              j@392@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
    (or (>= j@392@01 0) (not (>= j@392@01 0))))))
(assert (or
  (<
    i@391@01
    (Seq_length
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  (not
    (<
      i@391@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (=>
  (>= i@391@01 0)
  (and
    (>= i@391@01 0)
    (=>
      (<
        i@391@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
      (and
        (<
          i@391@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
        (=>
          (>= j@392@01 0)
          (and
            (>= j@392@01 0)
            (or
              (<
                j@392@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
              (not
                (<
                  j@392@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
        (or (>= j@392@01 0) (not (>= j@392@01 0)))))
    (or
      (<
        i@391@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
      (not
        (<
          i@391@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
(assert (or (>= i@391@01 0) (not (>= i@391@01 0))))
(push) ; 3
; [then-branch: 1109 | i@391@01 >= 0 && i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && j@392@01 >= 0 && j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && i@391@01 != j@392@01 | live]
; [else-branch: 1109 | !(i@391@01 >= 0 && i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && j@392@01 >= 0 && j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && i@391@01 != j@392@01) | live]
(push) ; 4
; [then-branch: 1109 | i@391@01 >= 0 && i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && j@392@01 >= 0 && j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && i@391@01 != j@392@01]
(assert (and
  (>= i@391@01 0)
  (and
    (<
      i@391@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
    (and
      (>= j@392@01 0)
      (and
        (<
          j@392@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
        (not (= i@391@01 j@392@01)))))))
; [eval] diz.demo__tmp[i] != diz.demo__tmp[j]
; [eval] diz.demo__tmp[i]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp[j]
(set-option :timeout 0)
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(pop) ; 4
(set-option :timeout 0)
(push) ; 4
; [else-branch: 1109 | !(i@391@01 >= 0 && i@391@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && j@392@01 >= 0 && j@392@01 < |First:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:(Second:($t@386@01))))))))))| && i@391@01 != j@392@01)]
(assert (not
  (and
    (>= i@391@01 0)
    (and
      (<
        i@391@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
      (and
        (>= j@392@01 0)
        (and
          (<
            j@392@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (not (= i@391@01 j@392@01))))))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (and
    (>= i@391@01 0)
    (and
      (<
        i@391@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
      (and
        (>= j@392@01 0)
        (and
          (<
            j@392@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (not (= i@391@01 j@392@01))))))
  (and
    (>= i@391@01 0)
    (<
      i@391@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
    (>= j@392@01 0)
    (<
      j@392@01
      (Seq_length
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
    (not (= i@391@01 j@392@01)))))
; Joined path conditions
(assert (or
  (not
    (and
      (>= i@391@01 0)
      (and
        (<
          i@391@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
        (and
          (>= j@392@01 0)
          (and
            (<
              j@392@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
            (not (= i@391@01 j@392@01)))))))
  (and
    (>= i@391@01 0)
    (and
      (<
        i@391@01
        (Seq_length
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
      (and
        (>= j@392@01 0)
        (and
          (<
            j@392@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (not (= i@391@01 j@392@01))))))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((i@391@01 Int) (j@392@01 Int)) (!
  (and
    (=>
      (>= i@391@01 0)
      (and
        (>= i@391@01 0)
        (=>
          (<
            i@391@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (and
            (<
              i@391@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
            (=>
              (>= j@392@01 0)
              (and
                (>= j@392@01 0)
                (or
                  (<
                    j@392@01
                    (Seq_length
                      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
                  (not
                    (<
                      j@392@01
                      (Seq_length
                        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
            (or (>= j@392@01 0) (not (>= j@392@01 0)))))
        (or
          (<
            i@391@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (not
            (<
              i@391@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
    (or (>= i@391@01 0) (not (>= i@391@01 0)))
    (=>
      (and
        (>= i@391@01 0)
        (and
          (<
            i@391@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (and
            (>= j@392@01 0)
            (and
              (<
                j@392@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
              (not (= i@391@01 j@392@01))))))
      (and
        (>= i@391@01 0)
        (<
          i@391@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
        (>= j@392@01 0)
        (<
          j@392@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
        (not (= i@391@01 j@392@01))))
    (or
      (not
        (and
          (>= i@391@01 0)
          (and
            (<
              i@391@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
            (and
              (>= j@392@01 0)
              (and
                (<
                  j@392@01
                  (Seq_length
                    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
                (not (= i@391@01 j@392@01)))))))
      (and
        (>= i@391@01 0)
        (and
          (<
            i@391@01
            (Seq_length
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
          (and
            (>= j@392@01 0)
            (and
              (<
                j@392@01
                (Seq_length
                  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
              (not (= i@391@01 j@392@01))))))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    i@391@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    j@392@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@271@12@271@148-aux|)))
(assert (forall ((i@391@01 Int) (j@392@01 Int)) (!
  (=>
    (and
      (>= i@391@01 0)
      (and
        (<
          i@391@01
          (Seq_length
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
        (and
          (>= j@392@01 0)
          (and
            (<
              j@392@01
              (Seq_length
                ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
            (not (= i@391@01 j@392@01))))))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          i@391@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          j@392@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    i@391@01) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    j@392@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@271@12@271@148|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
(declare-const _x_tid@393@01 Int)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1110 | !(0 <= _x_tid@393@01) | live]
; [else-branch: 1110 | 0 <= _x_tid@393@01 | live]
(push) ; 4
; [then-branch: 1110 | !(0 <= _x_tid@393@01)]
(assert (not (<= 0 _x_tid@393@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1110 | 0 <= _x_tid@393@01]
(assert (<= 0 _x_tid@393@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@393@01) (not (<= 0 _x_tid@393@01))))
(assert (and (<= 0 _x_tid@393@01) (< _x_tid@393@01 gsize@381@01)))
; [eval] diz.demo__ar[_x_tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= _x_tid@393@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  _x_tid@393@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@394@01 ($Ref) Int)
(declare-fun img@395@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((_x_tid@393@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@393@01) (< _x_tid@393@01 gsize@381@01))
    (or (<= 0 _x_tid@393@01) (not (<= 0 _x_tid@393@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    _x_tid@393@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((_x_tid1@393@01 Int) (_x_tid2@393@01 Int)) (!
  (=>
    (and
      (and (<= 0 _x_tid1@393@01) (< _x_tid1@393@01 gsize@381@01))
      (and (<= 0 _x_tid2@393@01) (< _x_tid2@393@01 gsize@381@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          _x_tid1@393@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          _x_tid2@393@01)))
    (= _x_tid1@393@01 _x_tid2@393@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((_x_tid@393@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@393@01) (< _x_tid@393@01 gsize@381@01))
    (and
      (=
        (inv@394@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          _x_tid@393@01))
        _x_tid@393@01)
      (img@395@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        _x_tid@393@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    _x_tid@393@01))
  :qid |quant-u-9197|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@395@01 r)
      (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        (inv@394@01 r))
      r))
  :pattern ((inv@394@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((_x_tid@393@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@393@01) (< _x_tid@393@01 gsize@381@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          _x_tid@393@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    _x_tid@393@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
(declare-const _x_tid@396@01 Int)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1111 | !(0 <= _x_tid@396@01) | live]
; [else-branch: 1111 | 0 <= _x_tid@396@01 | live]
(push) ; 4
; [then-branch: 1111 | !(0 <= _x_tid@396@01)]
(assert (not (<= 0 _x_tid@396@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1111 | 0 <= _x_tid@396@01]
(assert (<= 0 _x_tid@396@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@396@01) (not (<= 0 _x_tid@396@01))))
(assert (and (<= 0 _x_tid@396@01) (< _x_tid@396@01 gsize@381@01)))
; [eval] diz.demo__tmp[_x_tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= _x_tid@396@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  _x_tid@396@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(pop) ; 2
(declare-fun inv@397@01 ($Ref) Int)
(declare-fun img@398@01 ($Ref) Bool)
; Nested auxiliary terms: globals
; Nested auxiliary terms: non-globals
(assert (forall ((_x_tid@396@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@396@01) (< _x_tid@396@01 gsize@381@01))
    (or (<= 0 _x_tid@396@01) (not (<= 0 _x_tid@396@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    _x_tid@396@01))
  :qid |Ref__Integer_value-aux|)))
; Check receiver injectivity
(push) ; 2
(assert (not (forall ((_x_tid1@396@01 Int) (_x_tid2@396@01 Int)) (!
  (=>
    (and
      (and (<= 0 _x_tid1@396@01) (< _x_tid1@396@01 gsize@381@01))
      (and (<= 0 _x_tid2@396@01) (< _x_tid2@396@01 gsize@381@01))
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          _x_tid1@396@01)
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          _x_tid2@396@01)))
    (= _x_tid1@396@01 _x_tid2@396@01))
  
  :qid |Ref__Integer_value-rcvrInj|))))
(check-sat)
; unsat
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
; Definitional axioms for inverse functions
(assert (forall ((_x_tid@396@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@396@01) (< _x_tid@396@01 gsize@381@01))
    (and
      (=
        (inv@397@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          _x_tid@396@01))
        _x_tid@396@01)
      (img@398@01 (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        _x_tid@396@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    _x_tid@396@01))
  :qid |quant-u-9199|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@398@01 r)
      (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        (inv@397@01 r))
      r))
  :pattern ((inv@397@01 r))
  :qid |Ref__Integer_value-fctOfInv|)))
; Permissions are non-negative
; Field permissions are at most one
; Permission implies non-null receiver
(assert (forall ((_x_tid@396@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@396@01) (< _x_tid@396@01 gsize@381@01))
    (not
      (=
        (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
          _x_tid@396@01)
        $Ref.null)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
    _x_tid@396@01))
  :qid |Ref__Integer_value-permImpliesNonNull|)))
(push) ; 2
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        _x_tid@396@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        _x_tid@393@01))
    (=
      (and
        (img@398@01 r)
        (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
      (and
        (img@395@01 r)
        (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))))
  
  :qid |quant-u-9200|))))
(check-sat)
; unknown
(pop) ; 2
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (> gsize@381@01 1))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (< 0 N@385@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (< N@385@01 gsize@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))))))
  $Snap.unit))
; [eval] (forall _x_tid: Int :: { diz.demo__ar[_x_tid] } { demo__bin(N, _x_tid) } 0 <= _x_tid && _x_tid < gsize ==> diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1))
(declare-const _x_tid@399@01 Int)
(set-option :timeout 0)
(push) ; 2
; [eval] 0 <= _x_tid && _x_tid < gsize ==> diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1)
; [eval] 0 <= _x_tid && _x_tid < gsize
; [eval] 0 <= _x_tid
(push) ; 3
; [then-branch: 1112 | !(0 <= _x_tid@399@01) | live]
; [else-branch: 1112 | 0 <= _x_tid@399@01 | live]
(push) ; 4
; [then-branch: 1112 | !(0 <= _x_tid@399@01)]
(assert (not (<= 0 _x_tid@399@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1112 | 0 <= _x_tid@399@01]
(assert (<= 0 _x_tid@399@01))
; [eval] _x_tid < gsize
(pop) ; 4
(pop) ; 3
; Joined path conditions
; Joined path conditions
(assert (or (<= 0 _x_tid@399@01) (not (<= 0 _x_tid@399@01))))
(push) ; 3
; [then-branch: 1113 | 0 <= _x_tid@399@01 && _x_tid@399@01 < gsize@381@01 | live]
; [else-branch: 1113 | !(0 <= _x_tid@399@01 && _x_tid@399@01 < gsize@381@01) | live]
(push) ; 4
; [then-branch: 1113 | 0 <= _x_tid@399@01 && _x_tid@399@01 < gsize@381@01]
(assert (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01)))
; [eval] diz.demo__ar[_x_tid].Ref__Integer_value == (_x_tid < N ? demo__bin(N, _x_tid) : 1)
; [eval] diz.demo__ar[_x_tid]
(push) ; 5
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 5
(assert (not (>= _x_tid@399@01 0)))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(push) ; 5
(assert (not (<
  _x_tid@399@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
(declare-const sm@400@01 $FVF<Ref__Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@395@01 r)
      (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@398@01 r)
      (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r))
  :qid |qp.fvfValDef7|)))
(declare-const pm@401@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) r)
    (+
      (ite
        (and
          (img@395@01 r)
          (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@398@01 r)
          (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) r))
  :qid |qp.resPrmSumDef8|)))
(push) ; 5
(assert (not (<
  $Perm.No
  ($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    _x_tid@399@01)))))
(check-sat)
; unsat
(pop) ; 5
; 0.00s
; (get-info :all-statistics)
; [eval] (_x_tid < N ? demo__bin(N, _x_tid) : 1)
; [eval] _x_tid < N
(push) ; 5
; [then-branch: 1114 | _x_tid@399@01 < N@385@01 | live]
; [else-branch: 1114 | !(_x_tid@399@01 < N@385@01) | live]
(push) ; 6
; [then-branch: 1114 | _x_tid@399@01 < N@385@01]
(assert (< _x_tid@399@01 N@385@01))
; [eval] demo__bin(N, _x_tid)
(push) ; 7
; [eval] N >= 0
(push) ; 8
(assert (not (>= N@385@01 0)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (>= N@385@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 8
(assert (not (<= _x_tid@399@01 N@385@01)))
(check-sat)
; unsat
(pop) ; 8
; 0.00s
; (get-info :all-statistics)
(assert (<= _x_tid@399@01 N@385@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01))
(pop) ; 7
; Joined path conditions
(assert (and
  (>= N@385@01 0)
  (<= _x_tid@399@01 N@385@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01)))
(pop) ; 6
(push) ; 6
; [else-branch: 1114 | !(_x_tid@399@01 < N@385@01)]
(assert (not (< _x_tid@399@01 N@385@01)))
(pop) ; 6
(pop) ; 5
; Joined path conditions
(assert (=>
  (< _x_tid@399@01 N@385@01)
  (and
    (< _x_tid@399@01 N@385@01)
    (>= N@385@01 0)
    (<= _x_tid@399@01 N@385@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01))))
; Joined path conditions
(assert (or (not (< _x_tid@399@01 N@385@01)) (< _x_tid@399@01 N@385@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1113 | !(0 <= _x_tid@399@01 && _x_tid@399@01 < gsize@381@01)]
(assert (not (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@395@01 r)
      (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@398@01 r)
      (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) r)
    (+
      (ite
        (and
          (img@395@01 r)
          (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@398@01 r)
          (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) r))
  :qid |qp.resPrmSumDef8|)))
(assert (=>
  (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))
  (and
    (<= 0 _x_tid@399@01)
    (< _x_tid@399@01 gsize@381@01)
    (=>
      (< _x_tid@399@01 N@385@01)
      (and
        (< _x_tid@399@01 N@385@01)
        (>= N@385@01 0)
        (<= _x_tid@399@01 N@385@01)
        (demo__bin%precondition ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01)))
    (or (not (< _x_tid@399@01 N@385@01)) (< _x_tid@399@01 N@385@01)))))
; Joined path conditions
(assert (or
  (not (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01)))
  (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))))
(pop) ; 2
; Nested auxiliary terms: globals (aux)
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@395@01 r)
      (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r))
  :qid |qp.fvfValDef6|)))
(assert (forall ((r $Ref)) (!
  (=>
    (and
      (img@398@01 r)
      (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r))
  :qid |qp.fvfValDef7|)))
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) r)
    (+
      (ite
        (and
          (img@395@01 r)
          (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      (ite
        (and
          (img@398@01 r)
          (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@401@01  $FPM) r))
  :qid |qp.resPrmSumDef8|)))
; Nested auxiliary terms: non-globals (aux)
(assert (forall ((_x_tid@399@01 Int)) (!
  (and
    (or (<= 0 _x_tid@399@01) (not (<= 0 _x_tid@399@01)))
    (=>
      (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))
      (and
        (<= 0 _x_tid@399@01)
        (< _x_tid@399@01 gsize@381@01)
        (=>
          (< _x_tid@399@01 N@385@01)
          (and
            (< _x_tid@399@01 N@385@01)
            (>= N@385@01 0)
            (<= _x_tid@399@01 N@385@01)
            (demo__bin%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01)))
        (or (not (< _x_tid@399@01 N@385@01)) (< _x_tid@399@01 N@385@01))))
    (or
      (not (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01)))
      (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    _x_tid@399@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@277@13@277@157-aux|)))
(assert (forall ((_x_tid@399@01 Int)) (!
  (and
    (or (<= 0 _x_tid@399@01) (not (<= 0 _x_tid@399@01)))
    (=>
      (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))
      (and
        (<= 0 _x_tid@399@01)
        (< _x_tid@399@01 gsize@381@01)
        (=>
          (< _x_tid@399@01 N@385@01)
          (and
            (< _x_tid@399@01 N@385@01)
            (>= N@385@01 0)
            (<= _x_tid@399@01 N@385@01)
            (demo__bin%precondition ($Snap.combine
              $Snap.unit
              ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01)))
        (or (not (< _x_tid@399@01 N@385@01)) (< _x_tid@399@01 N@385@01))))
    (or
      (not (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01)))
      (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))))
  :pattern ((demo__bin%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@277@13@277@157-aux|)))
(assert (forall ((_x_tid@399@01 Int)) (!
  (=>
    (and (<= 0 _x_tid@399@01) (< _x_tid@399@01 gsize@381@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        _x_tid@399@01))
      (ite
        (< _x_tid@399@01 N@385@01)
        (demo__bin ($Snap.combine
          $Snap.unit
          ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01)
        1)))
  :pattern ((Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    _x_tid@399@01))
  :pattern ((demo__bin%limited ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 _x_tid@399@01))
  :qid |prog./home/runner/work/smt-logs/smt-logs/viper/viperserver/silicon/silver/src/test/resources/quantifiedpermissions/third_party/test_binomial_auto.vpr@277@13@277@157|)))
; State saturation: after contract
(set-option :timeout 50)
(check-sat)
; unknown
(set-option :timeout 0)
(push) ; 2
(declare-const $t@402@01 $Snap)
(assert (= $t@402@01 ($Snap.combine ($Snap.first $t@402@01) ($Snap.second $t@402@01))))
(assert (= ($Snap.first $t@402@01) $Snap.unit))
; [eval] 0 <= tid
(assert (=
  ($Snap.second $t@402@01)
  ($Snap.combine
    ($Snap.first ($Snap.second $t@402@01))
    ($Snap.second ($Snap.second $t@402@01)))))
(assert (= ($Snap.first ($Snap.second $t@402@01)) $Snap.unit))
; [eval] tid < tcount
(assert (=
  ($Snap.second ($Snap.second $t@402@01))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second $t@402@01)))
    ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))
(assert (= ($Snap.first ($Snap.second ($Snap.second $t@402@01))) $Snap.unit))
; [eval] tid == lid
(assert (=
  ($Snap.second ($Snap.second ($Snap.second $t@402@01)))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@402@01))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second $t@402@01))))
  $Snap.unit))
; [eval] tcount == gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))
  $Snap.unit))
; [eval] gid == 0
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
(declare-const $k@403@01 $Perm)
(assert ($Perm.isReadVar $k@403@01))
(assert (<= $Perm.No $k@403@01))
(assert (<= $k@403@01 $Perm.Write))
(assert (=> (< $Perm.No $k@403@01) (not (= diz@378@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
  $Snap.unit))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))
  gsize@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))
(declare-const $k@404@01 $Perm)
(assert ($Perm.isReadVar $k@404@01))
(assert (<= $Perm.No $k@404@01))
(assert (<= $k@404@01 $Perm.Write))
(assert (=> (< $Perm.No $k@404@01) (not (= diz@378@01 $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
  $Snap.unit))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@404@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))
  gsize@381@01))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))
  $Snap.unit))
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))
  $Snap.unit))
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@404@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (Seq_equal
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
  ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@382@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@382@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@405@01 $FVF<Ref__Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@405@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
    tid@382@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
      tid@382@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
      tid@382@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))))
; [eval] diz.demo__tmp[tid]
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@404@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@382@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@382@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@406@01 $FVF<Ref__Integer_value>)
; Definitional axioms for singleton-SM's value
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@406@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
    tid@382@01))
  ($SortWrappers.$SnapToInt ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))))
(push) ; 3
(set-option :timeout 10)
(assert (not (and
  (and
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01))
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01)))
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
      tid@382@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
      tid@382@01)))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (<=
  $Perm.No
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01))
    $Perm.Write
    $Perm.No)))
(assert (<=
  (ite
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01)
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01))
    $Perm.Write
    $Perm.No)
  $Perm.Write))
(assert (=>
  (=
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
      tid@382@01)
    (Seq_index
      ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
      tid@382@01))
  (not
    (=
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01)
      $Ref.null))))
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))
  $Snap.unit))
; [eval] gsize > 1
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))
  $Snap.unit))
; [eval] 0 < N
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))
  ($Snap.combine
    ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))))
    ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))))))))))
(assert (=
  ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))))
  $Snap.unit))
; [eval] N < gsize
(assert (=
  ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01))))))))))))))))
  $Snap.unit))
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@403@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@382@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@382@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const sm@407@01 $FVF<Ref__Integer_value>)
; Definitional axioms for snapshot map values
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
        tid@382@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@407@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value (as sm@405@01  $FVF<Ref__Integer_value>) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@407@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@405@01  $FVF<Ref__Integer_value>) r))
  :qid |qp.fvfValDef9|)))
(assert (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
        tid@382@01))
    (=
      ($FVF.lookup_Ref__Integer_value (as sm@407@01  $FVF<Ref__Integer_value>) r)
      ($FVF.lookup_Ref__Integer_value (as sm@406@01  $FVF<Ref__Integer_value>) r)))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@407@01  $FVF<Ref__Integer_value>) r))
  :pattern (($FVF.lookup_Ref__Integer_value (as sm@406@01  $FVF<Ref__Integer_value>) r))
  :qid |qp.fvfValDef10|)))
(declare-const pm@408@01 $FPM)
(assert (forall ((r $Ref)) (!
  (=
    ($FVF.perm_Ref__Integer_value (as pm@408@01  $FPM) r)
    (+
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
            tid@382@01))
        $Perm.Write
        $Perm.No)
      (ite
        (=
          r
          (Seq_index
            ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))))
            tid@382@01))
        $Perm.Write
        $Perm.No)))
  :pattern (($FVF.perm_Ref__Integer_value (as pm@408@01  $FPM) r))
  :qid |qp.resPrmSumDef11|)))
(push) ; 3
(assert (not (<
  $Perm.No
  ($FVF.perm_Ref__Integer_value (as pm@408@01  $FPM) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
    tid@382@01)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< tid@382@01 N@385@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< tid@382@01 N@385@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1115 | tid@382@01 < N@385@01 | live]
; [else-branch: 1115 | !(tid@382@01 < N@385@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1115 | tid@382@01 < N@385@01]
(assert (< tid@382@01 N@385@01))
; [eval] demo__bin(N, tid)
(push) ; 5
; [eval] N >= 0
(push) ; 6
(assert (not (>= N@385@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>= N@385@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 6
(assert (not (<= tid@382@01 N@385@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@382@01 N@385@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (>= N@385@01 0)
  (<= tid@382@01 N@385@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1115 | !(tid@382@01 < N@385@01)]
(assert (not (< tid@382@01 N@385@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (< tid@382@01 N@385@01)
  (and
    (< tid@382@01 N@385@01)
    (>= N@385@01 0)
    (<= tid@382@01 N@385@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01))))
; Joined path conditions
(assert (or (not (< tid@382@01 N@385@01)) (< tid@382@01 N@385@01)))
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@407@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@402@01)))))))
    tid@382@01))
  (ite
    (< tid@382@01 N@385@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01)
    1)))
(pop) ; 2
(push) ; 2
; [eval] 0 <= tid
; [eval] tid < tcount
; [eval] tid == lid
; [eval] tcount == gsize
; [eval] gid == 0
(declare-const $k@409@01 $Perm)
(assert ($Perm.isReadVar $k@409@01))
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@387@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@409@01 $k@387@01))
(assert (<= $Perm.No (- $k@387@01 $k@409@01)))
(assert (<= (- $k@387@01 $k@409@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@387@01 $k@409@01)) (not (= diz@378@01 $Ref.null))))
; [eval] |diz.demo__ar| == gsize
; [eval] |diz.demo__ar|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(declare-const $k@410@01 $Perm)
(assert ($Perm.isReadVar $k@410@01))
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (not (= $k@388@01 $Perm.No))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (< $k@410@01 $k@388@01))
(assert (<= $Perm.No (- $k@388@01 $k@410@01)))
(assert (<= (- $k@388@01 $k@410@01) $Perm.Write))
(assert (=> (< $Perm.No (- $k@388@01 $k@410@01)) (not (= diz@378@01 $Ref.null))))
; [eval] |diz.demo__tmp| == gsize
; [eval] |diz.demo__tmp|
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar == old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__ar)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__tmp == old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] old(diz.demo__tmp)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@382@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@382@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@411@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        tid@382@01))
    ($Perm.min
      (ite
        (and
          (img@395@01 r)
          (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@412@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        tid@382@01))
    ($Perm.min
      (ite
        (and
          (img@398@01 r)
          (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      (- $Perm.Write (pTaken@411@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@395@01 r)
          (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@411@01 r))
    $Perm.No)
  
  :qid |quant-u-9202|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@411@01 r) $Perm.No)
  
  :qid |quant-u-9203|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
        tid@382@01))
    (= (- $Perm.Write (pTaken@411@01 r)) $Perm.No))
  
  :qid |quant-u-9204|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] diz.demo__tmp[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@388@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@382@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@382@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Precomputing data for removing quantified permissions
(define-fun pTaken@413@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        tid@382@01))
    ($Perm.min
      (ite
        (and
          (img@398@01 r)
          (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      $Perm.Write)
    $Perm.No))
(define-fun pTaken@414@01 ((r $Ref)) $Perm
  (ite
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        tid@382@01))
    ($Perm.min
      (ite
        (and
          (img@395@01 r)
          (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
        (- $Perm.Write (pTaken@411@01 r))
        $Perm.No)
      (- $Perm.Write (pTaken@413@01 r)))
    $Perm.No))
; Done precomputing, updating quantified chunks
; State saturation: before repetition
(set-option :timeout 10)
(check-sat)
; unknown
; Chunk depleted?
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=
    (-
      (ite
        (and
          (img@398@01 r)
          (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
        $Perm.Write
        $Perm.No)
      (pTaken@413@01 r))
    $Perm.No)
  
  :qid |quant-u-9206|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (forall ((r $Ref)) (!
  (= (pTaken@413@01 r) $Perm.No)
  
  :qid |quant-u-9207|))))
(check-sat)
; unknown
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Intermediate check if already taken enough permissions
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 500)
(assert (not (forall ((r $Ref)) (!
  (=>
    (=
      r
      (Seq_index
        ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))
        tid@382@01))
    (= (- $Perm.Write (pTaken@413@01 r)) $Perm.No))
  
  :qid |quant-u-9208|))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; Final check if taken enough permissions
; Done removing quantified permissions
; [eval] gsize > 1
; [eval] 0 < N
; [eval] N < gsize
; [eval] diz.demo__ar[tid].Ref__Integer_value == (tid < N ? demo__bin(N, tid) : 1)
; [eval] diz.demo__ar[tid]
(set-option :timeout 0)
(push) ; 3
(set-option :timeout 10)
(assert (not (< $Perm.No $k@387@01)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 3
(assert (not (>= tid@382@01 0)))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(push) ; 3
(assert (not (<
  tid@382@01
  (Seq_length
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (and
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@395@01 r)
        (and (<= 0 (inv@394@01 r)) (< (inv@394@01 r) gsize@381@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01))))))))))))))) r))
    :qid |qp.fvfValDef6|))
  (forall ((r $Ref)) (!
    (=>
      (and
        (img@398@01 r)
        (and (<= 0 (inv@397@01 r)) (< (inv@397@01 r) gsize@381@01)))
      (=
        ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r)
        ($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r)))
    :pattern (($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) r))
    :pattern (($FVF.lookup_Ref__Integer_value ($SortWrappers.$SnapTo$FVF<Ref__Integer_value> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))))))))) r))
    :qid |qp.fvfValDef7|))))
(push) ; 3
(assert (not (<
  $Perm.No
  (+
    (ite
      (and
        (img@395@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          tid@382@01))
        (and
          (<=
            0
            (inv@394@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
              tid@382@01)))
          (<
            (inv@394@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
              tid@382@01))
            gsize@381@01)))
      $Perm.Write
      $Perm.No)
    (ite
      (and
        (img@398@01 (Seq_index
          ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
          tid@382@01))
        (and
          (<=
            0
            (inv@397@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
              tid@382@01)))
          (<
            (inv@397@01 (Seq_index
              ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
              tid@382@01))
            gsize@381@01)))
      $Perm.Write
      $Perm.No)))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
; [eval] (tid < N ? demo__bin(N, tid) : 1)
; [eval] tid < N
(push) ; 3
(push) ; 4
(set-option :timeout 10)
(assert (not (not (< tid@382@01 N@385@01))))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
(set-option :timeout 0)
(push) ; 4
(set-option :timeout 10)
(assert (not (< tid@382@01 N@385@01)))
(check-sat)
; unknown
(pop) ; 4
; 0.00s
; (get-info :all-statistics)
; [then-branch: 1116 | tid@382@01 < N@385@01 | live]
; [else-branch: 1116 | !(tid@382@01 < N@385@01) | live]
(set-option :timeout 0)
(push) ; 4
; [then-branch: 1116 | tid@382@01 < N@385@01]
(assert (< tid@382@01 N@385@01))
; [eval] demo__bin(N, tid)
(push) ; 5
; [eval] N >= 0
(push) ; 6
(assert (not (>= N@385@01 0)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (>= N@385@01 0))
; [eval] 0 <= k
; [eval] k <= N
(push) ; 6
(assert (not (<= tid@382@01 N@385@01)))
(check-sat)
; unsat
(pop) ; 6
; 0.00s
; (get-info :all-statistics)
(assert (<= tid@382@01 N@385@01))
(assert (demo__bin%precondition ($Snap.combine
  $Snap.unit
  ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01))
(pop) ; 5
; Joined path conditions
(assert (and
  (>= N@385@01 0)
  (<= tid@382@01 N@385@01)
  (demo__bin%precondition ($Snap.combine
    $Snap.unit
    ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01)))
(pop) ; 4
(push) ; 4
; [else-branch: 1116 | !(tid@382@01 < N@385@01)]
(assert (not (< tid@382@01 N@385@01)))
(pop) ; 4
(pop) ; 3
; Joined path conditions
(assert (=>
  (< tid@382@01 N@385@01)
  (and
    (< tid@382@01 N@385@01)
    (>= N@385@01 0)
    (<= tid@382@01 N@385@01)
    (demo__bin%precondition ($Snap.combine
      $Snap.unit
      ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01))))
; Joined path conditions
(assert (or (not (< tid@382@01 N@385@01)) (< tid@382@01 N@385@01)))
(push) ; 3
(assert (not (=
  ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    tid@382@01))
  (ite
    (< tid@382@01 N@385@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01)
    1))))
(check-sat)
; unsat
(pop) ; 3
; 0.00s
; (get-info :all-statistics)
(assert (=
  ($FVF.lookup_Ref__Integer_value (as sm@400@01  $FVF<Ref__Integer_value>) (Seq_index
    ($SortWrappers.$SnapToSeq<$Ref> ($Snap.first ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second ($Snap.second $t@386@01)))))))))
    tid@382@01))
  (ite
    (< tid@382@01 N@385@01)
    (demo__bin ($Snap.combine $Snap.unit ($Snap.combine $Snap.unit $Snap.unit)) N@385@01 tid@382@01)
    1)))
(pop) ; 2
(pop) ; 1
