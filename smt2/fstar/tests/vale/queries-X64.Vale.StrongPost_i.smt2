
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.nl false)

(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for interface FStar.FunctionalExtensionality


; <Start encoding let arrow>


(declare-fun FStar.FunctionalExtensionality.arrow (Term Term) Term)

(declare-fun Tm_arrow_28022b1931e0c9114f09925e8271570a () Term)
(declare-fun FStar.FunctionalExtensionality.arrow@tok () Term)

(declare-fun Tm_arrow_a7d5cc170be69663c495e8582d2bc62a (Term Term) Term)

; </end encoding let arrow>


; <Start encoding let efun>


(declare-fun FStar.FunctionalExtensionality.efun (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun@tok () Term)



; </end encoding let efun>


; <Start encoding let feq>




(declare-fun FStar.FunctionalExtensionality.feq (Term Term Term Term) Term)



(declare-fun Tm_arrow_a26edf208afb0682b12235c66ccbd71c () Term)
(declare-fun FStar.FunctionalExtensionality.feq@tok () Term)




; </end encoding let feq>


; <Start encoding val FStar.FunctionalExtensionality.on_domain>



(declare-fun FStar.FunctionalExtensionality.on_domain (Term Term Term) Term)



(declare-fun Tm_arrow_4644eedc14c2df3e417da1b7c07108e6 () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain@tok () Term)


; </end encoding val FStar.FunctionalExtensionality.on_domain>


; <Start encoding val FStar.FunctionalExtensionality.feq_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.feq_on_domain>


; <Start encoding val FStar.FunctionalExtensionality.idempotence_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.idempotence_on_domain>


; <Start encoding let is_restricted>



(declare-fun FStar.FunctionalExtensionality.is_restricted (Term Term Term) Term)


(declare-fun Tm_arrow_b9e5e589ff6008bf9dc6c8ac06a76d9b () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted@tok () Term)



; </end encoding let is_restricted>


; <Start encoding let restricted_t>


(declare-fun FStar.FunctionalExtensionality.restricted_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_t@tok () Term)


(declare-fun Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e (Term Term) Term)

; </end encoding let restricted_t>


; <Start encoding let op_Hat_Subtraction_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater@tok () Term)

(declare-fun Tm_abs_134069e179ddf4705519081c391c4e10 (Term Term) Term)

; </end encoding let op_Hat_Subtraction_Greater>


; <Start encoding let on_dom>



(declare-fun FStar.FunctionalExtensionality.on_dom (Term Term Term) Term)


(declare-fun Tm_arrow_2c8a39c5d1179d9b2dbff37a928311ac () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom@tok () Term)



; </end encoding let on_dom>


; <Start encoding let on>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.FunctionalExtensionality.on (Term Term Term) Term)



(declare-fun Tm_arrow_eab9bf17eb33be7efca62de21f27985c () Term)
(declare-fun FStar.FunctionalExtensionality.on@tok () Term)






; </end encoding let on>


; <Start encoding val FStar.FunctionalExtensionality.extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality@tok () Term)




; </end encoding val FStar.FunctionalExtensionality.extensionality>


; <Start encoding let arrow_g>


(declare-fun FStar.FunctionalExtensionality.arrow_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.arrow_g@tok () Term)



; </end encoding let arrow_g>


; <Start encoding let efun_g>


(declare-fun FStar.FunctionalExtensionality.efun_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun_g@tok () Term)



; </end encoding let efun_g>


; <Start encoding let feq_g>




(declare-fun FStar.FunctionalExtensionality.feq_g (Term Term Term Term) Term)



(declare-fun Tm_arrow_361ba84e60d273d78a5743d30c9dc908 () Term)
(declare-fun FStar.FunctionalExtensionality.feq_g@tok () Term)




; </end encoding let feq_g>


; <Start encoding val FStar.FunctionalExtensionality.on_domain_g>



(declare-fun FStar.FunctionalExtensionality.on_domain_g (Term Term Term) Term)



(declare-fun Tm_arrow_bf6371335aea4d90f7963f85ebad8f0d () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain_g@tok () Term)


; </end encoding val FStar.FunctionalExtensionality.on_domain_g>


; <Start encoding val FStar.FunctionalExtensionality.feq_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.feq_on_domain_g>


; <Start encoding val FStar.FunctionalExtensionality.idempotence_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.idempotence_on_domain_g>


; <Start encoding let is_restricted_g>



(declare-fun FStar.FunctionalExtensionality.is_restricted_g (Term Term Term) Term)


(declare-fun Tm_arrow_eadb252d9886eeba4938e11c03ce9b79 () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted_g@tok () Term)



; </end encoding let is_restricted_g>


; <Start encoding let restricted_g_t>


(declare-fun FStar.FunctionalExtensionality.restricted_g_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_g_t@tok () Term)


(declare-fun Tm_refine_9185da06fca917c5514ae63042657873 (Term Term) Term)

; </end encoding let restricted_g_t>


; <Start encoding let op_Hat_Subtraction_Greater_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater@tok () Term)



; </end encoding let op_Hat_Subtraction_Greater_Greater>


; <Start encoding let on_dom_g>



(declare-fun FStar.FunctionalExtensionality.on_dom_g (Term Term Term) Term)


(declare-fun Tm_arrow_2e3db44d1263cf9452aaa6907eac66cc () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom_g@tok () Term)



; </end encoding let on_dom_g>


; <Start encoding let on_g>


(declare-fun FStar.FunctionalExtensionality.on_g (Term Term Term) Term)



(declare-fun Tm_arrow_93a363f6461271c3e18b18593d7d03bf () Term)
(declare-fun FStar.FunctionalExtensionality.on_g@tok () Term)






; </end encoding let on_g>


; <Start encoding val FStar.FunctionalExtensionality.extensionality_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g@tok () Term)




; </end encoding val FStar.FunctionalExtensionality.extensionality_g>


; End Externals for interface FStar.FunctionalExtensionality


; Externals for module X64.Machine_s


; <Start encoding let nat32_max>

(declare-fun X64.Machine_s.nat32_max (Dummy_sort) Term)

; </end encoding let nat32_max>


; <Start encoding let nat64_max>

(declare-fun X64.Machine_s.nat64_max (Dummy_sort) Term)

; </end encoding let nat64_max>


; <Start encoding let nat128_max>

(declare-fun X64.Machine_s.nat128_max (Dummy_sort) Term)

; </end encoding let nat128_max>


; <Start encoding let uu___0>

(declare-fun X64.Machine_s.uu___0 (Dummy_sort) Term)

; </end encoding let uu___0>


; <Start encoding let uu___1>

(declare-fun X64.Machine_s.uu___1 (Dummy_sort) Term)

; </end encoding let uu___1>


; <Start encoding let uu___2>

(declare-fun X64.Machine_s.uu___2 (Dummy_sort) Term)

; </end encoding let uu___2>


; <Start encoding let nat64>

(declare-fun X64.Machine_s.nat64 () Term)
(declare-fun Tm_refine_a608a89bbc0a207d5920d37d906f7f40 () Term)

; </end encoding let nat64>


; <Start encoding val X64.Machine_s.int_to_nat64>

(declare-fun X64.Machine_s.int_to_nat64 (Term) Term)
(declare-fun Tm_refine_33c23e946048d3d79f362ad9f81ccafe (Term) Term)
;;;;;;;;;;;;;;;;i: Prims.int -> n: nat64{0 <= i && i < 0x10000000000000000 ==> i == n}
(declare-fun Tm_arrow_1aa3e2460ba68d51e3c61e72d27102af () Term)
(declare-fun X64.Machine_s.int_to_nat64@tok () Term)


; </end encoding val X64.Machine_s.int_to_nat64>


; <Start encoding let nat128>

(declare-fun X64.Machine_s.nat128 () Term)
(declare-fun Tm_refine_758ff42440a58a30c095e911b9c96f61 () Term)

; </end encoding let nat128>


; <Start encoding type X64.Machine_s.reg>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.reg () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rax () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rax
(declare-fun X64.Machine_s.Rax@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rbx () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rbx
(declare-fun X64.Machine_s.Rbx@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rcx () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rcx
(declare-fun X64.Machine_s.Rcx@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rdx () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rdx
(declare-fun X64.Machine_s.Rdx@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rsi () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rsi
(declare-fun X64.Machine_s.Rsi@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rdi () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rdi
(declare-fun X64.Machine_s.Rdi@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rbp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rbp
(declare-fun X64.Machine_s.Rbp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rsp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rsp
(declare-fun X64.Machine_s.Rsp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R8 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R8
(declare-fun X64.Machine_s.R8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R9 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R9
(declare-fun X64.Machine_s.R9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R10 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R10
(declare-fun X64.Machine_s.R10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R11 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R11
(declare-fun X64.Machine_s.R11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R12 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R12
(declare-fun X64.Machine_s.R12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R13 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R13
(declare-fun X64.Machine_s.R13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R14 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R14
(declare-fun X64.Machine_s.R14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R15 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R15
(declare-fun X64.Machine_s.R15@tok () Term)

; <start constructor X64.Machine_s.reg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.reg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
X64.Machine_s.reg)))

; </end constructor X64.Machine_s.reg>


; <start constructor X64.Machine_s.Rax>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rax ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
X64.Machine_s.Rax)))

; </end constructor X64.Machine_s.Rax>


; <start constructor X64.Machine_s.Rbx>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rbx ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
115)
(= __@x0
X64.Machine_s.Rbx)))

; </end constructor X64.Machine_s.Rbx>


; <start constructor X64.Machine_s.Rcx>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rcx ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
X64.Machine_s.Rcx)))

; </end constructor X64.Machine_s.Rcx>


; <start constructor X64.Machine_s.Rdx>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rdx ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
X64.Machine_s.Rdx)))

; </end constructor X64.Machine_s.Rdx>


; <start constructor X64.Machine_s.Rsi>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rsi ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
121)
(= __@x0
X64.Machine_s.Rsi)))

; </end constructor X64.Machine_s.Rsi>


; <start constructor X64.Machine_s.Rdi>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rdi ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
X64.Machine_s.Rdi)))

; </end constructor X64.Machine_s.Rdi>


; <start constructor X64.Machine_s.Rbp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rbp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
X64.Machine_s.Rbp)))

; </end constructor X64.Machine_s.Rbp>


; <start constructor X64.Machine_s.Rsp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rsp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
X64.Machine_s.Rsp)))

; </end constructor X64.Machine_s.Rsp>


; <start constructor X64.Machine_s.R8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
129)
(= __@x0
X64.Machine_s.R8)))

; </end constructor X64.Machine_s.R8>


; <start constructor X64.Machine_s.R9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
131)
(= __@x0
X64.Machine_s.R9)))

; </end constructor X64.Machine_s.R9>


; <start constructor X64.Machine_s.R10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
X64.Machine_s.R10)))

; </end constructor X64.Machine_s.R10>


; <start constructor X64.Machine_s.R11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
135)
(= __@x0
X64.Machine_s.R11)))

; </end constructor X64.Machine_s.R11>


; <start constructor X64.Machine_s.R12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
X64.Machine_s.R12)))

; </end constructor X64.Machine_s.R12>


; <start constructor X64.Machine_s.R13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
X64.Machine_s.R13)))

; </end constructor X64.Machine_s.R13>


; <start constructor X64.Machine_s.R14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
X64.Machine_s.R14)))

; </end constructor X64.Machine_s.R14>


; <start constructor X64.Machine_s.R15>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R15 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
143)
(= __@x0
X64.Machine_s.R15)))

; </end constructor X64.Machine_s.R15>


; </end encoding type X64.Machine_s.reg>


; <Start encoding assume X64.Machine_s.reg__uu___haseq>


; </end encoding assume X64.Machine_s.reg__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_Rax>

(declare-fun X64.Machine_s.uu___is_Rax (Term) Term)
;;;;;;;;;;;;;;;;projectee: reg -> Prims.bool
(declare-fun Tm_arrow_c7f0e9f7c9673b5fa7751bb905ce0362 () Term)
(declare-fun X64.Machine_s.uu___is_Rax@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rax>


; <Skipped let uu___is_Rax/>


; <Start encoding val X64.Machine_s.uu___is_Rbx>

(declare-fun X64.Machine_s.uu___is_Rbx (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rbx@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rbx>


; <Skipped let uu___is_Rbx/>


; <Start encoding val X64.Machine_s.uu___is_Rcx>

(declare-fun X64.Machine_s.uu___is_Rcx (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rcx@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rcx>


; <Skipped let uu___is_Rcx/>


; <Start encoding val X64.Machine_s.uu___is_Rdx>

(declare-fun X64.Machine_s.uu___is_Rdx (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rdx@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rdx>


; <Skipped let uu___is_Rdx/>


; <Start encoding val X64.Machine_s.uu___is_Rsi>

(declare-fun X64.Machine_s.uu___is_Rsi (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rsi@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rsi>


; <Skipped let uu___is_Rsi/>


; <Start encoding val X64.Machine_s.uu___is_Rdi>

(declare-fun X64.Machine_s.uu___is_Rdi (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rdi@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rdi>


; <Skipped let uu___is_Rdi/>


; <Start encoding val X64.Machine_s.uu___is_Rbp>

(declare-fun X64.Machine_s.uu___is_Rbp (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rbp@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rbp>


; <Skipped let uu___is_Rbp/>


; <Start encoding val X64.Machine_s.uu___is_Rsp>

(declare-fun X64.Machine_s.uu___is_Rsp (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rsp@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rsp>


; <Skipped let uu___is_Rsp/>


; <Start encoding val X64.Machine_s.uu___is_R8>

(declare-fun X64.Machine_s.uu___is_R8 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R8@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R8>


; <Skipped let uu___is_R8/>


; <Start encoding val X64.Machine_s.uu___is_R9>

(declare-fun X64.Machine_s.uu___is_R9 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R9@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R9>


; <Skipped let uu___is_R9/>


; <Start encoding val X64.Machine_s.uu___is_R10>

(declare-fun X64.Machine_s.uu___is_R10 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R10@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R10>


; <Skipped let uu___is_R10/>


; <Start encoding val X64.Machine_s.uu___is_R11>

(declare-fun X64.Machine_s.uu___is_R11 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R11@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R11>


; <Skipped let uu___is_R11/>


; <Start encoding val X64.Machine_s.uu___is_R12>

(declare-fun X64.Machine_s.uu___is_R12 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R12@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R12>


; <Skipped let uu___is_R12/>


; <Start encoding val X64.Machine_s.uu___is_R13>

(declare-fun X64.Machine_s.uu___is_R13 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R13@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R13>


; <Skipped let uu___is_R13/>


; <Start encoding val X64.Machine_s.uu___is_R14>

(declare-fun X64.Machine_s.uu___is_R14 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R14@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R14>


; <Skipped let uu___is_R14/>


; <Start encoding val X64.Machine_s.uu___is_R15>

(declare-fun X64.Machine_s.uu___is_R15 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R15@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R15>


; <Skipped let uu___is_R15/>


; <Start encoding type X64.Machine_s.maddr>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.maddr () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.MConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MConst_n (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.MConst
(declare-fun X64.Machine_s.MConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.MReg (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MReg_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MReg_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.MReg
(declare-fun X64.Machine_s.MReg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.MIndex (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_base (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_scale (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_index (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.MIndex
(declare-fun X64.Machine_s.MIndex@tok () Term)
;;;;;;;;;;;;;;;;n: Prims.int -> maddr
(declare-fun Tm_arrow_9414af839812526c8a04e362fb1cb22b () Term)
;;;;;;;;;;;;;;;;r: reg -> offset: Prims.int -> maddr
(declare-fun Tm_arrow_f3c2bcfda38ef61cb04cf914bbf7384e () Term)
;;;;;;;;;;;;;;;;base: reg -> scale: Prims.int -> index: reg -> offset: Prims.int -> maddr
(declare-fun Tm_arrow_bee6d14f905101e2f5bf160729816207 () Term)

; <start constructor X64.Machine_s.maddr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.maddr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
X64.Machine_s.maddr)))

; </end constructor X64.Machine_s.maddr>


; <start constructor X64.Machine_s.MConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.MConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
182)
(= __@x0
(X64.Machine_s.MConst (X64.Machine_s.MConst_n __@x0)))))

; </end constructor X64.Machine_s.MConst>


; <start constructor X64.Machine_s.MReg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.MReg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
187)
(= __@x0
(X64.Machine_s.MReg (X64.Machine_s.MReg_r __@x0)
(X64.Machine_s.MReg_offset __@x0)))))

; </end constructor X64.Machine_s.MReg>


; <start constructor X64.Machine_s.MIndex>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.MIndex ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
192)
(= __@x0
(X64.Machine_s.MIndex (X64.Machine_s.MIndex_base __@x0)
(X64.Machine_s.MIndex_scale __@x0)
(X64.Machine_s.MIndex_index __@x0)
(X64.Machine_s.MIndex_offset __@x0)))))

; </end constructor X64.Machine_s.MIndex>


; </end encoding type X64.Machine_s.maddr>


; <Start encoding assume X64.Machine_s.maddr__uu___haseq>


; </end encoding assume X64.Machine_s.maddr__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_MConst>

(declare-fun X64.Machine_s.uu___is_MConst (Term) Term)
;;;;;;;;;;;;;;;;projectee: maddr -> Prims.bool
(declare-fun Tm_arrow_ff927c11f46c62b4136fa0dbb46448d2 () Term)
(declare-fun X64.Machine_s.uu___is_MConst@tok () Term)

; </end encoding val X64.Machine_s.uu___is_MConst>


; <Skipped let uu___is_MConst/>


; <Start encoding val X64.Machine_s.__proj__MConst__item__n>

(declare-fun Tm_refine_ad649c559db000bf1dd08bb4e261413e () Term)
(declare-fun X64.Machine_s.__proj__MConst__item__n (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MConst? _} -> Prims.int
(declare-fun Tm_arrow_de03ee0e28d8cb42ea4684ab629083bb () Term)
(declare-fun X64.Machine_s.__proj__MConst__item__n@tok () Term)

; </end encoding val X64.Machine_s.__proj__MConst__item__n>


; <Skipped let __proj__MConst__item__n/>


; <Start encoding val X64.Machine_s.uu___is_MReg>

(declare-fun X64.Machine_s.uu___is_MReg (Term) Term)

(declare-fun X64.Machine_s.uu___is_MReg@tok () Term)

; </end encoding val X64.Machine_s.uu___is_MReg>


; <Skipped let uu___is_MReg/>


; <Start encoding val X64.Machine_s.__proj__MReg__item__r>

(declare-fun Tm_refine_49b6b7afc081bac09ce40febdab68891 () Term)
(declare-fun X64.Machine_s.__proj__MReg__item__r (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MReg? _} -> reg
(declare-fun Tm_arrow_e06612d97fbadc6befb17ec3b5955951 () Term)
(declare-fun X64.Machine_s.__proj__MReg__item__r@tok () Term)

; </end encoding val X64.Machine_s.__proj__MReg__item__r>


; <Skipped let __proj__MReg__item__r/>


; <Start encoding val X64.Machine_s.__proj__MReg__item__offset>


(declare-fun X64.Machine_s.__proj__MReg__item__offset (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MReg? _} -> Prims.int
(declare-fun Tm_arrow_c1ca35fec6314553caa7a9f1ab113b95 () Term)
(declare-fun X64.Machine_s.__proj__MReg__item__offset@tok () Term)

; </end encoding val X64.Machine_s.__proj__MReg__item__offset>


; <Skipped let __proj__MReg__item__offset/>


; <Start encoding val X64.Machine_s.uu___is_MIndex>

(declare-fun X64.Machine_s.uu___is_MIndex (Term) Term)

(declare-fun X64.Machine_s.uu___is_MIndex@tok () Term)

; </end encoding val X64.Machine_s.uu___is_MIndex>


; <Skipped let uu___is_MIndex/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__base>

(declare-fun Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125 () Term)
(declare-fun X64.Machine_s.__proj__MIndex__item__base (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MIndex? _} -> reg
(declare-fun Tm_arrow_5ce8d0ce0f3554237501631bb2423766 () Term)
(declare-fun X64.Machine_s.__proj__MIndex__item__base@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__base>


; <Skipped let __proj__MIndex__item__base/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__scale>


(declare-fun X64.Machine_s.__proj__MIndex__item__scale (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MIndex? _} -> Prims.int
(declare-fun Tm_arrow_1c6dd63b73c30ae1c6642380dd180a24 () Term)
(declare-fun X64.Machine_s.__proj__MIndex__item__scale@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__scale>


; <Skipped let __proj__MIndex__item__scale/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__index>


(declare-fun X64.Machine_s.__proj__MIndex__item__index (Term) Term)


(declare-fun X64.Machine_s.__proj__MIndex__item__index@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__index>


; <Skipped let __proj__MIndex__item__index/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__offset>


(declare-fun X64.Machine_s.__proj__MIndex__item__offset (Term) Term)


(declare-fun X64.Machine_s.__proj__MIndex__item__offset@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__offset>


; <Skipped let __proj__MIndex__item__offset/>


; <Start encoding type X64.Machine_s.operand>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.operand () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.OConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.OConst_n (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.OConst
(declare-fun X64.Machine_s.OConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.OReg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.OReg_r (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.OReg
(declare-fun X64.Machine_s.OReg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.OMem (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.OMem_m (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.OMem
(declare-fun X64.Machine_s.OMem@tok () Term)
;;;;;;;;;;;;;;;;n: Prims.int -> operand
(declare-fun Tm_arrow_b6d7f68e716a1e4fa718b096c4229d4c () Term)
;;;;;;;;;;;;;;;;r: reg -> operand
(declare-fun Tm_arrow_ed53777d74168b76de878051abd0d595 () Term)
;;;;;;;;;;;;;;;;m: maddr -> operand
(declare-fun Tm_arrow_bdd01546fc6f3c47560e779c36085b13 () Term)

; <start constructor X64.Machine_s.operand>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.operand ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
230)
(= __@x0
X64.Machine_s.operand)))

; </end constructor X64.Machine_s.operand>


; <start constructor X64.Machine_s.OConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.OConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
236)
(= __@x0
(X64.Machine_s.OConst (X64.Machine_s.OConst_n __@x0)))))

; </end constructor X64.Machine_s.OConst>


; <start constructor X64.Machine_s.OReg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.OReg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(X64.Machine_s.OReg (X64.Machine_s.OReg_r __@x0)))))

; </end constructor X64.Machine_s.OReg>


; <start constructor X64.Machine_s.OMem>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.OMem ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
246)
(= __@x0
(X64.Machine_s.OMem (X64.Machine_s.OMem_m __@x0)))))

; </end constructor X64.Machine_s.OMem>


; </end encoding type X64.Machine_s.operand>


; <Start encoding assume X64.Machine_s.operand__uu___haseq>


; </end encoding assume X64.Machine_s.operand__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_OConst>

(declare-fun X64.Machine_s.uu___is_OConst (Term) Term)
;;;;;;;;;;;;;;;;projectee: operand -> Prims.bool
(declare-fun Tm_arrow_4c3cbca00af6e73051f04a1e4e4895f8 () Term)
(declare-fun X64.Machine_s.uu___is_OConst@tok () Term)

; </end encoding val X64.Machine_s.uu___is_OConst>


; <Skipped let uu___is_OConst/>


; <Start encoding val X64.Machine_s.__proj__OConst__item__n>

(declare-fun Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8 () Term)
(declare-fun X64.Machine_s.__proj__OConst__item__n (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: operand{OConst? _} -> Prims.int
(declare-fun Tm_arrow_e21ff7d2f895bc4d2ac0da255a240e50 () Term)
(declare-fun X64.Machine_s.__proj__OConst__item__n@tok () Term)

; </end encoding val X64.Machine_s.__proj__OConst__item__n>


; <Skipped let __proj__OConst__item__n/>


; <Start encoding val X64.Machine_s.uu___is_OReg>

(declare-fun X64.Machine_s.uu___is_OReg (Term) Term)

(declare-fun X64.Machine_s.uu___is_OReg@tok () Term)

; </end encoding val X64.Machine_s.uu___is_OReg>


; <Skipped let uu___is_OReg/>


; <Start encoding val X64.Machine_s.__proj__OReg__item__r>

(declare-fun Tm_refine_7c9e5bdb9582a858897946d48f9f4d58 () Term)
(declare-fun X64.Machine_s.__proj__OReg__item__r (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: operand{OReg? _} -> reg
(declare-fun Tm_arrow_4f28a4c90c6477e0d36845d97551ee54 () Term)
(declare-fun X64.Machine_s.__proj__OReg__item__r@tok () Term)

; </end encoding val X64.Machine_s.__proj__OReg__item__r>


; <Skipped let __proj__OReg__item__r/>


; <Start encoding val X64.Machine_s.uu___is_OMem>

(declare-fun X64.Machine_s.uu___is_OMem (Term) Term)

(declare-fun X64.Machine_s.uu___is_OMem@tok () Term)

; </end encoding val X64.Machine_s.uu___is_OMem>


; <Skipped let uu___is_OMem/>


; <Start encoding val X64.Machine_s.__proj__OMem__item__m>

(declare-fun Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6 () Term)
(declare-fun X64.Machine_s.__proj__OMem__item__m (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: operand{OMem? _} -> maddr
(declare-fun Tm_arrow_ce53f81782c867cbe295bf95855c832b () Term)
(declare-fun X64.Machine_s.__proj__OMem__item__m@tok () Term)

; </end encoding val X64.Machine_s.__proj__OMem__item__m>


; <Skipped let __proj__OMem__item__m/>


; <Start encoding type X64.Machine_s.precode>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.precode (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun X64.Machine_s.precode@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Ins (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Ins_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Ins_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Ins_ins (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Ins
(declare-fun X64.Machine_s.Ins@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Block (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Block_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Block_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Block_block (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Block
(declare-fun X64.Machine_s.Block@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.IfElse (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_ifCond (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_ifTrue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_ifFalse (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.IfElse
(declare-fun X64.Machine_s.IfElse@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.While (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_whileCond (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_whileBody (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.While
(declare-fun X64.Machine_s.While@tok () Term)
;;;;;;;;;;;;;;;;ins: t_ins -> precode t_ins t_ocmp
(declare-fun Tm_arrow_8c2521134ec700b5462dee903e585327 () Term)
;;;;;;;;;;;;;;;;block: Prims.list (precode t_ins t_ocmp) -> precode t_ins t_ocmp
(declare-fun Tm_arrow_c8bb83bcb803188d7a2f598a8bd1f0a4 () Term)
;;;;;;;;;;;;;;;;ifCond: t_ocmp -> ifTrue: precode t_ins t_ocmp -> ifFalse: precode t_ins t_ocmp   -> precode t_ins t_ocmp
(declare-fun Tm_arrow_1ba522780cb69fa2f47cdbc62ca91419 () Term)
;;;;;;;;;;;;;;;;whileCond: t_ocmp -> whileBody: precode t_ins t_ocmp -> precode t_ins t_ocmp
(declare-fun Tm_arrow_1bcd23eed2c00c81fe04dc802553da1a () Term)

; <start constructor X64.Machine_s.precode>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.precode ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(X64.Machine_s.precode @x0
@x1))
 
;;no pats
:qid is-X64.Machine_s.precode))))

; </end constructor X64.Machine_s.precode>


; <start constructor X64.Machine_s.Ins>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Ins ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(X64.Machine_s.Ins (X64.Machine_s.Ins_t_ins __@x0)
(X64.Machine_s.Ins_t_ocmp __@x0)
(X64.Machine_s.Ins_ins __@x0)))))

; </end constructor X64.Machine_s.Ins>


; <start constructor X64.Machine_s.Block>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Block ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(X64.Machine_s.Block (X64.Machine_s.Block_t_ins __@x0)
(X64.Machine_s.Block_t_ocmp __@x0)
(X64.Machine_s.Block_block __@x0)))))

; </end constructor X64.Machine_s.Block>


; <start constructor X64.Machine_s.IfElse>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.IfElse ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
285)
(= __@x0
(X64.Machine_s.IfElse (X64.Machine_s.IfElse_t_ins __@x0)
(X64.Machine_s.IfElse_t_ocmp __@x0)
(X64.Machine_s.IfElse_ifCond __@x0)
(X64.Machine_s.IfElse_ifTrue __@x0)
(X64.Machine_s.IfElse_ifFalse __@x0)))))

; </end constructor X64.Machine_s.IfElse>


; <start constructor X64.Machine_s.While>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.While ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(= __@x0
(X64.Machine_s.While (X64.Machine_s.While_t_ins __@x0)
(X64.Machine_s.While_t_ocmp __@x0)
(X64.Machine_s.While_whileCond __@x0)
(X64.Machine_s.While_whileBody __@x0)))))

; </end constructor X64.Machine_s.While>


; </end encoding type X64.Machine_s.precode>


; <Start encoding assume X64.Machine_s.precode__uu___haseq>


; </end encoding assume X64.Machine_s.precode__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_Ins>

(declare-fun X64.Machine_s.uu___is_Ins (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: precode t_ins t_ocmp -> Prims.bool
(declare-fun Tm_arrow_8daf6690694745e3b2d4c7c748899c1d () Term)
(declare-fun X64.Machine_s.uu___is_Ins@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Ins>


; <Skipped let uu___is_Ins/>


; <Start encoding val X64.Machine_s.__proj__Ins__item__ins>

(declare-fun Tm_refine_8d23bd498b85d9ef871e961295abeefa (Term Term) Term)
(declare-fun X64.Machine_s.__proj__Ins__item__ins (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {Ins? _} -> t_ins
(declare-fun Tm_arrow_1ff3260e391a92b117b162ed7e8440a6 () Term)
(declare-fun X64.Machine_s.__proj__Ins__item__ins@tok () Term)

; </end encoding val X64.Machine_s.__proj__Ins__item__ins>


; <Skipped let __proj__Ins__item__ins/>


; <Start encoding val X64.Machine_s.uu___is_Block>

(declare-fun X64.Machine_s.uu___is_Block (Term Term Term) Term)

(declare-fun X64.Machine_s.uu___is_Block@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Block>


; <Skipped let uu___is_Block/>


; <Start encoding val X64.Machine_s.__proj__Block__item__block>

(declare-fun Tm_refine_7931b24c4e7900a01f262ca0e3574c0e (Term Term) Term)
(declare-fun X64.Machine_s.__proj__Block__item__block (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {Block? _} -> Prims.list (precode t_ins t_ocmp)
(declare-fun Tm_arrow_a1d21575b2f23f80b4d2af9d71edb82e () Term)
(declare-fun X64.Machine_s.__proj__Block__item__block@tok () Term)

; </end encoding val X64.Machine_s.__proj__Block__item__block>


; <Skipped let __proj__Block__item__block/>


; <Start encoding val X64.Machine_s.uu___is_IfElse>

(declare-fun X64.Machine_s.uu___is_IfElse (Term Term Term) Term)

(declare-fun X64.Machine_s.uu___is_IfElse@tok () Term)

; </end encoding val X64.Machine_s.uu___is_IfElse>


; <Skipped let uu___is_IfElse/>


; <Start encoding val X64.Machine_s.__proj__IfElse__item__ifCond>

(declare-fun Tm_refine_4377826c4723fe1b7a6258fac9438e3d (Term Term) Term)
(declare-fun X64.Machine_s.__proj__IfElse__item__ifCond (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {IfElse? _} -> t_ocmp
(declare-fun Tm_arrow_e6b0c3d7c431b2a19ad8cabd3c849bb8 () Term)
(declare-fun X64.Machine_s.__proj__IfElse__item__ifCond@tok () Term)

; </end encoding val X64.Machine_s.__proj__IfElse__item__ifCond>


; <Skipped let __proj__IfElse__item__ifCond/>


; <Start encoding val X64.Machine_s.__proj__IfElse__item__ifTrue>


(declare-fun X64.Machine_s.__proj__IfElse__item__ifTrue (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {IfElse? _} -> precode t_ins t_ocmp
(declare-fun Tm_arrow_05c38c81ca8e5d074417a95300ffa5d4 () Term)
(declare-fun X64.Machine_s.__proj__IfElse__item__ifTrue@tok () Term)

; </end encoding val X64.Machine_s.__proj__IfElse__item__ifTrue>


; <Skipped let __proj__IfElse__item__ifTrue/>


; <Start encoding val X64.Machine_s.__proj__IfElse__item__ifFalse>


(declare-fun X64.Machine_s.__proj__IfElse__item__ifFalse (Term Term Term) Term)


(declare-fun X64.Machine_s.__proj__IfElse__item__ifFalse@tok () Term)

; </end encoding val X64.Machine_s.__proj__IfElse__item__ifFalse>


; <Skipped let __proj__IfElse__item__ifFalse/>


; <Start encoding val X64.Machine_s.uu___is_While>

(declare-fun X64.Machine_s.uu___is_While (Term Term Term) Term)

(declare-fun X64.Machine_s.uu___is_While@tok () Term)

; </end encoding val X64.Machine_s.uu___is_While>


; <Skipped let uu___is_While/>


; <Start encoding val X64.Machine_s.__proj__While__item__whileCond>

(declare-fun Tm_refine_45c3c142e427e91690ff415ec1656ffb (Term Term) Term)
(declare-fun X64.Machine_s.__proj__While__item__whileCond (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {While? _} -> t_ocmp
(declare-fun Tm_arrow_e2fb64671092bfded6c2990ab57154aa () Term)
(declare-fun X64.Machine_s.__proj__While__item__whileCond@tok () Term)

; </end encoding val X64.Machine_s.__proj__While__item__whileCond>


; <Skipped let __proj__While__item__whileCond/>


; <Start encoding val X64.Machine_s.__proj__While__item__whileBody>


(declare-fun X64.Machine_s.__proj__While__item__whileBody (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {While? _} -> precode t_ins t_ocmp
(declare-fun Tm_arrow_fff72ee73f15cca4c5756f235dbd9964 () Term)
(declare-fun X64.Machine_s.__proj__While__item__whileBody@tok () Term)

; </end encoding val X64.Machine_s.__proj__While__item__whileBody>


; <Skipped let __proj__While__item__whileBody/>


; <Start encoding let valid_dst>

(declare-fun X64.Machine_s.valid_dst (Term) Term)

(declare-fun X64.Machine_s.valid_dst@tok () Term)

; </end encoding let valid_dst>


; <Start encoding let dst_op>

(declare-fun X64.Machine_s.dst_op () Term)
(declare-fun Tm_refine_e85c4468bd6fa895770a44e5ae1526dc () Term)

; </end encoding let dst_op>


; End Externals for module X64.Machine_s


; Externals for interface X64.Vale.Regs_i


; <Start encoding let t>

(declare-fun X64.Vale.Regs_i.t () Term)
;;;;;;;;;;;;;;;;_: X64.Machine_s.reg -> Type
(declare-fun Tm_arrow_73862e447730cb7be03c891c89cb5703 () Term)
(declare-fun Tm_abs_bde726dfeb2837d96e43a155f7c873f5 () Term)

; </end encoding let t>


; <Start encoding val X64.Vale.Regs_i.equal>

(declare-fun X64.Vale.Regs_i.equal (Term Term) Term)
;;;;;;;;;;;;;;;;regs1: t -> regs2: t -> Type
(declare-fun Tm_arrow_09ce3637a0bad3dcc1b6043f68d63f8f () Term)
(declare-fun X64.Vale.Regs_i.equal@tok () Term)

; </end encoding val X64.Vale.Regs_i.equal>


; <Start encoding val X64.Vale.Regs_i.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_intro (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_intro@tok () Term)

; </end encoding val X64.Vale.Regs_i.lemma_equal_intro>


; <Start encoding val X64.Vale.Regs_i.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_elim (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_elim@tok () Term)

; </end encoding val X64.Vale.Regs_i.lemma_equal_elim>


; End Externals for interface X64.Vale.Regs_i


; Externals for module FStar.Exn


; <Start encoding val FStar.Exn.raise>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Exn.raise (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Exn.raise@tok () Term)

; </end encoding val FStar.Exn.raise>


; End Externals for module FStar.Exn


; Externals for interface FStar.Set


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding val FStar.Set.set>


; <Start encoding val FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding val FStar.Set.equal>


; <Start encoding val FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding val FStar.Set.mem>


; <Start encoding val FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding val FStar.Set.empty>


; <Start encoding val FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding val FStar.Set.singleton>


; <Start encoding val FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding val FStar.Set.union>


; <Start encoding val FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding val FStar.Set.intersect>


; <Start encoding val FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding val FStar.Set.complement>


; <Start encoding val FStar.Set.intension>

(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)
(declare-fun FStar.Set.intension (Term Term) Term)

(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding val FStar.Set.intension>


; <Start encoding let disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding let disjoint>


; <Start encoding let subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

; </end encoding let subset>


; <Start encoding let add>

(declare-fun FStar.Set.add (Term Term Term) Term)
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding let add>


; <Start encoding let remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding let remove>


; <Start encoding val FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding val FStar.Set.mem_empty>


; <Start encoding val FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding val FStar.Set.mem_singleton>


; <Start encoding val FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding val FStar.Set.mem_union>


; <Start encoding val FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding val FStar.Set.mem_intersect>


; <Start encoding val FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding val FStar.Set.mem_complement>


; <Start encoding val FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding val FStar.Set.mem_intension>


; <Start encoding val FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding val FStar.Set.mem_subset>


; <Start encoding val FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding val FStar.Set.subset_mem>


; <Start encoding val FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Set.lemma_equal_intro>


; <Start encoding val FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Set.lemma_equal_elim>


; <Start encoding val FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Set.lemma_equal_refl>


; <Start encoding val FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding val FStar.Set.disjoint_not_in_both>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)

; </end encoding let rec as_set'>


; <Start encoding let as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding let as_set>


; <Start encoding let lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding let lemma_disjoint_subset>


; End Externals for interface FStar.Set


; Externals for module FStar.Preorder


; <Start encoding let relation>

(declare-fun FStar.Preorder.relation (Term) Term)

(declare-fun FStar.Preorder.relation@tok () Term)
(declare-fun Tm_arrow_a19f9d49348d4e0038f0ded87d87802f (Term) Term)

; </end encoding let relation>


; <Start encoding let predicate>

(declare-fun FStar.Preorder.predicate (Term) Term)

(declare-fun FStar.Preorder.predicate@tok () Term)


; </end encoding let predicate>


; <Start encoding let reflexive>

(declare-fun FStar.Preorder.reflexive (Term Term) Term)
(declare-fun Tm_arrow_8e677a33afbeb812aa3779b7bdd0131c () Term)
(declare-fun FStar.Preorder.reflexive@tok () Term)

; </end encoding let reflexive>


; <Start encoding let transitive>

(declare-fun FStar.Preorder.transitive (Term Term) Term)

(declare-fun FStar.Preorder.transitive@tok () Term)

; </end encoding let transitive>


; <Start encoding let preorder_rel>

(declare-fun FStar.Preorder.preorder_rel (Term Term) Term)

(declare-fun FStar.Preorder.preorder_rel@tok () Term)

; </end encoding let preorder_rel>


; <Start encoding let preorder>

(declare-fun FStar.Preorder.preorder (Term) Term)

(declare-fun FStar.Preorder.preorder@tok () Term)
(declare-fun Tm_refine_bd10f09297e0e7dc08314f7d9211801c (Term) Term)

; </end encoding let preorder>


; <Start encoding let stable>


(declare-fun FStar.Preorder.stable (Term Term Term) Term)

(declare-fun Tm_arrow_88036d0811eee3361efd6229bae2556d () Term)
(declare-fun FStar.Preorder.stable@tok () Term)


; </end encoding let stable>


; End Externals for module FStar.Preorder


; Externals for interface FStar.Monotonic.Witnessed


; <Start encoding val FStar.Monotonic.Witnessed.witnessed>


(declare-fun FStar.Monotonic.Witnessed.witnessed (Term Term Term) Term)

(declare-fun Tm_arrow_d588830826b7a1087c9fd83547a14841 () Term)
(declare-fun FStar.Monotonic.Witnessed.witnessed@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.witnessed>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_weakening>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_weakening@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_weakening>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_constant>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_constant@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_constant>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_nested>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_nested@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_nested>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_and>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_and@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_and>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_or>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_or@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_or>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_impl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_impl@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_impl>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_forall@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_forall>


; <Start encoding val FStar.Monotonic.Witnessed.lemma_witnessed_exists>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Witnessed.lemma_witnessed_exists@tok () Term)

; </end encoding val FStar.Monotonic.Witnessed.lemma_witnessed_exists>


; End Externals for interface FStar.Monotonic.Witnessed


; Externals for interface FStar.TSet


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.TSet.set>

(declare-fun FStar.TSet.set (Term) Term)

(declare-fun FStar.TSet.set@tok () Term)

; </end encoding val FStar.TSet.set>


; <Start encoding val FStar.TSet.equal>

(declare-fun FStar.TSet.equal (Term Term Term) Term)
(declare-fun Tm_arrow_461adcd665973ea611b925a11158df2c () Term)
(declare-fun FStar.TSet.equal@tok () Term)

; </end encoding val FStar.TSet.equal>


; <Start encoding val FStar.TSet.mem>

(declare-fun FStar.TSet.mem (Term Term Term) Term)
(declare-fun Tm_arrow_6bd40494c735add94090089fc1560f3a () Term)
(declare-fun FStar.TSet.mem@tok () Term)

; </end encoding val FStar.TSet.mem>


; <Start encoding val FStar.TSet.empty>

(declare-fun FStar.TSet.empty (Term) Term)
(declare-fun Tm_arrow_7479bde908a771f633d91cf1e6159164 () Term)
(declare-fun FStar.TSet.empty@tok () Term)

; </end encoding val FStar.TSet.empty>


; <Start encoding val FStar.TSet.singleton>

(declare-fun FStar.TSet.singleton (Term Term) Term)
(declare-fun Tm_arrow_efd4130c737a1c63982cd396443713d5 () Term)
(declare-fun FStar.TSet.singleton@tok () Term)

; </end encoding val FStar.TSet.singleton>


; <Start encoding val FStar.TSet.union>

(declare-fun FStar.TSet.union (Term Term Term) Term)
(declare-fun Tm_arrow_3de58fd829d33d9d3ee6c709e8528481 () Term)
(declare-fun FStar.TSet.union@tok () Term)

; </end encoding val FStar.TSet.union>


; <Start encoding val FStar.TSet.intersect>

(declare-fun FStar.TSet.intersect (Term Term Term) Term)

(declare-fun FStar.TSet.intersect@tok () Term)

; </end encoding val FStar.TSet.intersect>


; <Start encoding val FStar.TSet.complement>

(declare-fun FStar.TSet.complement (Term Term) Term)
(declare-fun Tm_arrow_0bfcc001675666a8c38e138bf5ac4ee8 () Term)
(declare-fun FStar.TSet.complement@tok () Term)

; </end encoding val FStar.TSet.complement>


; <Start encoding val FStar.TSet.intension>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun FStar.TSet.intension (Term Term) Term)

(declare-fun Tm_arrow_43deeb1307894e15ad1446f8a75a5811 () Term)
(declare-fun FStar.TSet.intension@tok () Term)

; </end encoding val FStar.TSet.intension>


; <Start encoding let subset>

(declare-fun FStar.TSet.subset (Term Term Term) Term)
(declare-fun Tm_arrow_a884d17a435ad7c4eff639e843c2e915 () Term)
(declare-fun FStar.TSet.subset@tok () Term)

; </end encoding let subset>


; <Start encoding val FStar.TSet.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_empty@tok () Term)

; </end encoding val FStar.TSet.mem_empty>


; <Start encoding val FStar.TSet.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_singleton@tok () Term)

; </end encoding val FStar.TSet.mem_singleton>


; <Start encoding val FStar.TSet.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_union@tok () Term)

; </end encoding val FStar.TSet.mem_union>


; <Start encoding val FStar.TSet.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_intersect@tok () Term)

; </end encoding val FStar.TSet.mem_intersect>


; <Start encoding val FStar.TSet.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_complement@tok () Term)

; </end encoding val FStar.TSet.mem_complement>


; <Start encoding val FStar.TSet.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_subset@tok () Term)

; </end encoding val FStar.TSet.mem_subset>


; <Start encoding val FStar.TSet.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.subset_mem@tok () Term)

; </end encoding val FStar.TSet.subset_mem>


; <Start encoding val FStar.TSet.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.mem_intension@tok () Term)


; </end encoding val FStar.TSet.mem_intension>


; <Start encoding val FStar.TSet.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_intro@tok () Term)

; </end encoding val FStar.TSet.lemma_equal_intro>


; <Start encoding val FStar.TSet.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_elim@tok () Term)

; </end encoding val FStar.TSet.lemma_equal_elim>


; <Start encoding val FStar.TSet.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_equal_refl@tok () Term)

; </end encoding val FStar.TSet.lemma_equal_refl>


; <Start encoding val FStar.TSet.tset_of_set>

(declare-fun FStar.TSet.tset_of_set (Term Term) Term)
(declare-fun Tm_arrow_3cbed28ab0f3b752d3656db155a3e9f3 () Term)
(declare-fun FStar.TSet.tset_of_set@tok () Term)

; </end encoding val FStar.TSet.tset_of_set>


; <Start encoding val FStar.TSet.lemma_mem_tset_of_set>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_tset_of_set@tok () Term)

; </end encoding val FStar.TSet.lemma_mem_tset_of_set>


; <Start encoding val FStar.TSet.filter>


(declare-fun FStar.TSet.filter (Term Term Term) Term)

(declare-fun Tm_arrow_1a001071ad6106aec2470a87b194954c () Term)
(declare-fun FStar.TSet.filter@tok () Term)

; </end encoding val FStar.TSet.filter>


; <Start encoding val FStar.TSet.lemma_mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_filter@tok () Term)


; </end encoding val FStar.TSet.lemma_mem_filter>


; <Start encoding val FStar.TSet.map>


(declare-fun FStar.TSet.map (Term Term Term Term) Term)

(declare-fun Tm_arrow_8af532fc458491b78200f8bcb1361e90 () Term)
(declare-fun FStar.TSet.map@tok () Term)

; </end encoding val FStar.TSet.map>


; <Start encoding val FStar.TSet.lemma_mem_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.TSet.lemma_mem_map (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.TSet.lemma_mem_map@tok () Term)


; </end encoding val FStar.TSet.lemma_mem_map>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.TSet.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.TSet.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.TSet.as_set_ (Term Term) Term)
(declare-fun FStar.TSet.as_set_@tok () Term)
(declare-fun Tm_arrow_b205d25f357c7c6022ebceb6497753f3 () Term)

; </end encoding let rec as_set'>


; End Externals for interface FStar.TSet


; Externals for interface FStar.Monotonic.Heap


; <Start encoding let set>

(declare-fun FStar.Monotonic.Heap.set (Term) Term)

(declare-fun FStar.Monotonic.Heap.set@tok () Term)

; </end encoding let set>


; <Start encoding let tset>

(declare-fun FStar.Monotonic.Heap.tset (Term) Term)

(declare-fun FStar.Monotonic.Heap.tset@tok () Term)

; </end encoding let tset>


; <Start encoding val FStar.Monotonic.Heap.heap>

(declare-fun FStar.Monotonic.Heap.heap () Term)

; </end encoding val FStar.Monotonic.Heap.heap>


; <Start encoding val FStar.Monotonic.Heap.equal>

(declare-fun FStar.Monotonic.Heap.equal (Term Term) Term)
(declare-fun Tm_arrow_22ea7bfd67f4919a6b048e3792f6aac6 () Term)
(declare-fun FStar.Monotonic.Heap.equal@tok () Term)

; </end encoding val FStar.Monotonic.Heap.equal>


; <Start encoding val FStar.Monotonic.Heap.equal_extensional>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.equal_extensional@tok () Term)

; </end encoding val FStar.Monotonic.Heap.equal_extensional>


; <Start encoding val FStar.Monotonic.Heap.emp>

(declare-fun FStar.Monotonic.Heap.emp (Dummy_sort) Term)

; </end encoding val FStar.Monotonic.Heap.emp>


; <Start encoding val FStar.Monotonic.Heap.next_addr>

(declare-fun FStar.Monotonic.Heap.next_addr (Term) Term)
(declare-fun Tm_ghost_arrow_5f9b7d66eebaf7d00b1d1c8781e1bd33 () Term)
(declare-fun FStar.Monotonic.Heap.next_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.next_addr>


; <Start encoding val FStar.Monotonic.Heap.core_mref>

(declare-fun FStar.Monotonic.Heap.core_mref (Term) Term)

(declare-fun FStar.Monotonic.Heap.core_mref@tok () Term)

; </end encoding val FStar.Monotonic.Heap.core_mref>


; <Start encoding let mref>

(declare-fun FStar.Monotonic.Heap.mref (Term Term) Term)
(declare-fun Tm_arrow_5bf0606d629ecb30adc0c556c248cd8a () Term)
(declare-fun FStar.Monotonic.Heap.mref@tok () Term)

; </end encoding let mref>


; <Start encoding val FStar.Monotonic.Heap.addr_of>

(declare-fun FStar.Monotonic.Heap.addr_of (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_3e3805ca9fb6a056cde481ca6e6b2666 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_of>


; <Start encoding val FStar.Monotonic.Heap.is_mm>

(declare-fun FStar.Monotonic.Heap.is_mm (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_8181c56eb62b6f09010fd19362ec557f () Term)
(declare-fun FStar.Monotonic.Heap.is_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.is_mm>


; <Start encoding let compare_addrs>

(declare-fun FStar.Monotonic.Heap.compare_addrs (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_d9620af24825960ed2af7182687876b1 () Term)
(declare-fun FStar.Monotonic.Heap.compare_addrs@tok () Term)

; </end encoding let compare_addrs>


; <Start encoding val FStar.Monotonic.Heap.contains>

(declare-fun FStar.Monotonic.Heap.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_78eae2771402d9ca8cd20442a69b19a1 () Term)
(declare-fun FStar.Monotonic.Heap.contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.contains>


; <Start encoding val FStar.Monotonic.Heap.addr_unused_in>

(declare-fun FStar.Monotonic.Heap.addr_unused_in (Term Term) Term)
(declare-fun Tm_arrow_5e652491869ddd6d9add00477fe250d4 () Term)
(declare-fun FStar.Monotonic.Heap.addr_unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_unused_in>


; <Start encoding val FStar.Monotonic.Heap.not_addr_unused_in_nullptr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.not_addr_unused_in_nullptr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.not_addr_unused_in_nullptr>


; <Start encoding val FStar.Monotonic.Heap.unused_in>

(declare-fun FStar.Monotonic.Heap.unused_in (Term Term Term Term) Term)
(declare-fun Tm_arrow_63db68eb9811874d358b39a3a3a594c0 () Term)
(declare-fun FStar.Monotonic.Heap.unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.unused_in>


; <Start encoding let fresh>

(declare-fun FStar.Monotonic.Heap.fresh (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_516fb5369267798913835a1aff4b7fe3 () Term)
(declare-fun FStar.Monotonic.Heap.fresh@tok () Term)

; </end encoding let fresh>


; <Start encoding let only_t>

(declare-fun FStar.Monotonic.Heap.only_t (Term Term Term) Term)
(declare-fun Tm_arrow_97d9b8894eec5cc757ee6368627567ce () Term)
(declare-fun FStar.Monotonic.Heap.only_t@tok () Term)

; </end encoding let only_t>


; <Start encoding let only>

(declare-fun FStar.Monotonic.Heap.only (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_fe5c1d63e245bf0ffcacbc885af17fc3 () Term)
(declare-fun FStar.Monotonic.Heap.only@tok () Term)

; </end encoding let only>


; <Start encoding let op_Hat_Plus_Plus>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_21e6803beb51b9a6b0e4cc69a41b426b () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Plus@tok () Term)

; </end encoding let op_Hat_Plus_Plus>


; <Start encoding let op_Plus_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_155b4e9b4b7e1cd02500a5483fe79417 () Term)
(declare-fun FStar.Monotonic.Heap.op_Plus_Plus_Hat@tok () Term)

; </end encoding let op_Plus_Plus_Hat>


; <Start encoding let op_Hat_Plus_Hat>

(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat (Term Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_a3f887bc1beedc82ccf25ac24af9a106 () Term)
(declare-fun FStar.Monotonic.Heap.op_Hat_Plus_Hat@tok () Term)

; </end encoding let op_Hat_Plus_Hat>


; <Start encoding val FStar.Monotonic.Heap.sel_tot>

(declare-fun Tm_refine_60a89cd0c268e7ce38a2aab467325fd8 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.sel_tot (Term Term Term Term) Term)

(declare-fun Tm_arrow_b9c7abd21015083a18544d8f5e4bfa5f () Term)
(declare-fun FStar.Monotonic.Heap.sel_tot@tok () Term)

; </end encoding val FStar.Monotonic.Heap.sel_tot>


; <Start encoding val FStar.Monotonic.Heap.sel>

(declare-fun FStar.Monotonic.Heap.sel (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_ffe8429ce0118fe92246c624b0f48cb8 () Term)
(declare-fun FStar.Monotonic.Heap.sel@tok () Term)

; </end encoding val FStar.Monotonic.Heap.sel>


; <Start encoding val FStar.Monotonic.Heap.upd_tot>


(declare-fun FStar.Monotonic.Heap.upd_tot (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_bc62c38ea3e82ecfe3b8b2ec42ad37db () Term)
(declare-fun FStar.Monotonic.Heap.upd_tot@tok () Term)

; </end encoding val FStar.Monotonic.Heap.upd_tot>


; <Start encoding val FStar.Monotonic.Heap.upd>

(declare-fun FStar.Monotonic.Heap.upd (Term Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_34a9169877528f6cc19628f2fc55c538 () Term)
(declare-fun FStar.Monotonic.Heap.upd@tok () Term)

; </end encoding val FStar.Monotonic.Heap.upd>


; <Start encoding val FStar.Monotonic.Heap.alloc>

(declare-fun FStar.Monotonic.Heap.alloc (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1c0aac8fe904b4d396ec54b136d2ffe7 () Term)
(declare-fun FStar.Monotonic.Heap.alloc@tok () Term)

; </end encoding val FStar.Monotonic.Heap.alloc>


; <Start encoding val FStar.Monotonic.Heap.free_mm>

(declare-fun Tm_refine_5015146880b2d88cf7d4492a6a4488b3 (Term Term Term) Term)
(declare-fun FStar.Monotonic.Heap.free_mm (Term Term Term Term) Term)

(declare-fun Tm_arrow_6ecb62093891266f94b1f3f1a90a448e () Term)
(declare-fun FStar.Monotonic.Heap.free_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.free_mm>


; <Start encoding let modifies_t>

(declare-fun FStar.Monotonic.Heap.modifies_t (Term Term Term) Term)
(declare-fun Tm_arrow_a4fe7207a94d4c1647746618fee3b728 () Term)
(declare-fun FStar.Monotonic.Heap.modifies_t@tok () Term)

; </end encoding let modifies_t>


; <Start encoding let modifies>

(declare-fun FStar.Monotonic.Heap.modifies (Term Term Term) Term)
(declare-fun Tm_arrow_46ebd76bd348c127a0b9b24dfad446fc () Term)
(declare-fun FStar.Monotonic.Heap.modifies@tok () Term)

; </end encoding let modifies>


; <Start encoding let equal_dom>

(declare-fun FStar.Monotonic.Heap.equal_dom (Term Term) Term)

(declare-fun FStar.Monotonic.Heap.equal_dom@tok () Term)

; </end encoding let equal_dom>


; <Start encoding val FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_ref_unused_iff_addr_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_contains_implies_used>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_implies_used@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_contains_implies_used>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_types>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_preorders>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_distinct_mm>


; <Start encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_distinct_addrs_unused@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_distinct_addrs_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_alloc@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_alloc>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_mm_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_sel@tok () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_free_mm_sel>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_mm_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_contains@tok () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_free_mm_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_mm_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_mm_unused@tok () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_free_mm_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_free_addr_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_free_addr_unused_in@tok () Term)

(declare-fun Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_free_addr_unused_in>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_same_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_same_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd1@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_upd1>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_upd2@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_upd2>


; <Start encoding val FStar.Monotonic.Heap.lemma_mref_injectivity>

(declare-fun FStar.Monotonic.Heap.lemma_mref_injectivity () Term)
(declare-fun Tm_refine_e1adf49e5e772ddffa19181e1a812a81 () Term)


; </end encoding val FStar.Monotonic.Heap.lemma_mref_injectivity>


; <Start encoding val FStar.Monotonic.Heap.lemma_in_dom_emp>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_in_dom_emp@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_in_dom_emp>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_well_typed_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_well_typed_upd_contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_well_typed_upd_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_unused_upd_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_contains@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_unused_upd_contains>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_contains_different_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_contains_different_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_contains_different_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_unused>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_unused@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_unused>


; <Start encoding val FStar.Monotonic.Heap.lemma_contains_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_contains_upd_modifies@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_contains_upd_modifies>


; <Start encoding val FStar.Monotonic.Heap.lemma_unused_upd_modifies>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_unused_upd_modifies@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_unused_upd_modifies>


; <Start encoding val FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_sel_equals_sel_tot_for_contained_refs>


; <Start encoding val FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_upd_equals_upd_tot_for_contained_refs>


; <Start encoding val FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_modifies_and_equal_dom_sel_diff_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_same_addr>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_cancel_same_mref_upd>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_upd_with_sel>


; <Start encoding val FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_heap_equality_commute_distinct_upds>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_upd_tot>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd_tot@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_upd_tot>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_upd@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_upd>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_alloc@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_alloc>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_free_mm>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_free_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_free_mm>


; <Start encoding val FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr@tok () Term)

; </end encoding val FStar.Monotonic.Heap.lemma_next_addr_contained_refs_addr>


; <Start encoding val FStar.Monotonic.Heap.aref>

(declare-fun FStar.Monotonic.Heap.aref () Term)

; </end encoding val FStar.Monotonic.Heap.aref>


; <Start encoding val FStar.Monotonic.Heap.dummy_aref>

(declare-fun FStar.Monotonic.Heap.dummy_aref (Dummy_sort) Term)

; </end encoding val FStar.Monotonic.Heap.dummy_aref>


; <Start encoding val FStar.Monotonic.Heap.aref_equal>

(declare-fun FStar.Monotonic.Heap.aref_equal (Term Term) Term)
(declare-fun Tm_refine_82707a6e3d48caa257bb4bddb01d7d73 (Term Term) Term)
(declare-fun Tm_ghost_arrow_15fb16496d887138d488803245c89d64 () Term)
(declare-fun FStar.Monotonic.Heap.aref_equal@tok () Term)


; </end encoding val FStar.Monotonic.Heap.aref_equal>


; <Start encoding val FStar.Monotonic.Heap.aref_of>

(declare-fun FStar.Monotonic.Heap.aref_of (Term Term Term) Term)
(declare-fun Tm_arrow_52adf65c8447500d70e5098f6c041a65 () Term)
(declare-fun FStar.Monotonic.Heap.aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_of>


; <Start encoding val FStar.Monotonic.Heap.addr_of_aref>

(declare-fun FStar.Monotonic.Heap.addr_of_aref (Term) Term)
(declare-fun Tm_refine_afd51579b90d50ea23e03b743a1fa001 () Term)
(declare-fun Tm_ghost_arrow_168094509145e28b296ce766eea04736 () Term)
(declare-fun FStar.Monotonic.Heap.addr_of_aref@tok () Term)


; </end encoding val FStar.Monotonic.Heap.addr_of_aref>


; <Start encoding val FStar.Monotonic.Heap.addr_of_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_of_aref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_is_mm>

(declare-fun FStar.Monotonic.Heap.aref_is_mm (Term) Term)
(declare-fun Tm_ghost_arrow_86fca776032c40cedacef7de5d660572 () Term)
(declare-fun FStar.Monotonic.Heap.aref_is_mm@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_is_mm>


; <Start encoding val FStar.Monotonic.Heap.is_mm_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.is_mm_aref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_unused_in>

(declare-fun FStar.Monotonic.Heap.aref_unused_in (Term Term) Term)
(declare-fun Tm_arrow_8227ceb756b15f6c9348698ae3bb9b5e () Term)
(declare-fun FStar.Monotonic.Heap.aref_unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_unused_in>


; <Start encoding val FStar.Monotonic.Heap.unused_in_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.unused_in_aref_of>


; <Start encoding val FStar.Monotonic.Heap.contains_aref_unused_in>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_aref_unused_in@tok () Term)

; </end encoding val FStar.Monotonic.Heap.contains_aref_unused_in>


; <Start encoding val FStar.Monotonic.Heap.aref_live_at>

(declare-fun FStar.Monotonic.Heap.aref_live_at (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c4830390b5ceaaec5e76b4f367d6c11 () Term)
(declare-fun FStar.Monotonic.Heap.aref_live_at@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_live_at>


; <Start encoding val FStar.Monotonic.Heap.gref_of>

(declare-fun FStar.Monotonic.Heap.gref_of (Term Term Term) Term)
(declare-fun Tm_refine_f871b1cec1676516ecbdd8b1fdf16da7 (Term Term) Term)
(declare-fun Tm_ghost_arrow_b090c641b42392b5ed08e8774610283a () Term)
(declare-fun FStar.Monotonic.Heap.gref_of@tok () Term)


; </end encoding val FStar.Monotonic.Heap.gref_of>


; <Start encoding val FStar.Monotonic.Heap.ref_of>

(declare-fun FStar.Monotonic.Heap.ref_of (Term Term Term Term) Term)
(declare-fun Tm_refine_e9f69f18eb8d91697e49057991573e9f (Term Term Term Term) Term)
(declare-fun Tm_arrow_593ebdf0a0f4ac12ef03a2bedce8e97b () Term)
(declare-fun FStar.Monotonic.Heap.ref_of@tok () Term)


; </end encoding val FStar.Monotonic.Heap.ref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_live_at_aref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_live_at_aref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_live_at_aref_of>


; <Start encoding val FStar.Monotonic.Heap.contains_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.contains_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.contains_gref_of>


; <Start encoding val FStar.Monotonic.Heap.aref_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.aref_of_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.aref_of_gref_of>


; <Start encoding val FStar.Monotonic.Heap.addr_of_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.addr_of_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.addr_of_gref_of>


; <Start encoding val FStar.Monotonic.Heap.is_mm_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.is_mm_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.is_mm_gref_of>


; <Start encoding val FStar.Monotonic.Heap.unused_in_gref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.unused_in_gref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.unused_in_gref_of>


; <Start encoding val FStar.Monotonic.Heap.sel_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.sel_ref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.sel_ref_of>


; <Start encoding val FStar.Monotonic.Heap.upd_ref_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Monotonic.Heap.upd_ref_of@tok () Term)

; </end encoding val FStar.Monotonic.Heap.upd_ref_of>


; End Externals for interface FStar.Monotonic.Heap


; Externals for module FStar.Heap


; <Start encoding let trivial_rel>

(declare-fun FStar.Heap.trivial_rel (Term) Term)
(declare-fun Tm_arrow_5e933b4711265943ba4bba734363561b () Term)
(declare-fun FStar.Heap.trivial_rel@tok () Term)

(declare-fun Tm_abs_568747eb5009c1dec504311dee989dc2 (Term) Term)

; </end encoding let trivial_rel>


; <Start encoding let trivial_preorder>

(declare-fun FStar.Heap.trivial_preorder (Term) Term)
(declare-fun Tm_arrow_1a6db055683d4a5b8a00786676e339b5 () Term)
(declare-fun FStar.Heap.trivial_preorder@tok () Term)

; </end encoding let trivial_preorder>


; <Start encoding let ref>

(declare-fun FStar.Heap.ref (Term) Term)

(declare-fun FStar.Heap.ref@tok () Term)

; </end encoding let ref>


; End Externals for module FStar.Heap


; Externals for module FStar.ST


; <Skipped new_effect { GST ... }/>


; <Start encoding let gst_pre>

(declare-fun FStar.ST.gst_pre () Term)

; </end encoding let gst_pre>


; <Start encoding let gst_post'>

(declare-fun FStar.ST.gst_post_ (Term Term) Term)

(declare-fun FStar.ST.gst_post_@tok () Term)

; </end encoding let gst_post'>


; <Start encoding let gst_post>

(declare-fun FStar.ST.gst_post (Term) Term)

(declare-fun FStar.ST.gst_post@tok () Term)

; </end encoding let gst_post>


; <Start encoding let gst_wp>

(declare-fun FStar.ST.gst_wp (Term) Term)

(declare-fun FStar.ST.gst_wp@tok () Term)

; </end encoding let gst_wp>


; <Start encoding let lift_div_gst>

(declare-fun FStar.ST.lift_div_gst (Term Term Term Term) Term)
(declare-fun Tm_arrow_bbaeef6680f54609c0f7c85c1ba1bd3c () Term)
(declare-fun FStar.ST.lift_div_gst@tok () Term)



; </end encoding let lift_div_gst>


; <Skipped sub_effect DIV ~> GST/>


; <Start encoding let heap_rel>

(declare-fun FStar.ST.heap_rel (Term Term) Term)
(declare-fun Tm_arrow_3ffd8da3a1b4fb5a75e097e2a7ead7a9 () Term)
(declare-fun FStar.ST.heap_rel@tok () Term)

; </end encoding let heap_rel>


; <Start encoding val FStar.ST.gst_get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_get@tok () Term)

; </end encoding val FStar.ST.gst_get>


; <Start encoding val FStar.ST.gst_put>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_put (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_put@tok () Term)

; </end encoding val FStar.ST.gst_put>


; <Start encoding let heap_predicate>

(declare-fun FStar.ST.heap_predicate () Term)
(declare-fun Tm_arrow_c4185f52507383203d0d6335fd0332a8 () Term)

; </end encoding let heap_predicate>


; <Start encoding let stable>

(declare-fun FStar.ST.stable (Term) Term)
(declare-fun Tm_arrow_6fabddab2e8badc7a54f2fce30469fd3 () Term)
(declare-fun FStar.ST.stable@tok () Term)

; </end encoding let stable>


; <Start encoding let witnessed>

(declare-fun Tm_refine_a11098d99239284f14b49e1dd0266896 () Term)
(declare-fun FStar.ST.witnessed (Term) Term)

(declare-fun Tm_arrow_eda1223bb1d06bd92699e8c3d8f9251d () Term)
(declare-fun FStar.ST.witnessed@tok () Term)

; </end encoding let witnessed>


; <Start encoding val FStar.ST.gst_witness>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_witness (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_witness@tok () Term)

; </end encoding val FStar.ST.gst_witness>


; <Start encoding val FStar.ST.gst_recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.gst_recall (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.gst_recall@tok () Term)

; </end encoding val FStar.ST.gst_recall>


; <Skipped val FStar.ST.lemma_functoriality/>


; <Start encoding let lemma_functoriality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.lemma_functoriality (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.lemma_functoriality@tok () Term)

; </end encoding let lemma_functoriality>


; <Start encoding let st_pre>

(declare-fun FStar.ST.st_pre () Term)

; </end encoding let st_pre>


; <Start encoding let st_post'>

(declare-fun FStar.ST.st_post_ (Term Term) Term)

(declare-fun FStar.ST.st_post_@tok () Term)

; </end encoding let st_post'>


; <Start encoding let st_post>

(declare-fun FStar.ST.st_post (Term) Term)

(declare-fun FStar.ST.st_post@tok () Term)

; </end encoding let st_post>


; <Start encoding let st_wp>

(declare-fun FStar.ST.st_wp (Term) Term)

(declare-fun FStar.ST.st_wp@tok () Term)

; </end encoding let st_wp>


; <Skipped new_effect { STATE ... }/>


; <Start encoding let lift_gst_state>

(declare-fun FStar.ST.lift_gst_state (Term Term) Term)
(declare-fun Tm_arrow_9f8aa176b7421939c7ff58d9777d1285 () Term)
(declare-fun FStar.ST.lift_gst_state@tok () Term)

; </end encoding let lift_gst_state>


; <Skipped sub_effect GST ~> STATE/>


; <Skipped effect State a wp = FStar.ST.STATE a/>


; <Skipped effect ST a pre post = FStar.ST.STATE a/>


; <Skipped effect St a = FStar.ST.ST a/>


; <Start encoding let contains_pred>

(declare-fun FStar.ST.contains_pred (Term Term Term Term) Term)

(declare-fun FStar.ST.contains_pred@tok () Term)

; </end encoding let contains_pred>


; <Start encoding let mref>

(declare-fun FStar.ST.mref (Term Term) Term)

(declare-fun FStar.ST.mref@tok () Term)
(declare-fun Tm_refine_e33ef751d600ad1c7f71142479103c47 (Term Term) Term)

; </end encoding let mref>


; <Start encoding let recall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.recall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.recall@tok () Term)

; </end encoding let recall>


; <Start encoding let alloc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.alloc (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.alloc@tok () Term)

; </end encoding let alloc>


; <Start encoding let read>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.read (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.read@tok () Term)

; </end encoding let read>


; <Start encoding let write>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.write (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.write@tok () Term)

; </end encoding let write>


; <Start encoding let get>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.get (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.get@tok () Term)

; </end encoding let get>


; <Start encoding let op_Bang>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Bang (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Bang@tok () Term)

; </end encoding let op_Bang>


; <Start encoding let op_Colon_Equals>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.ST.op_Colon_Equals (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.ST.op_Colon_Equals@tok () Term)

; </end encoding let op_Colon_Equals>


; <Start encoding let ref>

(declare-fun FStar.ST.ref (Term) Term)

(declare-fun FStar.ST.ref@tok () Term)

; </end encoding let ref>


; <Start encoding let modifies_none>

(declare-fun FStar.ST.modifies_none (Term Term) Term)

(declare-fun FStar.ST.modifies_none@tok () Term)

; </end encoding let modifies_none>


; End Externals for module FStar.ST


; Externals for interface FStar.All


; <Start encoding let all_pre>

(declare-fun FStar.All.all_pre () Term)

; </end encoding let all_pre>


; <Start encoding let all_post'>

(declare-fun FStar.All.all_post_ (Term Term) Term)

(declare-fun FStar.All.all_post_@tok () Term)

; </end encoding let all_post'>


; <Start encoding let all_post>

(declare-fun FStar.All.all_post (Term) Term)

(declare-fun FStar.All.all_post@tok () Term)

; </end encoding let all_post>


; <Start encoding let all_wp>

(declare-fun FStar.All.all_wp (Term) Term)

(declare-fun FStar.All.all_wp@tok () Term)

; </end encoding let all_wp>


; <Skipped new_effect { ALL ... }/>


; <Start encoding let lift_state_all>

(declare-fun FStar.All.lift_state_all (Term Term Term) Term)
(declare-fun Tm_arrow_3e4fec12f1c8981f71096a48e2abdc84 () Term)
(declare-fun FStar.All.lift_state_all@tok () Term)
(declare-fun Tm_refine_298bc3bb6d69e8b09e25f0f52730a1aa () Term)
(declare-fun Tm_arrow_0fb416478174b228abde05d827bd6313 () Term)
(declare-fun Tm_arrow_23b08cf81278f3c1bdae402318f6ccd9 (Term) Term)
(declare-fun Tm_abs_bdb21fd2b7ca1058c18a3e7e90881ef2 (Term Term) Term)

; </end encoding let lift_state_all>


; <Skipped sub_effect STATE ~> ALL/>


; <Start encoding let lift_exn_all>

(declare-fun FStar.All.lift_exn_all (Term Term Term Term) Term)
(declare-fun Tm_arrow_135df870f17e8c60e7945fbf1f54fc29 () Term)
(declare-fun FStar.All.lift_exn_all@tok () Term)

(declare-fun Tm_abs_a9ba63c9dfe5bf6c6b349a4bcc1b5528 (Term Term Term) Term)

; </end encoding let lift_exn_all>


; <Skipped sub_effect EXN ~> ALL/>


; <Skipped effect All a pre post = FStar.All.ALL a/>


; <Skipped effect ML a = FStar.All.ALL a/>


; <Start encoding val FStar.All.exit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.exit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.exit@tok () Term)

; </end encoding val FStar.All.exit>


; <Start encoding val FStar.All.try_with>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.try_with (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.try_with@tok () Term)

; </end encoding val FStar.All.try_with>


; <Start encoding datacon FStar.All.Failure for type Prims.exn>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.All.Failure (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.All.Failure_uu___ (Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun FStar.All.Failure@base (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.All.Failure
(declare-fun FStar.All.Failure@tok () Term)
(declare-fun Tm_arrow_ba2c44545f37b4cb1ed7c94934918f65 () Term)

; <start constructor FStar.All.Failure>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.All.Failure ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
(FStar.All.Failure (FStar.All.Failure_uu___ __@x0)))))

; </end constructor FStar.All.Failure>


; </end encoding datacon FStar.All.Failure for type Prims.exn>


; <Start encoding val FStar.All.uu___is_Failure>

(declare-fun FStar.All.uu___is_Failure (Term) Term)
(declare-fun Tm_arrow_81ab3356926b82578fcb92e97b412345 () Term)
(declare-fun FStar.All.uu___is_Failure@tok () Term)

; </end encoding val FStar.All.uu___is_Failure>


; <Skipped let uu___is_Failure/>


; <Start encoding val FStar.All.__proj__Failure__item__uu___>

(declare-fun Tm_refine_149c6719f34c408becdf9120a4ae2d59 () Term)
(declare-fun FStar.All.__proj__Failure__item__uu___ (Term) Term)

(declare-fun Tm_arrow_931774599ca5f3ca7bd6eb18157a7dec () Term)
(declare-fun FStar.All.__proj__Failure__item__uu___@tok () Term)

; </end encoding val FStar.All.__proj__Failure__item__uu___>


; <Skipped let __proj__Failure__item__uu___/>


; <Start encoding val FStar.All.failwith>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.All.failwith (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.All.failwith@tok () Term)

; </end encoding val FStar.All.failwith>


; End Externals for interface FStar.All


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>


(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)

(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)



(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface Opaque_i


; <Start encoding val Opaque_i.make_opaque>

(declare-fun Opaque_i.make_opaque (Term Term) Term)

(declare-fun Opaque_i.make_opaque@tok () Term)

; </end encoding val Opaque_i.make_opaque>


; <Start encoding val Opaque_i.reveal_opaque>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Opaque_i.reveal_opaque (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Opaque_i.reveal_opaque@tok () Term)

; </end encoding val Opaque_i.reveal_opaque>


; End Externals for interface Opaque_i


; Externals for interface FStar.Map


; <Start encoding val FStar.Map.t>

(declare-fun FStar.Map.t (Term Term) Term)
(declare-fun Tm_arrow_2b8b9bde9fdc9f797e5827d0c154aeeb () Term)
(declare-fun FStar.Map.t@tok () Term)

; </end encoding val FStar.Map.t>


; <Start encoding val FStar.Map.sel>

(declare-fun FStar.Map.sel (Term Term Term Term) Term)
(declare-fun Tm_arrow_28a168f8d4c6d78564a214862be72b08 () Term)
(declare-fun FStar.Map.sel@tok () Term)

; </end encoding val FStar.Map.sel>


; <Start encoding val FStar.Map.upd>

(declare-fun FStar.Map.upd (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b19283e90b47034162373413c6a19933 () Term)
(declare-fun FStar.Map.upd@tok () Term)

; </end encoding val FStar.Map.upd>


; <Start encoding val FStar.Map.const>

(declare-fun FStar.Map.const (Term Term Term) Term)
(declare-fun Tm_arrow_867ad7c8cdd01bd87f415b1f9e0b39ac () Term)
(declare-fun FStar.Map.const@tok () Term)

; </end encoding val FStar.Map.const>


; <Start encoding val FStar.Map.domain>

(declare-fun FStar.Map.domain (Term Term Term) Term)
(declare-fun Tm_arrow_6e8371e4f424600b54c69f2eb03b48d8 () Term)
(declare-fun FStar.Map.domain@tok () Term)

; </end encoding val FStar.Map.domain>


; <Start encoding val FStar.Map.contains>

(declare-fun FStar.Map.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_32b461b2324f01c7a6bc6b577725566d () Term)
(declare-fun FStar.Map.contains@tok () Term)

; </end encoding val FStar.Map.contains>


; <Start encoding val FStar.Map.concat>

(declare-fun FStar.Map.concat (Term Term Term Term) Term)
(declare-fun Tm_arrow_b137090ab92fa6ffe958df8f30b9f54e () Term)
(declare-fun FStar.Map.concat@tok () Term)

; </end encoding val FStar.Map.concat>


; <Start encoding val FStar.Map.map_val>


(declare-fun FStar.Map.map_val (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_9123217b92d7c89a4449fe44590b9f47 () Term)
(declare-fun FStar.Map.map_val@tok () Term)

; </end encoding val FStar.Map.map_val>


; <Start encoding val FStar.Map.restrict>

(declare-fun FStar.Map.restrict (Term Term Term Term) Term)
(declare-fun Tm_arrow_e8f96ed4bf330326d457be2f8416d734 () Term)
(declare-fun FStar.Map.restrict@tok () Term)

; </end encoding val FStar.Map.restrict>


; <Start encoding let const_on>

(declare-fun FStar.Map.const_on (Term Term Term Term) Term)
(declare-fun Tm_arrow_f99b4e662f3e4a97cdb11f6ede73601e () Term)
(declare-fun FStar.Map.const_on@tok () Term)

; </end encoding let const_on>


; <Start encoding val FStar.Map.map_literal>


(declare-fun FStar.Map.map_literal (Term Term Term) Term)

(declare-fun Tm_arrow_fb1dd96195814b8107d05d25a2bbb566 () Term)
(declare-fun FStar.Map.map_literal@tok () Term)

; </end encoding val FStar.Map.map_literal>


; <Start encoding let disjoint_dom>

(declare-fun FStar.Map.disjoint_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_556fc2b76256aeb4c51415a912920e4f () Term)
(declare-fun FStar.Map.disjoint_dom@tok () Term)

; </end encoding let disjoint_dom>


; <Start encoding let has_dom>

(declare-fun FStar.Map.has_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_978eafbacd55316f8accb3c830570c46 () Term)
(declare-fun FStar.Map.has_dom@tok () Term)

; </end encoding let has_dom>


; <Start encoding val FStar.Map.lemma_SelUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd1@tok () Term)

; </end encoding val FStar.Map.lemma_SelUpd1>


; <Start encoding val FStar.Map.lemma_SelUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd2@tok () Term)

; </end encoding val FStar.Map.lemma_SelUpd2>


; <Start encoding val FStar.Map.lemma_SelConst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConst (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConst@tok () Term)

; </end encoding val FStar.Map.lemma_SelConst>


; <Start encoding val FStar.Map.lemma_SelRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelRestrict@tok () Term)

; </end encoding val FStar.Map.lemma_SelRestrict>


; <Start encoding val FStar.Map.lemma_SelConcat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat1@tok () Term)

; </end encoding val FStar.Map.lemma_SelConcat1>


; <Start encoding val FStar.Map.lemma_SelConcat2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat2@tok () Term)

; </end encoding val FStar.Map.lemma_SelConcat2>


; <Start encoding val FStar.Map.lemma_SelMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelMapVal@tok () Term)


; </end encoding val FStar.Map.lemma_SelMapVal>


; <Start encoding val FStar.Map.lemma_InDomUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd1@tok () Term)

; </end encoding val FStar.Map.lemma_InDomUpd1>


; <Start encoding val FStar.Map.lemma_InDomUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd2@tok () Term)

; </end encoding val FStar.Map.lemma_InDomUpd2>


; <Start encoding val FStar.Map.lemma_InDomConstMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConstMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConstMap@tok () Term)

; </end encoding val FStar.Map.lemma_InDomConstMap>


; <Start encoding val FStar.Map.lemma_InDomConcat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConcat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConcat@tok () Term)

; </end encoding val FStar.Map.lemma_InDomConcat>


; <Start encoding val FStar.Map.lemma_InMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InMapVal@tok () Term)


; </end encoding val FStar.Map.lemma_InMapVal>


; <Start encoding val FStar.Map.lemma_InDomRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomRestrict@tok () Term)

; </end encoding val FStar.Map.lemma_InDomRestrict>


; <Start encoding val FStar.Map.lemma_ContainsDom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_ContainsDom (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_ContainsDom@tok () Term)

; </end encoding val FStar.Map.lemma_ContainsDom>


; <Start encoding val FStar.Map.lemma_UpdDomain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_UpdDomain (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_UpdDomain@tok () Term)

; </end encoding val FStar.Map.lemma_UpdDomain>


; <Start encoding val FStar.Map.lemma_map_literal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_map_literal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_map_literal@tok () Term)


; </end encoding val FStar.Map.lemma_map_literal>


; <Start encoding val FStar.Map.equal>

(declare-fun FStar.Map.equal (Term Term Term Term) Term)
(declare-fun Tm_arrow_8d5e09121919a406639e2201d1f5d3dd () Term)
(declare-fun FStar.Map.equal@tok () Term)

; </end encoding val FStar.Map.equal>


; <Start encoding val FStar.Map.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Map.lemma_equal_intro>


; <Start encoding val FStar.Map.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_elim (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Map.lemma_equal_elim>


; <Start encoding val FStar.Map.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Map.lemma_equal_refl>


; End Externals for interface FStar.Map


; Externals for interface X64.Vale.State_i


; <Start encoding let mem>

(declare-fun X64.Vale.State_i.mem () Term)

; </end encoding let mem>


; <Start encoding type X64.Vale.State_i.state>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.State_i.state () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.State_i.Mkstate (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_ok (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_regs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_flags (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_mem (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.State_i.Mkstate
(declare-fun X64.Vale.State_i.Mkstate@tok () Term)
;;;;;;;;;;;;;;;;ok: Prims.bool ->     regs: X64.Vale.Regs_i.t ->     flags: X64.Machine_s.nat64 ->     mem: FStar.Map.t Prims.int X64.Machine_s.nat64   -> state
(declare-fun Tm_arrow_bf3c56506b8f5eb79926980cc656f10f () Term)

; <start constructor X64.Vale.State_i.state>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.State_i.state ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
X64.Vale.State_i.state)))

; </end constructor X64.Vale.State_i.state>


; <start constructor X64.Vale.State_i.Mkstate>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.State_i.Mkstate ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.Mkstate_ok __@x0)
(X64.Vale.State_i.Mkstate_regs __@x0)
(X64.Vale.State_i.Mkstate_flags __@x0)
(X64.Vale.State_i.Mkstate_mem __@x0)))))

; </end constructor X64.Vale.State_i.Mkstate>


; </end encoding type X64.Vale.State_i.state>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__ok>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__ok (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> Prims.bool
(declare-fun Tm_arrow_5c5fed4129bbf9b3e7583d154e69c21e () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__ok@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__ok>


; <Skipped let __proj__Mkstate__item__ok/>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__regs>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__regs (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> X64.Vale.Regs_i.t
(declare-fun Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__regs@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__regs>


; <Skipped let __proj__Mkstate__item__regs/>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__flags>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__flags (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_01c6bddba2d6959bf2984d5bb35626d1 () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__flags@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__flags>


; <Skipped let __proj__Mkstate__item__flags/>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__mem>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__mem (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> FStar.Map.t Prims.int X64.Machine_s.nat64
(declare-fun Tm_arrow_91f4557325018bd0b2143a809bc61a2b () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__mem@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__mem>


; <Skipped let __proj__Mkstate__item__mem/>


; <Start encoding let reg_to_int>

(declare-fun X64.Vale.State_i.reg_to_int (Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> Prims.int
(declare-fun Tm_arrow_fa17d9caaadf5f567f6aea6dba96f000 () Term)
(declare-fun X64.Vale.State_i.reg_to_int@tok () Term)

; </end encoding let reg_to_int>


; <Start encoding let eval_reg>

(declare-fun X64.Vale.State_i.eval_reg (Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> s: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_9574d1338dc0d43578d8515dff1c58e1 () Term)
(declare-fun X64.Vale.State_i.eval_reg@tok () Term)

; </end encoding let eval_reg>


; <Start encoding let eval_mem>

(declare-fun X64.Vale.State_i.eval_mem (Term Term) Term)
;;;;;;;;;;;;;;;;ptr: Prims.int -> s: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_0784e42cf7e01da169e63a3999455727 () Term)
(declare-fun X64.Vale.State_i.eval_mem@tok () Term)

; </end encoding let eval_mem>


; <Start encoding let eval_maddr>

(declare-fun X64.Vale.State_i.eval_maddr (Term Term) Term)
;;;;;;;;;;;;;;;;m: X64.Machine_s.maddr -> s: state -> Prims.int
(declare-fun Tm_arrow_2d5a81cb81806c2a7a6cc9eb180f8c6c () Term)
(declare-fun X64.Vale.State_i.eval_maddr@tok () Term)




; </end encoding let eval_maddr>


; <Start encoding let eval_operand>

(declare-fun X64.Vale.State_i.eval_operand (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_e6e156fd62f2c5ec5ac072a8caacf3ef () Term)
(declare-fun X64.Vale.State_i.eval_operand@tok () Term)


; </end encoding let eval_operand>


; <Start encoding let update_reg>

(declare-fun X64.Vale.State_i.update_reg (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> v: X64.Machine_s.nat64 -> s: state -> state
(declare-fun Tm_arrow_1a371b6f5cc469875cee38e0de08dd87 () Term)
(declare-fun X64.Vale.State_i.update_reg@tok () Term)



;;;;;;;;;;;;;;;;r': X64.Machine_s.reg -> X64.Machine_s.nat64
(declare-fun Tm_arrow_1093f8e31085b67d2aaada502a6d45cd () Term)
(declare-fun Tm_abs_53c55973f12c5cd6dba65c1cc5016627 (Term Term Term) Term)

; </end encoding let update_reg>


; <Start encoding let update_mem>

(declare-fun X64.Vale.State_i.update_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;ptr: Prims.int -> v: X64.Machine_s.nat64 -> s: state -> state
(declare-fun Tm_arrow_b7f5df9f909755c0217c731e463eb8d9 () Term)
(declare-fun X64.Vale.State_i.update_mem@tok () Term)

; </end encoding let update_mem>


; <Start encoding let valid_maddr>

(declare-fun X64.Vale.State_i.valid_maddr (Term Term) Term)
;;;;;;;;;;;;;;;;m: X64.Machine_s.maddr -> s: state -> Type
(declare-fun Tm_arrow_ea1f1fcdcc5e42130d314013afa41640 () Term)
(declare-fun X64.Vale.State_i.valid_maddr@tok () Term)

; </end encoding let valid_maddr>


; <Start encoding let valid_operand>

(declare-fun X64.Vale.State_i.valid_operand (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: state -> Type
(declare-fun Tm_arrow_bf8a51e61f47e3e72fdc2e0e9f99e5f4 () Term)
(declare-fun X64.Vale.State_i.valid_operand@tok () Term)

; </end encoding let valid_operand>


; <Start encoding let state_eq>

(declare-fun X64.Vale.State_i.state_eq (Term Term) Term)
;;;;;;;;;;;;;;;;s0: state -> s1: state -> Type
(declare-fun Tm_arrow_ee5a24814994841774b9f7427f3ef695 () Term)
(declare-fun X64.Vale.State_i.state_eq@tok () Term)

; </end encoding let state_eq>


; <Start encoding let add_wrap>

(declare-fun X64.Vale.State_i.add_wrap (Term Term) Term)

(declare-fun X64.Vale.State_i.add_wrap@tok () Term)

; </end encoding let add_wrap>


; <Start encoding let eq_int>

(declare-fun X64.Vale.State_i.eq_int (Term Term) Term)
;;;;;;;;;;;;;;;;i1: Prims.int -> i2: Prims.int -> Prims.logical
(declare-fun Tm_arrow_7418b65d64c02ff38a120101f758e12a () Term)
(declare-fun X64.Vale.State_i.eq_int@tok () Term)

; </end encoding let eq_int>


; End Externals for interface X64.Vale.State_i


; Externals for interface X64.Vale.Decls


; <Start encoding val X64.Vale.Decls.cf>

(declare-fun X64.Vale.Decls.cf (Term) Term)
;;;;;;;;;;;;;;;;flags: Prims.int -> Prims.bool
(declare-fun Tm_arrow_2b00b574e3c859da902fc1b8ce85c0f1 () Term)
(declare-fun X64.Vale.Decls.cf@tok () Term)

; </end encoding val X64.Vale.Decls.cf>


; <Start encoding let va_subscript>

(declare-fun X64.Vale.Decls.va_subscript (Term Term Term Term) Term)

(declare-fun X64.Vale.Decls.va_subscript@tok () Term)

; </end encoding let va_subscript>


; <Start encoding let va_update>

(declare-fun X64.Vale.Decls.va_update (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Map.t _ _ -> _: _ -> _: _ -> FStar.Map.t _ _
(declare-fun Tm_arrow_e76ad7ea1b49a51ebc304bcd6e344d98 (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Map.t _ _ -> _: _ -> _: _ -> FStar.Map.t _ _
(declare-fun Tm_arrow_ecbe25e460c8c11eb9fd7d4047b093d0 () Term)
(declare-fun X64.Vale.Decls.va_update@tok () Term)


; </end encoding let va_update>


; <Start encoding let va_make_opaque>

(declare-fun X64.Vale.Decls.va_make_opaque (Term) Term)
;;;;;;;;;;;;;;;;_: _ -> _
(declare-fun Tm_arrow_fcd589b21e6efcf1e5d17b07c282a015 (Term) Term)
;;;;;;;;;;;;;;;;_: _ -> _
(declare-fun Tm_arrow_aca6096c8bcf7cf07fe43ce138335c0d () Term)
(declare-fun X64.Vale.Decls.va_make_opaque@tok () Term)


; </end encoding let va_make_opaque>


; <Start encoding let va_reveal_opaque>

(declare-fun X64.Vale.Decls.va_reveal_opaque (Term) Term)
(declare-fun Tm_refine_18a0b6bec9b860460a8e3c3382fe77d9 (Term Term) Term)
;;;;;;;;;;;;;;;;x: _ -> FStar.Pervasives.Lemma (ensures x == Opaque_i.make_opaque x)
(declare-fun Tm_arrow_c85189cb3d45a0d92b8181f2e7d81087 (Term) Term)
;;;;;;;;;;;;;;;;x: _ -> FStar.Pervasives.Lemma (ensures x == Opaque_i.make_opaque x)
(declare-fun Tm_arrow_7512816e4bbc0f4ad05c29594eb6e089 () Term)
(declare-fun X64.Vale.Decls.va_reveal_opaque@tok () Term)



; </end encoding let va_reveal_opaque>


; <Start encoding let va_bool>

(declare-fun X64.Vale.Decls.va_bool (Dummy_sort) Term)

; </end encoding let va_bool>


; <Start encoding let va_int>

(declare-fun X64.Vale.Decls.va_int (Dummy_sort) Term)

; </end encoding let va_int>


; <Start encoding val X64.Vale.Decls.ins>

(declare-fun X64.Vale.Decls.ins () Term)

; </end encoding val X64.Vale.Decls.ins>


; <Start encoding val X64.Vale.Decls.ocmp>

(declare-fun X64.Vale.Decls.ocmp () Term)

; </end encoding val X64.Vale.Decls.ocmp>


; <Start encoding let va_code>

(declare-fun X64.Vale.Decls.va_code () Term)

; </end encoding let va_code>


; <Start encoding let va_codes>

(declare-fun X64.Vale.Decls.va_codes () Term)

; </end encoding let va_codes>


; <Start encoding let va_state>

(declare-fun X64.Vale.Decls.va_state () Term)

; </end encoding let va_state>


; <Start encoding let va_operand>

(declare-fun X64.Vale.Decls.va_operand () Term)

; </end encoding let va_operand>


; <Start encoding let va_reg_operand>

(declare-fun X64.Vale.Decls.va_reg_operand () Term)


; </end encoding let va_reg_operand>


; <Start encoding let va_dst_operand>

(declare-fun X64.Vale.Decls.va_dst_operand () Term)

; </end encoding let va_dst_operand>


; <Start encoding let va_shift_amt>

(declare-fun X64.Vale.Decls.va_shift_amt () Term)

; </end encoding let va_shift_amt>


; <Start encoding let va_cmp>

(declare-fun X64.Vale.Decls.va_cmp () Term)

; </end encoding let va_cmp>


; <Start encoding let va_register>

(declare-fun X64.Vale.Decls.va_register () Term)

; </end encoding let va_register>


; <Start encoding let va_op_operand_reg>

(declare-fun X64.Vale.Decls.va_op_operand_reg (Term) Term)

(declare-fun X64.Vale.Decls.va_op_operand_reg@tok () Term)

; </end encoding let va_op_operand_reg>


; <Start encoding let va_const_operand>

(declare-fun X64.Vale.Decls.va_const_operand (Term) Term)

(declare-fun X64.Vale.Decls.va_const_operand@tok () Term)

; </end encoding let va_const_operand>


; <Start encoding let va_const_shift_amt>

(declare-fun X64.Vale.Decls.va_const_shift_amt (Term) Term)

(declare-fun X64.Vale.Decls.va_const_shift_amt@tok () Term)

; </end encoding let va_const_shift_amt>


; <Start encoding let va_op_shift_amt_reg>

(declare-fun X64.Vale.Decls.va_op_shift_amt_reg (Term) Term)

(declare-fun X64.Vale.Decls.va_op_shift_amt_reg@tok () Term)

; </end encoding let va_op_shift_amt_reg>


; <Start encoding let va_op_cmp_reg>

(declare-fun X64.Vale.Decls.va_op_cmp_reg (Term) Term)

(declare-fun X64.Vale.Decls.va_op_cmp_reg@tok () Term)

; </end encoding let va_op_cmp_reg>


; <Start encoding let va_const_cmp>

(declare-fun X64.Vale.Decls.va_const_cmp (Term) Term)

(declare-fun X64.Vale.Decls.va_const_cmp@tok () Term)

; </end encoding let va_const_cmp>


; <Start encoding let va_coerce_register_to_operand>

(declare-fun X64.Vale.Decls.va_coerce_register_to_operand (Term) Term)

(declare-fun X64.Vale.Decls.va_coerce_register_to_operand@tok () Term)

; </end encoding let va_coerce_register_to_operand>


; <Start encoding let va_coerce_operand_to_reg_operand>


(declare-fun X64.Vale.Decls.va_coerce_operand_to_reg_operand (Term) Term)

;;;;;;;;;;;;;;;;o: X64.Machine_s.operand{OReg? o} -> va_reg_operand
(declare-fun Tm_arrow_0fb8eec7b5772c59bf7f172d08b56c53 () Term)
(declare-fun X64.Vale.Decls.va_coerce_operand_to_reg_operand@tok () Term)


; </end encoding let va_coerce_operand_to_reg_operand>


; <Start encoding let va_coerce_dst_operand_to_reg_operand>

(declare-fun Tm_refine_70dbc69371824d33ee764c83b191a676 () Term)
(declare-fun X64.Vale.Decls.va_coerce_dst_operand_to_reg_operand (Term) Term)

;;;;;;;;;;;;;;;;o: X64.Machine_s.dst_op{OReg? o} -> va_reg_operand
(declare-fun Tm_arrow_76e5f6ec57e4d8033fecec0bdfc93865 () Term)
(declare-fun X64.Vale.Decls.va_coerce_dst_operand_to_reg_operand@tok () Term)


; </end encoding let va_coerce_dst_operand_to_reg_operand>


; <Start encoding let va_coerce_operand_to_cmp>

(declare-fun X64.Vale.Decls.va_coerce_operand_to_cmp (Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> X64.Machine_s.operand
(declare-fun Tm_arrow_c49fe11f07e7132abb98606d050ab187 () Term)
(declare-fun X64.Vale.Decls.va_coerce_operand_to_cmp@tok () Term)

; </end encoding let va_coerce_operand_to_cmp>


; <Start encoding let va_op_register>

(declare-fun X64.Vale.Decls.va_op_register (Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> X64.Machine_s.reg
(declare-fun Tm_arrow_7f0f9d6da585baaf5a7c880384e0ea61 () Term)
(declare-fun X64.Vale.Decls.va_op_register@tok () Term)

; </end encoding let va_op_register>


; <Start encoding let va_op_reg_operand_reg>

(declare-fun X64.Vale.Decls.va_op_reg_operand_reg (Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> va_reg_operand
(declare-fun Tm_arrow_1e5ed8030aceb77064fcc07ecc92cbf6 () Term)
(declare-fun X64.Vale.Decls.va_op_reg_operand_reg@tok () Term)

; </end encoding let va_op_reg_operand_reg>


; <Start encoding let va_op_dst_operand_reg>

(declare-fun Tm_refine_2ef22b5edaec67adad91f2b28dd82703 () Term)
(declare-fun X64.Vale.Decls.va_op_dst_operand_reg (Term) Term)

;;;;;;;;;;;;;;;;r: X64.Machine_s.reg{Prims.op_Negation (Rsp? r)} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_eac81a30501c8adbba72990822a93347 () Term)
(declare-fun X64.Vale.Decls.va_op_dst_operand_reg@tok () Term)


; </end encoding let va_op_dst_operand_reg>


; <Start encoding let va_coerce_operand_to_dst_operand>


(declare-fun X64.Vale.Decls.va_coerce_operand_to_dst_operand (Term) Term)

;;;;;;;;;;;;;;;;o: X64.Machine_s.operand{X64.Machine_s.valid_dst o} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_b29cd9194411833d669f31cad6043b50 () Term)
(declare-fun X64.Vale.Decls.va_coerce_operand_to_dst_operand@tok () Term)


; </end encoding let va_coerce_operand_to_dst_operand>


; <Start encoding let va_coerce_dst_operand_to_operand>

(declare-fun X64.Vale.Decls.va_coerce_dst_operand_to_operand (Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.dst_op -> X64.Machine_s.operand
(declare-fun Tm_arrow_bed966f5aed68e86dedcbf0417036322 () Term)
(declare-fun X64.Vale.Decls.va_coerce_dst_operand_to_operand@tok () Term)

; </end encoding let va_coerce_dst_operand_to_operand>


; <Start encoding let va_opr_code_Mem>

(declare-fun X64.Vale.Decls.va_opr_code_Mem (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> offset: Prims.int -> X64.Machine_s.operand
(declare-fun Tm_arrow_7a8366d55e67f5bfea8bfad985261e5a () Term)
(declare-fun X64.Vale.Decls.va_opr_code_Mem@tok () Term)

; </end encoding let va_opr_code_Mem>


; <Start encoding let va_opr_lemma_Mem>

(declare-fun X64.Vale.Decls.va_opr_lemma_Mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> base: X64.Machine_s.operand -> offset: Prims.int   -> X64.Machine_s.operand
(declare-fun Tm_arrow_24979db96413cb344ae287f560bf5141 () Term)
(declare-fun X64.Vale.Decls.va_opr_lemma_Mem@tok () Term)

; </end encoding let va_opr_lemma_Mem>


; <Start encoding let va_is_src_operand_uint64>

(declare-fun X64.Vale.Decls.va_is_src_operand_uint64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_is_src_operand_uint64@tok () Term)

; </end encoding let va_is_src_operand_uint64>


; <Start encoding let va_is_dst_operand_uint64>

(declare-fun X64.Vale.Decls.va_is_dst_operand_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: X64.Vale.State_i.state -> Prims.bool
(declare-fun Tm_arrow_487fee0d32a7d8664e164bb4002be014 () Term)
(declare-fun X64.Vale.Decls.va_is_dst_operand_uint64@tok () Term)

; </end encoding let va_is_dst_operand_uint64>


; <Start encoding let va_is_dst_dst_operand_uint64>

(declare-fun X64.Vale.Decls.va_is_dst_dst_operand_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.dst_op -> s: X64.Vale.State_i.state -> Type
(declare-fun Tm_arrow_a6865d3192c77dc36fdb7d7374008fa9 () Term)
(declare-fun X64.Vale.Decls.va_is_dst_dst_operand_uint64@tok () Term)

; </end encoding let va_is_dst_dst_operand_uint64>


; <Start encoding let va_is_src_register_int>

(declare-fun X64.Vale.Decls.va_is_src_register_int (Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> s: X64.Vale.State_i.state -> Prims.logical
(declare-fun Tm_arrow_53a1af3cea27ea23345a927a2d8e0968 () Term)
(declare-fun X64.Vale.Decls.va_is_src_register_int@tok () Term)

; </end encoding let va_is_src_register_int>


; <Start encoding let va_is_dst_register>

(declare-fun X64.Vale.Decls.va_is_dst_register (Term Term) Term)

(declare-fun X64.Vale.Decls.va_is_dst_register@tok () Term)

; </end encoding let va_is_dst_register>


; <Start encoding let va_is_src_shift_amt_uint64>

(declare-fun X64.Vale.Decls.va_is_src_shift_amt_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: X64.Vale.State_i.state -> Prims.logical
(declare-fun Tm_arrow_41df9b1356c81aaa4f1d2df677641024 () Term)
(declare-fun X64.Vale.Decls.va_is_src_shift_amt_uint64@tok () Term)

; </end encoding let va_is_src_shift_amt_uint64>


; <Start encoding let va_is_src_reg_operand_uint64>

(declare-fun X64.Vale.Decls.va_is_src_reg_operand_uint64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_is_src_reg_operand_uint64@tok () Term)

; </end encoding let va_is_src_reg_operand_uint64>


; <Start encoding let valid_src_addr>

(declare-fun X64.Vale.Decls.valid_src_addr (Term Term) Term)
;;;;;;;;;;;;;;;;m: FStar.Map.t Prims.int X64.Machine_s.nat64 -> addr: Prims.int -> Prims.bool
(declare-fun Tm_arrow_fe138ecbb32b85b7d497df854cabc635 () Term)
(declare-fun X64.Vale.Decls.valid_src_addr@tok () Term)

; </end encoding let valid_src_addr>


; <Start encoding let valid_dst_addr>

(declare-fun X64.Vale.Decls.valid_dst_addr (Term Term) Term)

(declare-fun X64.Vale.Decls.valid_dst_addr@tok () Term)

; </end encoding let valid_dst_addr>


; <Start encoding let va_get_ok>

(declare-fun X64.Vale.Decls.va_get_ok (Term) Term)

(declare-fun X64.Vale.Decls.va_get_ok@tok () Term)

; </end encoding let va_get_ok>


; <Start encoding let va_get_flags>

(declare-fun X64.Vale.Decls.va_get_flags (Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> Prims.int
(declare-fun Tm_arrow_66985c8e727e167be06605c0deec1c0b () Term)
(declare-fun X64.Vale.Decls.va_get_flags@tok () Term)

; </end encoding let va_get_flags>


; <Start encoding let va_get_reg>

(declare-fun X64.Vale.Decls.va_get_reg (Term Term) Term)

(declare-fun X64.Vale.Decls.va_get_reg@tok () Term)


; </end encoding let va_get_reg>


; <Start encoding let va_get_mem>

(declare-fun X64.Vale.Decls.va_get_mem (Term) Term)

(declare-fun X64.Vale.Decls.va_get_mem@tok () Term)

; </end encoding let va_get_mem>


; <Start encoding let get_reg>

(declare-fun X64.Vale.Decls.get_reg (Term) Term)
;;;;;;;;;;;;;;;;o: va_reg_operand -> X64.Machine_s.reg
(declare-fun Tm_arrow_f2f2dbe7c8af28ef8c507d9cf96507e1 () Term)
(declare-fun X64.Vale.Decls.get_reg@tok () Term)

; </end encoding let get_reg>


; <Start encoding let va_update_ok>

(declare-fun X64.Vale.Decls.va_update_ok (Term Term) Term)
;;;;;;;;;;;;;;;;sM: X64.Vale.State_i.state -> sK: X64.Vale.State_i.state -> X64.Vale.State_i.state
(declare-fun Tm_arrow_c1938f16b2804d6f101ecfc22aec675a () Term)
(declare-fun X64.Vale.Decls.va_update_ok@tok () Term)

; </end encoding let va_update_ok>


; <Start encoding let va_update_flags>

(declare-fun X64.Vale.Decls.va_update_flags (Term Term) Term)

(declare-fun X64.Vale.Decls.va_update_flags@tok () Term)

; </end encoding let va_update_flags>


; <Start encoding let va_update_reg>

(declare-fun X64.Vale.Decls.va_update_reg (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> sM: X64.Vale.State_i.state -> sK: X64.Vale.State_i.state   -> X64.Vale.State_i.state
(declare-fun Tm_arrow_fcba9a89206975d16b163c13dfe5b59c () Term)
(declare-fun X64.Vale.Decls.va_update_reg@tok () Term)


; </end encoding let va_update_reg>


; <Start encoding let va_update_mem>

(declare-fun X64.Vale.Decls.va_update_mem (Term Term) Term)

(declare-fun X64.Vale.Decls.va_update_mem@tok () Term)

; </end encoding let va_update_mem>


; <Start encoding let va_update_operand>

(declare-fun X64.Vale.Decls.va_update_operand (Term Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> sM: X64.Vale.State_i.state -> sK: X64.Vale.State_i.state   -> X64.Vale.State_i.state
(declare-fun Tm_arrow_7cee2980a379ade28350360cd23a3f86 () Term)
(declare-fun X64.Vale.Decls.va_update_operand@tok () Term)


; </end encoding let va_update_operand>


; <Start encoding let va_update_dst_operand>

(declare-fun X64.Vale.Decls.va_update_dst_operand (Term Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.dst_op -> sM: X64.Vale.State_i.state -> sK: X64.Vale.State_i.state   -> X64.Vale.State_i.state
(declare-fun Tm_arrow_8f574ea8bcfa5e32baed217416f2ad17 () Term)
(declare-fun X64.Vale.Decls.va_update_dst_operand@tok () Term)

; </end encoding let va_update_dst_operand>


; <Start encoding let va_update_register>

(declare-fun X64.Vale.Decls.va_update_register (Term Term Term) Term)

(declare-fun X64.Vale.Decls.va_update_register@tok () Term)


; </end encoding let va_update_register>


; <Start encoding let va_eval_operand_uint64>

(declare-fun X64.Vale.Decls.va_eval_operand_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> o: X64.Machine_s.operand -> X64.Machine_s.nat64
(declare-fun Tm_arrow_93bdf1b24530ef03748c738ef04456f1 () Term)
(declare-fun X64.Vale.Decls.va_eval_operand_uint64@tok () Term)

; </end encoding let va_eval_operand_uint64>


; <Start encoding let va_eval_dst_operand_uint64>

(declare-fun X64.Vale.Decls.va_eval_dst_operand_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> o: X64.Machine_s.dst_op -> X64.Machine_s.nat64
(declare-fun Tm_arrow_db8789434c3ff029af76c004008ae61d () Term)
(declare-fun X64.Vale.Decls.va_eval_dst_operand_uint64@tok () Term)

; </end encoding let va_eval_dst_operand_uint64>


; <Start encoding let va_eval_shift_amt_uint64>

(declare-fun X64.Vale.Decls.va_eval_shift_amt_uint64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_eval_shift_amt_uint64@tok () Term)

; </end encoding let va_eval_shift_amt_uint64>


; <Start encoding let va_eval_cmp_uint64>

(declare-fun X64.Vale.Decls.va_eval_cmp_uint64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_eval_cmp_uint64@tok () Term)

; </end encoding let va_eval_cmp_uint64>


; <Start encoding let va_eval_register_uint64>

(declare-fun X64.Vale.Decls.va_eval_register_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> r: X64.Machine_s.reg -> X64.Machine_s.nat64
(declare-fun Tm_arrow_8c36d14ebf181d14d1e68388f02fb23f () Term)
(declare-fun X64.Vale.Decls.va_eval_register_uint64@tok () Term)


; </end encoding let va_eval_register_uint64>


; <Start encoding let va_eval_reg_operand_uint64>

(declare-fun X64.Vale.Decls.va_eval_reg_operand_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> o: va_reg_operand -> X64.Machine_s.nat64
(declare-fun Tm_arrow_16382541e8fe9ebb3b2f1438a67faddb () Term)
(declare-fun X64.Vale.Decls.va_eval_reg_operand_uint64@tok () Term)


; </end encoding let va_eval_reg_operand_uint64>


; <Start encoding let va_CNil>

(declare-fun X64.Vale.Decls.va_CNil (Term) Term)
;;;;;;;;;;;;;;;;_: Prims.unit -> Prims.list (X64.Machine_s.precode ins ocmp)
(declare-fun Tm_arrow_8758c894a5b624ef92a96c49e04a078d () Term)
(declare-fun X64.Vale.Decls.va_CNil@tok () Term)

; </end encoding let va_CNil>


; <Start encoding let va_CCons>

(declare-fun X64.Vale.Decls.va_CCons (Term Term) Term)
;;;;;;;;;;;;;;;;hd: X64.Machine_s.precode ins ocmp -> tl: Prims.list (X64.Machine_s.precode ins ocmp)   -> Prims.list (X64.Machine_s.precode ins ocmp)
(declare-fun Tm_arrow_2dd3084b4f3ae76522fe3f0bd203c0e5 () Term)
(declare-fun X64.Vale.Decls.va_CCons@tok () Term)

; </end encoding let va_CCons>


; <Start encoding let va_Block>

(declare-fun X64.Vale.Decls.va_Block (Term) Term)
;;;;;;;;;;;;;;;;block: Prims.list (X64.Machine_s.precode ins ocmp) -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_794df35a42ae6f11413f1caf2c5d260c () Term)
(declare-fun X64.Vale.Decls.va_Block@tok () Term)

; </end encoding let va_Block>


; <Start encoding let va_IfElse>

(declare-fun X64.Vale.Decls.va_IfElse (Term Term Term) Term)
;;;;;;;;;;;;;;;;ifCond: ocmp -> ifTrue: X64.Machine_s.precode ins ocmp -> ifFalse: X64.Machine_s.precode ins ocmp   -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_82b470facc0ae37438dfb4ff1bdc2346 () Term)
(declare-fun X64.Vale.Decls.va_IfElse@tok () Term)

; </end encoding let va_IfElse>


; <Start encoding let va_While>

(declare-fun X64.Vale.Decls.va_While (Term Term) Term)
;;;;;;;;;;;;;;;;whileCond: ocmp -> whileBody: X64.Machine_s.precode ins ocmp -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_e10689cd0e356362e6ca1741ef197bcd () Term)
(declare-fun X64.Vale.Decls.va_While@tok () Term)

; </end encoding let va_While>


; <Start encoding val X64.Vale.Decls.va_cmp_eq>

(declare-fun X64.Vale.Decls.va_cmp_eq (Term Term) Term)
;;;;;;;;;;;;;;;;o1: X64.Machine_s.operand -> o2: X64.Machine_s.operand -> ocmp
(declare-fun Tm_arrow_e5743174a424f30a4031dc4e7b642fba () Term)
(declare-fun X64.Vale.Decls.va_cmp_eq@tok () Term)

; </end encoding val X64.Vale.Decls.va_cmp_eq>


; <Start encoding val X64.Vale.Decls.va_cmp_ne>

(declare-fun X64.Vale.Decls.va_cmp_ne (Term Term) Term)

(declare-fun X64.Vale.Decls.va_cmp_ne@tok () Term)

; </end encoding val X64.Vale.Decls.va_cmp_ne>


; <Start encoding val X64.Vale.Decls.va_cmp_le>

(declare-fun X64.Vale.Decls.va_cmp_le (Term Term) Term)

(declare-fun X64.Vale.Decls.va_cmp_le@tok () Term)

; </end encoding val X64.Vale.Decls.va_cmp_le>


; <Start encoding val X64.Vale.Decls.va_cmp_ge>

(declare-fun X64.Vale.Decls.va_cmp_ge (Term Term) Term)

(declare-fun X64.Vale.Decls.va_cmp_ge@tok () Term)

; </end encoding val X64.Vale.Decls.va_cmp_ge>


; <Start encoding val X64.Vale.Decls.va_cmp_lt>

(declare-fun X64.Vale.Decls.va_cmp_lt (Term Term) Term)

(declare-fun X64.Vale.Decls.va_cmp_lt@tok () Term)

; </end encoding val X64.Vale.Decls.va_cmp_lt>


; <Start encoding val X64.Vale.Decls.va_cmp_gt>

(declare-fun X64.Vale.Decls.va_cmp_gt (Term Term) Term)

(declare-fun X64.Vale.Decls.va_cmp_gt@tok () Term)

; </end encoding val X64.Vale.Decls.va_cmp_gt>


; <Start encoding let va_get_block>

(declare-fun Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d () Term)
(declare-fun X64.Vale.Decls.va_get_block (Term) Term)

;;;;;;;;;;;;;;;;c: X64.Machine_s.precode ins ocmp {Block? c} -> Prims.list (X64.Machine_s.precode ins ocmp)
(declare-fun Tm_arrow_949b0dc173e17d723e54b38067bda6d4 () Term)
(declare-fun X64.Vale.Decls.va_get_block@tok () Term)


; </end encoding let va_get_block>


; <Start encoding let va_get_ifCond>

(declare-fun Tm_refine_c76d0c859135eb5446e64022141ee4a5 () Term)
(declare-fun X64.Vale.Decls.va_get_ifCond (Term) Term)

;;;;;;;;;;;;;;;;c: X64.Machine_s.precode ins ocmp {IfElse? c} -> ocmp
(declare-fun Tm_arrow_1cefe98fd67c56207a52acb98c919538 () Term)
(declare-fun X64.Vale.Decls.va_get_ifCond@tok () Term)


; </end encoding let va_get_ifCond>


; <Start encoding let va_get_ifTrue>


(declare-fun X64.Vale.Decls.va_get_ifTrue (Term) Term)

;;;;;;;;;;;;;;;;c: X64.Machine_s.precode ins ocmp {IfElse? c} -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_a7f9717269ac8df5a08ca0c50f1feb50 () Term)
(declare-fun X64.Vale.Decls.va_get_ifTrue@tok () Term)


; </end encoding let va_get_ifTrue>


; <Start encoding let va_get_ifFalse>


(declare-fun X64.Vale.Decls.va_get_ifFalse (Term) Term)


(declare-fun X64.Vale.Decls.va_get_ifFalse@tok () Term)


; </end encoding let va_get_ifFalse>


; <Start encoding let va_get_whileCond>

(declare-fun Tm_refine_2e7975b7c8dee73686022f97e221439e () Term)
(declare-fun X64.Vale.Decls.va_get_whileCond (Term) Term)

;;;;;;;;;;;;;;;;c: X64.Machine_s.precode ins ocmp {While? c} -> ocmp
(declare-fun Tm_arrow_2563224514e2f7d2d81f2b3bbffb03ad () Term)
(declare-fun X64.Vale.Decls.va_get_whileCond@tok () Term)


; </end encoding let va_get_whileCond>


; <Start encoding let va_get_whileBody>


(declare-fun X64.Vale.Decls.va_get_whileBody (Term) Term)

;;;;;;;;;;;;;;;;c: X64.Machine_s.precode ins ocmp {While? c} -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_0b312ef2965eb1323b576adb5fff5611 () Term)
(declare-fun X64.Vale.Decls.va_get_whileBody@tok () Term)


; </end encoding let va_get_whileBody>


; <Start encoding val X64.Vale.Decls.eval_code>

(declare-fun X64.Vale.Decls.eval_code (Term Term Term) Term)
;;;;;;;;;;;;;;;;c: X64.Machine_s.precode ins ocmp -> s0: X64.Vale.State_i.state -> s1: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_e43c7ddb2659835512e0c46474049534 () Term)
(declare-fun X64.Vale.Decls.eval_code@tok () Term)

; </end encoding val X64.Vale.Decls.eval_code>


; <Start encoding val X64.Vale.Decls.eval_while>

(declare-fun X64.Vale.Decls.eval_while (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: ocmp ->     c: X64.Machine_s.precode ins ocmp ->     n: Prims.nat ->     s0: X64.Vale.State_i.state ->     s1: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_ffd52261a122e3e20f02eef2e9d70aff () Term)
(declare-fun X64.Vale.Decls.eval_while@tok () Term)

; </end encoding val X64.Vale.Decls.eval_while>


; <Start encoding let va_state_eq>

(declare-fun X64.Vale.Decls.va_state_eq (Term Term) Term)

(declare-fun X64.Vale.Decls.va_state_eq@tok () Term)

; </end encoding let va_state_eq>


; <Start encoding let va_require>

(declare-fun X64.Vale.Decls.va_require (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;block: Prims.list (X64.Machine_s.precode ins ocmp) ->     c: X64.Machine_s.precode ins ocmp ->     s0: X64.Vale.State_i.state ->     s1: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_2f6ff5dca965882b9b47a29fafabf085 () Term)
(declare-fun X64.Vale.Decls.va_require@tok () Term)

; </end encoding let va_require>


; <Start encoding let va_ensure>

(declare-fun X64.Vale.Decls.va_ensure (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     b1: Prims.list (X64.Machine_s.precode ins ocmp) ->     s0: X64.Vale.State_i.state ->     s1: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_6925151816e3707ffd74b850c4982e13 () Term)
(declare-fun X64.Vale.Decls.va_ensure@tok () Term)

; </end encoding let va_ensure>


; <Start encoding val X64.Vale.Decls.eval_ocmp>

(declare-fun X64.Vale.Decls.eval_ocmp (Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> c: ocmp -> Prims.GTot Prims.bool
(declare-fun Tm_ghost_arrow_eddb333cb6aa0c4c13b92421fe49d3a5 () Term)
(declare-fun X64.Vale.Decls.eval_ocmp@tok () Term)

; </end encoding val X64.Vale.Decls.eval_ocmp>


; <Start encoding val X64.Vale.Decls.lemma_cmp_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_eq@tok () Term)

; </end encoding val X64.Vale.Decls.lemma_cmp_eq>


; <Start encoding val X64.Vale.Decls.lemma_cmp_ne>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_ne (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_ne@tok () Term)

; </end encoding val X64.Vale.Decls.lemma_cmp_ne>


; <Start encoding val X64.Vale.Decls.lemma_cmp_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_le@tok () Term)

; </end encoding val X64.Vale.Decls.lemma_cmp_le>


; <Start encoding val X64.Vale.Decls.lemma_cmp_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_ge@tok () Term)

; </end encoding val X64.Vale.Decls.lemma_cmp_ge>


; <Start encoding val X64.Vale.Decls.lemma_cmp_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_lt@tok () Term)

; </end encoding val X64.Vale.Decls.lemma_cmp_lt>


; <Start encoding val X64.Vale.Decls.lemma_cmp_gt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_gt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.lemma_cmp_gt@tok () Term)

; </end encoding val X64.Vale.Decls.lemma_cmp_gt>


; <Start encoding val X64.Vale.Decls.va_lemma_block>

(declare-fun X64.Vale.Decls.va_lemma_block (Term Term Term) Term)
(declare-fun Tm_refine_d55d4cb5ec14afaee177a38614af5870 (Term Term Term) Term)
;;;;;;;;;;;;;;;;b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost     (X64.Vale.State_i.state &       X64.Machine_s.precode ins ocmp &       Prims.list (X64.Machine_s.precode ins ocmp))
(declare-fun Tm_ghost_arrow_64201ebff8045a309e5ae0057207b578 () Term)
(declare-fun X64.Vale.Decls.va_lemma_block@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_block>


; <Start encoding val X64.Vale.Decls.va_lemma_empty>

(declare-fun X64.Vale.Decls.va_lemma_empty (Term Term) Term)
(declare-fun Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e (Term Term) Term)
;;;;;;;;;;;;;;;;s0: X64.Vale.State_i.state -> sN: X64.Vale.State_i.state -> Prims.Ghost X64.Vale.State_i.state
(declare-fun Tm_ghost_arrow_5cb9fb2f1d16d3db8429ada561e6cfd7 () Term)
(declare-fun X64.Vale.Decls.va_lemma_empty@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_empty>


; <Start encoding val X64.Vale.Decls.va_lemma_ifElse>

(declare-fun X64.Vale.Decls.va_lemma_ifElse (Term Term Term Term Term) Term)
(declare-fun Tm_refine_a6f275ba3f5dfe158bb961584e9af29b (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;ifb: ocmp ->     ct: X64.Machine_s.precode ins ocmp ->     cf: X64.Machine_s.precode ins ocmp ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost (Prims.bool & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_829c2937f9235a443638eb17a505ef30 () Term)
(declare-fun X64.Vale.Decls.va_lemma_ifElse@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_ifElse>


; <Start encoding let eval_while_va_code>

(declare-fun X64.Vale.Decls.eval_while_va_code (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: ocmp ->     c: X64.Machine_s.precode ins ocmp ->     n: Prims.nat ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.logical
(declare-fun Tm_arrow_8feb76b2f2e7375a5bda0e2098db0072 () Term)
(declare-fun X64.Vale.Decls.eval_while_va_code@tok () Term)

; </end encoding let eval_while_va_code>


; <Start encoding let va_whileInv>

(declare-fun X64.Vale.Decls.va_whileInv (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: ocmp ->     c: X64.Machine_s.precode ins ocmp ->     n: Prims.int ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.logical
(declare-fun Tm_arrow_98b3f3a16ce0ff4f918a2dd0dc71e98a () Term)
(declare-fun X64.Vale.Decls.va_whileInv@tok () Term)

; </end encoding let va_whileInv>


; <Start encoding val X64.Vale.Decls.va_lemma_while>

(declare-fun X64.Vale.Decls.va_lemma_while (Term Term Term Term) Term)
(declare-fun Tm_refine_bb7f699fed08f6cd2a5950279b4448a5 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: ocmp ->     c: X64.Machine_s.precode ins ocmp ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost (Prims.nat & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_7f98d986770c4419151d7c62cfc0b0e4 () Term)
(declare-fun X64.Vale.Decls.va_lemma_while@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_while>


; <Start encoding val X64.Vale.Decls.va_lemma_whileTrue>

(declare-fun X64.Vale.Decls.va_lemma_whileTrue (Term Term Term Term Term) Term)
(declare-fun Tm_refine_0aec8d3f5d873215364f145a3f9db547 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: ocmp ->     c: X64.Machine_s.precode ins ocmp ->     n: Prims.nat ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost (X64.Vale.State_i.state & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_0aa0e919c86b932cda5fd722fbae38ef () Term)
(declare-fun X64.Vale.Decls.va_lemma_whileTrue@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_whileTrue>


; <Start encoding val X64.Vale.Decls.va_lemma_whileFalse>

(declare-fun X64.Vale.Decls.va_lemma_whileFalse (Term Term Term Term) Term)
(declare-fun Tm_refine_78a50185426b780227fca0036927984c (Term Term Term) Term)
;;;;;;;;;;;;;;;;b: ocmp ->     c: X64.Machine_s.precode ins ocmp ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost X64.Vale.State_i.state
(declare-fun Tm_ghost_arrow_abc62c4a977df9f64c91f065a003d306 () Term)
(declare-fun X64.Vale.Decls.va_lemma_whileFalse@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_whileFalse>


; <Start encoding val X64.Vale.Decls.logxor64>

(declare-fun X64.Vale.Decls.logxor64 (Term Term) Term)
;;;;;;;;;;;;;;;;x: X64.Machine_s.nat64 -> y: X64.Machine_s.nat64 -> X64.Machine_s.nat64
(declare-fun Tm_arrow_6dbfd6070eb4e044bed5f2a3d4c53c3b () Term)
(declare-fun X64.Vale.Decls.logxor64@tok () Term)

; </end encoding val X64.Vale.Decls.logxor64>


; <Start encoding val X64.Vale.Decls.logand64>

(declare-fun X64.Vale.Decls.logand64 (Term Term) Term)

(declare-fun X64.Vale.Decls.logand64@tok () Term)

; </end encoding val X64.Vale.Decls.logand64>


; <Start encoding val X64.Vale.Decls.logand128>

(declare-fun X64.Vale.Decls.logand128 (Term Term) Term)
;;;;;;;;;;;;;;;;x: X64.Machine_s.nat128 -> y: X64.Machine_s.nat128 -> X64.Machine_s.nat128
(declare-fun Tm_arrow_abf44d2dabc6191a2f2579168544d388 () Term)
(declare-fun X64.Vale.Decls.logand128@tok () Term)

; </end encoding val X64.Vale.Decls.logand128>


; <Start encoding val X64.Vale.Decls.shift_left64>

(declare-fun X64.Vale.Decls.shift_left64 (Term Term) Term)

(declare-fun X64.Vale.Decls.shift_left64@tok () Term)

; </end encoding val X64.Vale.Decls.shift_left64>


; <Start encoding val X64.Vale.Decls.shift_right64>

(declare-fun X64.Vale.Decls.shift_right64 (Term Term) Term)

(declare-fun X64.Vale.Decls.shift_right64@tok () Term)

; </end encoding val X64.Vale.Decls.shift_right64>


; <Start encoding val X64.Vale.Decls.reveal_logand128>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.reveal_logand128 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.reveal_logand128@tok () Term)

; </end encoding val X64.Vale.Decls.reveal_logand128>


; <Start encoding val X64.Vale.Decls.printer>

(declare-fun X64.Vale.Decls.printer () Term)

; </end encoding val X64.Vale.Decls.printer>


; <Start encoding val X64.Vale.Decls.print_string>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.print_string (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.print_string@tok () Term)

; </end encoding val X64.Vale.Decls.print_string>


; <Start encoding val X64.Vale.Decls.print_header>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.print_header (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.print_header@tok () Term)

; </end encoding val X64.Vale.Decls.print_header>


; <Start encoding val X64.Vale.Decls.print_proc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.print_proc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.print_proc@tok () Term)

; </end encoding val X64.Vale.Decls.print_proc>


; <Start encoding val X64.Vale.Decls.print_footer>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Decls.print_footer (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Decls.print_footer@tok () Term)

; </end encoding val X64.Vale.Decls.print_footer>


; <Start encoding val X64.Vale.Decls.masm>

(declare-fun X64.Vale.Decls.masm (Dummy_sort) Term)

; </end encoding val X64.Vale.Decls.masm>


; <Start encoding val X64.Vale.Decls.gcc>

(declare-fun X64.Vale.Decls.gcc (Dummy_sort) Term)

; </end encoding val X64.Vale.Decls.gcc>


; <Start encoding val X64.Vale.Decls.va_code_Mov64>

(declare-fun X64.Vale.Decls.va_code_Mov64 (Term Term) Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> src: X64.Machine_s.operand -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_9b2ce8d49bb55f25cabee404b900e8ef () Term)
(declare-fun X64.Vale.Decls.va_code_Mov64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Mov64>


; <Start encoding val X64.Vale.Decls.va_lemma_Mov64>

(declare-fun X64.Vale.Decls.va_lemma_Mov64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_aeaf3d355722e3eefc4cf25c317d331e (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_7bbb6b2c6f260921f5516fdd845e7340 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Mov64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Mov64>


; <Start encoding val X64.Vale.Decls.va_code_Load64>

(declare-fun X64.Vale.Decls.va_code_Load64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> src: va_reg_operand -> offset: Prims.int   -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_d5d325d616f5604ec636d5103d284e65 () Term)
(declare-fun X64.Vale.Decls.va_code_Load64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Load64>


; <Start encoding val X64.Vale.Decls.va_lemma_Load64>


(declare-fun X64.Vale.Decls.va_lemma_Load64 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: va_reg_operand ->     offset: Prims.int   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_bf244e0b2a4bafc4588ca87085044071 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Load64@tok () Term)



; </end encoding val X64.Vale.Decls.va_lemma_Load64>


; <Start encoding val X64.Vale.Decls.va_code_Store64>

(declare-fun X64.Vale.Decls.va_code_Store64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;dst: va_reg_operand -> src: X64.Machine_s.operand -> offset: Prims.int   -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_563a944f8101ceddd294758c8210d434 () Term)
(declare-fun X64.Vale.Decls.va_code_Store64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Store64>


; <Start encoding val X64.Vale.Decls.va_lemma_Store64>


(declare-fun X64.Vale.Decls.va_lemma_Store64 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 (Term Term Term Term Term Term) Term)

;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: va_reg_operand ->     src: X64.Machine_s.operand ->     offset: Prims.int   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_9af17f4a285158a62970b26cac40dbf3 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Store64@tok () Term)



; </end encoding val X64.Vale.Decls.va_lemma_Store64>


; <Start encoding val X64.Vale.Decls.va_code_Add64>

(declare-fun X64.Vale.Decls.va_code_Add64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Add64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Add64>


; <Start encoding val X64.Vale.Decls.va_lemma_Add64>

(declare-fun X64.Vale.Decls.va_lemma_Add64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_3db1aabaa811281969f7efface2a2b77 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_6aa5e6ee8423870b3b3f0832b2bff101 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Add64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Add64>


; <Start encoding val X64.Vale.Decls.va_code_Add64Wrap>

(declare-fun X64.Vale.Decls.va_code_Add64Wrap (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Add64Wrap@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Add64Wrap>


; <Start encoding val X64.Vale.Decls.va_lemma_Add64Wrap>

(declare-fun X64.Vale.Decls.va_lemma_Add64Wrap (Term Term Term Term Term) Term)
(declare-fun Tm_refine_7e7d860c9a7f82e99838e098518d6f0b (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_18aa9c91c19087d03a3e76ed92c6e060 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Add64Wrap@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Add64Wrap>


; <Start encoding val X64.Vale.Decls.va_code_AddLea64>

(declare-fun X64.Vale.Decls.va_code_AddLea64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> src1: X64.Machine_s.operand -> src2: X64.Machine_s.operand   -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_cf531461156d7a66eac55ea797ad071e () Term)
(declare-fun X64.Vale.Decls.va_code_AddLea64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_AddLea64>


; <Start encoding val X64.Vale.Decls.va_lemma_AddLea64>

(declare-fun X64.Vale.Decls.va_lemma_AddLea64 (Term Term Term Term Term Term) Term)
(declare-fun Tm_refine_34d0d7a00ab418de7adcf44c5ef1e00b (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src1: X64.Machine_s.operand ->     src2: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_a16a82b03f3c1c2d19eca16d5c4abce0 () Term)
(declare-fun X64.Vale.Decls.va_lemma_AddLea64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_AddLea64>


; <Start encoding val X64.Vale.Decls.va_code_Adc64Wrap>

(declare-fun X64.Vale.Decls.va_code_Adc64Wrap (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Adc64Wrap@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Adc64Wrap>


; <Start encoding val X64.Vale.Decls.va_lemma_Adc64Wrap>

(declare-fun X64.Vale.Decls.va_lemma_Adc64Wrap (Term Term Term Term Term) Term)
(declare-fun Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_77820acf1916ab9f13326013155913ea () Term)
(declare-fun X64.Vale.Decls.va_lemma_Adc64Wrap@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Adc64Wrap>


; <Start encoding val X64.Vale.Decls.va_code_Sub64>

(declare-fun X64.Vale.Decls.va_code_Sub64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Sub64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Sub64>


; <Start encoding val X64.Vale.Decls.va_lemma_Sub64>

(declare-fun X64.Vale.Decls.va_lemma_Sub64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_e4de57c6cac2ffc6001dfb9f57c38e51 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Sub64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Sub64>


; <Start encoding val X64.Vale.Decls.va_code_Sub64Wrap>

(declare-fun X64.Vale.Decls.va_code_Sub64Wrap (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Sub64Wrap@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Sub64Wrap>


; <Start encoding val X64.Vale.Decls.va_lemma_Sub64Wrap>

(declare-fun X64.Vale.Decls.va_lemma_Sub64Wrap (Term Term Term Term Term) Term)
(declare-fun Tm_refine_559726778ca98361f70f2783f45c5270 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_720622a3b5c92a9ae64795372c0aeda2 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Sub64Wrap@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Sub64Wrap>


; <Start encoding val X64.Vale.Decls.va_code_Mul64Wrap>

(declare-fun X64.Vale.Decls.va_code_Mul64Wrap (Term) Term)
;;;;;;;;;;;;;;;;src: X64.Machine_s.operand -> X64.Machine_s.precode ins ocmp
(declare-fun Tm_arrow_48d72ee8680cb6ecab276c08a1137158 () Term)
(declare-fun X64.Vale.Decls.va_code_Mul64Wrap@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Mul64Wrap>


; <Start encoding val X64.Vale.Decls.va_lemma_Mul64Wrap>

(declare-fun X64.Vale.Decls.va_lemma_Mul64Wrap (Term Term Term Term) Term)





(declare-fun Tm_refine_bf232d3bec88d8127293677ade6212f6 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_5bfc832d144c1c7af03194575834feb9 () Term)
(declare-fun X64.Vale.Decls.va_lemma_Mul64Wrap@tok () Term)







; </end encoding val X64.Vale.Decls.va_lemma_Mul64Wrap>


; <Start encoding val X64.Vale.Decls.va_code_IMul64>

(declare-fun X64.Vale.Decls.va_code_IMul64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_IMul64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_IMul64>


; <Start encoding val X64.Vale.Decls.va_lemma_IMul64>

(declare-fun X64.Vale.Decls.va_lemma_IMul64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_432928d5ebcfc11189e56c5c97f803b7 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_978403e06ad71ec12617b3196310d4de () Term)
(declare-fun X64.Vale.Decls.va_lemma_IMul64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_IMul64>


; <Start encoding val X64.Vale.Decls.va_code_Xor64>

(declare-fun X64.Vale.Decls.va_code_Xor64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Xor64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Xor64>


; <Start encoding val X64.Vale.Decls.va_lemma_Xor64>

(declare-fun X64.Vale.Decls.va_lemma_Xor64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_6b7230703beb0f7a43f62446a9860819 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_91837659e6ea988df2f188963ce85a4a () Term)
(declare-fun X64.Vale.Decls.va_lemma_Xor64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Xor64>


; <Start encoding val X64.Vale.Decls.va_code_And64>

(declare-fun X64.Vale.Decls.va_code_And64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_And64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_And64>


; <Start encoding val X64.Vale.Decls.va_lemma_And64>

(declare-fun X64.Vale.Decls.va_lemma_And64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     src: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_ffda30282663a52eb24e6ccd3a9bdeef () Term)
(declare-fun X64.Vale.Decls.va_lemma_And64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_And64>


; <Start encoding val X64.Vale.Decls.va_code_Shl64>

(declare-fun X64.Vale.Decls.va_code_Shl64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Shl64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Shl64>


; <Start encoding val X64.Vale.Decls.va_lemma_Shl64>

(declare-fun X64.Vale.Decls.va_lemma_Shl64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_e993649622bd58e435fa7b3532b07690 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     amt: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_ef5418edeaab8dbec2aa48efc7e9cb6c () Term)
(declare-fun X64.Vale.Decls.va_lemma_Shl64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Shl64>


; <Start encoding val X64.Vale.Decls.va_code_Shr64>

(declare-fun X64.Vale.Decls.va_code_Shr64 (Term Term) Term)

(declare-fun X64.Vale.Decls.va_code_Shr64@tok () Term)

; </end encoding val X64.Vale.Decls.va_code_Shr64>


; <Start encoding val X64.Vale.Decls.va_lemma_Shr64>

(declare-fun X64.Vale.Decls.va_lemma_Shr64 (Term Term Term Term Term) Term)
(declare-fun Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;va_b0: Prims.list (X64.Machine_s.precode ins ocmp) ->     va_s0: X64.Vale.State_i.state ->     va_sN: X64.Vale.State_i.state ->     dst: X64.Machine_s.dst_op ->     amt: X64.Machine_s.operand   -> Prims.Ghost (Prims.list (X64.Machine_s.precode ins ocmp) & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_7b905fab31954674f760ec6d3fff1e3f () Term)
(declare-fun X64.Vale.Decls.va_lemma_Shr64@tok () Term)


; </end encoding val X64.Vale.Decls.va_lemma_Shr64>


; End Externals for interface X64.Vale.Decls

(push) ;; push{1

; Internals for X64.Vale.StrongPost_i


; encoding sigelt #reset-options "--initial_fuel 1 --max_fuel 1 --initial_ifuel 1 --max_ifuel 1 --z3rlimit 20"


; <Skipped #reset-options "--initial_fuel 1 --max_fuel 1 --initial_ifuel 1 --max_ifuel 1 --z3rlimit 20"/>


; encoding sigelt val X64.Vale.StrongPost_i.empty


; <Skipped val X64.Vale.StrongPost_i.empty/>


; encoding sigelt let empty


; <Start encoding let empty>

(declare-fun X64.Vale.StrongPost_i.empty (Dummy_sort) Term)

; </end encoding let empty>

(push) ;; push{2

; tc_inductive

(push) ;; push{3

; haseq


; encoding sigelt type X64.Vale.StrongPost_i.ins


; <Start encoding type X64.Vale.StrongPost_i.ins>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.ins () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Mov64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Mov64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Mov64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Mov64
(declare-fun X64.Vale.StrongPost_i.Mov64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Load64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Load64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Load64_src (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Load64_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Load64
(declare-fun X64.Vale.StrongPost_i.Load64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Store64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Store64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Store64_src (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Store64_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Store64
(declare-fun X64.Vale.StrongPost_i.Store64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Add64Wrap (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Add64Wrap_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Add64Wrap_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Add64Wrap
(declare-fun X64.Vale.StrongPost_i.Add64Wrap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Adc64Wrap
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Mul64Wrap (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Mul64Wrap_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Mul64Wrap
(declare-fun X64.Vale.StrongPost_i.Mul64Wrap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.IMul64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.IMul64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.IMul64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.IMul64
(declare-fun X64.Vale.StrongPost_i.IMul64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.And64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.And64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.And64_amt (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.And64
(declare-fun X64.Vale.StrongPost_i.And64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Shr64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Shr64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Shr64_amt (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Shr64
(declare-fun X64.Vale.StrongPost_i.Shr64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Sub64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Sub64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Sub64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Sub64
(declare-fun X64.Vale.StrongPost_i.Sub64@tok () Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.operand -> src: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_98b25ebcd44210e4fb2a65b53dafa6fe () Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.operand -> src: X64.Machine_s.operand -> offset: Prims.int -> ins
(declare-fun Tm_arrow_c4c1e49b6bbab44bccd1ab537dab084a () Term)



;;;;;;;;;;;;;;;;src: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_5a8cd21bc0b9bd804f521ebff6cc2c71 () Term)





; <start constructor X64.Vale.StrongPost_i.ins>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.ins ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
159)
(= __@x0
X64.Vale.StrongPost_i.ins)))

; </end constructor X64.Vale.StrongPost_i.ins>


; <start constructor X64.Vale.StrongPost_i.Mov64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Mov64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(= __@x0
(X64.Vale.StrongPost_i.Mov64 (X64.Vale.StrongPost_i.Mov64_dst __@x0)
(X64.Vale.StrongPost_i.Mov64_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Mov64>


; <start constructor X64.Vale.StrongPost_i.Load64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Load64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
170)
(= __@x0
(X64.Vale.StrongPost_i.Load64 (X64.Vale.StrongPost_i.Load64_dst __@x0)
(X64.Vale.StrongPost_i.Load64_src __@x0)
(X64.Vale.StrongPost_i.Load64_offset __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Load64>


; <start constructor X64.Vale.StrongPost_i.Store64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Store64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
175)
(= __@x0
(X64.Vale.StrongPost_i.Store64 (X64.Vale.StrongPost_i.Store64_dst __@x0)
(X64.Vale.StrongPost_i.Store64_src __@x0)
(X64.Vale.StrongPost_i.Store64_offset __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Store64>


; <start constructor X64.Vale.StrongPost_i.Add64Wrap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Add64Wrap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
180)
(= __@x0
(X64.Vale.StrongPost_i.Add64Wrap (X64.Vale.StrongPost_i.Add64Wrap_dst __@x0)
(X64.Vale.StrongPost_i.Add64Wrap_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Add64Wrap>


; <start constructor X64.Vale.StrongPost_i.Adc64Wrap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Adc64Wrap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
185)
(= __@x0
(X64.Vale.StrongPost_i.Adc64Wrap (X64.Vale.StrongPost_i.Adc64Wrap_dst __@x0)
(X64.Vale.StrongPost_i.Adc64Wrap_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Adc64Wrap>


; <start constructor X64.Vale.StrongPost_i.Mul64Wrap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Mul64Wrap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
190)
(= __@x0
(X64.Vale.StrongPost_i.Mul64Wrap (X64.Vale.StrongPost_i.Mul64Wrap_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Mul64Wrap>


; <start constructor X64.Vale.StrongPost_i.IMul64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.IMul64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
195)
(= __@x0
(X64.Vale.StrongPost_i.IMul64 (X64.Vale.StrongPost_i.IMul64_dst __@x0)
(X64.Vale.StrongPost_i.IMul64_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.IMul64>


; <start constructor X64.Vale.StrongPost_i.And64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.And64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
200)
(= __@x0
(X64.Vale.StrongPost_i.And64 (X64.Vale.StrongPost_i.And64_dst __@x0)
(X64.Vale.StrongPost_i.And64_amt __@x0)))))

; </end constructor X64.Vale.StrongPost_i.And64>


; <start constructor X64.Vale.StrongPost_i.Shr64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Shr64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
205)
(= __@x0
(X64.Vale.StrongPost_i.Shr64 (X64.Vale.StrongPost_i.Shr64_dst __@x0)
(X64.Vale.StrongPost_i.Shr64_amt __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Shr64>


; <start constructor X64.Vale.StrongPost_i.Sub64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Sub64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
210)
(= __@x0
(X64.Vale.StrongPost_i.Sub64 (X64.Vale.StrongPost_i.Sub64_dst __@x0)
(X64.Vale.StrongPost_i.Sub64_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Sub64>


; </end encoding type X64.Vale.StrongPost_i.ins>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.lemma_mref_injectivity
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
:named function_token_typing_FStar.Monotonic.Heap.lemma_mref_injectivity))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.lemma_mref_injectivity
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
:named typing_FStar.Monotonic.Heap.lemma_mref_injectivity))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rsp@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rsi@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rdx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rdi@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rcx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rbx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rbp@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rax@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R9@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R8@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R15@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R14@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R13@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R12@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R11@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R10@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.valid_dst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(65,4-65,13); use=X64.Machine_s.fst(65,4-65,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.valid_dst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.valid_dst @x0))
:qid typing_X64.Machine_s.valid_dst))

:named typing_X64.Machine_s.valid_dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_Rsp; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.reg)
(HasType (X64.Machine_s.uu___is_Rsp @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_Rsp @x0))
:qid typing_X64.Machine_s.uu___is_Rsp))

:named typing_X64.Machine_s.uu___is_Rsp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OReg @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OReg @x0))
:qid typing_X64.Machine_s.uu___is_OReg))

:named typing_X64.Machine_s.uu___is_OReg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OMem @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OMem @x0))
:qid typing_X64.Machine_s.uu___is_OMem))

:named typing_X64.Machine_s.uu___is_OMem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OConst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OConst @x0))
:qid typing_X64.Machine_s.uu___is_OConst))

:named typing_X64.Machine_s.uu___is_OConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MReg @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MReg @x0))
:qid typing_X64.Machine_s.uu___is_MReg))

:named typing_X64.Machine_s.uu___is_MReg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MIndex @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MIndex @x0))
:qid typing_X64.Machine_s.uu___is_MIndex))

:named typing_X64.Machine_s.uu___is_MIndex))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MConst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MConst @x0))
:qid typing_X64.Machine_s.uu___is_MConst))

:named typing_X64.Machine_s.uu___is_MConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,10-56,11); use=X64.Machine_s.fst(56,10-56,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
(HasType (X64.Machine_s.__proj__OReg__item__r @x0)
X64.Machine_s.reg))
 

:pattern ((X64.Machine_s.__proj__OReg__item__r @x0))
:qid typing_X64.Machine_s.__proj__OReg__item__r))

:named typing_X64.Machine_s.__proj__OReg__item__r))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.transitive @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.transitive @x0
@x1))
:qid typing_FStar.Preorder.transitive))

:named typing_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.relation @x0)
Tm_type))
 

:pattern ((FStar.Preorder.relation @x0))
:qid typing_FStar.Preorder.relation))

:named typing_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.reflexive @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.reflexive @x0
@x1))
:qid typing_FStar.Preorder.reflexive))

:named typing_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.preorder_rel @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.preorder_rel @x0
@x1))
:qid typing_FStar.Preorder.preorder_rel))

:named typing_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,5-33,13); use=FStar.Preorder.fst(33,5-33,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.preorder @x0)
Tm_type))
 

:pattern ((FStar.Preorder.preorder @x0))
:qid typing_FStar.Preorder.preorder))

:named typing_FStar.Preorder.preorder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(41,4-41,8); use=FStar.Monotonic.Heap.fsti(41,4-41,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0)))
(HasType (FStar.Monotonic.Heap.mref @x0
@x1)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.mref @x0
@x1))
:qid typing_FStar.Monotonic.Heap.mref))

:named typing_FStar.Monotonic.Heap.mref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Monotonic.Heap.core_mref @x0)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.core_mref @x0))
:qid typing_FStar.Monotonic.Heap.core_mref))

:named typing_FStar.Monotonic.Heap.core_mref))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Sub64))

:named subterm_ordering_X64.Vale.StrongPost_i.Sub64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Store64))

:named subterm_ordering_X64.Vale.StrongPost_i.Store64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Shr64))

:named subterm_ordering_X64.Vale.StrongPost_i.Shr64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Mul64Wrap @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Mul64Wrap))

:named subterm_ordering_X64.Vale.StrongPost_i.Mul64Wrap))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Mov64))

:named subterm_ordering_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Load64))

:named subterm_ordering_X64.Vale.StrongPost_i.Load64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.IMul64))

:named subterm_ordering_X64.Vale.StrongPost_i.IMul64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.And64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.And64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.And64))

:named subterm_ordering_X64.Vale.StrongPost_i.And64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Add64Wrap))

:named subterm_ordering_X64.Vale.StrongPost_i.Add64Wrap))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Adc64Wrap))

:named subterm_ordering_X64.Vale.StrongPost_i.Adc64Wrap))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OReg @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OReg))

:named subterm_ordering_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OMem @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OMem))

:named subterm_ordering_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OConst))

:named subterm_ordering_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MReg @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Machine_s.MReg @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MReg))

:named subterm_ordering_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MIndex))

:named subterm_ordering_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MConst))

:named subterm_ordering_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_e85c4468bd6fa895770a44e5ae1526dc
Tm_type)
:named refinement_kinding_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_e1adf49e5e772ddffa19181e1a812a81
Tm_type)
:named refinement_kinding_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named refinement_kinding_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a
Tm_type)
:named refinement_kinding_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_ad649c559db000bf1dd08bb4e261413e
Tm_type)
:named refinement_kinding_Tm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8
Tm_type)
:named refinement_kinding_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_7c9e5bdb9582a858897946d48f9f4d58
Tm_type)
:named refinement_kinding_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_49b6b7afc081bac09ce40febdab68891
Tm_type)
:named refinement_kinding_Tm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_op_dst_operand_reg; Namespace X64.Vale.Decls
(assert (! (HasType Tm_refine_2ef22b5edaec67adad91f2b28dd82703
Tm_type)
:named refinement_kinding_Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6
Tm_type)
:named refinement_kinding_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125
Tm_type)
:named refinement_kinding_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(68,14-68,36); use=X64.Machine_s.fst(68,14-68,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Machine_s.fst(68,24-68,35)
(BoxBool_proj_0 (X64.Machine_s.valid_dst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
:qid refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))

:named refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(207,3-207,136); use=FStar.Monotonic.Heap.fsti(207,3-207,136)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Monotonic.Heap.fsti(207,11-207,134); use=FStar.Monotonic.Heap.fsti(207,11-207,134)
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Preorder.preorder @x2))
(HasType @x5
(FStar.Preorder.preorder @x3))
(HasType @x6
(FStar.Monotonic.Heap.mref @x2
@x4))
(HasType @x7
(FStar.Monotonic.Heap.mref @x3
@x5))

;; def=FStar.Monotonic.Heap.fsti(207,109-207,116); use=FStar.Monotonic.Heap.fsti(207,109-207,116)
(not 
;; def=FStar.Monotonic.Heap.fsti(207,109-207,116); use=FStar.Monotonic.Heap.fsti(207,109-207,116)
(= @x2
@x3)
)
)

;; def=FStar.Monotonic.Heap.fsti(207,121-207,134); use=FStar.Monotonic.Heap.fsti(207,121-207,134)
(not 
;; def=FStar.Monotonic.Heap.fsti(207,123-207,134); use=FStar.Monotonic.Heap.fsti(207,123-207,134)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(207,123-207,134); use=FStar.Monotonic.Heap.fsti(207,123-207,134)
(Prims.op_Equals_Equals_Equals (FStar.Monotonic.Heap.mref @x2
@x4)
(FStar.Monotonic.Heap.mref @x3
@x5)
@x6
@x7)
)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
:qid refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))

:named refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Preorder.relation @x2))

;; def=FStar.Preorder.fst(33,40-33,56); use=FStar.Preorder.fst(33,40-33,56)
(Valid 
;; def=FStar.Preorder.fst(33,40-33,56); use=FStar.Preorder.fst(33,40-33,56)
(FStar.Preorder.preorder_rel @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x2)))
:qid refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=Prims.fst(680,11-683,23); use=Prims.fst(680,11-683,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-683,23); use=Prims.fst(680,18-683,23)
(or 
;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
:qid refinement_interpretation_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))

:named refinement_interpretation_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ad649c559db000bf1dd08bb4e261413e)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ad649c559db000bf1dd08bb4e261413e))
:qid refinement_interpretation_Tm_refine_ad649c559db000bf1dd08bb4e261413e))

:named refinement_interpretation_Tm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
:qid refinement_interpretation_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))

:named refinement_interpretation_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
:qid refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))

:named refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_49b6b7afc081bac09ce40febdab68891)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_49b6b7afc081bac09ce40febdab68891))
:qid refinement_interpretation_Tm_refine_49b6b7afc081bac09ce40febdab68891))

:named refinement_interpretation_Tm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_op_dst_operand_reg; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(63,33-63,54); use=X64.Vale.Decls.fsti(63,33-63,54)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2ef22b5edaec67adad91f2b28dd82703)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(not (BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp @x1)))))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
:qid refinement_interpretation_Tm_refine_2ef22b5edaec67adad91f2b28dd82703))

:named refinement_interpretation_Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OMem @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
:qid refinement_interpretation_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))

:named refinement_interpretation_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MIndex @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
:qid refinement_interpretation_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))

:named refinement_interpretation_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Sub64_src (X64.Vale.StrongPost_i.Sub64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Sub64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Sub64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Sub64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Sub64_dst (X64.Vale.StrongPost_i.Sub64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Sub64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Sub64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Sub64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Store64_src (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Store64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Store64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Store64_offset (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Store64_offset))

:named projection_inverse_X64.Vale.StrongPost_i.Store64_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Store64_dst (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Store64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Store64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Shr64_dst (X64.Vale.StrongPost_i.Shr64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Shr64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Shr64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Shr64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Shr64_amt (X64.Vale.StrongPost_i.Shr64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Shr64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Shr64_amt))

:named projection_inverse_X64.Vale.StrongPost_i.Shr64_amt))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.Mul64Wrap_src (X64.Vale.StrongPost_i.Mul64Wrap @x0))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Mul64Wrap @x0))
:qid projection_inverse_X64.Vale.StrongPost_i.Mul64Wrap_src))

:named projection_inverse_X64.Vale.StrongPost_i.Mul64Wrap_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Mov64_src (X64.Vale.StrongPost_i.Mov64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Mov64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Mov64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Mov64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Mov64_dst (X64.Vale.StrongPost_i.Mov64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Mov64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Mov64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Mov64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Load64_src (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Load64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Load64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Load64_offset (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Load64_offset))

:named projection_inverse_X64.Vale.StrongPost_i.Load64_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Load64_dst (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Load64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Load64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.IMul64_src (X64.Vale.StrongPost_i.IMul64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.IMul64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.IMul64_src))

:named projection_inverse_X64.Vale.StrongPost_i.IMul64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.IMul64_dst (X64.Vale.StrongPost_i.IMul64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.IMul64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.IMul64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.IMul64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.And64_dst (X64.Vale.StrongPost_i.And64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.And64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.And64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.And64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.And64_amt (X64.Vale.StrongPost_i.And64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.And64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.And64_amt))

:named projection_inverse_X64.Vale.StrongPost_i.And64_amt))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Add64Wrap_src (X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_src))

:named projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Add64Wrap_dst (X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Adc64Wrap_src (X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_src))

:named projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Adc64Wrap_dst (X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OReg_r (X64.Machine_s.OReg @x0))
@x0)
 

:pattern ((X64.Machine_s.OReg @x0))
:qid projection_inverse_X64.Machine_s.OReg_r))

:named projection_inverse_X64.Machine_s.OReg_r))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OMem_m (X64.Machine_s.OMem @x0))
@x0)
 

:pattern ((X64.Machine_s.OMem @x0))
:qid projection_inverse_X64.Machine_s.OMem_m))

:named projection_inverse_X64.Machine_s.OMem_m))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OConst_n (X64.Machine_s.OConst @x0))
@x0)
 

:pattern ((X64.Machine_s.OConst @x0))
:qid projection_inverse_X64.Machine_s.OConst_n))

:named projection_inverse_X64.Machine_s.OConst_n))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Machine_s.MReg_r (X64.Machine_s.MReg @x0
@x1))
@x0)
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid projection_inverse_X64.Machine_s.MReg_r))

:named projection_inverse_X64.Machine_s.MReg_r))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Machine_s.MReg_offset (X64.Machine_s.MReg @x0
@x1))
@x1)
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid projection_inverse_X64.Machine_s.MReg_offset))

:named projection_inverse_X64.Machine_s.MReg_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_scale (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_scale))

:named projection_inverse_X64.Machine_s.MIndex_scale))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_offset (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_offset))

:named projection_inverse_X64.Machine_s.MIndex_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_index (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_index))

:named projection_inverse_X64.Machine_s.MIndex_index))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_base (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_base))

:named projection_inverse_X64.Machine_s.MIndex_base))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.MConst_n (X64.Machine_s.MConst @x0))
@x0)
 

:pattern ((X64.Machine_s.MConst @x0))
:qid projection_inverse_X64.Machine_s.MConst_n))

:named projection_inverse_X64.Machine_s.MConst_n))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,10-56,11); use=X64.Machine_s.fst(56,10-56,11)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.__proj__OReg__item__r @x0)
(X64.Machine_s.OReg_r @x0))
 

:pattern ((X64.Machine_s.__proj__OReg__item__r @x0))
:qid proj_equation_X64.Machine_s.OReg_r))

:named proj_equation_X64.Machine_s.OReg_r))
;;; Fact-ids: Name Prims.op_Negation; Namespace Prims
(assert (! 
;; def=Prims.fst(534,4-534,15); use=Prims.fst(534,4-534,15)
(forall ((@x0 Term))
 (! (= (Prims.op_Negation @x0)
(BoxBool (not (BoxBool_proj_0 @x0))))
 

:pattern ((Prims.op_Negation @x0))
:qid primitive_Prims.op_Negation))

:named primitive_Prims.op_Negation))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! (HasType X64.Vale.StrongPost_i.ins
Tm_type)
:named kinding_X64.Vale.StrongPost_i.ins@tok))
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.reg
Tm_type)
:named kinding_X64.Machine_s.reg@tok))
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.operand
Tm_type)
:named kinding_X64.Machine_s.operand@tok))
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.maddr
Tm_type)
:named kinding_X64.Machine_s.maddr@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type))
:qid kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e85c4468bd6fa895770a44e5ae1526dc
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e1adf49e5e772ddffa19181e1a812a81
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bd10f09297e0e7dc08314f7d9211801c
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)))
(Valid (Prims.hasEq (FStar.Preorder.relation @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0))))
:qid haseqTm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named haseqTm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ad649c559db000bf1dd08bb4e261413e
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ad649c559db000bf1dd08bb4e261413e))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7c9e5bdb9582a858897946d48f9f4d58
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_49b6b7afc081bac09ce40febdab68891
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_49b6b7afc081bac09ce40febdab68891))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2ef22b5edaec67adad91f2b28dd82703
;;; Fact-ids: Name X64.Vale.Decls.va_op_dst_operand_reg; Namespace X64.Vale.Decls
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
(Valid (Prims.hasEq X64.Machine_s.reg)))
:named haseqTm_refine_2ef22b5edaec67adad91f2b28dd82703))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(25,5-25,8); use=X64.Vale.StrongPost_i.fsti(25,5-25,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Vale.StrongPost_i.ins)
(or (is-X64.Vale.StrongPost_i.Mov64 @x1)
(is-X64.Vale.StrongPost_i.Load64 @x1)
(is-X64.Vale.StrongPost_i.Store64 @x1)
(is-X64.Vale.StrongPost_i.Add64Wrap @x1)
(is-X64.Vale.StrongPost_i.Adc64Wrap @x1)
(is-X64.Vale.StrongPost_i.Mul64Wrap @x1)
(is-X64.Vale.StrongPost_i.IMul64 @x1)
(is-X64.Vale.StrongPost_i.And64 @x1)
(is-X64.Vale.StrongPost_i.Shr64 @x1)
(is-X64.Vale.StrongPost_i.Sub64 @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Vale.StrongPost_i.ins))
:qid fuel_guarded_inversion_X64.Vale.StrongPost_i.ins))

:named fuel_guarded_inversion_X64.Vale.StrongPost_i.ins))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(31,5-31,8); use=X64.Machine_s.fst(31,5-31,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.reg)
(or (is-X64.Machine_s.Rax @x1)
(is-X64.Machine_s.Rbx @x1)
(is-X64.Machine_s.Rcx @x1)
(is-X64.Machine_s.Rdx @x1)
(is-X64.Machine_s.Rsi @x1)
(is-X64.Machine_s.Rdi @x1)
(is-X64.Machine_s.Rbp @x1)
(is-X64.Machine_s.Rsp @x1)
(is-X64.Machine_s.R8 @x1)
(is-X64.Machine_s.R9 @x1)
(is-X64.Machine_s.R10 @x1)
(is-X64.Machine_s.R11 @x1)
(is-X64.Machine_s.R12 @x1)
(is-X64.Machine_s.R13 @x1)
(is-X64.Machine_s.R14 @x1)
(is-X64.Machine_s.R15 @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.reg))
:qid fuel_guarded_inversion_X64.Machine_s.reg))

:named fuel_guarded_inversion_X64.Machine_s.reg))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(54,5-54,12); use=X64.Machine_s.fst(54,5-54,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.operand)
(or (is-X64.Machine_s.OConst @x1)
(is-X64.Machine_s.OReg @x1)
(is-X64.Machine_s.OMem @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.operand))
:qid fuel_guarded_inversion_X64.Machine_s.operand))

:named fuel_guarded_inversion_X64.Machine_s.operand))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(49,5-49,10); use=X64.Machine_s.fst(49,5-49,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.maddr)
(or (is-X64.Machine_s.MConst @x1)
(is-X64.Machine_s.MReg @x1)
(is-X64.Machine_s.MIndex @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.maddr))
:qid fuel_guarded_inversion_X64.Machine_s.maddr))

:named fuel_guarded_inversion_X64.Machine_s.maddr))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.valid_dst
;;; Fact-ids: Name X64.Machine_s.valid_dst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(65,4-65,13); use=X64.Machine_s.fst(65,4-65,13)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.valid_dst @x0)
(Prims.op_Negation (Prims.op_BarBar (X64.Machine_s.uu___is_OConst @x0)
(Prims.op_AmpAmp (X64.Machine_s.uu___is_OReg @x0)
(X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r @x0))))))
 

:pattern ((X64.Machine_s.valid_dst @x0))
:qid equation_X64.Machine_s.valid_dst))

:named equation_X64.Machine_s.valid_dst))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.transitive
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.transitive @x0
@x1))

;; def=FStar.Preorder.fst(28,2-28,60); use=FStar.Preorder.fst(28,2-28,60)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
@x0)
(HasType @x3
@x0)
(HasType @x4
@x0)

;; def=FStar.Preorder.fst(28,29-28,36); use=FStar.Preorder.fst(28,29-28,36)
(Valid 
;; def=FStar.Preorder.fst(28,29-28,36); use=FStar.Preorder.fst(28,29-28,36)
(ApplyTT (ApplyTT @x1
@x2)
@x3)
)


;; def=FStar.Preorder.fst(28,40-28,47); use=FStar.Preorder.fst(28,40-28,47)
(Valid 
;; def=FStar.Preorder.fst(28,40-28,47); use=FStar.Preorder.fst(28,40-28,47)
(ApplyTT (ApplyTT @x1
@x3)
@x4)
)
)

;; def=FStar.Preorder.fst(28,53-28,60); use=FStar.Preorder.fst(28,53-28,60)
(Valid 
;; def=FStar.Preorder.fst(28,53-28,60); use=FStar.Preorder.fst(28,53-28,60)
(ApplyTT (ApplyTT @x1
@x2)
@x4)
)
)
 
;;no pats
:qid equation_FStar.Preorder.transitive.1))
)
 

:pattern ((FStar.Preorder.transitive @x0
@x1))
:qid equation_FStar.Preorder.transitive))

:named equation_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.relation
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.relation @x0)
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0))
 

:pattern ((FStar.Preorder.relation @x0))
:qid equation_FStar.Preorder.relation))

:named equation_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.reflexive
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.reflexive @x0
@x1))

;; def=FStar.Preorder.fst(25,2-25,23); use=FStar.Preorder.fst(25,2-25,23)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)

;; def=FStar.Preorder.fst(25,16-25,23); use=FStar.Preorder.fst(25,16-25,23)
(Valid 
;; def=FStar.Preorder.fst(25,16-25,23); use=FStar.Preorder.fst(25,16-25,23)
(ApplyTT (ApplyTT @x1
@x2)
@x2)
)
)
 
;;no pats
:qid equation_FStar.Preorder.reflexive.1))
)
 

:pattern ((FStar.Preorder.reflexive @x0
@x1))
:qid equation_FStar.Preorder.reflexive))

:named equation_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.preorder_rel
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.preorder_rel @x0
@x1))

;; def=FStar.Preorder.fst(31,2-31,33); use=FStar.Preorder.fst(31,2-31,33)
(and 
;; def=FStar.Preorder.fst(31,2-31,15); use=FStar.Preorder.fst(31,2-31,15)
(Valid 
;; def=FStar.Preorder.fst(31,2-31,15); use=FStar.Preorder.fst(31,2-31,15)
(FStar.Preorder.reflexive @x0
@x1)
)


;; def=FStar.Preorder.fst(31,19-31,33); use=FStar.Preorder.fst(31,19-31,33)
(Valid 
;; def=FStar.Preorder.fst(31,19-31,33); use=FStar.Preorder.fst(31,19-31,33)
(FStar.Preorder.transitive @x0
@x1)
)
)
)
 

:pattern ((FStar.Preorder.preorder_rel @x0
@x1))
:qid equation_FStar.Preorder.preorder_rel))

:named equation_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.preorder
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,5-33,13); use=FStar.Preorder.fst(33,5-33,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.preorder @x0)
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0))
 

:pattern ((FStar.Preorder.preorder @x0))
:qid equation_FStar.Preorder.preorder))

:named equation_FStar.Preorder.preorder))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.mref
;;; Fact-ids: Name FStar.Monotonic.Heap.mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(41,4-41,8); use=FStar.Monotonic.Heap.fsti(41,4-41,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Monotonic.Heap.mref @x0
@x1)
(FStar.Monotonic.Heap.core_mref @x0))
 

:pattern ((FStar.Monotonic.Heap.mref @x0
@x1))
:qid equation_FStar.Monotonic.Heap.mref))

:named equation_FStar.Monotonic.Heap.mref))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rsp@tok
X64.Machine_s.Rsp)
:named equality_tok_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rsi@tok
X64.Machine_s.Rsi)
:named equality_tok_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rdx@tok
X64.Machine_s.Rdx)
:named equality_tok_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rdi@tok
X64.Machine_s.Rdi)
:named equality_tok_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rcx@tok
X64.Machine_s.Rcx)
:named equality_tok_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rbx@tok
X64.Machine_s.Rbx)
:named equality_tok_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rbp@tok
X64.Machine_s.Rbp)
:named equality_tok_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rax@tok
X64.Machine_s.Rax)
:named equality_tok_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R9@tok
X64.Machine_s.R9)
:named equality_tok_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R8@tok
X64.Machine_s.R8)
:named equality_tok_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R15@tok
X64.Machine_s.R15)
:named equality_tok_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R14@tok
X64.Machine_s.R14)
:named equality_tok_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R13@tok
X64.Machine_s.R13)
:named equality_tok_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R12@tok
X64.Machine_s.R12)
:named equality_tok_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R11@tok
X64.Machine_s.R11)
:named equality_tok_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R10@tok
X64.Machine_s.R10)
:named equality_tok_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_Rsp; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_Rsp @x0)
(BoxBool (is-X64.Machine_s.Rsp @x0)))
 

:pattern ((X64.Machine_s.uu___is_Rsp @x0))
:qid disc_equation_X64.Machine_s.Rsp))

:named disc_equation_X64.Machine_s.Rsp))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OReg @x0)
(BoxBool (is-X64.Machine_s.OReg @x0)))
 

:pattern ((X64.Machine_s.uu___is_OReg @x0))
:qid disc_equation_X64.Machine_s.OReg))

:named disc_equation_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OMem @x0)
(BoxBool (is-X64.Machine_s.OMem @x0)))
 

:pattern ((X64.Machine_s.uu___is_OMem @x0))
:qid disc_equation_X64.Machine_s.OMem))

:named disc_equation_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OConst @x0)
(BoxBool (is-X64.Machine_s.OConst @x0)))
 

:pattern ((X64.Machine_s.uu___is_OConst @x0))
:qid disc_equation_X64.Machine_s.OConst))

:named disc_equation_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MReg @x0)
(BoxBool (is-X64.Machine_s.MReg @x0)))
 

:pattern ((X64.Machine_s.uu___is_MReg @x0))
:qid disc_equation_X64.Machine_s.MReg))

:named disc_equation_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MIndex @x0)
(BoxBool (is-X64.Machine_s.MIndex @x0)))
 

:pattern ((X64.Machine_s.uu___is_MIndex @x0))
:qid disc_equation_X64.Machine_s.MIndex))

:named disc_equation_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MConst @x0)
(BoxBool (is-X64.Machine_s.MConst @x0)))
 

:pattern ((X64.Machine_s.uu___is_MConst @x0))
:qid disc_equation_X64.Machine_s.MConst))

:named disc_equation_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.transitive
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.transitive @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.transitive @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.transitive))

:named defn_equation_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.reflexive
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.reflexive @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.reflexive @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.reflexive))

:named defn_equation_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.preorder_rel
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.preorder_rel @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.preorder_rel @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.preorder_rel))

:named defn_equation_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Sub64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Sub64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Store64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Store64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Shr64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Shr64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Mul64Wrap@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Mul64Wrap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Mov64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Mov64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Load64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Load64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.IMul64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.IMul64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.And64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.And64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Add64Wrap@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Add64Wrap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Adc64Wrap@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Adc64Wrap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rsp
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rsp
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rsp@tok))

:named data_typing_intro_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(36,4-36,7); use=X64.Machine_s.fst(36,4-36,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rsi
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rsi
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rsi@tok))

:named data_typing_intro_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(35,4-35,7); use=X64.Machine_s.fst(35,4-35,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rdx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rdx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rdx@tok))

:named data_typing_intro_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(37,4-37,7); use=X64.Machine_s.fst(37,4-37,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rdi
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rdi
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rdi@tok))

:named data_typing_intro_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(34,4-34,7); use=X64.Machine_s.fst(34,4-34,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rcx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rcx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rcx@tok))

:named data_typing_intro_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(33,4-33,7); use=X64.Machine_s.fst(33,4-33,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rbx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rbx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rbx@tok))

:named data_typing_intro_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(38,4-38,7); use=X64.Machine_s.fst(38,4-38,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rbp
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rbp
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rbp@tok))

:named data_typing_intro_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(32,4-32,7); use=X64.Machine_s.fst(32,4-32,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rax
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rax
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rax@tok))

:named data_typing_intro_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(41,4-41,6); use=X64.Machine_s.fst(41,4-41,6)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R9
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R9
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R9@tok))

:named data_typing_intro_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(40,4-40,6); use=X64.Machine_s.fst(40,4-40,6)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R8
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R8
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R8@tok))

:named data_typing_intro_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(47,4-47,7); use=X64.Machine_s.fst(47,4-47,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R15
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R15
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R15@tok))

:named data_typing_intro_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(46,4-46,7); use=X64.Machine_s.fst(46,4-46,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R14
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R14
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R14@tok))

:named data_typing_intro_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(45,4-45,7); use=X64.Machine_s.fst(45,4-45,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R13
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R13
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R13@tok))

:named data_typing_intro_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(44,4-44,7); use=X64.Machine_s.fst(44,4-44,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R12
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R12
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R12@tok))

:named data_typing_intro_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(43,4-43,7); use=X64.Machine_s.fst(43,4-43,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R11
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R11
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R11@tok))

:named data_typing_intro_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(42,4-42,7); use=X64.Machine_s.fst(42,4-42,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R10
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R10
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R10@tok))

:named data_typing_intro_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OReg@tok))

:named data_typing_intro_X64.Machine_s.OReg@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)
(HasTypeFuel @u0
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OMem@tok))

:named data_typing_intro_X64.Machine_s.OMem@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OConst@tok))

:named data_typing_intro_X64.Machine_s.OConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int))
(HasTypeFuel @u0
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MReg@tok))

:named data_typing_intro_X64.Machine_s.MReg@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)
(HasTypeFuel @u0
@x3
X64.Machine_s.reg)
(HasTypeFuel @u0
@x4
Prims.int))
(HasTypeFuel @u0
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MIndex@tok))

:named data_typing_intro_X64.Machine_s.MIndex@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MConst@tok))

:named data_typing_intro_X64.Machine_s.MConst@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Sub64))

:named data_elim_X64.Vale.StrongPost_i.Sub64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Store64))

:named data_elim_X64.Vale.StrongPost_i.Store64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Shr64))

:named data_elim_X64.Vale.StrongPost_i.Shr64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins)
(HasTypeFuel @u0
@x1
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Mul64Wrap))

:named data_elim_X64.Vale.StrongPost_i.Mul64Wrap))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Mov64))

:named data_elim_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Load64))

:named data_elim_X64.Vale.StrongPost_i.Load64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.IMul64))

:named data_elim_X64.Vale.StrongPost_i.IMul64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.And64))

:named data_elim_X64.Vale.StrongPost_i.And64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Add64Wrap))

:named data_elim_X64.Vale.StrongPost_i.Add64Wrap))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Adc64Wrap))

:named data_elim_X64.Vale.StrongPost_i.Adc64Wrap))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
X64.Machine_s.reg))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OReg))

:named data_elim_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OMem))

:named data_elim_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OConst))

:named data_elim_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MReg))

:named data_elim_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)
(HasTypeFuel @u0
@x3
X64.Machine_s.reg)
(HasTypeFuel @u0
@x4
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MIndex))

:named data_elim_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MConst))

:named data_elim_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! (= 159
(Term_constr_id X64.Vale.StrongPost_i.ins))
:named constructor_distinct_X64.Vale.StrongPost_i.ins))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 210
(Term_constr_id (X64.Vale.StrongPost_i.Sub64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Sub64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Sub64))

:named constructor_distinct_X64.Vale.StrongPost_i.Sub64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 175
(Term_constr_id (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2)))
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid constructor_distinct_X64.Vale.StrongPost_i.Store64))

:named constructor_distinct_X64.Vale.StrongPost_i.Store64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 205
(Term_constr_id (X64.Vale.StrongPost_i.Shr64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Shr64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Shr64))

:named constructor_distinct_X64.Vale.StrongPost_i.Shr64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@x0 Term))
 (! (= 190
(Term_constr_id (X64.Vale.StrongPost_i.Mul64Wrap @x0)))
 

:pattern ((X64.Vale.StrongPost_i.Mul64Wrap @x0))
:qid constructor_distinct_X64.Vale.StrongPost_i.Mul64Wrap))

:named constructor_distinct_X64.Vale.StrongPost_i.Mul64Wrap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 165
(Term_constr_id (X64.Vale.StrongPost_i.Mov64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Mov64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Mov64))

:named constructor_distinct_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 170
(Term_constr_id (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2)))
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid constructor_distinct_X64.Vale.StrongPost_i.Load64))

:named constructor_distinct_X64.Vale.StrongPost_i.Load64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 195
(Term_constr_id (X64.Vale.StrongPost_i.IMul64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.IMul64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.IMul64))

:named constructor_distinct_X64.Vale.StrongPost_i.IMul64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 200
(Term_constr_id (X64.Vale.StrongPost_i.And64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.And64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.And64))

:named constructor_distinct_X64.Vale.StrongPost_i.And64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= 180
(Term_constr_id (X64.Vale.StrongPost_i.Add64Wrap @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Add64Wrap))

:named constructor_distinct_X64.Vale.StrongPost_i.Add64Wrap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= 185
(Term_constr_id (X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Adc64Wrap))

:named constructor_distinct_X64.Vale.StrongPost_i.Adc64Wrap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 107
(Term_constr_id X64.Machine_s.reg))
:named constructor_distinct_X64.Machine_s.reg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! (= 230
(Term_constr_id X64.Machine_s.operand))
:named constructor_distinct_X64.Machine_s.operand))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! (= 176
(Term_constr_id X64.Machine_s.maddr))
:named constructor_distinct_X64.Machine_s.maddr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 127
(Term_constr_id X64.Machine_s.Rsp))
:named constructor_distinct_X64.Machine_s.Rsp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 121
(Term_constr_id X64.Machine_s.Rsi))
:named constructor_distinct_X64.Machine_s.Rsi))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 119
(Term_constr_id X64.Machine_s.Rdx))
:named constructor_distinct_X64.Machine_s.Rdx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 123
(Term_constr_id X64.Machine_s.Rdi))
:named constructor_distinct_X64.Machine_s.Rdi))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 117
(Term_constr_id X64.Machine_s.Rcx))
:named constructor_distinct_X64.Machine_s.Rcx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 115
(Term_constr_id X64.Machine_s.Rbx))
:named constructor_distinct_X64.Machine_s.Rbx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 125
(Term_constr_id X64.Machine_s.Rbp))
:named constructor_distinct_X64.Machine_s.Rbp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 113
(Term_constr_id X64.Machine_s.Rax))
:named constructor_distinct_X64.Machine_s.Rax))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 131
(Term_constr_id X64.Machine_s.R9))
:named constructor_distinct_X64.Machine_s.R9))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 129
(Term_constr_id X64.Machine_s.R8))
:named constructor_distinct_X64.Machine_s.R8))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 143
(Term_constr_id X64.Machine_s.R15))
:named constructor_distinct_X64.Machine_s.R15))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 141
(Term_constr_id X64.Machine_s.R14))
:named constructor_distinct_X64.Machine_s.R14))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 139
(Term_constr_id X64.Machine_s.R13))
:named constructor_distinct_X64.Machine_s.R13))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 137
(Term_constr_id X64.Machine_s.R12))
:named constructor_distinct_X64.Machine_s.R12))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 135
(Term_constr_id X64.Machine_s.R11))
:named constructor_distinct_X64.Machine_s.R11))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 133
(Term_constr_id X64.Machine_s.R10))
:named constructor_distinct_X64.Machine_s.R10))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= 241
(Term_constr_id (X64.Machine_s.OReg @x0)))
 

:pattern ((X64.Machine_s.OReg @x0))
:qid constructor_distinct_X64.Machine_s.OReg))

:named constructor_distinct_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= 246
(Term_constr_id (X64.Machine_s.OMem @x0)))
 

:pattern ((X64.Machine_s.OMem @x0))
:qid constructor_distinct_X64.Machine_s.OMem))

:named constructor_distinct_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= 236
(Term_constr_id (X64.Machine_s.OConst @x0)))
 

:pattern ((X64.Machine_s.OConst @x0))
:qid constructor_distinct_X64.Machine_s.OConst))

:named constructor_distinct_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 187
(Term_constr_id (X64.Machine_s.MReg @x0
@x1)))
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid constructor_distinct_X64.Machine_s.MReg))

:named constructor_distinct_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 192
(Term_constr_id (X64.Machine_s.MIndex @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Machine_s.MIndex))

:named constructor_distinct_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= 182
(Term_constr_id (X64.Machine_s.MConst @x0)))
 

:pattern ((X64.Machine_s.MConst @x0))
:qid constructor_distinct_X64.Machine_s.MConst))

:named constructor_distinct_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term))
 (! (= 111
(Term_constr_id (FStar.Monotonic.Heap.core_mref @x0)))
 

:pattern ((FStar.Monotonic.Heap.core_mref @x0))
:qid constructor_distinct_FStar.Monotonic.Heap.core_mref))

:named constructor_distinct_FStar.Monotonic.Heap.core_mref))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.reg__uu___haseq
;;; Fact-ids: Name X64.Machine_s.reg__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.reg))
:named assumption_X64.Machine_s.reg__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.operand__uu___haseq
;;; Fact-ids: Name X64.Machine_s.operand__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.operand))
:named assumption_X64.Machine_s.operand__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.maddr__uu___haseq
;;; Fact-ids: Name X64.Machine_s.maddr__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.maddr))
:named assumption_X64.Machine_s.maddr__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(25,5-25,8); use=X64.Vale.StrongPost_i.fsti(25,5-25,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Vale.StrongPost_i.ins)
(= X64.Vale.StrongPost_i.ins
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Vale.StrongPost_i.ins))
:qid X64.Vale.StrongPost_i_pretyping_b57a61b8460583814cc6086893d3abc9))

:named X64.Vale.StrongPost_i_pretyping_b57a61b8460583814cc6086893d3abc9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(31,5-31,8); use=X64.Machine_s.fst(31,5-31,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.reg)
(= X64.Machine_s.reg
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.reg))
:qid X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7))

:named X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(49,5-49,10); use=X64.Machine_s.fst(49,5-49,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.maddr)
(= X64.Machine_s.maddr
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.maddr))
:qid X64.Machine_s_pretyping_a2ddd26f94eaa436cfe753563bf0547b))

:named X64.Machine_s_pretyping_a2ddd26f94eaa436cfe753563bf0547b))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(54,5-54,12); use=X64.Machine_s.fst(54,5-54,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.operand)
(= X64.Machine_s.operand
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.operand))
:qid X64.Machine_s_pretyping_644ad5cdcea42fa4e9e52bbdd5021fb9))

:named X64.Machine_s_pretyping_644ad5cdcea42fa4e9e52bbdd5021fb9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2)))
:qid FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1))
(and 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.1))

(IsTotFun @x0)

;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1)))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Monotonic.Heap.core_mref @x2))
(= (FStar.Monotonic.Heap.core_mref @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Monotonic.Heap.core_mref @x2)))
:qid FStar.Monotonic.Heap_pretyping_67b0ade1260a0985dfe99d32b2574a59))

:named FStar.Monotonic.Heap_pretyping_67b0ade1260a0985dfe99d32b2574a59))
(push) ;; push{4

; Starting query at X64.Vale.StrongPost_i.fsti(25,0-35,51)

(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : Prims.hasEq X64.Vale.StrongPost_i.ins ==>
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand) (offset: Prims.int).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand) (offset: Prims.int).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (src: X64.Machine_s.operand).
;     (*  - Failed to prove that the type
;     'X64.Vale.StrongPost_i.ins'
;     supports decidable equality because of this argument.
;   - Add either the 'noeq' or 'unopteq' qualifier
; *)
;     Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (amt: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (amt: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand) /\
; (forall (dst: X64.Machine_s.operand) (src: X64.Machine_s.operand).
;     Prims.hasEq X64.Machine_s.operand /\ Prims.hasEq X64.Machine_s.operand)


; Context: While encoding a query
; While typechecking the top-level declaration `type X64.Vale.StrongPost_i.ins`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (implies 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Vale.StrongPost_i.ins)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(26,16-26,26)
(or label_1

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(26,34-26,44)
(or label_2

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
Prims.int))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(27,17-27,27)
(or label_3

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(27,35-27,45)
(or label_4

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.1))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
Prims.int))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(28,18-28,28)
(or label_5

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(28,36-28,46)
(or label_6

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.2))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(29,20-29,30)
(or label_7

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(29,38-29,48)
(or label_8

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.3))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(30,20-30,30)
(or label_9

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(30,38-30,48)
(or label_10

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.4))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(31,20-31,30)
(or label_11

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
 
;;no pats
:qid @query.5))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(32,17-32,27)
(or label_12

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(32,35-32,45)
(or label_13

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.6))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(33,16-33,26)
(or label_14

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(33,34-33,44)
(or label_15

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.7))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(34,16-34,26)
(or label_16

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(34,34-34,44)
(or label_17

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.8))


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(and 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(35,16-35,26)
(or label_18

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)


;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(35,34-35,44)
(or label_19

;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(25,0-35,51); use=X64.Vale.StrongPost_i.fsti(25,0-35,51)
(Prims.hasEq X64.Machine_s.operand)
)
)
)
)
 
;;no pats
:qid @query.9))
)
))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.ins, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, assumption_X64.Machine_s.operand__uu___haseq

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 4}pop
(pop) ;; 3}pop
(pop) ;; 2}pop

; encoding sigelt type X64.Vale.StrongPost_i.ins


; <Start encoding type X64.Vale.StrongPost_i.ins>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.ins () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Mov64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Mov64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Mov64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Mov64
(declare-fun X64.Vale.StrongPost_i.Mov64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Load64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Load64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Load64_src (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Load64_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Load64
(declare-fun X64.Vale.StrongPost_i.Load64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Store64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Store64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Store64_src (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Store64_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Store64
(declare-fun X64.Vale.StrongPost_i.Store64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Add64Wrap (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Add64Wrap_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Add64Wrap_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Add64Wrap
(declare-fun X64.Vale.StrongPost_i.Add64Wrap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Adc64Wrap
(declare-fun X64.Vale.StrongPost_i.Adc64Wrap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Mul64Wrap (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Mul64Wrap_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Mul64Wrap
(declare-fun X64.Vale.StrongPost_i.Mul64Wrap@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.IMul64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.IMul64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.IMul64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.IMul64
(declare-fun X64.Vale.StrongPost_i.IMul64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.And64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.And64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.And64_amt (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.And64
(declare-fun X64.Vale.StrongPost_i.And64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Shr64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Shr64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Shr64_amt (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Shr64
(declare-fun X64.Vale.StrongPost_i.Shr64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.StrongPost_i.Sub64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Sub64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.StrongPost_i.Sub64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.StrongPost_i.Sub64
(declare-fun X64.Vale.StrongPost_i.Sub64@tok () Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.operand -> src: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_98b25ebcd44210e4fb2a65b53dafa6fe () Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.operand -> src: X64.Machine_s.operand -> offset: Prims.int -> ins
(declare-fun Tm_arrow_c4c1e49b6bbab44bccd1ab537dab084a () Term)



;;;;;;;;;;;;;;;;src: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_5a8cd21bc0b9bd804f521ebff6cc2c71 () Term)





; <start constructor X64.Vale.StrongPost_i.ins>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.ins ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
214)
(= __@x0
X64.Vale.StrongPost_i.ins)))

; </end constructor X64.Vale.StrongPost_i.ins>


; <start constructor X64.Vale.StrongPost_i.Mov64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Mov64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
220)
(= __@x0
(X64.Vale.StrongPost_i.Mov64 (X64.Vale.StrongPost_i.Mov64_dst __@x0)
(X64.Vale.StrongPost_i.Mov64_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Mov64>


; <start constructor X64.Vale.StrongPost_i.Load64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Load64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
225)
(= __@x0
(X64.Vale.StrongPost_i.Load64 (X64.Vale.StrongPost_i.Load64_dst __@x0)
(X64.Vale.StrongPost_i.Load64_src __@x0)
(X64.Vale.StrongPost_i.Load64_offset __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Load64>


; <start constructor X64.Vale.StrongPost_i.Store64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Store64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
230)
(= __@x0
(X64.Vale.StrongPost_i.Store64 (X64.Vale.StrongPost_i.Store64_dst __@x0)
(X64.Vale.StrongPost_i.Store64_src __@x0)
(X64.Vale.StrongPost_i.Store64_offset __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Store64>


; <start constructor X64.Vale.StrongPost_i.Add64Wrap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Add64Wrap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
235)
(= __@x0
(X64.Vale.StrongPost_i.Add64Wrap (X64.Vale.StrongPost_i.Add64Wrap_dst __@x0)
(X64.Vale.StrongPost_i.Add64Wrap_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Add64Wrap>


; <start constructor X64.Vale.StrongPost_i.Adc64Wrap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Adc64Wrap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
240)
(= __@x0
(X64.Vale.StrongPost_i.Adc64Wrap (X64.Vale.StrongPost_i.Adc64Wrap_dst __@x0)
(X64.Vale.StrongPost_i.Adc64Wrap_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Adc64Wrap>


; <start constructor X64.Vale.StrongPost_i.Mul64Wrap>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Mul64Wrap ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
245)
(= __@x0
(X64.Vale.StrongPost_i.Mul64Wrap (X64.Vale.StrongPost_i.Mul64Wrap_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Mul64Wrap>


; <start constructor X64.Vale.StrongPost_i.IMul64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.IMul64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
250)
(= __@x0
(X64.Vale.StrongPost_i.IMul64 (X64.Vale.StrongPost_i.IMul64_dst __@x0)
(X64.Vale.StrongPost_i.IMul64_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.IMul64>


; <start constructor X64.Vale.StrongPost_i.And64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.And64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
255)
(= __@x0
(X64.Vale.StrongPost_i.And64 (X64.Vale.StrongPost_i.And64_dst __@x0)
(X64.Vale.StrongPost_i.And64_amt __@x0)))))

; </end constructor X64.Vale.StrongPost_i.And64>


; <start constructor X64.Vale.StrongPost_i.Shr64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Shr64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
260)
(= __@x0
(X64.Vale.StrongPost_i.Shr64 (X64.Vale.StrongPost_i.Shr64_dst __@x0)
(X64.Vale.StrongPost_i.Shr64_amt __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Shr64>


; <start constructor X64.Vale.StrongPost_i.Sub64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.StrongPost_i.Sub64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
265)
(= __@x0
(X64.Vale.StrongPost_i.Sub64 (X64.Vale.StrongPost_i.Sub64_dst __@x0)
(X64.Vale.StrongPost_i.Sub64_src __@x0)))))

; </end constructor X64.Vale.StrongPost_i.Sub64>


; </end encoding type X64.Vale.StrongPost_i.ins>


; encoding sigelt assume X64.Vale.StrongPost_i.ins__uu___haseq


; <Start encoding assume X64.Vale.StrongPost_i.ins__uu___haseq>


; </end encoding assume X64.Vale.StrongPost_i.ins__uu___haseq>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Mov64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Mov64>

(declare-fun X64.Vale.StrongPost_i.uu___is_Mov64 (Term) Term)
;;;;;;;;;;;;;;;;projectee: ins -> Prims.bool
(declare-fun Tm_arrow_4eca32c04f9bb641ba7dc27225ff77f5 () Term)
(declare-fun X64.Vale.StrongPost_i.uu___is_Mov64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Mov64>


; encoding sigelt let uu___is_Mov64


; <Skipped let uu___is_Mov64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Mov64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Mov64__item__dst>

(declare-fun Tm_refine_40cd61a9068cbeed2a346b66c4d06035 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Mov64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Mov64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_7b32670af596d9d8c855524eda0f14f4 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Mov64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Mov64__item__dst>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.lemma_mref_injectivity
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
:named function_token_typing_FStar.Monotonic.Heap.lemma_mref_injectivity))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType FStar.Monotonic.Heap.lemma_mref_injectivity
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
:named typing_FStar.Monotonic.Heap.lemma_mref_injectivity))
;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rsp@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rsi@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rdx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rdi@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rcx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rbx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rbp@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rax@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R9@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R8@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R15@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R14@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R13@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R12@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R11@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R10@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Mov64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Mov64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Mov64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Mov64))

:named typing_X64.Vale.StrongPost_i.uu___is_Mov64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.valid_dst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(65,4-65,13); use=X64.Machine_s.fst(65,4-65,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.valid_dst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.valid_dst @x0))
:qid typing_X64.Machine_s.valid_dst))

:named typing_X64.Machine_s.valid_dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_Rsp; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.reg)
(HasType (X64.Machine_s.uu___is_Rsp @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_Rsp @x0))
:qid typing_X64.Machine_s.uu___is_Rsp))

:named typing_X64.Machine_s.uu___is_Rsp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OReg @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OReg @x0))
:qid typing_X64.Machine_s.uu___is_OReg))

:named typing_X64.Machine_s.uu___is_OReg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OMem @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OMem @x0))
:qid typing_X64.Machine_s.uu___is_OMem))

:named typing_X64.Machine_s.uu___is_OMem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OConst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OConst @x0))
:qid typing_X64.Machine_s.uu___is_OConst))

:named typing_X64.Machine_s.uu___is_OConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MReg @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MReg @x0))
:qid typing_X64.Machine_s.uu___is_MReg))

:named typing_X64.Machine_s.uu___is_MReg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MIndex @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MIndex @x0))
:qid typing_X64.Machine_s.uu___is_MIndex))

:named typing_X64.Machine_s.uu___is_MIndex))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MConst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MConst @x0))
:qid typing_X64.Machine_s.uu___is_MConst))

:named typing_X64.Machine_s.uu___is_MConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,10-56,11); use=X64.Machine_s.fst(56,10-56,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
(HasType (X64.Machine_s.__proj__OReg__item__r @x0)
X64.Machine_s.reg))
 

:pattern ((X64.Machine_s.__proj__OReg__item__r @x0))
:qid typing_X64.Machine_s.__proj__OReg__item__r))

:named typing_X64.Machine_s.__proj__OReg__item__r))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(HasType (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid typing_Prims.op_Equals_Equals_Equals))

:named typing_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.transitive @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.transitive @x0
@x1))
:qid typing_FStar.Preorder.transitive))

:named typing_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.relation @x0)
Tm_type))
 

:pattern ((FStar.Preorder.relation @x0))
:qid typing_FStar.Preorder.relation))

:named typing_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.reflexive @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.reflexive @x0
@x1))
:qid typing_FStar.Preorder.reflexive))

:named typing_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(HasType (FStar.Preorder.preorder_rel @x0
@x1)
Prims.logical))
 

:pattern ((FStar.Preorder.preorder_rel @x0
@x1))
:qid typing_FStar.Preorder.preorder_rel))

:named typing_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,5-33,13); use=FStar.Preorder.fst(33,5-33,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Preorder.preorder @x0)
Tm_type))
 

:pattern ((FStar.Preorder.preorder @x0))
:qid typing_FStar.Preorder.preorder))

:named typing_FStar.Preorder.preorder))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(41,4-41,8); use=FStar.Monotonic.Heap.fsti(41,4-41,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.preorder @x0)))
(HasType (FStar.Monotonic.Heap.mref @x0
@x1)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.mref @x0
@x1))
:qid typing_FStar.Monotonic.Heap.mref))

:named typing_FStar.Monotonic.Heap.mref))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Monotonic.Heap.core_mref @x0)
Tm_type))
 

:pattern ((FStar.Monotonic.Heap.core_mref @x0))
:qid typing_FStar.Monotonic.Heap.core_mref))

:named typing_FStar.Monotonic.Heap.core_mref))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Sub64))

:named subterm_ordering_X64.Vale.StrongPost_i.Sub64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Store64))

:named subterm_ordering_X64.Vale.StrongPost_i.Store64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Shr64))

:named subterm_ordering_X64.Vale.StrongPost_i.Shr64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Mul64Wrap @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Mul64Wrap))

:named subterm_ordering_X64.Vale.StrongPost_i.Mul64Wrap))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Mov64))

:named subterm_ordering_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Load64))

:named subterm_ordering_X64.Vale.StrongPost_i.Load64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.IMul64))

:named subterm_ordering_X64.Vale.StrongPost_i.IMul64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.And64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.And64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.And64))

:named subterm_ordering_X64.Vale.StrongPost_i.And64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Add64Wrap))

:named subterm_ordering_X64.Vale.StrongPost_i.Add64Wrap))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid subterm_ordering_X64.Vale.StrongPost_i.Adc64Wrap))

:named subterm_ordering_X64.Vale.StrongPost_i.Adc64Wrap))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OReg @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OReg))

:named subterm_ordering_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OMem @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OMem))

:named subterm_ordering_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OConst))

:named subterm_ordering_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MReg @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Machine_s.MReg @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MReg))

:named subterm_ordering_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MIndex))

:named subterm_ordering_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MConst))

:named subterm_ordering_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_e85c4468bd6fa895770a44e5ae1526dc
Tm_type)
:named refinement_kinding_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_e1adf49e5e772ddffa19181e1a812a81
Tm_type)
:named refinement_kinding_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named refinement_kinding_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a
Tm_type)
:named refinement_kinding_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_ad649c559db000bf1dd08bb4e261413e
Tm_type)
:named refinement_kinding_Tm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8
Tm_type)
:named refinement_kinding_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_7c9e5bdb9582a858897946d48f9f4d58
Tm_type)
:named refinement_kinding_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_49b6b7afc081bac09ce40febdab68891
Tm_type)
:named refinement_kinding_Tm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mov64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_40cd61a9068cbeed2a346b66c4d06035
Tm_type)
:named refinement_kinding_Tm_refine_40cd61a9068cbeed2a346b66c4d06035))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_op_dst_operand_reg; Namespace X64.Vale.Decls
(assert (! (HasType Tm_refine_2ef22b5edaec67adad91f2b28dd82703
Tm_type)
:named refinement_kinding_Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6
Tm_type)
:named refinement_kinding_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125
Tm_type)
:named refinement_kinding_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(68,14-68,36); use=X64.Machine_s.fst(68,14-68,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Machine_s.fst(68,24-68,35)
(BoxBool_proj_0 (X64.Machine_s.valid_dst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
:qid refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))

:named refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(207,3-207,136); use=FStar.Monotonic.Heap.fsti(207,3-207,136)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e1adf49e5e772ddffa19181e1a812a81)
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=FStar.Monotonic.Heap.fsti(207,11-207,134); use=FStar.Monotonic.Heap.fsti(207,11-207,134)
(forall ((@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x2
Tm_type)
(HasType @x3
Tm_type)
(HasType @x4
(FStar.Preorder.preorder @x2))
(HasType @x5
(FStar.Preorder.preorder @x3))
(HasType @x6
(FStar.Monotonic.Heap.mref @x2
@x4))
(HasType @x7
(FStar.Monotonic.Heap.mref @x3
@x5))

;; def=FStar.Monotonic.Heap.fsti(207,109-207,116); use=FStar.Monotonic.Heap.fsti(207,109-207,116)
(not 
;; def=FStar.Monotonic.Heap.fsti(207,109-207,116); use=FStar.Monotonic.Heap.fsti(207,109-207,116)
(= @x2
@x3)
)
)

;; def=FStar.Monotonic.Heap.fsti(207,121-207,134); use=FStar.Monotonic.Heap.fsti(207,121-207,134)
(not 
;; def=FStar.Monotonic.Heap.fsti(207,123-207,134); use=FStar.Monotonic.Heap.fsti(207,123-207,134)
(Valid 
;; def=FStar.Monotonic.Heap.fsti(207,123-207,134); use=FStar.Monotonic.Heap.fsti(207,123-207,134)
(Prims.op_Equals_Equals_Equals (FStar.Monotonic.Heap.mref @x2
@x4)
(FStar.Monotonic.Heap.mref @x3
@x5)
@x6
@x7)
)
)
)
 
;;no pats
:qid refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81.1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
:qid refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))

:named refinement_interpretation_Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Preorder.relation @x2))

;; def=FStar.Preorder.fst(33,40-33,56); use=FStar.Preorder.fst(33,40-33,56)
(Valid 
;; def=FStar.Preorder.fst(33,40-33,56); use=FStar.Preorder.fst(33,40-33,56)
(FStar.Preorder.preorder_rel @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x2)))
:qid refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named refinement_interpretation_Tm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=Prims.fst(680,11-683,23); use=Prims.fst(680,11-683,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-683,23); use=Prims.fst(680,18-683,23)
(or 
;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))


;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
:qid refinement_interpretation_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))

:named refinement_interpretation_Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ad649c559db000bf1dd08bb4e261413e)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ad649c559db000bf1dd08bb4e261413e))
:qid refinement_interpretation_Tm_refine_ad649c559db000bf1dd08bb4e261413e))

:named refinement_interpretation_Tm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
:qid refinement_interpretation_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))

:named refinement_interpretation_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
:qid refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))

:named refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_49b6b7afc081bac09ce40febdab68891)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_49b6b7afc081bac09ce40febdab68891))
:qid refinement_interpretation_Tm_refine_49b6b7afc081bac09ce40febdab68891))

:named refinement_interpretation_Tm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mov64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_40cd61a9068cbeed2a346b66c4d06035)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mov64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_40cd61a9068cbeed2a346b66c4d06035))
:qid refinement_interpretation_Tm_refine_40cd61a9068cbeed2a346b66c4d06035))

:named refinement_interpretation_Tm_refine_40cd61a9068cbeed2a346b66c4d06035))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_op_dst_operand_reg; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(63,33-63,54); use=X64.Vale.Decls.fsti(63,33-63,54)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2ef22b5edaec67adad91f2b28dd82703)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(not (BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp @x1)))))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
:qid refinement_interpretation_Tm_refine_2ef22b5edaec67adad91f2b28dd82703))

:named refinement_interpretation_Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OMem @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
:qid refinement_interpretation_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))

:named refinement_interpretation_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MIndex @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
:qid refinement_interpretation_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))

:named refinement_interpretation_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Sub64_src (X64.Vale.StrongPost_i.Sub64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Sub64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Sub64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Sub64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Sub64_dst (X64.Vale.StrongPost_i.Sub64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Sub64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Sub64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Sub64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Store64_src (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Store64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Store64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Store64_offset (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Store64_offset))

:named projection_inverse_X64.Vale.StrongPost_i.Store64_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Store64_dst (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Store64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Store64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Shr64_dst (X64.Vale.StrongPost_i.Shr64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Shr64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Shr64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Shr64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Shr64_amt (X64.Vale.StrongPost_i.Shr64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Shr64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Shr64_amt))

:named projection_inverse_X64.Vale.StrongPost_i.Shr64_amt))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.Mul64Wrap_src (X64.Vale.StrongPost_i.Mul64Wrap @x0))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Mul64Wrap @x0))
:qid projection_inverse_X64.Vale.StrongPost_i.Mul64Wrap_src))

:named projection_inverse_X64.Vale.StrongPost_i.Mul64Wrap_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Mov64_src (X64.Vale.StrongPost_i.Mov64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Mov64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Mov64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Mov64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Mov64_dst (X64.Vale.StrongPost_i.Mov64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Mov64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Mov64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Mov64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Load64_src (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Load64_src))

:named projection_inverse_X64.Vale.StrongPost_i.Load64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Load64_offset (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Load64_offset))

:named projection_inverse_X64.Vale.StrongPost_i.Load64_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.Load64_dst (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid projection_inverse_X64.Vale.StrongPost_i.Load64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Load64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.IMul64_src (X64.Vale.StrongPost_i.IMul64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.IMul64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.IMul64_src))

:named projection_inverse_X64.Vale.StrongPost_i.IMul64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.IMul64_dst (X64.Vale.StrongPost_i.IMul64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.IMul64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.IMul64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.IMul64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.And64_dst (X64.Vale.StrongPost_i.And64 @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.And64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.And64_dst))

:named projection_inverse_X64.Vale.StrongPost_i.And64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.And64_amt (X64.Vale.StrongPost_i.And64 @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.And64 @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.And64_amt))

:named projection_inverse_X64.Vale.StrongPost_i.And64_amt))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Add64Wrap_src (X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_src))

:named projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Add64Wrap_dst (X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Adc64Wrap_src (X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
@x1)
 

:pattern ((X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_src))

:named projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.Adc64Wrap_dst (X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
@x0)
 

:pattern ((X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
:qid projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_dst))

:named projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OReg_r (X64.Machine_s.OReg @x0))
@x0)
 

:pattern ((X64.Machine_s.OReg @x0))
:qid projection_inverse_X64.Machine_s.OReg_r))

:named projection_inverse_X64.Machine_s.OReg_r))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OMem_m (X64.Machine_s.OMem @x0))
@x0)
 

:pattern ((X64.Machine_s.OMem @x0))
:qid projection_inverse_X64.Machine_s.OMem_m))

:named projection_inverse_X64.Machine_s.OMem_m))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OConst_n (X64.Machine_s.OConst @x0))
@x0)
 

:pattern ((X64.Machine_s.OConst @x0))
:qid projection_inverse_X64.Machine_s.OConst_n))

:named projection_inverse_X64.Machine_s.OConst_n))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Machine_s.MReg_r (X64.Machine_s.MReg @x0
@x1))
@x0)
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid projection_inverse_X64.Machine_s.MReg_r))

:named projection_inverse_X64.Machine_s.MReg_r))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Machine_s.MReg_offset (X64.Machine_s.MReg @x0
@x1))
@x1)
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid projection_inverse_X64.Machine_s.MReg_offset))

:named projection_inverse_X64.Machine_s.MReg_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_scale (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_scale))

:named projection_inverse_X64.Machine_s.MIndex_scale))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_offset (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_offset))

:named projection_inverse_X64.Machine_s.MIndex_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_index (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_index))

:named projection_inverse_X64.Machine_s.MIndex_index))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_base (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_base))

:named projection_inverse_X64.Machine_s.MIndex_base))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.MConst_n (X64.Machine_s.MConst @x0))
@x0)
 

:pattern ((X64.Machine_s.MConst @x0))
:qid projection_inverse_X64.Machine_s.MConst_n))

:named projection_inverse_X64.Machine_s.MConst_n))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,10-56,11); use=X64.Machine_s.fst(56,10-56,11)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.__proj__OReg__item__r @x0)
(X64.Machine_s.OReg_r @x0))
 

:pattern ((X64.Machine_s.__proj__OReg__item__r @x0))
:qid proj_equation_X64.Machine_s.OReg_r))

:named proj_equation_X64.Machine_s.OReg_r))
;;; Fact-ids: Name Prims.op_Negation; Namespace Prims
(assert (! 
;; def=Prims.fst(534,4-534,15); use=Prims.fst(534,4-534,15)
(forall ((@x0 Term))
 (! (= (Prims.op_Negation @x0)
(BoxBool (not (BoxBool_proj_0 @x0))))
 

:pattern ((Prims.op_Negation @x0))
:qid primitive_Prims.op_Negation))

:named primitive_Prims.op_Negation))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! (HasType X64.Vale.StrongPost_i.ins
Tm_type)
:named kinding_X64.Vale.StrongPost_i.ins@tok))
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.reg
Tm_type)
:named kinding_X64.Machine_s.reg@tok))
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.operand
Tm_type)
:named kinding_X64.Machine_s.operand@tok))
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.maddr
Tm_type)
:named kinding_X64.Machine_s.maddr@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0)
Tm_type))
:qid kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named kinding_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e85c4468bd6fa895770a44e5ae1526dc
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e1adf49e5e772ddffa19181e1a812a81
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_mref_injectivity; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e1adf49e5e772ddffa19181e1a812a81))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_e1adf49e5e772ddffa19181e1a812a81))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bd10f09297e0e7dc08314f7d9211801c
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,25-33,57); use=FStar.Preorder.fst(33,25-33,57)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0)))
(Valid (Prims.hasEq (FStar.Preorder.relation @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0))))
:qid haseqTm_refine_bd10f09297e0e7dc08314f7d9211801c))

:named haseqTm_refine_bd10f09297e0e7dc08314f7d9211801c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a
;;; Fact-ids: Name FStar.Monotonic.Heap.lemma_free_addr_unused_in; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_b197fcc3fe1a6a8a07bfa2aebd77a80a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ad649c559db000bf1dd08bb4e261413e
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ad649c559db000bf1dd08bb4e261413e))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7c9e5bdb9582a858897946d48f9f4d58
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_49b6b7afc081bac09ce40febdab68891
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_49b6b7afc081bac09ce40febdab68891))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_40cd61a9068cbeed2a346b66c4d06035
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mov64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_40cd61a9068cbeed2a346b66c4d06035))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_40cd61a9068cbeed2a346b66c4d06035))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2ef22b5edaec67adad91f2b28dd82703
;;; Fact-ids: Name X64.Vale.Decls.va_op_dst_operand_reg; Namespace X64.Vale.Decls
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2ef22b5edaec67adad91f2b28dd82703))
(Valid (Prims.hasEq X64.Machine_s.reg)))
:named haseqTm_refine_2ef22b5edaec67adad91f2b28dd82703))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(25,5-25,8); use=X64.Vale.StrongPost_i.fsti(25,5-25,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Vale.StrongPost_i.ins)
(or (is-X64.Vale.StrongPost_i.Mov64 @x1)
(is-X64.Vale.StrongPost_i.Load64 @x1)
(is-X64.Vale.StrongPost_i.Store64 @x1)
(is-X64.Vale.StrongPost_i.Add64Wrap @x1)
(is-X64.Vale.StrongPost_i.Adc64Wrap @x1)
(is-X64.Vale.StrongPost_i.Mul64Wrap @x1)
(is-X64.Vale.StrongPost_i.IMul64 @x1)
(is-X64.Vale.StrongPost_i.And64 @x1)
(is-X64.Vale.StrongPost_i.Shr64 @x1)
(is-X64.Vale.StrongPost_i.Sub64 @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Vale.StrongPost_i.ins))
:qid fuel_guarded_inversion_X64.Vale.StrongPost_i.ins))

:named fuel_guarded_inversion_X64.Vale.StrongPost_i.ins))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(31,5-31,8); use=X64.Machine_s.fst(31,5-31,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.reg)
(or (is-X64.Machine_s.Rax @x1)
(is-X64.Machine_s.Rbx @x1)
(is-X64.Machine_s.Rcx @x1)
(is-X64.Machine_s.Rdx @x1)
(is-X64.Machine_s.Rsi @x1)
(is-X64.Machine_s.Rdi @x1)
(is-X64.Machine_s.Rbp @x1)
(is-X64.Machine_s.Rsp @x1)
(is-X64.Machine_s.R8 @x1)
(is-X64.Machine_s.R9 @x1)
(is-X64.Machine_s.R10 @x1)
(is-X64.Machine_s.R11 @x1)
(is-X64.Machine_s.R12 @x1)
(is-X64.Machine_s.R13 @x1)
(is-X64.Machine_s.R14 @x1)
(is-X64.Machine_s.R15 @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.reg))
:qid fuel_guarded_inversion_X64.Machine_s.reg))

:named fuel_guarded_inversion_X64.Machine_s.reg))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(54,5-54,12); use=X64.Machine_s.fst(54,5-54,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.operand)
(or (is-X64.Machine_s.OConst @x1)
(is-X64.Machine_s.OReg @x1)
(is-X64.Machine_s.OMem @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.operand))
:qid fuel_guarded_inversion_X64.Machine_s.operand))

:named fuel_guarded_inversion_X64.Machine_s.operand))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(49,5-49,10); use=X64.Machine_s.fst(49,5-49,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.maddr)
(or (is-X64.Machine_s.MConst @x1)
(is-X64.Machine_s.MReg @x1)
(is-X64.Machine_s.MIndex @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.maddr))
:qid fuel_guarded_inversion_X64.Machine_s.maddr))

:named fuel_guarded_inversion_X64.Machine_s.maddr))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.valid_dst
;;; Fact-ids: Name X64.Machine_s.valid_dst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(65,4-65,13); use=X64.Machine_s.fst(65,4-65,13)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.valid_dst @x0)
(Prims.op_Negation (Prims.op_BarBar (X64.Machine_s.uu___is_OConst @x0)
(Prims.op_AmpAmp (X64.Machine_s.uu___is_OReg @x0)
(X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r @x0))))))
 

:pattern ((X64.Machine_s.valid_dst @x0))
:qid equation_X64.Machine_s.valid_dst))

:named equation_X64.Machine_s.valid_dst))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))

;; def=Prims.fst(498,52-498,68); use=Prims.fst(498,52-498,68)
(and 
;; def=Prims.fst(498,52-498,58); use=Prims.fst(498,52-498,58)
(= @x0
@x1)


;; def=Prims.fst(498,62-498,68); use=Prims.fst(498,62-498,68)
(= @x2
@x3)
)
)
 

:pattern ((Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3))
:qid equation_Prims.op_Equals_Equals_Equals))

:named equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.transitive
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.transitive @x0
@x1))

;; def=FStar.Preorder.fst(28,2-28,60); use=FStar.Preorder.fst(28,2-28,60)
(forall ((@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x2
@x0)
(HasType @x3
@x0)
(HasType @x4
@x0)

;; def=FStar.Preorder.fst(28,29-28,36); use=FStar.Preorder.fst(28,29-28,36)
(Valid 
;; def=FStar.Preorder.fst(28,29-28,36); use=FStar.Preorder.fst(28,29-28,36)
(ApplyTT (ApplyTT @x1
@x2)
@x3)
)


;; def=FStar.Preorder.fst(28,40-28,47); use=FStar.Preorder.fst(28,40-28,47)
(Valid 
;; def=FStar.Preorder.fst(28,40-28,47); use=FStar.Preorder.fst(28,40-28,47)
(ApplyTT (ApplyTT @x1
@x3)
@x4)
)
)

;; def=FStar.Preorder.fst(28,53-28,60); use=FStar.Preorder.fst(28,53-28,60)
(Valid 
;; def=FStar.Preorder.fst(28,53-28,60); use=FStar.Preorder.fst(28,53-28,60)
(ApplyTT (ApplyTT @x1
@x2)
@x4)
)
)
 
;;no pats
:qid equation_FStar.Preorder.transitive.1))
)
 

:pattern ((FStar.Preorder.transitive @x0
@x1))
:qid equation_FStar.Preorder.transitive))

:named equation_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.relation
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,5-20,13); use=FStar.Preorder.fst(20,5-20,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.relation @x0)
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x0))
 

:pattern ((FStar.Preorder.relation @x0))
:qid equation_FStar.Preorder.relation))

:named equation_FStar.Preorder.relation))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.reflexive
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.reflexive @x0
@x1))

;; def=FStar.Preorder.fst(25,2-25,23); use=FStar.Preorder.fst(25,2-25,23)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)

;; def=FStar.Preorder.fst(25,16-25,23); use=FStar.Preorder.fst(25,16-25,23)
(Valid 
;; def=FStar.Preorder.fst(25,16-25,23); use=FStar.Preorder.fst(25,16-25,23)
(ApplyTT (ApplyTT @x1
@x2)
@x2)
)
)
 
;;no pats
:qid equation_FStar.Preorder.reflexive.1))
)
 

:pattern ((FStar.Preorder.reflexive @x0
@x1))
:qid equation_FStar.Preorder.reflexive))

:named equation_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.preorder_rel
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (FStar.Preorder.preorder_rel @x0
@x1))

;; def=FStar.Preorder.fst(31,2-31,33); use=FStar.Preorder.fst(31,2-31,33)
(and 
;; def=FStar.Preorder.fst(31,2-31,15); use=FStar.Preorder.fst(31,2-31,15)
(Valid 
;; def=FStar.Preorder.fst(31,2-31,15); use=FStar.Preorder.fst(31,2-31,15)
(FStar.Preorder.reflexive @x0
@x1)
)


;; def=FStar.Preorder.fst(31,19-31,33); use=FStar.Preorder.fst(31,19-31,33)
(Valid 
;; def=FStar.Preorder.fst(31,19-31,33); use=FStar.Preorder.fst(31,19-31,33)
(FStar.Preorder.transitive @x0
@x1)
)
)
)
 

:pattern ((FStar.Preorder.preorder_rel @x0
@x1))
:qid equation_FStar.Preorder.preorder_rel))

:named equation_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;Equation for FStar.Preorder.preorder
;;; Fact-ids: Name FStar.Preorder.preorder; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(33,5-33,13); use=FStar.Preorder.fst(33,5-33,13)
(forall ((@x0 Term))
 (! (= (FStar.Preorder.preorder @x0)
(Tm_refine_bd10f09297e0e7dc08314f7d9211801c @x0))
 

:pattern ((FStar.Preorder.preorder @x0))
:qid equation_FStar.Preorder.preorder))

:named equation_FStar.Preorder.preorder))
;;;;;;;;;;;;;;;;Equation for FStar.Monotonic.Heap.mref
;;; Fact-ids: Name FStar.Monotonic.Heap.mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(41,4-41,8); use=FStar.Monotonic.Heap.fsti(41,4-41,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Monotonic.Heap.mref @x0
@x1)
(FStar.Monotonic.Heap.core_mref @x0))
 

:pattern ((FStar.Monotonic.Heap.mref @x0
@x1))
:qid equation_FStar.Monotonic.Heap.mref))

:named equation_FStar.Monotonic.Heap.mref))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rsp@tok
X64.Machine_s.Rsp)
:named equality_tok_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rsi@tok
X64.Machine_s.Rsi)
:named equality_tok_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rdx@tok
X64.Machine_s.Rdx)
:named equality_tok_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rdi@tok
X64.Machine_s.Rdi)
:named equality_tok_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rcx@tok
X64.Machine_s.Rcx)
:named equality_tok_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rbx@tok
X64.Machine_s.Rbx)
:named equality_tok_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rbp@tok
X64.Machine_s.Rbp)
:named equality_tok_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rax@tok
X64.Machine_s.Rax)
:named equality_tok_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R9@tok
X64.Machine_s.R9)
:named equality_tok_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R8@tok
X64.Machine_s.R8)
:named equality_tok_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R15@tok
X64.Machine_s.R15)
:named equality_tok_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R14@tok
X64.Machine_s.R14)
:named equality_tok_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R13@tok
X64.Machine_s.R13)
:named equality_tok_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R12@tok
X64.Machine_s.R12)
:named equality_tok_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R11@tok
X64.Machine_s.R11)
:named equality_tok_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R10@tok
X64.Machine_s.R10)
:named equality_tok_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Mov64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Mov64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Mov64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Mov64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Mov64))

:named disc_equation_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_Rsp; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_Rsp @x0)
(BoxBool (is-X64.Machine_s.Rsp @x0)))
 

:pattern ((X64.Machine_s.uu___is_Rsp @x0))
:qid disc_equation_X64.Machine_s.Rsp))

:named disc_equation_X64.Machine_s.Rsp))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OReg @x0)
(BoxBool (is-X64.Machine_s.OReg @x0)))
 

:pattern ((X64.Machine_s.uu___is_OReg @x0))
:qid disc_equation_X64.Machine_s.OReg))

:named disc_equation_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OMem @x0)
(BoxBool (is-X64.Machine_s.OMem @x0)))
 

:pattern ((X64.Machine_s.uu___is_OMem @x0))
:qid disc_equation_X64.Machine_s.OMem))

:named disc_equation_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OConst @x0)
(BoxBool (is-X64.Machine_s.OConst @x0)))
 

:pattern ((X64.Machine_s.uu___is_OConst @x0))
:qid disc_equation_X64.Machine_s.OConst))

:named disc_equation_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MReg @x0)
(BoxBool (is-X64.Machine_s.MReg @x0)))
 

:pattern ((X64.Machine_s.uu___is_MReg @x0))
:qid disc_equation_X64.Machine_s.MReg))

:named disc_equation_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MIndex @x0)
(BoxBool (is-X64.Machine_s.MIndex @x0)))
 

:pattern ((X64.Machine_s.uu___is_MIndex @x0))
:qid disc_equation_X64.Machine_s.MIndex))

:named disc_equation_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MConst @x0)
(BoxBool (is-X64.Machine_s.MConst @x0)))
 

:pattern ((X64.Machine_s.uu___is_MConst @x0))
:qid disc_equation_X64.Machine_s.MConst))

:named disc_equation_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Prop-typing for Prims.op_Equals_Equals_Equals
;;; Fact-ids: Name Prims.op_Equals_Equals_Equals; Namespace Prims
(assert (! 
;; def=Prims.fst(498,6-498,9); use=Prims.fst(498,6-498,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
@x0)
(HasType @x3
@x1))
(Valid (Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.op_Equals_Equals_Equals @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_Prims.op_Equals_Equals_Equals))

:named defn_equation_Prims.op_Equals_Equals_Equals))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.transitive
;;; Fact-ids: Name FStar.Preorder.transitive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(27,4-27,14); use=FStar.Preorder.fst(27,4-27,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.transitive @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.transitive @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.transitive))

:named defn_equation_FStar.Preorder.transitive))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.reflexive
;;; Fact-ids: Name FStar.Preorder.reflexive; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(24,4-24,13); use=FStar.Preorder.fst(24,4-24,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.reflexive @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.reflexive @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.reflexive))

:named defn_equation_FStar.Preorder.reflexive))
;;;;;;;;;;;;;;;;Prop-typing for FStar.Preorder.preorder_rel
;;; Fact-ids: Name FStar.Preorder.preorder_rel; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(30,4-30,16); use=FStar.Preorder.fst(30,4-30,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Preorder.relation @x0)))
(Valid (Prims.subtype_of (FStar.Preorder.preorder_rel @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.Preorder.preorder_rel @x0
@x1)
Prims.unit))
:qid defn_equation_FStar.Preorder.preorder_rel))

:named defn_equation_FStar.Preorder.preorder_rel))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Sub64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Sub64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Store64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Store64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Shr64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Shr64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Mul64Wrap@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Mul64Wrap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Mov64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Mov64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Load64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Load64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.IMul64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.IMul64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.And64@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.And64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Add64Wrap@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Add64Wrap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_typing_intro_X64.Vale.StrongPost_i.Adc64Wrap@tok))

:named data_typing_intro_X64.Vale.StrongPost_i.Adc64Wrap@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rsp
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rsp
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rsp@tok))

:named data_typing_intro_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(36,4-36,7); use=X64.Machine_s.fst(36,4-36,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rsi
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rsi
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rsi@tok))

:named data_typing_intro_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(35,4-35,7); use=X64.Machine_s.fst(35,4-35,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rdx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rdx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rdx@tok))

:named data_typing_intro_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(37,4-37,7); use=X64.Machine_s.fst(37,4-37,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rdi
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rdi
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rdi@tok))

:named data_typing_intro_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(34,4-34,7); use=X64.Machine_s.fst(34,4-34,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rcx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rcx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rcx@tok))

:named data_typing_intro_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(33,4-33,7); use=X64.Machine_s.fst(33,4-33,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rbx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rbx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rbx@tok))

:named data_typing_intro_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(38,4-38,7); use=X64.Machine_s.fst(38,4-38,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rbp
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rbp
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rbp@tok))

:named data_typing_intro_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(32,4-32,7); use=X64.Machine_s.fst(32,4-32,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rax
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rax
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rax@tok))

:named data_typing_intro_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(41,4-41,6); use=X64.Machine_s.fst(41,4-41,6)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R9
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R9
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R9@tok))

:named data_typing_intro_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(40,4-40,6); use=X64.Machine_s.fst(40,4-40,6)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R8
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R8
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R8@tok))

:named data_typing_intro_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(47,4-47,7); use=X64.Machine_s.fst(47,4-47,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R15
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R15
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R15@tok))

:named data_typing_intro_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(46,4-46,7); use=X64.Machine_s.fst(46,4-46,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R14
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R14
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R14@tok))

:named data_typing_intro_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(45,4-45,7); use=X64.Machine_s.fst(45,4-45,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R13
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R13
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R13@tok))

:named data_typing_intro_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(44,4-44,7); use=X64.Machine_s.fst(44,4-44,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R12
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R12
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R12@tok))

:named data_typing_intro_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(43,4-43,7); use=X64.Machine_s.fst(43,4-43,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R11
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R11
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R11@tok))

:named data_typing_intro_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(42,4-42,7); use=X64.Machine_s.fst(42,4-42,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R10
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R10
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R10@tok))

:named data_typing_intro_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OReg@tok))

:named data_typing_intro_X64.Machine_s.OReg@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)
(HasTypeFuel @u0
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OMem@tok))

:named data_typing_intro_X64.Machine_s.OMem@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OConst@tok))

:named data_typing_intro_X64.Machine_s.OConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int))
(HasTypeFuel @u0
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MReg@tok))

:named data_typing_intro_X64.Machine_s.MReg@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)
(HasTypeFuel @u0
@x3
X64.Machine_s.reg)
(HasTypeFuel @u0
@x4
Prims.int))
(HasTypeFuel @u0
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MIndex@tok))

:named data_typing_intro_X64.Machine_s.MIndex@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MConst@tok))

:named data_typing_intro_X64.Machine_s.MConst@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Sub64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Sub64))

:named data_elim_X64.Vale.StrongPost_i.Sub64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Store64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Store64))

:named data_elim_X64.Vale.StrongPost_i.Store64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Shr64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Shr64))

:named data_elim_X64.Vale.StrongPost_i.Shr64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins)
(HasTypeFuel @u0
@x1
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Mul64Wrap))

:named data_elim_X64.Vale.StrongPost_i.Mul64Wrap))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Mov64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Mov64))

:named data_elim_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Load64 @x1
@x2
@x3)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Load64))

:named data_elim_X64.Vale.StrongPost_i.Load64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.IMul64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.IMul64))

:named data_elim_X64.Vale.StrongPost_i.IMul64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.And64 @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.And64))

:named data_elim_X64.Vale.StrongPost_i.And64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Add64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Add64Wrap))

:named data_elim_X64.Vale.StrongPost_i.Add64Wrap))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.StrongPost_i.Adc64Wrap @x1
@x2)
X64.Vale.StrongPost_i.ins))
:qid data_elim_X64.Vale.StrongPost_i.Adc64Wrap))

:named data_elim_X64.Vale.StrongPost_i.Adc64Wrap))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
X64.Machine_s.reg))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OReg))

:named data_elim_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OMem))

:named data_elim_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OConst))

:named data_elim_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MReg))

:named data_elim_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)
(HasTypeFuel @u0
@x3
X64.Machine_s.reg)
(HasTypeFuel @u0
@x4
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MIndex))

:named data_elim_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MConst))

:named data_elim_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! (= 214
(Term_constr_id X64.Vale.StrongPost_i.ins))
:named constructor_distinct_X64.Vale.StrongPost_i.ins))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 265
(Term_constr_id (X64.Vale.StrongPost_i.Sub64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Sub64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Sub64))

:named constructor_distinct_X64.Vale.StrongPost_i.Sub64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 230
(Term_constr_id (X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2)))
 

:pattern ((X64.Vale.StrongPost_i.Store64 @x0
@x1
@x2))
:qid constructor_distinct_X64.Vale.StrongPost_i.Store64))

:named constructor_distinct_X64.Vale.StrongPost_i.Store64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 260
(Term_constr_id (X64.Vale.StrongPost_i.Shr64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Shr64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Shr64))

:named constructor_distinct_X64.Vale.StrongPost_i.Shr64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@x0 Term))
 (! (= 245
(Term_constr_id (X64.Vale.StrongPost_i.Mul64Wrap @x0)))
 

:pattern ((X64.Vale.StrongPost_i.Mul64Wrap @x0))
:qid constructor_distinct_X64.Vale.StrongPost_i.Mul64Wrap))

:named constructor_distinct_X64.Vale.StrongPost_i.Mul64Wrap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,4-26,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 220
(Term_constr_id (X64.Vale.StrongPost_i.Mov64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Mov64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Mov64))

:named constructor_distinct_X64.Vale.StrongPost_i.Mov64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 225
(Term_constr_id (X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2)))
 

:pattern ((X64.Vale.StrongPost_i.Load64 @x0
@x1
@x2))
:qid constructor_distinct_X64.Vale.StrongPost_i.Load64))

:named constructor_distinct_X64.Vale.StrongPost_i.Load64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 250
(Term_constr_id (X64.Vale.StrongPost_i.IMul64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.IMul64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.IMul64))

:named constructor_distinct_X64.Vale.StrongPost_i.IMul64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 255
(Term_constr_id (X64.Vale.StrongPost_i.And64 @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.And64 @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.And64))

:named constructor_distinct_X64.Vale.StrongPost_i.And64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= 235
(Term_constr_id (X64.Vale.StrongPost_i.Add64Wrap @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Add64Wrap @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Add64Wrap))

:named constructor_distinct_X64.Vale.StrongPost_i.Add64Wrap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= 240
(Term_constr_id (X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.Adc64Wrap @x0
@x1))
:qid constructor_distinct_X64.Vale.StrongPost_i.Adc64Wrap))

:named constructor_distinct_X64.Vale.StrongPost_i.Adc64Wrap))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 107
(Term_constr_id X64.Machine_s.reg))
:named constructor_distinct_X64.Machine_s.reg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! (= 230
(Term_constr_id X64.Machine_s.operand))
:named constructor_distinct_X64.Machine_s.operand))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! (= 176
(Term_constr_id X64.Machine_s.maddr))
:named constructor_distinct_X64.Machine_s.maddr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 127
(Term_constr_id X64.Machine_s.Rsp))
:named constructor_distinct_X64.Machine_s.Rsp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 121
(Term_constr_id X64.Machine_s.Rsi))
:named constructor_distinct_X64.Machine_s.Rsi))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 119
(Term_constr_id X64.Machine_s.Rdx))
:named constructor_distinct_X64.Machine_s.Rdx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 123
(Term_constr_id X64.Machine_s.Rdi))
:named constructor_distinct_X64.Machine_s.Rdi))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 117
(Term_constr_id X64.Machine_s.Rcx))
:named constructor_distinct_X64.Machine_s.Rcx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 115
(Term_constr_id X64.Machine_s.Rbx))
:named constructor_distinct_X64.Machine_s.Rbx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 125
(Term_constr_id X64.Machine_s.Rbp))
:named constructor_distinct_X64.Machine_s.Rbp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 113
(Term_constr_id X64.Machine_s.Rax))
:named constructor_distinct_X64.Machine_s.Rax))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 131
(Term_constr_id X64.Machine_s.R9))
:named constructor_distinct_X64.Machine_s.R9))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 129
(Term_constr_id X64.Machine_s.R8))
:named constructor_distinct_X64.Machine_s.R8))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 143
(Term_constr_id X64.Machine_s.R15))
:named constructor_distinct_X64.Machine_s.R15))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 141
(Term_constr_id X64.Machine_s.R14))
:named constructor_distinct_X64.Machine_s.R14))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 139
(Term_constr_id X64.Machine_s.R13))
:named constructor_distinct_X64.Machine_s.R13))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 137
(Term_constr_id X64.Machine_s.R12))
:named constructor_distinct_X64.Machine_s.R12))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 135
(Term_constr_id X64.Machine_s.R11))
:named constructor_distinct_X64.Machine_s.R11))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 133
(Term_constr_id X64.Machine_s.R10))
:named constructor_distinct_X64.Machine_s.R10))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= 241
(Term_constr_id (X64.Machine_s.OReg @x0)))
 

:pattern ((X64.Machine_s.OReg @x0))
:qid constructor_distinct_X64.Machine_s.OReg))

:named constructor_distinct_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= 246
(Term_constr_id (X64.Machine_s.OMem @x0)))
 

:pattern ((X64.Machine_s.OMem @x0))
:qid constructor_distinct_X64.Machine_s.OMem))

:named constructor_distinct_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= 236
(Term_constr_id (X64.Machine_s.OConst @x0)))
 

:pattern ((X64.Machine_s.OConst @x0))
:qid constructor_distinct_X64.Machine_s.OConst))

:named constructor_distinct_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 187
(Term_constr_id (X64.Machine_s.MReg @x0
@x1)))
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid constructor_distinct_X64.Machine_s.MReg))

:named constructor_distinct_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 192
(Term_constr_id (X64.Machine_s.MIndex @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Machine_s.MIndex))

:named constructor_distinct_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= 182
(Term_constr_id (X64.Machine_s.MConst @x0)))
 

:pattern ((X64.Machine_s.MConst @x0))
:qid constructor_distinct_X64.Machine_s.MConst))

:named constructor_distinct_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term))
 (! (= 111
(Term_constr_id (FStar.Monotonic.Heap.core_mref @x0)))
 

:pattern ((FStar.Monotonic.Heap.core_mref @x0))
:qid constructor_distinct_FStar.Monotonic.Heap.core_mref))

:named constructor_distinct_FStar.Monotonic.Heap.core_mref))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;Assumption: X64.Vale.StrongPost_i.ins__uu___haseq
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins__uu___haseq; Namespace X64.Vale.StrongPost_i
(assert (! (Valid (Prims.hasEq X64.Vale.StrongPost_i.ins))
:named assumption_X64.Vale.StrongPost_i.ins__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.reg__uu___haseq
;;; Fact-ids: Name X64.Machine_s.reg__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.reg))
:named assumption_X64.Machine_s.reg__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.operand__uu___haseq
;;; Fact-ids: Name X64.Machine_s.operand__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.operand))
:named assumption_X64.Machine_s.operand__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.maddr__uu___haseq
;;; Fact-ids: Name X64.Machine_s.maddr__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.maddr))
:named assumption_X64.Machine_s.maddr__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Vale.StrongPost_i.ins; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mov64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Load64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Store64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Add64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Adc64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Mul64Wrap; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.IMul64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.And64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Shr64; Namespace X64.Vale.StrongPost_i; Name X64.Vale.StrongPost_i.Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(25,5-25,8); use=X64.Vale.StrongPost_i.fsti(25,5-25,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Vale.StrongPost_i.ins)
(= X64.Vale.StrongPost_i.ins
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Vale.StrongPost_i.ins))
:qid X64.Vale.StrongPost_i_pretyping_b57a61b8460583814cc6086893d3abc9))

:named X64.Vale.StrongPost_i_pretyping_b57a61b8460583814cc6086893d3abc9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(31,5-31,8); use=X64.Machine_s.fst(31,5-31,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.reg)
(= X64.Machine_s.reg
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.reg))
:qid X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7))

:named X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(49,5-49,10); use=X64.Machine_s.fst(49,5-49,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.maddr)
(= X64.Machine_s.maddr
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.maddr))
:qid X64.Machine_s_pretyping_a2ddd26f94eaa436cfe753563bf0547b))

:named X64.Machine_s_pretyping_a2ddd26f94eaa436cfe753563bf0547b))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(54,5-54,12); use=X64.Machine_s.fst(54,5-54,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.operand)
(= X64.Machine_s.operand
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.operand))
:qid X64.Machine_s_pretyping_644ad5cdcea42fa4e9e52bbdd5021fb9))

:named X64.Machine_s_pretyping_644ad5cdcea42fa4e9e52bbdd5021fb9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x2)))
:qid FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_pre_typing_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f
;;; Fact-ids: Name FStar.Preorder.relation; Namespace FStar.Preorder
(assert (! 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1))
(and 
;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x2
@x1)
(HasType @x3
@x1))
(HasType (ApplyTT (ApplyTT @x0
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT @x0
@x2)
@x3))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.1))

(IsTotFun @x0)

;; def=FStar.Preorder.fst(20,15-20,40); use=FStar.Preorder.fst(20,25-20,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(IsTotFun (ApplyTT @x0
@x2)))
 

:pattern ((ApplyTT @x0
@x2))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f.2))
))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a19f9d49348d4e0038f0ded87d87802f @x1)))
:qid FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))

:named FStar.Preorder_interpretation_Tm_arrow_a19f9d49348d4e0038f0ded87d87802f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Monotonic.Heap.core_mref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(39,4-39,13); use=FStar.Monotonic.Heap.fsti(39,4-39,13)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Monotonic.Heap.core_mref @x2))
(= (FStar.Monotonic.Heap.core_mref @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Monotonic.Heap.core_mref @x2)))
:qid FStar.Monotonic.Heap_pretyping_67b0ade1260a0985dfe99d32b2574a59))

:named FStar.Monotonic.Heap_pretyping_67b0ade1260a0985dfe99d32b2574a59))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(26,12-26,15)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Mov64? _}).
;   (*  - Could not prove post-condition
; *) ~(Mov64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Mov64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_40cd61a9068cbeed2a346b66c4d06035)

;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,12-26,15)
(not 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,12-26,15)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mov64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Mov64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_40cd61a9068cbeed2a346b66c4d06035

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Mov64__item__dst


; <Skipped let __proj__Mov64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Mov64__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Mov64__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__Mov64__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Mov64__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Mov64__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(26,30-26,33)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Mov64? _}).
;   (*  - Could not prove post-condition
; *) ~(Mov64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Mov64__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_40cd61a9068cbeed2a346b66c4d06035)

;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,30-26,33)
(not 
;; def=X64.Vale.StrongPost_i.fsti(26,4-26,9); use=X64.Vale.StrongPost_i.fsti(26,30-26,33)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mov64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Mov64__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_40cd61a9068cbeed2a346b66c4d06035

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Mov64__item__src


; <Skipped let __proj__Mov64__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Load64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Load64>

(declare-fun X64.Vale.StrongPost_i.uu___is_Load64 (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Load64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Load64>


; encoding sigelt let uu___is_Load64


; <Skipped let uu___is_Load64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Load64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Load64__item__dst>

(declare-fun Tm_refine_328c39e52cac4f714a2fd55744d2632c () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Load64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Load64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_29e968a5a58a7f5b42d054eddbd668bb () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Load64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Load64__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Load64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Load64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Load64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Load64))

:named typing_X64.Vale.StrongPost_i.uu___is_Load64))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_328c39e52cac4f714a2fd55744d2632c
Tm_type)
:named refinement_kinding_Tm_refine_328c39e52cac4f714a2fd55744d2632c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_328c39e52cac4f714a2fd55744d2632c)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Load64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_328c39e52cac4f714a2fd55744d2632c))
:qid refinement_interpretation_Tm_refine_328c39e52cac4f714a2fd55744d2632c))

:named refinement_interpretation_Tm_refine_328c39e52cac4f714a2fd55744d2632c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_328c39e52cac4f714a2fd55744d2632c
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_328c39e52cac4f714a2fd55744d2632c))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_328c39e52cac4f714a2fd55744d2632c))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Load64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,4-27,10)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Load64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Load64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Load64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Load64))

:named disc_equation_X64.Vale.StrongPost_i.Load64))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(27,13-27,16)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Load64? _}).
;   (*  - Could not prove post-condition
; *) ~(Load64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Load64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_328c39e52cac4f714a2fd55744d2632c)

;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,13-27,16)
(not 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,13-27,16)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Load64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Load64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_328c39e52cac4f714a2fd55744d2632c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Load64__item__dst


; <Skipped let __proj__Load64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Load64__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Load64__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__Load64__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Load64__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Load64__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(27,31-27,34)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Load64? _}).
;   (*  - Could not prove post-condition
; *) ~(Load64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Load64__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_328c39e52cac4f714a2fd55744d2632c)

;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,31-27,34)
(not 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,31-27,34)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Load64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Load64__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_328c39e52cac4f714a2fd55744d2632c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Load64__item__src


; <Skipped let __proj__Load64__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Load64__item__offset


; <Start encoding val X64.Vale.StrongPost_i.__proj__Load64__item__offset>


(declare-fun X64.Vale.StrongPost_i.__proj__Load64__item__offset (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Load64? _} -> Prims.int
(declare-fun Tm_arrow_881968c738c5dc4308515b5dcf8e54e5 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Load64__item__offset@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Load64__item__offset>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(27,49-27,55)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Load64? _}).
;   (*  - Could not prove post-condition
; *) ~(Load64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Load64__item__offset`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_328c39e52cac4f714a2fd55744d2632c)

;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,49-27,55)
(not 
;; def=X64.Vale.StrongPost_i.fsti(27,4-27,10); use=X64.Vale.StrongPost_i.fsti(27,49-27,55)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Load64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Load64__item__offset, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_328c39e52cac4f714a2fd55744d2632c

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Load64__item__offset


; <Skipped let __proj__Load64__item__offset/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Store64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Store64>

(declare-fun X64.Vale.StrongPost_i.uu___is_Store64 (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Store64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Store64>


; encoding sigelt let uu___is_Store64


; <Skipped let uu___is_Store64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Store64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Store64__item__dst>

(declare-fun Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Store64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Store64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_a6377a19666686494a6885f796f0f1ef () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Store64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Store64__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Store64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Store64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Store64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Store64))

:named typing_X64.Vale.StrongPost_i.uu___is_Store64))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Store64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3
Tm_type)
:named refinement_kinding_Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Store64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Store64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3))
:qid refinement_interpretation_Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3))

:named refinement_interpretation_Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Store64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Store64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,4-28,11)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Store64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Store64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Store64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Store64))

:named disc_equation_X64.Vale.StrongPost_i.Store64))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(28,14-28,17)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Store64? _}).
;   (*  - Could not prove post-condition
; *) ~(Store64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Store64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3)

;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,14-28,17)
(not 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,14-28,17)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Store64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Store64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Store64__item__dst


; <Skipped let __proj__Store64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Store64__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Store64__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__Store64__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Store64__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Store64__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(28,32-28,35)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Store64? _}).
;   (*  - Could not prove post-condition
; *) ~(Store64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Store64__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3)

;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,32-28,35)
(not 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,32-28,35)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Store64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Store64__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Store64__item__src


; <Skipped let __proj__Store64__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Store64__item__offset


; <Start encoding val X64.Vale.StrongPost_i.__proj__Store64__item__offset>


(declare-fun X64.Vale.StrongPost_i.__proj__Store64__item__offset (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Store64? _} -> Prims.int
(declare-fun Tm_arrow_e79e1c5d5e609661c2e149081fba2a0c () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Store64__item__offset@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Store64__item__offset>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(28,50-28,56)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Store64? _}).
;   (*  - Could not prove post-condition
; *) ~(Store64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Store64__item__offset`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3)

;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,50-28,56)
(not 
;; def=X64.Vale.StrongPost_i.fsti(28,4-28,11); use=X64.Vale.StrongPost_i.fsti(28,50-28,56)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Store64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Store64__item__offset, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Store64__item__offset


; <Skipped let __proj__Store64__item__offset/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Add64Wrap


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Add64Wrap>

(declare-fun X64.Vale.StrongPost_i.uu___is_Add64Wrap (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Add64Wrap@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Add64Wrap>


; encoding sigelt let uu___is_Add64Wrap


; <Skipped let uu___is_Add64Wrap/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst>

(declare-fun Tm_refine_8af824417febca2dd666f55860e37123 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Add64Wrap? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_e96427bd7caef85aba76d751c91208f9 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Add64Wrap; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Add64Wrap))

:named typing_X64.Vale.StrongPost_i.uu___is_Add64Wrap))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_8af824417febca2dd666f55860e37123
Tm_type)
:named refinement_kinding_Tm_refine_8af824417febca2dd666f55860e37123))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8af824417febca2dd666f55860e37123)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8af824417febca2dd666f55860e37123))
:qid refinement_interpretation_Tm_refine_8af824417febca2dd666f55860e37123))

:named refinement_interpretation_Tm_refine_8af824417febca2dd666f55860e37123))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8af824417febca2dd666f55860e37123
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8af824417febca2dd666f55860e37123))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_8af824417febca2dd666f55860e37123))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Add64Wrap; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,4-29,13)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Add64Wrap @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Add64Wrap))

:named disc_equation_X64.Vale.StrongPost_i.Add64Wrap))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(29,16-29,19)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Add64Wrap? _}).
;   (*  - Could not prove post-condition
; *) ~(Add64Wrap? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Add64Wrap__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8af824417febca2dd666f55860e37123)

;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,16-29,19)
(not 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,16-29,19)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8af824417febca2dd666f55860e37123

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Add64Wrap__item__dst


; <Skipped let __proj__Add64Wrap__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Add64Wrap__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Add64Wrap__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__Add64Wrap__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Add64Wrap__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Add64Wrap__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(29,34-29,37)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Add64Wrap? _}).
;   (*  - Could not prove post-condition
; *) ~(Add64Wrap? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Add64Wrap__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8af824417febca2dd666f55860e37123)

;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,34-29,37)
(not 
;; def=X64.Vale.StrongPost_i.fsti(29,4-29,13); use=X64.Vale.StrongPost_i.fsti(29,34-29,37)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8af824417febca2dd666f55860e37123

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Add64Wrap__item__src


; <Skipped let __proj__Add64Wrap__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Adc64Wrap


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Adc64Wrap>

(declare-fun X64.Vale.StrongPost_i.uu___is_Adc64Wrap (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Adc64Wrap@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Adc64Wrap>


; encoding sigelt let uu___is_Adc64Wrap


; <Skipped let uu___is_Adc64Wrap/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst>

(declare-fun Tm_refine_ecd294cd2663e86c405e1ba18cfc9132 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Adc64Wrap? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_440ecde1a09ccf3292c2f2b8b7078999 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Adc64Wrap; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Adc64Wrap))

:named typing_X64.Vale.StrongPost_i.uu___is_Adc64Wrap))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_ecd294cd2663e86c405e1ba18cfc9132
Tm_type)
:named refinement_kinding_Tm_refine_ecd294cd2663e86c405e1ba18cfc9132))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ecd294cd2663e86c405e1ba18cfc9132)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ecd294cd2663e86c405e1ba18cfc9132))
:qid refinement_interpretation_Tm_refine_ecd294cd2663e86c405e1ba18cfc9132))

:named refinement_interpretation_Tm_refine_ecd294cd2663e86c405e1ba18cfc9132))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ecd294cd2663e86c405e1ba18cfc9132
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ecd294cd2663e86c405e1ba18cfc9132))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_ecd294cd2663e86c405e1ba18cfc9132))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Adc64Wrap; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,4-30,13)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Adc64Wrap @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Adc64Wrap))

:named disc_equation_X64.Vale.StrongPost_i.Adc64Wrap))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(30,16-30,19)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Adc64Wrap? _}).
;   (*  - Could not prove post-condition
; *) ~(Adc64Wrap? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Adc64Wrap__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_ecd294cd2663e86c405e1ba18cfc9132)

;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,16-30,19)
(not 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,16-30,19)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_ecd294cd2663e86c405e1ba18cfc9132

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Adc64Wrap__item__dst


; <Skipped let __proj__Adc64Wrap__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(30,34-30,37)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Adc64Wrap? _}).
;   (*  - Could not prove post-condition
; *) ~(Adc64Wrap? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Adc64Wrap__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_ecd294cd2663e86c405e1ba18cfc9132)

;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,34-30,37)
(not 
;; def=X64.Vale.StrongPost_i.fsti(30,4-30,13); use=X64.Vale.StrongPost_i.fsti(30,34-30,37)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_ecd294cd2663e86c405e1ba18cfc9132

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Adc64Wrap__item__src


; <Skipped let __proj__Adc64Wrap__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Mul64Wrap


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Mul64Wrap>

(declare-fun X64.Vale.StrongPost_i.uu___is_Mul64Wrap (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Mul64Wrap@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Mul64Wrap>


; encoding sigelt let uu___is_Mul64Wrap


; <Skipped let uu___is_Mul64Wrap/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src>

(declare-fun Tm_refine_cdee9644b84d60ced7b907e879e8f711 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Mul64Wrap? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_7258a8a0734c2590d71066c33969a276 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Mul64Wrap; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Mul64Wrap))

:named typing_X64.Vale.StrongPost_i.uu___is_Mul64Wrap))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_cdee9644b84d60ced7b907e879e8f711
Tm_type)
:named refinement_kinding_Tm_refine_cdee9644b84d60ced7b907e879e8f711))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_cdee9644b84d60ced7b907e879e8f711)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_cdee9644b84d60ced7b907e879e8f711))
:qid refinement_interpretation_Tm_refine_cdee9644b84d60ced7b907e879e8f711))

:named refinement_interpretation_Tm_refine_cdee9644b84d60ced7b907e879e8f711))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cdee9644b84d60ced7b907e879e8f711
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_cdee9644b84d60ced7b907e879e8f711))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_cdee9644b84d60ced7b907e879e8f711))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Mul64Wrap; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,4-31,13)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Mul64Wrap @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Mul64Wrap))

:named disc_equation_X64.Vale.StrongPost_i.Mul64Wrap))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(31,16-31,19)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Mul64Wrap? _}).
;   (*  - Could not prove post-condition
; *) ~(Mul64Wrap? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Mul64Wrap__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_cdee9644b84d60ced7b907e879e8f711)

;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,16-31,19)
(not 
;; def=X64.Vale.StrongPost_i.fsti(31,4-31,13); use=X64.Vale.StrongPost_i.fsti(31,16-31,19)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Mul64Wrap__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_cdee9644b84d60ced7b907e879e8f711

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Mul64Wrap__item__src


; <Skipped let __proj__Mul64Wrap__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_IMul64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_IMul64>

(declare-fun X64.Vale.StrongPost_i.uu___is_IMul64 (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_IMul64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_IMul64>


; encoding sigelt let uu___is_IMul64


; <Skipped let uu___is_IMul64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__IMul64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__IMul64__item__dst>

(declare-fun Tm_refine_682d3d695d007eebd7b34b81e68201a2 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__IMul64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{IMul64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_ede2b6fdef91f151e7823554fdc0d43e () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__IMul64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__IMul64__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_IMul64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_IMul64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_IMul64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_IMul64))

:named typing_X64.Vale.StrongPost_i.uu___is_IMul64))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__IMul64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_682d3d695d007eebd7b34b81e68201a2
Tm_type)
:named refinement_kinding_Tm_refine_682d3d695d007eebd7b34b81e68201a2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__IMul64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_682d3d695d007eebd7b34b81e68201a2)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_IMul64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_682d3d695d007eebd7b34b81e68201a2))
:qid refinement_interpretation_Tm_refine_682d3d695d007eebd7b34b81e68201a2))

:named refinement_interpretation_Tm_refine_682d3d695d007eebd7b34b81e68201a2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_682d3d695d007eebd7b34b81e68201a2
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__IMul64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_682d3d695d007eebd7b34b81e68201a2))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_682d3d695d007eebd7b34b81e68201a2))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_IMul64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,4-32,10)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_IMul64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.IMul64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_IMul64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.IMul64))

:named disc_equation_X64.Vale.StrongPost_i.IMul64))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(32,13-32,16)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{IMul64? _}).
;   (*  - Could not prove post-condition
; *) ~(IMul64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__IMul64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_682d3d695d007eebd7b34b81e68201a2)

;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,13-32,16)
(not 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,13-32,16)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_IMul64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__IMul64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_682d3d695d007eebd7b34b81e68201a2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__IMul64__item__dst


; <Skipped let __proj__IMul64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__IMul64__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__IMul64__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__IMul64__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__IMul64__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__IMul64__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(32,31-32,34)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{IMul64? _}).
;   (*  - Could not prove post-condition
; *) ~(IMul64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__IMul64__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_682d3d695d007eebd7b34b81e68201a2)

;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,31-32,34)
(not 
;; def=X64.Vale.StrongPost_i.fsti(32,4-32,10); use=X64.Vale.StrongPost_i.fsti(32,31-32,34)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_IMul64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__IMul64__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_682d3d695d007eebd7b34b81e68201a2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__IMul64__item__src


; <Skipped let __proj__IMul64__item__src/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_And64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_And64>

(declare-fun X64.Vale.StrongPost_i.uu___is_And64 (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_And64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_And64>


; encoding sigelt let uu___is_And64


; <Skipped let uu___is_And64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__And64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__And64__item__dst>

(declare-fun Tm_refine_5dc689cbcdb3326b49d445a095bac099 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__And64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{And64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_c54e148e3b1e26105d80bf69a7b25b4e () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__And64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__And64__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_And64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_And64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_And64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_And64))

:named typing_X64.Vale.StrongPost_i.uu___is_And64))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__And64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_5dc689cbcdb3326b49d445a095bac099
Tm_type)
:named refinement_kinding_Tm_refine_5dc689cbcdb3326b49d445a095bac099))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__And64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_5dc689cbcdb3326b49d445a095bac099)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_And64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_5dc689cbcdb3326b49d445a095bac099))
:qid refinement_interpretation_Tm_refine_5dc689cbcdb3326b49d445a095bac099))

:named refinement_interpretation_Tm_refine_5dc689cbcdb3326b49d445a095bac099))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5dc689cbcdb3326b49d445a095bac099
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__And64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_5dc689cbcdb3326b49d445a095bac099))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_5dc689cbcdb3326b49d445a095bac099))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_And64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,4-33,9)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_And64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.And64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_And64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.And64))

:named disc_equation_X64.Vale.StrongPost_i.And64))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(33,12-33,15)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{And64? _}).
;   (*  - Could not prove post-condition
; *) ~(And64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__And64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_5dc689cbcdb3326b49d445a095bac099)

;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,12-33,15)
(not 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,12-33,15)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_And64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__And64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_5dc689cbcdb3326b49d445a095bac099

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__And64__item__dst


; <Skipped let __proj__And64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__And64__item__amt


; <Start encoding val X64.Vale.StrongPost_i.__proj__And64__item__amt>


(declare-fun X64.Vale.StrongPost_i.__proj__And64__item__amt (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__And64__item__amt@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__And64__item__amt>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(33,30-33,33)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{And64? _}).
;   (*  - Could not prove post-condition
; *) ~(And64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__And64__item__amt`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_5dc689cbcdb3326b49d445a095bac099)

;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,30-33,33)
(not 
;; def=X64.Vale.StrongPost_i.fsti(33,4-33,9); use=X64.Vale.StrongPost_i.fsti(33,30-33,33)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_And64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__And64__item__amt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_5dc689cbcdb3326b49d445a095bac099

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__And64__item__amt


; <Skipped let __proj__And64__item__amt/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Shr64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Shr64>

(declare-fun X64.Vale.StrongPost_i.uu___is_Shr64 (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Shr64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Shr64>


; encoding sigelt let uu___is_Shr64


; <Skipped let uu___is_Shr64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Shr64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Shr64__item__dst>

(declare-fun Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Shr64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Shr64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_a60bf2ea56ee43616675d2505b5f40c4 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Shr64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Shr64__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Shr64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Shr64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Shr64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Shr64))

:named typing_X64.Vale.StrongPost_i.uu___is_Shr64))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Shr64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af
Tm_type)
:named refinement_kinding_Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Shr64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Shr64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af))
:qid refinement_interpretation_Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af))

:named refinement_interpretation_Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Shr64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_9d8aaa9f141413804a9831bfdf4fa3af))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Shr64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,4-34,9)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Shr64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Shr64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Shr64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Shr64))

:named disc_equation_X64.Vale.StrongPost_i.Shr64))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(34,12-34,15)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Shr64? _}).
;   (*  - Could not prove post-condition
; *) ~(Shr64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Shr64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af)

;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,12-34,15)
(not 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,12-34,15)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Shr64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Shr64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Shr64__item__dst


; <Skipped let __proj__Shr64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Shr64__item__amt


; <Start encoding val X64.Vale.StrongPost_i.__proj__Shr64__item__amt>


(declare-fun X64.Vale.StrongPost_i.__proj__Shr64__item__amt (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Shr64__item__amt@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Shr64__item__amt>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(34,30-34,33)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Shr64? _}).
;   (*  - Could not prove post-condition
; *) ~(Shr64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Shr64__item__amt`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af)

;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,30-34,33)
(not 
;; def=X64.Vale.StrongPost_i.fsti(34,4-34,9); use=X64.Vale.StrongPost_i.fsti(34,30-34,33)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Shr64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Shr64__item__amt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Shr64__item__amt


; <Skipped let __proj__Shr64__item__amt/>


; encoding sigelt val X64.Vale.StrongPost_i.uu___is_Sub64


; <Start encoding val X64.Vale.StrongPost_i.uu___is_Sub64>

(declare-fun X64.Vale.StrongPost_i.uu___is_Sub64 (Term) Term)

(declare-fun X64.Vale.StrongPost_i.uu___is_Sub64@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.uu___is_Sub64>


; encoding sigelt let uu___is_Sub64


; <Skipped let uu___is_Sub64/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Sub64__item__dst


; <Start encoding val X64.Vale.StrongPost_i.__proj__Sub64__item__dst>

(declare-fun Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Sub64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Sub64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_422cad44595bad12260220b69f968412 () Term)
(declare-fun X64.Vale.StrongPost_i.__proj__Sub64__item__dst@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Sub64__item__dst>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType (X64.Vale.StrongPost_i.uu___is_Sub64 @x0)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Sub64 @x0))
:qid typing_X64.Vale.StrongPost_i.uu___is_Sub64))

:named typing_X64.Vale.StrongPost_i.uu___is_Sub64))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Sub64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2
Tm_type)
:named refinement_kinding_Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Sub64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2)
(and (HasTypeFuel @u0
@x1
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Sub64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2))
:qid refinement_interpretation_Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2))

:named refinement_interpretation_Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Sub64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! (iff (Valid (Prims.hasEq Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2))
(Valid (Prims.hasEq X64.Vale.StrongPost_i.ins)))
:named haseqTm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.uu___is_Sub64; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,4-35,9)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.uu___is_Sub64 @x0)
(BoxBool (is-X64.Vale.StrongPost_i.Sub64 @x0)))
 

:pattern ((X64.Vale.StrongPost_i.uu___is_Sub64 @x0))
:qid disc_equation_X64.Vale.StrongPost_i.Sub64))

:named disc_equation_X64.Vale.StrongPost_i.Sub64))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(35,12-35,15)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Sub64? _}).
;   (*  - Could not prove post-condition
; *) ~(Sub64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Sub64__item__dst`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2)

;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,12-35,15)
(not 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,12-35,15)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Sub64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Sub64__item__dst, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Sub64__item__dst


; <Skipped let __proj__Sub64__item__dst/>


; encoding sigelt val X64.Vale.StrongPost_i.__proj__Sub64__item__src


; <Start encoding val X64.Vale.StrongPost_i.__proj__Sub64__item__src>


(declare-fun X64.Vale.StrongPost_i.__proj__Sub64__item__src (Term) Term)


(declare-fun X64.Vale.StrongPost_i.__proj__Sub64__item__src@tok () Term)

; </end encoding val X64.Vale.StrongPost_i.__proj__Sub64__item__src>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(35,30-35,33)

(declare-fun label_1 () Bool)


; Encoding query formula : forall (projectee: _: X64.Vale.StrongPost_i.ins{Sub64? _}).
;   (*  - Could not prove post-condition
; *) ~(Sub64? projectee) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let __proj__Sub64__item__src`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2)

;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,30-35,33)
(not 
;; def=X64.Vale.StrongPost_i.fsti(35,4-35,9); use=X64.Vale.StrongPost_i.fsti(35,30-35,33)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Sub64 @x0))
)
)
label_1)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.__proj__Sub64__item__src, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, refinement_interpretation_Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let __proj__Sub64__item__src


; <Skipped let __proj__Sub64__item__src/>


; encoding sigelt let va_fast_ins_Mov64


; <Start encoding let va_fast_ins_Mov64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Mov64 (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Mov64@tok () Term)

; </end encoding let va_fast_ins_Mov64>


; encoding sigelt let va_fast_ins_Load64


; <Start encoding let va_fast_ins_Load64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Load64 (Term Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Load64@tok () Term)

; </end encoding let va_fast_ins_Load64>


; encoding sigelt let va_fast_ins_Store64


; <Start encoding let va_fast_ins_Store64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Store64 (Term Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Store64@tok () Term)

; </end encoding let va_fast_ins_Store64>


; encoding sigelt let va_fast_ins_Add64Wrap


; <Start encoding let va_fast_ins_Add64Wrap>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Add64Wrap (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Add64Wrap@tok () Term)

; </end encoding let va_fast_ins_Add64Wrap>


; encoding sigelt let va_fast_ins_Adc64Wrap


; <Start encoding let va_fast_ins_Adc64Wrap>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Adc64Wrap (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Adc64Wrap@tok () Term)

; </end encoding let va_fast_ins_Adc64Wrap>


; encoding sigelt let va_fast_ins_Mul64Wrap


; <Start encoding let va_fast_ins_Mul64Wrap>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Mul64Wrap (Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Mul64Wrap@tok () Term)

; </end encoding let va_fast_ins_Mul64Wrap>


; encoding sigelt let va_fast_ins_IMul64


; <Start encoding let va_fast_ins_IMul64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_IMul64 (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_IMul64@tok () Term)

; </end encoding let va_fast_ins_IMul64>


; encoding sigelt let va_fast_ins_And64


; <Start encoding let va_fast_ins_And64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_And64 (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_And64@tok () Term)

; </end encoding let va_fast_ins_And64>


; encoding sigelt let va_fast_ins_Shr64


; <Start encoding let va_fast_ins_Shr64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Shr64 (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Shr64@tok () Term)

; </end encoding let va_fast_ins_Shr64>


; encoding sigelt let va_fast_ins_Sub64


; <Start encoding let va_fast_ins_Sub64>

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Sub64 (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.va_fast_ins_Sub64@tok () Term)

; </end encoding let va_fast_ins_Sub64>


; encoding sigelt let va_inss


; <Start encoding let va_inss>

(declare-fun X64.Vale.StrongPost_i.va_inss () Term)

; </end encoding let va_inss>


; encoding sigelt let valid_maddr_norm


; <Start encoding let valid_maddr_norm>

(declare-fun X64.Vale.StrongPost_i.valid_maddr_norm (Term Term) Term)
;;;;;;;;;;;;;;;;addr: X64.Machine_s.maddr -> s: X64.Vale.State_i.state -> Prims.bool
(declare-fun Tm_arrow_a3b3c4fed355497d4bfbb28bb7a7fd3c () Term)
(declare-fun X64.Vale.StrongPost_i.valid_maddr_norm@tok () Term)

; </end encoding let valid_maddr_norm>

;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType X64.Vale.Regs_i.t
Tm_type)
:named typing_X64.Vale.Regs_i.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.nat64
Tm_type)
:named typing_X64.Machine_s.nat64))
;;;;;;;;;;;;;;;;typing_Tm_abs_bde726dfeb2837d96e43a155f7c873f5
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType Tm_abs_bde726dfeb2837d96e43a155f7c873f5
Tm_arrow_73862e447730cb7be03c891c89cb5703)
:named typing_Tm_abs_bde726dfeb2837d96e43a155f7c873f5))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.t; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(35,4-35,5); use=FStar.Map.fsti(35,4-35,5)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type))
(HasType (FStar.Map.t @x0
@x1)
Tm_type))
 

:pattern ((FStar.Map.t @x0
@x1))
:qid typing_FStar.Map.t))

:named typing_FStar.Map.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,4-102,16); use=FStar.FunctionalExtensionality.fsti(102,4-102,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (FStar.FunctionalExtensionality.restricted_t @x0
@x1)
Tm_type))
 

:pattern ((FStar.FunctionalExtensionality.restricted_t @x0
@x1))
:qid typing_FStar.FunctionalExtensionality.restricted_t))

:named typing_FStar.FunctionalExtensionality.restricted_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.on_domain; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(74,4-74,13); use=FStar.FunctionalExtensionality.fsti(74,4-74,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
:qid typing_FStar.FunctionalExtensionality.on_domain))

:named typing_FStar.FunctionalExtensionality.on_domain))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.is_restricted; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(94,4-94,17); use=FStar.FunctionalExtensionality.fsti(94,4-94,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2)
Prims.logical))
 

:pattern ((FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2))
:qid typing_FStar.FunctionalExtensionality.is_restricted))

:named typing_FStar.FunctionalExtensionality.is_restricted))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid typing_FStar.FunctionalExtensionality.feq))

:named typing_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
:qid subterm_ordering_X64.Vale.State_i.Mkstate))

:named subterm_ordering_X64.Vale.State_i.Mkstate))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of_aref; Namespace FStar.Monotonic.Heap
(assert (! (HasType Tm_refine_afd51579b90d50ea23e03b743a1fa001
Tm_type)
:named refinement_kinding_Tm_refine_afd51579b90d50ea23e03b743a1fa001))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_a608a89bbc0a207d5920d37d906f7f40
Tm_type)
:named refinement_kinding_Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,46-102,78); use=FStar.FunctionalExtensionality.fsti(102,46-102,78)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))

:named refinement_kinding_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.nat128; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_758ff42440a58a30c095e911b9c96f61
Tm_type)
:named refinement_kinding_Tm_refine_758ff42440a58a30c095e911b9c96f61))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of_aref; Namespace FStar.Monotonic.Heap
(assert (! 
;; def=FStar.Monotonic.Heap.fsti(324,34-324,53); use=FStar.Monotonic.Heap.fsti(324,34-324,53)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_afd51579b90d50ea23e03b743a1fa001)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Monotonic.Heap.fsti(324,44-324,49); use=FStar.Monotonic.Heap.fsti(324,44-324,49)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_afd51579b90d50ea23e03b743a1fa001))
:qid refinement_interpretation_Tm_refine_afd51579b90d50ea23e03b743a1fa001))

:named refinement_interpretation_Tm_refine_afd51579b90d50ea23e03b743a1fa001))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(27,13-27,33); use=X64.Machine_s.fst(27,13-27,33)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a608a89bbc0a207d5920d37d906f7f40)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Machine_s.fst(27,19-27,32)
(< (BoxInt_proj_0 @x1)
18446744073709551616)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
:qid refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40))

:named refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,46-102,78); use=FStar.FunctionalExtensionality.fsti(102,46-102,78)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x3
@x2))

;; def=FStar.FunctionalExtensionality.fsti(102,60-102,77); use=FStar.FunctionalExtensionality.fsti(102,60-102,77)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(102,60-102,77); use=FStar.FunctionalExtensionality.fsti(102,60-102,77)
(FStar.FunctionalExtensionality.is_restricted @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))

:named refinement_interpretation_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.nat128; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(29,14-29,35); use=X64.Machine_s.fst(29,14-29,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_758ff42440a58a30c095e911b9c96f61)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=X64.Machine_s.fst(29,20-29,34); use=X64.Machine_s.fst(29,20-29,34)
(< (BoxInt_proj_0 @x1)
340282366920938463463374607431768211456)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_758ff42440a58a30c095e911b9c96f61))
:qid refinement_interpretation_Tm_refine_758ff42440a58a30c095e911b9c96f61))

:named refinement_interpretation_Tm_refine_758ff42440a58a30c095e911b9c96f61))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_regs (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_regs))

:named projection_inverse_X64.Vale.State_i.Mkstate_regs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_ok (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_ok))

:named projection_inverse_X64.Vale.State_i.Mkstate_ok))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_mem (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_mem))

:named projection_inverse_X64.Vale.State_i.Mkstate_mem))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_flags (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_flags))

:named projection_inverse_X64.Vale.State_i.Mkstate_flags))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.idempotence_on_domain
;;; Fact-ids: Name FStar.FunctionalExtensionality.idempotence_on_domain; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(84,12-84,58); use=FStar.FunctionalExtensionality.fsti(84,12-84,58)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
)
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)))
:qid lemma_FStar.FunctionalExtensionality.idempotence_on_domain))
:named lemma_FStar.FunctionalExtensionality.idempotence_on_domain))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.feq_on_domain
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq_on_domain; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(80,12-80,35); use=FStar.FunctionalExtensionality.fsti(80,12-80,35)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(80,12-80,35); use=FStar.FunctionalExtensionality.fsti(80,12-80,35)
(FStar.FunctionalExtensionality.feq @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
@x2)
)
)
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
:qid lemma_FStar.FunctionalExtensionality.feq_on_domain))
:named lemma_FStar.FunctionalExtensionality.feq_on_domain))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.extensionality
;;; Fact-ids: Name FStar.FunctionalExtensionality.extensionality; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(133,21-133,72); use=FStar.FunctionalExtensionality.fsti(133,21-133,72)
(iff 
;; def=FStar.FunctionalExtensionality.fsti(133,22-133,35); use=FStar.FunctionalExtensionality.fsti(133,22-133,35)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(133,22-133,35); use=FStar.FunctionalExtensionality.fsti(133,22-133,35)
(FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
)


;; def=FStar.FunctionalExtensionality.fsti(133,41-133,71); use=FStar.FunctionalExtensionality.fsti(133,41-133,71)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x3))
)
)
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid lemma_FStar.FunctionalExtensionality.extensionality))
:named lemma_FStar.FunctionalExtensionality.extensionality))
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! (HasType X64.Vale.State_i.state
Tm_type)
:named kinding_X64.Vale.State_i.state@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_73862e447730cb7be03c891c89cb5703
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType Tm_arrow_73862e447730cb7be03c891c89cb5703
Tm_type)
:named kinding_Tm_arrow_73862e447730cb7be03c891c89cb5703))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type))
:qid kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(23,38-23,43); use=X64.Vale.Regs_i.fsti(23,38-23,43)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_bde726dfeb2837d96e43a155f7c873f5
@x0)
X64.Machine_s.nat64)
 

:pattern ((ApplyTT Tm_abs_bde726dfeb2837d96e43a155f7c873f5
@x0))
:qid interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5))

:named interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_afd51579b90d50ea23e03b743a1fa001
;;; Fact-ids: Name FStar.Monotonic.Heap.addr_of_aref; Namespace FStar.Monotonic.Heap
(assert (! (iff (Valid (Prims.hasEq Tm_refine_afd51579b90d50ea23e03b743a1fa001))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_afd51579b90d50ea23e03b743a1fa001))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a608a89bbc0a207d5920d37d906f7f40
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_a608a89bbc0a207d5920d37d906f7f40))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,46-102,78); use=FStar.FunctionalExtensionality.fsti(102,46-102,78)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1)))
(Valid (Prims.hasEq (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1))))
:qid haseqTm_refine_7e4a6c5999db731b5d17d0418dfeea3e))

:named haseqTm_refine_7e4a6c5999db731b5d17d0418dfeea3e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_758ff42440a58a30c095e911b9c96f61
;;; Fact-ids: Name X64.Machine_s.nat128; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_758ff42440a58a30c095e911b9c96f61))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_758ff42440a58a30c095e911b9c96f61))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType X64.Vale.Regs_i.t
Tm_type)
:named function_token_typing_X64.Vale.Regs_i.t))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.nat64
Tm_type)
:named function_token_typing_X64.Machine_s.nat64))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Vale.State_i.state)
(is-X64.Vale.State_i.Mkstate @x1))
 

:pattern ((HasTypeFuel @u0
@x1
X64.Vale.State_i.state))
:qid fuel_guarded_inversion_X64.Vale.State_i.state))

:named fuel_guarded_inversion_X64.Vale.State_i.state))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Regs_i.t
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (= X64.Vale.Regs_i.t
(FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg
Tm_abs_bde726dfeb2837d96e43a155f7c873f5))
:named equation_X64.Vale.Regs_i.t))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.nat64
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.nat64
Tm_refine_a608a89bbc0a207d5920d37d906f7f40)
:named equation_X64.Machine_s.nat64))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.restricted_t
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,4-102,16); use=FStar.FunctionalExtensionality.fsti(102,4-102,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.FunctionalExtensionality.restricted_t @x0
@x1)
(Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1))
 

:pattern ((FStar.FunctionalExtensionality.restricted_t @x0
@x1))
:qid equation_FStar.FunctionalExtensionality.restricted_t))

:named equation_FStar.FunctionalExtensionality.restricted_t))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.is_restricted
;;; Fact-ids: Name FStar.FunctionalExtensionality.is_restricted; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(94,4-94,17); use=FStar.FunctionalExtensionality.fsti(94,4-94,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2))

;; def=FStar.FunctionalExtensionality.fsti(94,63-94,81); use=FStar.FunctionalExtensionality.fsti(94,63-94,81)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
@x2)
)
 

:pattern ((FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2))
:qid equation_FStar.FunctionalExtensionality.is_restricted))

:named equation_FStar.FunctionalExtensionality.is_restricted))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.feq
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))

;; def=FStar.FunctionalExtensionality.fsti(48,56-48,100); use=FStar.FunctionalExtensionality.fsti(48,56-48,100)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=FStar.FunctionalExtensionality.fsti(48,90-48,100); use=FStar.FunctionalExtensionality.fsti(48,90-48,100)
(= (ApplyTT @x2
@x4)
(ApplyTT @x3
@x4))
)
 

:pattern ((ApplyTT @x2
@x4))

:pattern ((ApplyTT @x3
@x4))
:qid equation_FStar.FunctionalExtensionality.feq.1))
)
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid equation_FStar.FunctionalExtensionality.feq))

:named equation_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Prop-typing for FStar.FunctionalExtensionality.is_restricted
;;; Fact-ids: Name FStar.FunctionalExtensionality.is_restricted; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(94,4-94,17); use=FStar.FunctionalExtensionality.fsti(94,4-94,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(Valid (Prims.subtype_of (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_FStar.FunctionalExtensionality.is_restricted))

:named defn_equation_FStar.FunctionalExtensionality.is_restricted))
;;;;;;;;;;;;;;;;Prop-typing for FStar.FunctionalExtensionality.feq
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(Valid (Prims.subtype_of (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_FStar.FunctionalExtensionality.feq))

:named defn_equation_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
X64.Vale.Regs_i.t)
(HasTypeFuel @u0
@x3
X64.Machine_s.nat64)
(HasTypeFuel @u0
@x4
(FStar.Map.t Prims.int
X64.Machine_s.nat64)))
(HasTypeFuel @u0
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
:qid data_typing_intro_X64.Vale.State_i.Mkstate@tok))

:named data_typing_intro_X64.Vale.State_i.Mkstate@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state)
(and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
X64.Vale.Regs_i.t)
(HasTypeFuel @u0
@x3
X64.Machine_s.nat64)
(HasTypeFuel @u0
@x4
(FStar.Map.t Prims.int
X64.Machine_s.nat64))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
:qid data_elim_X64.Vale.State_i.Mkstate))

:named data_elim_X64.Vale.State_i.Mkstate))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! (= 101
(Term_constr_id X64.Vale.State_i.state))
:named constructor_distinct_X64.Vale.State_i.state))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 107
(Term_constr_id (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Vale.State_i.Mkstate))

:named constructor_distinct_X64.Vale.State_i.Mkstate))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Vale.State_i.state)
(= X64.Vale.State_i.state
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Vale.State_i.state))
:qid X64.Vale.State_i_pretyping_de52c7fd4c52e1942aeef9a9143c43bf))

:named X64.Vale.State_i_pretyping_de52c7fd4c52e1942aeef9a9143c43bf))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(23,24-23,27); use=X64.Vale.Regs_i.fsti(23,11-23,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_73862e447730cb7be03c891c89cb5703)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_73862e447730cb7be03c891c89cb5703))
:qid X64.Vale.Regs_i_pre_typing_Tm_arrow_73862e447730cb7be03c891c89cb5703))

:named X64.Vale.Regs_i_pre_typing_Tm_arrow_73862e447730cb7be03c891c89cb5703))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(23,24-23,27); use=X64.Vale.Regs_i.fsti(23,11-23,23)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_73862e447730cb7be03c891c89cb5703)
(and 
;; def=X64.Vale.Regs_i.fsti(23,24-23,27); use=X64.Vale.Regs_i.fsti(23,11-23,23)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.Regs_i_interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_73862e447730cb7be03c891c89cb5703))
:qid X64.Vale.Regs_i_interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703))

:named X64.Vale.Regs_i_interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2)))
:qid Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(and 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1)))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x2
@x3)))
:qid FStar.FunctionalExtensionality_pre_typing_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named FStar.FunctionalExtensionality_pre_typing_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x2))
(and 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x2)))
:qid FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(54,4-57,36)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (o: X64.Machine_s.operand) (s: X64.Vale.State_i.state).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post Prims.bool).
;     (forall (x: Prims.bool). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     ~(OConst? o) /\ ~(OReg? o) /\ ~(OMem? o) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let valid_operand_norm`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post Prims.bool))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(54,4-57,36)
(forall ((@x3 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(54,4-57,36)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(54,4-57,36)
(ApplyTT @x2
@x3)
)

 

:pattern ((ApplyTT @x2
@x3))
:qid @query.2))


;; def=X64.Vale.StrongPost_i.fsti(53,24-53,25); use=X64.Vale.StrongPost_i.fsti(54,10-54,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(53,24-53,25); use=X64.Vale.StrongPost_i.fsti(54,10-54,11)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OConst @x0))
)


;; def=X64.Vale.StrongPost_i.fsti(53,24-53,25); use=X64.Vale.StrongPost_i.fsti(54,10-54,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(53,24-53,25); use=X64.Vale.StrongPost_i.fsti(54,10-54,11)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x0))
)


;; def=X64.Vale.StrongPost_i.fsti(53,24-53,25); use=X64.Vale.StrongPost_i.fsti(54,10-54,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(53,24-53,25); use=X64.Vale.StrongPost_i.fsti(54,10-54,11)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OMem @x0))
)
)
label_1)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.valid_operand_norm, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_X64.Machine_s.OConst, disc_equation_X64.Machine_s.OMem, disc_equation_X64.Machine_s.OReg, fuel_guarded_inversion_X64.Machine_s.operand, projection_inverse_BoxBool_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let valid_operand_norm


; <Start encoding let valid_operand_norm>

(declare-fun X64.Vale.StrongPost_i.valid_operand_norm (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.valid_operand_norm@tok () Term)

; </end encoding let valid_operand_norm>

;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(60,2-63,44)

(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (o: X64.Machine_s.operand) (s: X64.Vale.State_i.state).
;   (*  - Could not prove post-condition
; *)
;   forall (k: Prims.pure_post X64.Machine_s.nat64).
;     (forall (x: X64.Machine_s.nat64). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;     (~(OConst? o) /\ ~(OReg? o) /\ ~(OMem? o) ==> Prims.l_False) /\
;     (forall (b: Prims.int).
;         o == X64.Machine_s.OConst b ==>
;         (forall (k: Prims.pure_post X64.Machine_s.nat64).
;             (forall (x: X64.Machine_s.nat64). {:pattern Prims.guard_free (k x)}
;                 Prims.auto_squash (k x)) ==>
;             (0 <= b && b < 0x10000000000000000) == true ==> b >= 0 /\ b < 0x10000000000000000))


; Context: While encoding a query
; While typechecking the top-level declaration `let eval_operand_norm`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.pure_post X64.Machine_s.nat64))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(forall ((@x3 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(ApplyTT @x2
@x3)
)

 

:pattern ((ApplyTT @x2
@x3))
:qid @query.2))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(and (implies 
;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(and 
;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(not 
;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OConst @x0))
)


;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(not 
;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x0))
)


;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(not 
;; def=X64.Vale.StrongPost_i.fsti(59,23-59,24); use=X64.Vale.StrongPost_i.fsti(60,8-60,9)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OMem @x0))
)
)

label_1)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.int)

;; def=X64.Vale.StrongPost_i.fsti(59,23-61,12); use=X64.Vale.StrongPost_i.fsti(60,8-61,12)
(= @x0
(X64.Machine_s.OConst @x3))
)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post X64.Machine_s.nat64))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(forall ((@x5 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(60,2-63,44)
(ApplyTT @x4
@x5)
)

 

:pattern ((ApplyTT @x4
@x5))
:qid @query.5))


;; def=X64.Vale.StrongPost_i.fsti(61,19-61,42); use=X64.Vale.StrongPost_i.fsti(61,19-61,42)
(= (Prims.op_AmpAmp (Prims.op_LessThanOrEqual (BoxInt 0)
@x3)
(Prims.op_LessThan @x3
(BoxInt 18446744073709551616)))
(BoxBool true))
)

;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Vale.StrongPost_i.fsti(61,48-61,49)
(and 
;; def=Prims.fst(680,18-680,24); use=X64.Vale.StrongPost_i.fsti(61,48-61,49)
(or label_2

;; def=Prims.fst(680,18-680,24); use=X64.Vale.StrongPost_i.fsti(61,48-61,49)
(>= (BoxInt_proj_0 @x3)
0)
)


;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Vale.StrongPost_i.fsti(61,48-61,49)
(or label_3

;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Vale.StrongPost_i.fsti(61,48-61,49)
(< (BoxInt_proj_0 @x3)
18446744073709551616)
)
)
)
 
;;no pats
:qid @query.4)))
 
;;no pats
:qid @query.3))
)
)
 
;;no pats
:qid @query.1)))
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.eval_operand_norm, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, disc_equation_X64.Machine_s.OConst, disc_equation_X64.Machine_s.OMem, disc_equation_X64.Machine_s.OReg, fuel_guarded_inversion_X64.Machine_s.operand, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let eval_operand_norm


; <Start encoding let eval_operand_norm>

(declare-fun X64.Vale.StrongPost_i.eval_operand_norm (Term Term) Term)

(declare-fun X64.Vale.StrongPost_i.eval_operand_norm@tok () Term)


; </end encoding let eval_operand_norm>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__regs @x0)
X64.Vale.Regs_i.t))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__regs @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__regs))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Nil @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid typing_Prims.uu___is_Nil))

:named typing_Prims.uu___is_Nil))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (= (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x0)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x0))
 

:pattern ((ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x0))
:qid token_correspondence_X64.Vale.State_i.__proj__Mkstate__item__regs))

:named token_correspondence_X64.Vale.State_i.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__regs @x0)
(X64.Vale.State_i.Mkstate_regs @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__regs @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_regs))

:named proj_equation_X64.Vale.State_i.Mkstate_regs))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! (HasType Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee
Tm_type)
:named kinding_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Vale.State_i.__proj__Mkstate__item__regs@tok
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))

;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x1 Term))
 (! (= (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x1))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__regs @x1))
:qid function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs.1))
)
 

:pattern ((ApplyTT @x0
X64.Vale.State_i.__proj__Mkstate__item__regs@tok))
:qid function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs))

:named function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Nil; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Nil @x0
@x1)
(BoxBool (is-Prims.Nil @x1)))
 

:pattern ((Prims.uu___is_Nil @x0
@x1))
:qid disc_equation_Prims.Nil))

:named disc_equation_Prims.Nil))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-28,16); use=X64.Vale.State_i.fsti(26,10-28,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
:qid X64.Vale.State_i_pre_typing_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))

:named X64.Vale.State_i_pre_typing_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-28,16); use=X64.Vale.State_i.fsti(26,10-28,16)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee)
(and 
;; def=X64.Vale.State_i.fsti(26,10-28,16); use=X64.Vale.State_i.fsti(26,10-28,16)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.State_i.state)
(HasType (ApplyTT @x0
@x1)
X64.Vale.Regs_i.t))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
:qid X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))

:named X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Vale.State_i.eval_reg; Namespace X64.Vale.State_i
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Vale.State_i.__proj__Mkstate__item__regs@tok))
:named @kick_partial_app_7a990ce42f78ee59b9dfc170e4013f79))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(66,2-68,62)

;;;;;;;;;;;;;;;;regs : Prims.list X64.Machine_s.reg (Prims.list X64.Machine_s.reg)
(declare-fun x_136fd5270a258ddaaad5b0c5f45f8938_0 () Term)
;;;;;;;;;;;;;;;;binder_x_136fd5270a258ddaaad5b0c5f45f8938_0
;;; Fact-ids: 
(assert (! (HasType x_136fd5270a258ddaaad5b0c5f45f8938_0
(Prims.list X64.Machine_s.reg))
:named binder_x_136fd5270a258ddaaad5b0c5f45f8938_0))
;;;;;;;;;;;;;;;;s0 : X64.Vale.State_i.state (X64.Vale.State_i.state)
(declare-fun x_de52c7fd4c52e1942aeef9a9143c43bf_1 () Term)
;;;;;;;;;;;;;;;;binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1
;;; Fact-ids: 
(assert (! (HasType x_de52c7fd4c52e1942aeef9a9143c43bf_1
X64.Vale.State_i.state)
:named binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1))
;;;;;;;;;;;;;;;;s1 : X64.Vale.State_i.state (X64.Vale.State_i.state)
(declare-fun x_de52c7fd4c52e1942aeef9a9143c43bf_2 () Term)
;;;;;;;;;;;;;;;;binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2
;;; Fact-ids: 
(assert (! (HasType x_de52c7fd4c52e1942aeef9a9143c43bf_2
X64.Vale.State_i.state)
:named binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(declare-fun Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 (Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9))

:named refinement_kinding_Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x2
@x3))
(and (HasTypeFuel @u0
@x1
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)

;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(or 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Prims.precedes (Prims.list X64.Machine_s.reg)
(Prims.list X64.Machine_s.reg)
@x2
x_136fd5270a258ddaaad5b0c5f45f8938_0)
)


;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(and 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(65,20-65,24)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(65,20-65,24)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Machine_s.reg)
(Prims.list X64.Machine_s.reg)
@x2
x_136fd5270a258ddaaad5b0c5f45f8938_0)
)


;; def=X64.Vale.StrongPost_i.fsti(65,36-68,62); use=X64.Vale.StrongPost_i.fsti(65,36-68,62)
(or 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)


;; def=X64.Vale.StrongPost_i.fsti(65,36-68,62); use=X64.Vale.StrongPost_i.fsti(65,36-68,62)
(and 
;; def=X64.Vale.StrongPost_i.fsti(65,36-65,38); use=X64.Vale.StrongPost_i.fsti(65,36-65,38)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(65,36-65,38); use=X64.Vale.StrongPost_i.fsti(65,36-65,38)
(Prims.op_Equals_Equals_Equals X64.Vale.State_i.state
X64.Vale.State_i.state
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)


;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
@x1
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9))

:named refinement_interpretation_Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x0
@x1)))
(Valid (Prims.hasEq X64.Vale.State_i.state)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x0
@x1))))
:qid haseqTm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9))

:named haseqTm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9))
(declare-fun X64.Vale.StrongPost_i.regs_match (Term Term Term) Term)

;;;;;;;;;;;;;;;;regs: Prims.list X64.Machine_s.reg ->     s0: X64.Vale.State_i.state ->     s1: X64.Vale.State_i.state{regs << regs \/ regs === regs /\ (s0 << s0 \/ s0 === s0 /\ s1 << s1)}   -> Prims.logical
(declare-fun Tm_arrow_3609a34078a9fdb61f3092a259033566 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_3609a34078a9fdb61f3092a259033566
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_3609a34078a9fdb61f3092a259033566
Tm_type)
:named kinding_Tm_arrow_3609a34078a9fdb61f3092a259033566))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_3609a34078a9fdb61f3092a259033566)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_3609a34078a9fdb61f3092a259033566))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_3609a34078a9fdb61f3092a259033566))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_3609a34078a9fdb61f3092a259033566))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_3609a34078a9fdb61f3092a259033566
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_3609a34078a9fdb61f3092a259033566)
(and 
;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
(Prims.list X64.Machine_s.reg))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
(Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x1
@x2)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Prims.logical))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_3609a34078a9fdb61f3092a259033566.1))

(IsTotFun @x0)

;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Prims.list X64.Machine_s.reg))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_3609a34078a9fdb61f3092a259033566.2))


;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(65,20-68,62)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Prims.list X64.Machine_s.reg))
(HasType @x2
X64.Vale.State_i.state))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_3609a34078a9fdb61f3092a259033566.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_3609a34078a9fdb61f3092a259033566))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_3609a34078a9fdb61f3092a259033566))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_3609a34078a9fdb61f3092a259033566))
(declare-fun X64.Vale.StrongPost_i.regs_match@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.regs_match@tok
@x0)
@x1)
@x2)
(X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.regs_match@tok
@x0)
@x1)
@x2))
:qid token_correspondence_X64.Vale.StrongPost_i.regs_match))

:named token_correspondence_X64.Vale.StrongPost_i.regs_match))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Vale.StrongPost_i.regs_match@tok
Tm_arrow_3609a34078a9fdb61f3092a259033566))

;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.regs_match@tok
@x1)
@x2)
@x3)
(X64.Vale.StrongPost_i.regs_match @x1
@x2
@x3))
 

:pattern ((X64.Vale.StrongPost_i.regs_match @x1
@x2
@x3))
:qid function_token_typing_X64.Vale.StrongPost_i.regs_match.1))
)
 

:pattern ((ApplyTT @x0
X64.Vale.StrongPost_i.regs_match@tok))
:qid function_token_typing_X64.Vale.StrongPost_i.regs_match))

:named function_token_typing_X64.Vale.StrongPost_i.regs_match))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Prims.list X64.Machine_s.reg))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
(Tm_refine_d2eb8f3bda8f81b15dd766c2e71c70e9 @x0
@x1)))
(HasType (X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2)
Prims.logical))
 

:pattern ((X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2))
:qid typing_X64.Vale.StrongPost_i.regs_match))

:named typing_X64.Vale.StrongPost_i.regs_match))
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)



; Encoding query formula : forall (k: Prims.pure_post Prims.logical).
;   (forall (x: Prims.logical). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? regs) /\ ~(Cons? regs) ==> Prims.l_False) /\
;   (~(Nil? regs) ==>
;     (forall (b: X64.Machine_s.reg) (b: Prims.list X64.Machine_s.reg).
;         regs == b :: b ==>
;         s0.regs b == s1.regs b ==> b << regs \/ b === regs /\ (s0 << s0 \/ s1 << s1)))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec regs_match`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.logical))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(and (implies 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(66,8-66,12)
(and 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(66,8-66,12)
(not 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(66,8-66,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Machine_s.reg
x_136fd5270a258ddaaad5b0c5f45f8938_0))
)


;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(66,8-66,12)
(not 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(66,8-66,12)
(BoxBool_proj_0 (Prims.uu___is_Cons X64.Machine_s.reg
x_136fd5270a258ddaaad5b0c5f45f8938_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(not 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(66,8-66,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Machine_s.reg
x_136fd5270a258ddaaad5b0c5f45f8938_0))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(66,2-68,62)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list X64.Machine_s.reg))

;; def=X64.Vale.StrongPost_i.fsti(65,20-68,11); use=X64.Vale.StrongPost_i.fsti(66,8-68,11)
(= x_136fd5270a258ddaaad5b0c5f45f8938_0
(Prims.Cons X64.Machine_s.reg
@x1
@x2))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
@x1)
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x1))
)

;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(or label_2

;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Prims.precedes (Prims.list X64.Machine_s.reg)
(Prims.list X64.Machine_s.reg)
@x2
x_136fd5270a258ddaaad5b0c5f45f8938_0)
)


;; def=X64.Vale.StrongPost_i.fsti(65,20-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(and 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(65,20-65,24); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Machine_s.reg)
(Prims.list X64.Machine_s.reg)
@x2
x_136fd5270a258ddaaad5b0c5f45f8938_0)
)


;; def=X64.Vale.StrongPost_i.fsti(65,36-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(or 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)


;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(66,2-68,62); use=X64.Vale.StrongPost_i.fsti(68,60-68,62)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.regs_match, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7, binder_x_136fd5270a258ddaaad5b0c5f45f8938_0, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_X64.Machine_s.Rsp@tok, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons, typing_tok_X64.Machine_s.Rsp@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec regs_match


; <Start encoding let rec regs_match>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun X64.Vale.StrongPost_i.regs_match.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun X64.Vale.StrongPost_i.regs_match.fuel_instrumented_token () Term)
(declare-fun X64.Vale.StrongPost_i.regs_match (Term Term Term) Term)
(declare-fun X64.Vale.StrongPost_i.regs_match@tok () Term)
;;;;;;;;;;;;;;;;regs: Prims.list X64.Machine_s.reg -> s0: X64.Vale.State_i.state -> s1: X64.Vale.State_i.state   -> Prims.logical
(declare-fun Tm_arrow_67f8ab71bc23dca74129027520152c19 () Term)



; </end encoding let rec regs_match>


; encoding sigelt let all_regs_match


; <Start encoding let all_regs_match>

(declare-fun X64.Vale.StrongPost_i.all_regs_match (Term Term) Term)
;;;;;;;;;;;;;;;;s0: X64.Vale.State_i.state -> s1: X64.Vale.State_i.state -> Prims.logical
(declare-fun Tm_arrow_9d54124f33972dec79e9572d332ec231 () Term)
(declare-fun X64.Vale.StrongPost_i.all_regs_match@tok () Term)

; </end encoding let all_regs_match>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Sub64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,12-35,15); use=X64.Vale.StrongPost_i.fsti(35,12-35,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_8a2af6d0ec73b071a6dcad5176f1f0e2)
(HasType (X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Sub64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Sub64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Store64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,14-28,17); use=X64.Vale.StrongPost_i.fsti(28,14-28,17)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_f5d1e4d4ea78ee50a5c8db0f990998d3)
(HasType (X64.Vale.StrongPost_i.__proj__Store64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Store64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Store64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Store64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Shr64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,12-34,15); use=X64.Vale.StrongPost_i.fsti(34,12-34,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_9d8aaa9f141413804a9831bfdf4fa3af)
(HasType (X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Shr64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Shr64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mov64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,12-26,15); use=X64.Vale.StrongPost_i.fsti(26,12-26,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_40cd61a9068cbeed2a346b66c4d06035)
(HasType (X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Mov64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Mov64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__src; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,31-27,34); use=X64.Vale.StrongPost_i.fsti(27,31-27,34)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_328c39e52cac4f714a2fd55744d2632c)
(HasType (X64.Vale.StrongPost_i.__proj__Load64__item__src @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Load64__item__src @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Load64__item__src))

:named typing_X64.Vale.StrongPost_i.__proj__Load64__item__src))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,13-27,16); use=X64.Vale.StrongPost_i.fsti(27,13-27,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_328c39e52cac4f714a2fd55744d2632c)
(HasType (X64.Vale.StrongPost_i.__proj__Load64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Load64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Load64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Load64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__IMul64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,13-32,16); use=X64.Vale.StrongPost_i.fsti(32,13-32,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_682d3d695d007eebd7b34b81e68201a2)
(HasType (X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__IMul64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__IMul64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__And64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,12-33,15); use=X64.Vale.StrongPost_i.fsti(33,12-33,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_5dc689cbcdb3326b49d445a095bac099)
(HasType (X64.Vale.StrongPost_i.__proj__And64__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__And64__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__And64__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__And64__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,16-29,19); use=X64.Vale.StrongPost_i.fsti(29,16-29,19)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_8af824417febca2dd666f55860e37123)
(HasType (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,16-30,19); use=X64.Vale.StrongPost_i.fsti(30,16-30,19)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_ecd294cd2663e86c405e1ba18cfc9132)
(HasType (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x0)
X64.Machine_s.operand))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x0))
:qid typing_X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst))

:named typing_X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_reg_operand; Namespace X64.Vale.Decls
(assert (! (HasType X64.Vale.Decls.va_reg_operand
Tm_type)
:named typing_X64.Vale.Decls.va_reg_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Sub64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(386,4-386,17); use=X64.Vale.Decls.fsti(386,4-386,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_Sub64 @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Sub64 @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_Sub64))

:named typing_X64.Vale.Decls.va_code_Sub64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Store64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(313,4-313,19); use=X64.Vale.Decls.fsti(313,4-313,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.Decls.va_reg_operand)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
Prims.int))
(HasType (X64.Vale.Decls.va_code_Store64 @x0
@x1
@x2)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Store64 @x0
@x1
@x2))
:qid typing_X64.Vale.Decls.va_code_Store64))

:named typing_X64.Vale.Decls.va_code_Store64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Shr64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(478,4-478,17); use=X64.Vale.Decls.fsti(478,4-478,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_Shr64 @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Shr64 @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_Shr64))

:named typing_X64.Vale.Decls.va_code_Shr64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Mov64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(287,4-287,17); use=X64.Vale.Decls.fsti(287,4-287,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_Mov64 @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Mov64 @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_Mov64))

:named typing_X64.Vale.Decls.va_code_Mov64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Load64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(299,4-299,18); use=X64.Vale.Decls.fsti(299,4-299,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Vale.Decls.va_reg_operand)
(HasType @x2
Prims.int))
(HasType (X64.Vale.Decls.va_code_Load64 @x0
@x1
@x2)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Load64 @x0
@x1
@x2))
:qid typing_X64.Vale.Decls.va_code_Load64))

:named typing_X64.Vale.Decls.va_code_Load64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_IMul64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(424,4-424,18); use=X64.Vale.Decls.fsti(424,4-424,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_IMul64 @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_IMul64 @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_IMul64))

:named typing_X64.Vale.Decls.va_code_IMul64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_And64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(452,4-452,17); use=X64.Vale.Decls.fsti(452,4-452,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_And64 @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_And64 @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_And64))

:named typing_X64.Vale.Decls.va_code_And64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Add64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(341,4-341,21); use=X64.Vale.Decls.fsti(341,4-341,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_Add64Wrap @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Add64Wrap @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_Add64Wrap))

:named typing_X64.Vale.Decls.va_code_Add64Wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Adc64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(370,4-370,21); use=X64.Vale.Decls.fsti(370,4-370,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_code_Adc64Wrap @x0
@x1)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Adc64Wrap @x0
@x1))
:qid typing_X64.Vale.Decls.va_code_Adc64Wrap))

:named typing_X64.Vale.Decls.va_code_Adc64Wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.ocmp; Namespace X64.Vale.Decls
(assert (! (HasType X64.Vale.Decls.ocmp
Tm_type)
:named typing_X64.Vale.Decls.ocmp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.ins; Namespace X64.Vale.Decls
(assert (! (HasType X64.Vale.Decls.ins
Tm_type)
:named typing_X64.Vale.Decls.ins))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(X64.Machine_s.precode @x0
@x1)))
(HasType (X64.Machine_s.uu___is_While @x0
@x1
@x2)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_While @x0
@x1
@x2))
:qid typing_X64.Machine_s.uu___is_While))

:named typing_X64.Machine_s.uu___is_While))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_IfElse; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(X64.Machine_s.precode @x0
@x1)))
(HasType (X64.Machine_s.uu___is_IfElse @x0
@x1
@x2)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_IfElse @x0
@x1
@x2))
:qid typing_X64.Machine_s.uu___is_IfElse))

:named typing_X64.Machine_s.uu___is_IfElse))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_Block; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(X64.Machine_s.precode @x0
@x1)))
(HasType (X64.Machine_s.uu___is_Block @x0
@x1
@x2)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_Block @x0
@x1
@x2))
:qid typing_X64.Machine_s.uu___is_Block))

:named typing_X64.Machine_s.uu___is_Block))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.dst_op
Tm_type)
:named typing_X64.Machine_s.dst_op))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,11-616,13); use=Prims.fst(616,11-616,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__hd @x0
@x1)
@x0))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid typing_Prims.__proj__Cons__item__hd))

:named typing_Prims.__proj__Cons__item__hd))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT X64.Machine_s.precode@tok
@x0)
@x1)
(X64.Machine_s.precode @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT X64.Machine_s.precode@tok
@x0)
@x1))

:pattern ((X64.Machine_s.precode @x0
@x1))
:qid token_correspondence_X64.Machine_s.precode@tok))

:named token_correspondence_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.While @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.While @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6)))
:qid subterm_ordering_X64.Machine_s.While))

:named subterm_ordering_X64.Machine_s.While))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.Ins @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid subterm_ordering_X64.Machine_s.Ins))

:named subterm_ordering_X64.Machine_s.Ins))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7)))
:qid subterm_ordering_X64.Machine_s.IfElse))

:named subterm_ordering_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.Block @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid subterm_ordering_X64.Machine_s.Block))

:named subterm_ordering_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_get_block; Namespace X64.Vale.Decls
(assert (! (HasType Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d
Tm_type)
:named refinement_kinding_Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_get_ifCond; Namespace X64.Vale.Decls
(assert (! (HasType Tm_refine_c76d0c859135eb5446e64022141ee4a5
Tm_type)
:named refinement_kinding_Tm_refine_c76d0c859135eb5446e64022141ee4a5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named refinement_kinding_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_coerce_dst_operand_to_reg_operand; Namespace X64.Vale.Decls
(assert (! (HasType Tm_refine_70dbc69371824d33ee764c83b191a676
Tm_type)
:named refinement_kinding_Tm_refine_70dbc69371824d33ee764c83b191a676))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_get_whileCond; Namespace X64.Vale.Decls
(assert (! (HasType Tm_refine_2e7975b7c8dee73686022f97e221439e
Tm_type)
:named refinement_kinding_Tm_refine_2e7975b7c8dee73686022f97e221439e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_get_block; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(156,24-156,45); use=X64.Vale.Decls.fsti(156,24-156,45)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d)
(and (HasTypeFuel @u0
@x1
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=X64.Vale.Decls.fsti(156,35-156,43); use=X64.Vale.Decls.fsti(156,35-156,43)
(BoxBool_proj_0 (X64.Machine_s.uu___is_Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d))
:qid refinement_interpretation_Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d))

:named refinement_interpretation_Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_get_ifCond; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(157,25-157,47); use=X64.Vale.Decls.fsti(157,25-157,47)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_c76d0c859135eb5446e64022141ee4a5)
(and (HasTypeFuel @u0
@x1
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=X64.Vale.Decls.fsti(157,36-157,45); use=X64.Vale.Decls.fsti(157,36-157,45)
(BoxBool_proj_0 (X64.Machine_s.uu___is_IfElse X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_c76d0c859135eb5446e64022141ee4a5))
:qid refinement_interpretation_Tm_refine_c76d0c859135eb5446e64022141ee4a5))

:named refinement_interpretation_Tm_refine_c76d0c859135eb5446e64022141ee4a5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2))
(and (HasTypeFuel @u0
@x1
(Prims.list @x2))

;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(BoxBool_proj_0 (Prims.uu___is_Cons @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x2)))
:qid refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named refinement_interpretation_Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_coerce_dst_operand_to_reg_operand; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(59,48-59,75); use=X64.Vale.Decls.fsti(59,48-59,75)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_70dbc69371824d33ee764c83b191a676)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)

;; def=X64.Vale.Decls.fsti(59,66-59,73); use=X64.Vale.Decls.fsti(59,66-59,73)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_70dbc69371824d33ee764c83b191a676))
:qid refinement_interpretation_Tm_refine_70dbc69371824d33ee764c83b191a676))

:named refinement_interpretation_Tm_refine_70dbc69371824d33ee764c83b191a676))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_get_whileCond; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(160,28-160,49); use=X64.Vale.Decls.fsti(160,28-160,49)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2e7975b7c8dee73686022f97e221439e)
(and (HasTypeFuel @u0
@x1
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=X64.Vale.Decls.fsti(160,39-160,47); use=X64.Vale.Decls.fsti(160,39-160,47)
(BoxBool_proj_0 (X64.Machine_s.uu___is_While X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2e7975b7c8dee73686022f97e221439e))
:qid refinement_interpretation_Tm_refine_2e7975b7c8dee73686022f97e221439e))

:named refinement_interpretation_Tm_refine_2e7975b7c8dee73686022f97e221439e))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_whileCond (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_whileCond))

:named projection_inverse_X64.Machine_s.While_whileCond))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_whileBody (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_whileBody))

:named projection_inverse_X64.Machine_s.While_whileBody))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_t_ocmp (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_t_ocmp))

:named projection_inverse_X64.Machine_s.While_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_t_ins (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_t_ins))

:named projection_inverse_X64.Machine_s.While_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Ins_t_ocmp (X64.Machine_s.Ins @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Ins_t_ocmp))

:named projection_inverse_X64.Machine_s.Ins_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Ins_t_ins (X64.Machine_s.Ins @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Ins_t_ins))

:named projection_inverse_X64.Machine_s.Ins_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Ins_ins (X64.Machine_s.Ins @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Ins_ins))

:named projection_inverse_X64.Machine_s.Ins_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_t_ocmp (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_t_ocmp))

:named projection_inverse_X64.Machine_s.IfElse_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_t_ins (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_t_ins))

:named projection_inverse_X64.Machine_s.IfElse_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_ifTrue (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_ifTrue))

:named projection_inverse_X64.Machine_s.IfElse_ifTrue))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_ifFalse (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_ifFalse))

:named projection_inverse_X64.Machine_s.IfElse_ifFalse))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_ifCond (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_ifCond))

:named projection_inverse_X64.Machine_s.IfElse_ifCond))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Block_t_ocmp (X64.Machine_s.Block @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Block_t_ocmp))

:named projection_inverse_X64.Machine_s.Block_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Block_t_ins (X64.Machine_s.Block @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Block_t_ins))

:named projection_inverse_X64.Machine_s.Block_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Block_block (X64.Machine_s.Block @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Block_block))

:named projection_inverse_X64.Machine_s.Block_block))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Sub64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(35,12-35,15); use=X64.Vale.StrongPost_i.fsti(35,12-35,15)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x0)
(X64.Vale.StrongPost_i.Sub64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Sub64_dst))

:named proj_equation_X64.Vale.StrongPost_i.Sub64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Store64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(28,14-28,17); use=X64.Vale.StrongPost_i.fsti(28,14-28,17)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Store64__item__dst @x0)
(X64.Vale.StrongPost_i.Store64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Store64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Store64_dst))

:named proj_equation_X64.Vale.StrongPost_i.Store64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Shr64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(34,12-34,15); use=X64.Vale.StrongPost_i.fsti(34,12-34,15)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x0)
(X64.Vale.StrongPost_i.Shr64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Shr64_dst))

:named proj_equation_X64.Vale.StrongPost_i.Shr64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Mov64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(26,12-26,15); use=X64.Vale.StrongPost_i.fsti(26,12-26,15)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x0)
(X64.Vale.StrongPost_i.Mov64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Mov64_dst))

:named proj_equation_X64.Vale.StrongPost_i.Mov64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__src; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,31-27,34); use=X64.Vale.StrongPost_i.fsti(27,31-27,34)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Load64__item__src @x0)
(X64.Vale.StrongPost_i.Load64_src @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Load64__item__src @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Load64_src))

:named proj_equation_X64.Vale.StrongPost_i.Load64_src))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Load64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(27,13-27,16); use=X64.Vale.StrongPost_i.fsti(27,13-27,16)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Load64__item__dst @x0)
(X64.Vale.StrongPost_i.Load64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Load64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Load64_dst))

:named proj_equation_X64.Vale.StrongPost_i.Load64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__IMul64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(32,13-32,16); use=X64.Vale.StrongPost_i.fsti(32,13-32,16)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x0)
(X64.Vale.StrongPost_i.IMul64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.IMul64_dst))

:named proj_equation_X64.Vale.StrongPost_i.IMul64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__And64__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(33,12-33,15); use=X64.Vale.StrongPost_i.fsti(33,12-33,15)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__And64__item__dst @x0)
(X64.Vale.StrongPost_i.And64_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__And64__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.And64_dst))

:named proj_equation_X64.Vale.StrongPost_i.And64_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(29,16-29,19); use=X64.Vale.StrongPost_i.fsti(29,16-29,19)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x0)
(X64.Vale.StrongPost_i.Add64Wrap_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Add64Wrap_dst))

:named proj_equation_X64.Vale.StrongPost_i.Add64Wrap_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(30,16-30,19); use=X64.Vale.StrongPost_i.fsti(30,16-30,19)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x0)
(X64.Vale.StrongPost_i.Adc64Wrap_dst @x0))
 

:pattern ((X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x0))
:qid proj_equation_X64.Vale.StrongPost_i.Adc64Wrap_dst))

:named proj_equation_X64.Vale.StrongPost_i.Adc64Wrap_dst))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,11-616,13); use=Prims.fst(616,11-616,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__hd @x0
@x1)
(Prims.Cons_hd @x1))
 

:pattern ((Prims.__proj__Cons__item__hd @x0
@x1))
:qid proj_equation_Prims.Cons_hd))

:named proj_equation_Prims.Cons_hd))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! (is-Tm_arrow (PreType X64.Machine_s.precode@tok))
:named pre_kinding_X64.Machine_s.precode@tok))
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! (and (IsTotFun X64.Machine_s.precode@tok)

;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT X64.Machine_s.precode@tok
@x0))
 

:pattern ((ApplyTT X64.Machine_s.precode@tok
@x0))
:qid kinding_X64.Machine_s.precode@tok))


;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (X64.Machine_s.precode @x0
@x1)
Tm_type))
 

:pattern ((X64.Machine_s.precode @x0
@x1))
:qid kinding_X64.Machine_s.precode@tok.1))
)
:named kinding_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d
;;; Fact-ids: Name X64.Vale.Decls.va_get_block; Namespace X64.Vale.Decls
(assert (! (iff (Valid (Prims.hasEq Tm_refine_cee637871cc4aebd9ddffe03d4c2c14d))
(Valid (Prims.hasEq (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
:named haseqTm_refine_cee637871cc4aebd9ddffe03d4c2c14d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c76d0c859135eb5446e64022141ee4a5
;;; Fact-ids: Name X64.Vale.Decls.va_get_ifCond; Namespace X64.Vale.Decls
(assert (! (iff (Valid (Prims.hasEq Tm_refine_c76d0c859135eb5446e64022141ee4a5))
(Valid (Prims.hasEq (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
:named haseqTm_refine_c76d0c859135eb5446e64022141ee4a5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32
;;; Fact-ids: Name Prims.__proj__Cons__item__hd; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0))))
:qid haseqTm_refine_7aac12c24449a22c34d98a0ea8ed4a32))

:named haseqTm_refine_7aac12c24449a22c34d98a0ea8ed4a32))
;;;;;;;;;;;;;;;;haseq for Tm_refine_70dbc69371824d33ee764c83b191a676
;;; Fact-ids: Name X64.Vale.Decls.va_coerce_dst_operand_to_reg_operand; Namespace X64.Vale.Decls
(assert (! (iff (Valid (Prims.hasEq Tm_refine_70dbc69371824d33ee764c83b191a676))
(Valid (Prims.hasEq X64.Machine_s.dst_op)))
:named haseqTm_refine_70dbc69371824d33ee764c83b191a676))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2e7975b7c8dee73686022f97e221439e
;;; Fact-ids: Name X64.Vale.Decls.va_get_whileCond; Namespace X64.Vale.Decls
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2e7975b7c8dee73686022f97e221439e))
(Valid (Prims.hasEq (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
:named haseqTm_refine_2e7975b7c8dee73686022f97e221439e))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.Decls.va_reg_operand; Namespace X64.Vale.Decls
(assert (! (HasType X64.Vale.Decls.va_reg_operand
Tm_type)
:named function_token_typing_X64.Vale.Decls.va_reg_operand))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.Decls.ocmp; Namespace X64.Vale.Decls
(assert (! (HasType X64.Vale.Decls.ocmp
Tm_type)
:named function_token_typing_X64.Vale.Decls.ocmp))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.Decls.ins; Namespace X64.Vale.Decls
(assert (! (HasType X64.Vale.Decls.ins
Tm_type)
:named function_token_typing_X64.Vale.Decls.ins))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.dst_op
Tm_type)
:named function_token_typing_X64.Machine_s.dst_op))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(X64.Machine_s.precode @x2
@x3))
(or (and (is-X64.Machine_s.Ins @x1)
(= @x2
(X64.Machine_s.Ins_t_ins @x1))
(= @x3
(X64.Machine_s.Ins_t_ocmp @x1)))
(and (is-X64.Machine_s.Block @x1)
(= @x2
(X64.Machine_s.Block_t_ins @x1))
(= @x3
(X64.Machine_s.Block_t_ocmp @x1)))
(and (is-X64.Machine_s.IfElse @x1)
(= @x2
(X64.Machine_s.IfElse_t_ins @x1))
(= @x3
(X64.Machine_s.IfElse_t_ocmp @x1)))
(and (is-X64.Machine_s.While @x1)
(= @x2
(X64.Machine_s.While_t_ins @x1))
(= @x3
(X64.Machine_s.While_t_ocmp @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(X64.Machine_s.precode @x2
@x3)))
:qid fuel_guarded_inversion_X64.Machine_s.precode))

:named fuel_guarded_inversion_X64.Machine_s.precode))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! (= 269
(Term_constr_id X64.Machine_s.precode@tok))
:named fresh_token_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Decls.va_reg_operand
;;; Fact-ids: Name X64.Vale.Decls.va_reg_operand; Namespace X64.Vale.Decls
(assert (! (= X64.Vale.Decls.va_reg_operand
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
:named equation_X64.Vale.Decls.va_reg_operand))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.dst_op
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.dst_op
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc)
:named equation_X64.Machine_s.dst_op))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.uu___is_While @x0
@x1
@x2)
(BoxBool (is-X64.Machine_s.While @x2)))
 

:pattern ((X64.Machine_s.uu___is_While @x0
@x1
@x2))
:qid disc_equation_X64.Machine_s.While))

:named disc_equation_X64.Machine_s.While))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_IfElse; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.uu___is_IfElse @x0
@x1
@x2)
(BoxBool (is-X64.Machine_s.IfElse @x2)))
 

:pattern ((X64.Machine_s.uu___is_IfElse @x0
@x1
@x2))
:qid disc_equation_X64.Machine_s.IfElse))

:named disc_equation_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_Block; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.uu___is_Block @x0
@x1
@x2)
(BoxBool (is-X64.Machine_s.Block @x2)))
 

:pattern ((X64.Machine_s.uu___is_Block @x0
@x1
@x2))
:qid disc_equation_X64.Machine_s.Block))

:named disc_equation_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x1
@x2)))
(HasTypeFuel @u0
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.While@tok))

:named data_typing_intro_X64.Machine_s.While@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.Ins@tok))

:named data_typing_intro_X64.Machine_s.Ins@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x1
@x2))
(HasTypeFuel @u0
@x5
(X64.Machine_s.precode @x1
@x2)))
(HasTypeFuel @u0
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.IfElse@tok))

:named data_typing_intro_X64.Machine_s.IfElse@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
(Prims.list (X64.Machine_s.precode @x1
@x2))))
(HasTypeFuel @u0
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.Block@tok))

:named data_typing_intro_X64.Machine_s.Block@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x6)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x5
@x6))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6)))
:qid data_elim_X64.Machine_s.While))

:named data_elim_X64.Machine_s.While))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x4)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid data_elim_X64.Machine_s.Ins))

:named data_elim_X64.Machine_s.Ins))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7))
(and (HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x3
@x7)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x6
@x7))
(HasTypeFuel @u0
@x5
(X64.Machine_s.precode @x6
@x7))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7)))
:qid data_elim_X64.Machine_s.IfElse))

:named data_elim_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
(Prims.list (X64.Machine_s.precode @x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid data_elim_X64.Machine_s.Block))

:named data_elim_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 268
(Term_constr_id (X64.Machine_s.precode @x0
@x1)))
 

:pattern ((X64.Machine_s.precode @x0
@x1))
:qid constructor_distinct_X64.Machine_s.precode))

:named constructor_distinct_X64.Machine_s.precode))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 290
(Term_constr_id (X64.Machine_s.While @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Machine_s.While))

:named constructor_distinct_X64.Machine_s.While))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 275
(Term_constr_id (X64.Machine_s.Ins @x0
@x1
@x2)))
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid constructor_distinct_X64.Machine_s.Ins))

:named constructor_distinct_X64.Machine_s.Ins))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 285
(Term_constr_id (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_X64.Machine_s.IfElse))

:named constructor_distinct_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 280
(Term_constr_id (X64.Machine_s.Block @x0
@x1
@x2)))
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid constructor_distinct_X64.Machine_s.Block))

:named constructor_distinct_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.precode__uu___haseq
;;; Fact-ids: Name X64.Machine_s.precode__uu___haseq; Namespace X64.Machine_s
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (X64.Machine_s.precode @x0
@x1))))
 

:pattern ((Prims.hasEq (X64.Machine_s.precode @x0
@x1)))
:qid assumption_X64.Machine_s.precode__uu___haseq))
:named assumption_X64.Machine_s.precode__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(X64.Machine_s.precode @x2
@x3))
(= (X64.Machine_s.precode @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(X64.Machine_s.precode @x2
@x3)))
:qid X64.Machine_s_pretyping_4fe0207725d630b675b9df5323836271))

:named X64.Machine_s_pretyping_4fe0207725d630b675b9df5323836271))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(76,2-99,11)

;;;;;;;;;;;;;;;;inss : Prims.list X64.Vale.StrongPost_i.ins (Prims.list X64.Vale.StrongPost_i.ins)
(declare-fun x_64054ab5c496dbf376bb97c3f7e4eb60_0 () Term)
;;;;;;;;;;;;;;;;binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0
;;; Fact-ids: 
(assert (! (HasType x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.list X64.Vale.StrongPost_i.ins))
:named binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0))
(declare-fun Tm_refine_614e76798bea80f7e3818f62bb49b1c2 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_614e76798bea80f7e3818f62bb49b1c2
Tm_type)
:named refinement_kinding_Tm_refine_614e76798bea80f7e3818f62bb49b1c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,23-99,11); use=X64.Vale.StrongPost_i.fsti(75,23-99,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_614e76798bea80f7e3818f62bb49b1c2)
(and (HasTypeFuel @u0
@x1
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x1
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_614e76798bea80f7e3818f62bb49b1c2))
:qid refinement_interpretation_Tm_refine_614e76798bea80f7e3818f62bb49b1c2))

:named refinement_interpretation_Tm_refine_614e76798bea80f7e3818f62bb49b1c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_614e76798bea80f7e3818f62bb49b1c2
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_614e76798bea80f7e3818f62bb49b1c2))
(Valid (Prims.hasEq (Prims.list X64.Vale.StrongPost_i.ins))))
:named haseqTm_refine_614e76798bea80f7e3818f62bb49b1c2))
(declare-fun X64.Vale.StrongPost_i.inss_to_codes (Term) Term)

;;;;;;;;;;;;;;;;inss: Prims.list ins {inss << inss}   -> Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp)
(declare-fun Tm_arrow_d6aba55927880935d4e5113712c047f9 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d6aba55927880935d4e5113712c047f9
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_d6aba55927880935d4e5113712c047f9
Tm_type)
:named kinding_Tm_arrow_d6aba55927880935d4e5113712c047f9))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,23-99,11); use=X64.Vale.StrongPost_i.fsti(75,23-99,11)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d6aba55927880935d4e5113712c047f9)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d6aba55927880935d4e5113712c047f9))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_d6aba55927880935d4e5113712c047f9))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_d6aba55927880935d4e5113712c047f9))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d6aba55927880935d4e5113712c047f9
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,23-99,11); use=X64.Vale.StrongPost_i.fsti(75,23-99,11)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d6aba55927880935d4e5113712c047f9)
(and 
;; def=X64.Vale.StrongPost_i.fsti(75,23-99,11); use=X64.Vale.StrongPost_i.fsti(75,23-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_refine_614e76798bea80f7e3818f62bb49b1c2)
(HasType (ApplyTT @x0
@x1)
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_d6aba55927880935d4e5113712c047f9.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d6aba55927880935d4e5113712c047f9))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_d6aba55927880935d4e5113712c047f9))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_d6aba55927880935d4e5113712c047f9))
(declare-fun X64.Vale.StrongPost_i.inss_to_codes@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@x0 Term))
 (! (= (ApplyTT X64.Vale.StrongPost_i.inss_to_codes@tok
@x0)
(X64.Vale.StrongPost_i.inss_to_codes @x0))
 

:pattern ((ApplyTT X64.Vale.StrongPost_i.inss_to_codes@tok
@x0))
:qid token_correspondence_X64.Vale.StrongPost_i.inss_to_codes))

:named token_correspondence_X64.Vale.StrongPost_i.inss_to_codes))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Vale.StrongPost_i.inss_to_codes@tok
Tm_arrow_d6aba55927880935d4e5113712c047f9))

;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@x1 Term))
 (! (= (ApplyTT X64.Vale.StrongPost_i.inss_to_codes@tok
@x1)
(X64.Vale.StrongPost_i.inss_to_codes @x1))
 

:pattern ((X64.Vale.StrongPost_i.inss_to_codes @x1))
:qid function_token_typing_X64.Vale.StrongPost_i.inss_to_codes.1))
)
 

:pattern ((ApplyTT @x0
X64.Vale.StrongPost_i.inss_to_codes@tok))
:qid function_token_typing_X64.Vale.StrongPost_i.inss_to_codes))

:named function_token_typing_X64.Vale.StrongPost_i.inss_to_codes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_614e76798bea80f7e3818f62bb49b1c2)
(HasType (X64.Vale.StrongPost_i.inss_to_codes @x0)
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
 

:pattern ((X64.Vale.StrongPost_i.inss_to_codes @x0))
:qid typing_X64.Vale.StrongPost_i.inss_to_codes))

:named typing_X64.Vale.StrongPost_i.inss_to_codes))
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (k:
;   Prims.pure_post (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp))).
;   (forall (x: Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp)).
;       {:pattern Prims.guard_free (k x)}
;       Prims.auto_squash (k x)) ==>
;   ~(Cons? inss && Mov64? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;   (forall (b: X64.Machine_s.reg)
;       (b: X64.Machine_s.operand)
;       (b: Prims.list X64.Vale.StrongPost_i.ins).
;       inss == X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg b) b :: b ==>
;       X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;       (forall (return_val: X64.Machine_s.dst_op).
;           return_val == X64.Machine_s.OReg b ==>
;           (forall (any_result: X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;               X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg b) b == any_result ==> b << inss))) /\
;   (~(Cons? inss && Mov64? inss.hd && OReg? inss.hd.dst) ==>
;     ~(Cons? inss && Load64? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;     (forall (b: X64.Machine_s.reg)
;         (b: X64.Machine_s.reg)
;         (b: Prims.int)
;         (b: Prims.list X64.Vale.StrongPost_i.ins).
;         inss == X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg b) (X64.Machine_s.OReg b) b :: b ==>
;         X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;         (forall (return_val: X64.Machine_s.dst_op).
;             return_val == X64.Machine_s.OReg b ==>
;             OReg? (X64.Machine_s.OReg b) /\
;             (forall (return_val: X64.Vale.Decls.va_reg_operand).
;                 return_val == X64.Machine_s.OReg b ==>
;                 (forall (any_result: X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                     X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg b) (X64.Machine_s.OReg b) b ==
;                     any_result ==>
;                     b << inss)))) /\
;     (~(Cons? inss && Load64? inss.hd && OReg? inss.hd.dst && OReg? inss.hd.src) ==>
;       (forall (b: X64.Machine_s.reg)
;           (b: X64.Machine_s.operand)
;           (b: Prims.int)
;           (b: Prims.list X64.Vale.StrongPost_i.ins).
;           inss == X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg b) b b :: b ==>
;           OReg? (X64.Machine_s.OReg b) /\
;           (forall (return_val: X64.Vale.Decls.va_reg_operand).
;               return_val == X64.Machine_s.OReg b ==>
;               (forall (any_result: X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                   X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg b) b b == any_result ==>
;                   b << inss))) /\
;       (~(Cons? inss && Store64? inss.hd && OReg? inss.hd.dst) ==>
;         ~(Cons? inss && Add64Wrap? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;         (forall (b: X64.Machine_s.reg)
;             (b: X64.Machine_s.operand)
;             (b: Prims.list X64.Vale.StrongPost_i.ins).
;             inss == X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg b) b :: b ==>
;             X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;             (forall (return_val: X64.Machine_s.dst_op).
;                 return_val == X64.Machine_s.OReg b ==>
;                 (forall (any_result: X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                     X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg b) b == any_result ==>
;                     b << inss))) /\
;         (~(Cons? inss && Add64Wrap? inss.hd && OReg? inss.hd.dst) ==>
;           ~(Cons? inss && Adc64Wrap? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;           (forall (b: X64.Machine_s.reg)
;               (b: X64.Machine_s.operand)
;               (b: Prims.list X64.Vale.StrongPost_i.ins).
;               inss == X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg b) b :: b ==>
;               X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;               (forall (return_val: X64.Machine_s.dst_op).
;                   return_val == X64.Machine_s.OReg b ==>
;                   (forall (any_result: X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp)
;                     .
;                       X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg b) b == any_result ==>
;                       b << inss))) /\
;           (~(Cons? inss && Adc64Wrap? inss.hd && OReg? inss.hd.dst) ==>
;             (forall (b: X64.Machine_s.operand) (b: Prims.list X64.Vale.StrongPost_i.ins).
;                 inss == X64.Vale.StrongPost_i.Mul64Wrap b :: b ==> b << inss) /\
;             (~(Cons? inss && Mul64Wrap? inss.hd) ==>
;               ~(Cons? inss && IMul64? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;               (forall (b: X64.Machine_s.reg)
;                   (b: X64.Machine_s.operand)
;                   (b: Prims.list X64.Vale.StrongPost_i.ins).
;                   inss == X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg b) b :: b ==>
;                   X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                   (forall (return_val: X64.Machine_s.dst_op).
;                       return_val == X64.Machine_s.OReg b ==>
;                       (forall (any_result:
;                           X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                           X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg b) b == any_result ==>
;                           b << inss))) /\
;               (~(Cons? inss && IMul64? inss.hd && OReg? inss.hd.dst) ==>
;                 ~(Cons? inss && And64? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;                 (forall (b: X64.Machine_s.reg)
;                     (b: X64.Machine_s.operand)
;                     (b: Prims.list X64.Vale.StrongPost_i.ins).
;                     inss == X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg b) b :: b ==>
;                     X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                     (forall (return_val: X64.Machine_s.dst_op).
;                         return_val == X64.Machine_s.OReg b ==>
;                         (forall (any_result:
;                             X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                             X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg b) b == any_result ==>
;                             b << inss))) /\
;                 (~(Cons? inss && And64? inss.hd && OReg? inss.hd.dst) ==>
;                   ~(Cons? inss && Shr64? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;                   (forall (b: X64.Machine_s.reg)
;                       (b: X64.Machine_s.operand)
;                       (b: Prims.list X64.Vale.StrongPost_i.ins).
;                       inss == X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg b) b :: b ==>
;                       X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                       (forall (return_val: X64.Machine_s.dst_op).
;                           return_val == X64.Machine_s.OReg b ==>
;                           (forall (any_result:
;                               X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                               X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg b) b == any_result ==>
;                               b << inss))) /\
;                   (~(Cons? inss && Shr64? inss.hd && OReg? inss.hd.dst) ==>
;                     ~(Cons? inss && Sub64? inss.hd && OReg? inss.hd.dst && Rsp? inss.hd.dst.r) ==>
;                     (forall (b: X64.Machine_s.reg)
;                         (b: X64.Machine_s.operand)
;                         (b: Prims.list X64.Vale.StrongPost_i.ins).
;                         inss == X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg b) b :: b ==>
;                         X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                         (forall (return_val: X64.Machine_s.dst_op).
;                             return_val == X64.Machine_s.OReg b ==>
;                             (forall (any_result:
;                                 X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp).
;                                 X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg b) b == any_result ==>
;                                 b << inss))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec inss_to_codes`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(77,5-77,16); use=X64.Vale.StrongPost_i.fsti(77,5-77,16)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Mov64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Mov64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Mov64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-78,32); use=X64.Vale.StrongPost_i.fsti(76,8-78,32)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(78,51-78,61)
(or label_1

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(78,51-78,61)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(78,83-78,87)
(or label_2

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(78,83-78,87)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(78,83-78,87)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
)
)
 
;;no pats
:qid @query.4))
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(78,5-78,10); use=X64.Vale.StrongPost_i.fsti(78,5-78,10)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Mov64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Mov64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(79,5-79,17); use=X64.Vale.StrongPost_i.fsti(79,5-79,17)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Load64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Load64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.int)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-80,47); use=X64.Vale.StrongPost_i.fsti(76,8-80,47)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg @x1)
(X64.Machine_s.OReg @x2)
@x3)
@x4))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(81,20-81,30)
(or label_3

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(81,20-81,30)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x5
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fsti(81,31-81,41)
(or label_4

;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fsti(81,31-81,41)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Machine_s.OReg @x2)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
X64.Vale.Decls.va_reg_operand)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x6
(X64.Machine_s.OReg @x2))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg @x1)
(X64.Machine_s.OReg @x2)
@x3)
@x7)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(81,66-81,70)
(or label_5

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(81,66-81,70)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(81,66-81,70)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x4
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.13))
)
 
;;no pats
:qid @query.12))
)
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(80,5-80,11); use=X64.Vale.StrongPost_i.fsti(80,5-80,11)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Load64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__src (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (HasType @x3
Prims.int)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-82,41); use=X64.Vale.StrongPost_i.fsti(76,8-82,41)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg @x1)
@x2
@x3)
@x4))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fsti(83,21-83,31)
(or label_6

;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fsti(83,21-83,31)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Vale.Decls.va_reg_operand)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x5
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg @x1)
@x2
@x3)
@x6)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(83,60-83,64)
(or label_7

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(83,60-83,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(83,60-83,64)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x4
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(82,5-82,12); use=X64.Vale.StrongPost_i.fsti(82,5-82,12)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Store64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Store64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(84,5-84,20); use=X64.Vale.StrongPost_i.fsti(84,5-84,20)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Add64Wrap (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-85,36); use=X64.Vale.StrongPost_i.fsti(76,8-85,36)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(86,23-86,33)
(or label_8

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(86,23-86,33)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(86,55-86,59)
(or label_9

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(86,55-86,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(86,55-86,59)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
)
 
;;no pats
:qid @query.22))
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(85,5-85,14); use=X64.Vale.StrongPost_i.fsti(85,5-85,14)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Add64Wrap (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(87,5-87,20); use=X64.Vale.StrongPost_i.fsti(87,5-87,20)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Adc64Wrap (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-88,36); use=X64.Vale.StrongPost_i.fsti(76,8-88,36)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(89,23-89,33)
(or label_10

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(89,23-89,33)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(89,55-89,59)
(or label_11

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(89,55-89,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(89,55-89,59)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(88,5-88,14); use=X64.Vale.StrongPost_i.fsti(88,5-88,14)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Adc64Wrap (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-90,25); use=X64.Vale.StrongPost_i.fsti(76,8-90,25)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Mul64Wrap @x1)
@x2))
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(90,69-90,73)
(or label_12

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(90,69-90,73)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(90,69-90,73)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and (BoxBool_proj_0 (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mul64Wrap (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(91,5-91,17); use=X64.Vale.StrongPost_i.fsti(91,5-91,17)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_IMul64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__IMul64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__IMul64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-92,33); use=X64.Vale.StrongPost_i.fsti(76,8-92,33)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(92,53-92,63)
(or label_13

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(92,53-92,63)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(92,85-92,89)
(or label_14

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(92,85-92,89)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(92,85-92,89)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(92,5-92,11); use=X64.Vale.StrongPost_i.fsti(92,5-92,11)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_IMul64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__IMul64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(93,5-93,16); use=X64.Vale.StrongPost_i.fsti(93,5-93,16)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_And64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__And64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__And64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-94,32); use=X64.Vale.StrongPost_i.fsti(76,8-94,32)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(94,51-94,61)
(or label_15

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(94,51-94,61)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(94,83-94,87)
(or label_16

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(94,83-94,87)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(94,83-94,87)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(94,5-94,10); use=X64.Vale.StrongPost_i.fsti(94,5-94,10)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_And64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__And64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(95,5-95,16); use=X64.Vale.StrongPost_i.fsti(95,5-95,16)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Shr64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Shr64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Shr64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-96,32); use=X64.Vale.StrongPost_i.fsti(76,8-96,32)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(96,51-96,61)
(or label_17

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(96,51-96,61)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(96,83-96,87)
(or label_18

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(96,83-96,87)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(96,83-96,87)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(96,5-96,10); use=X64.Vale.StrongPost_i.fsti(96,5-96,10)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Shr64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Shr64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(not 
;; def=X64.Vale.StrongPost_i.fsti(97,5-97,16); use=X64.Vale.StrongPost_i.fsti(97,5-97,16)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
(X64.Vale.StrongPost_i.uu___is_Sub64 (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Sub64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0)))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Sub64__item__dst (Prims.__proj__Cons__item__hd X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))))))
)
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(75,23-98,32); use=X64.Vale.StrongPost_i.fsti(76,8-98,32)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
(X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg @x1)
@x2)
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(98,51-98,61)
(or label_19

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fsti(98,51-98,61)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x1)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= @x4
(X64.Machine_s.OReg @x1))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))

;; def=Prims.fst(616,11-616,13); use=X64.Vale.StrongPost_i.fsti(76,2-99,11)
(= (X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg @x1)
@x2)
@x5)
)

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(98,83-98,87)
(or label_20

;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(98,83-98,87)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(76,2-99,11); use=X64.Vale.StrongPost_i.fsti(98,83-98,87)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)
)
)
 
;;no pats
:qid @query.51))
)
 
;;no pats
:qid @query.50))
)
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
))
))
))
))
))
))
))
))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.inss_to_codes, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, X64.Vale.StrongPost_i_pretyping_b57a61b8460583814cc6086893d3abc9, binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0, bool_inversion, bool_typing, constructor_distinct_Prims.Cons, constructor_distinct_X64.Machine_s.OReg, constructor_distinct_X64.Vale.StrongPost_i.Adc64Wrap, constructor_distinct_X64.Vale.StrongPost_i.Add64Wrap, constructor_distinct_X64.Vale.StrongPost_i.And64, constructor_distinct_X64.Vale.StrongPost_i.IMul64, constructor_distinct_X64.Vale.StrongPost_i.Load64, constructor_distinct_X64.Vale.StrongPost_i.Mov64, constructor_distinct_X64.Vale.StrongPost_i.Shr64, constructor_distinct_X64.Vale.StrongPost_i.Sub64, data_elim_Prims.Cons, disc_equation_Prims.Cons, disc_equation_X64.Machine_s.OConst, disc_equation_X64.Machine_s.OReg, disc_equation_X64.Machine_s.Rsp, disc_equation_X64.Vale.StrongPost_i.Adc64Wrap, disc_equation_X64.Vale.StrongPost_i.Add64Wrap, disc_equation_X64.Vale.StrongPost_i.And64, disc_equation_X64.Vale.StrongPost_i.IMul64, disc_equation_X64.Vale.StrongPost_i.Load64, disc_equation_X64.Vale.StrongPost_i.Mov64, disc_equation_X64.Vale.StrongPost_i.Shr64, disc_equation_X64.Vale.StrongPost_i.Sub64, equation_X64.Machine_s.valid_dst, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, primitive_Prims.op_Negation, proj_equation_Prims.Cons_hd, proj_equation_X64.Machine_s.OReg_r, proj_equation_X64.Vale.StrongPost_i.Adc64Wrap_dst, proj_equation_X64.Vale.StrongPost_i.Add64Wrap_dst, proj_equation_X64.Vale.StrongPost_i.And64_dst, proj_equation_X64.Vale.StrongPost_i.IMul64_dst, proj_equation_X64.Vale.StrongPost_i.Load64_dst, proj_equation_X64.Vale.StrongPost_i.Mov64_dst, proj_equation_X64.Vale.StrongPost_i.Shr64_dst, proj_equation_X64.Vale.StrongPost_i.Sub64_dst, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_X64.Machine_s.OReg_r, projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_dst, projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_src, projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_dst, projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_src, projection_inverse_X64.Vale.StrongPost_i.And64_amt, projection_inverse_X64.Vale.StrongPost_i.And64_dst, projection_inverse_X64.Vale.StrongPost_i.IMul64_dst, projection_inverse_X64.Vale.StrongPost_i.IMul64_src, projection_inverse_X64.Vale.StrongPost_i.Load64_dst, projection_inverse_X64.Vale.StrongPost_i.Load64_offset, projection_inverse_X64.Vale.StrongPost_i.Load64_src, projection_inverse_X64.Vale.StrongPost_i.Mov64_dst, projection_inverse_X64.Vale.StrongPost_i.Mov64_src, projection_inverse_X64.Vale.StrongPost_i.Shr64_amt, projection_inverse_X64.Vale.StrongPost_i.Shr64_dst, projection_inverse_X64.Vale.StrongPost_i.Sub64_dst, projection_inverse_X64.Vale.StrongPost_i.Sub64_src, subterm_ordering_Prims.Cons, typing_X64.Machine_s.uu___is_Rsp

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec inss_to_codes


; <Start encoding let rec inss_to_codes>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented_token () Term)
(declare-fun X64.Vale.StrongPost_i.inss_to_codes (Term) Term)
(declare-fun X64.Vale.StrongPost_i.inss_to_codes@tok () Term)
;;;;;;;;;;;;;;;;inss: Prims.list ins -> Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins X64.Vale.Decls.ocmp)
(declare-fun Tm_arrow_637b778718d4d2519f66e22114daee02 () Term)

; </end encoding let rec inss_to_codes>


; encoding sigelt let augment


; <Start encoding let augment>

;;;;;;;;;;;;;;;;_: Prims.unit -> Type
(declare-fun Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe () Term)
(declare-fun X64.Vale.StrongPost_i.augment (Term Term Term) Term)

;;;;;;;;;;;;;;;;st: X64.Vale.State_i.state -> post: (_: Prims.unit -> Type) -> final_state: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f () Term)
(declare-fun X64.Vale.StrongPost_i.augment@tok () Term)


; </end encoding let augment>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.valid_operand_norm; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(53,4-53,22); use=X64.Vale.StrongPost_i.fsti(53,4-53,22)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.valid_operand_norm @x0
@x1)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.valid_operand_norm @x0
@x1))
:qid typing_X64.Vale.StrongPost_i.valid_operand_norm))

:named typing_X64.Vale.StrongPost_i.valid_operand_norm))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.valid_maddr_norm; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(50,4-50,20); use=X64.Vale.StrongPost_i.fsti(50,4-50,20)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.maddr)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.valid_maddr_norm @x0
@x1)
Prims.bool))
 

:pattern ((X64.Vale.StrongPost_i.valid_maddr_norm @x0
@x1))
:qid typing_X64.Vale.StrongPost_i.valid_maddr_norm))

:named typing_X64.Vale.StrongPost_i.valid_maddr_norm))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.eval_operand_norm; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(59,4-59,21); use=X64.Vale.StrongPost_i.fsti(59,4-59,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.eval_operand_norm @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Vale.StrongPost_i.eval_operand_norm @x0
@x1))
:qid typing_X64.Vale.StrongPost_i.eval_operand_norm))

:named typing_X64.Vale.StrongPost_i.eval_operand_norm))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(68,4-68,14); use=X64.Vale.State_i.fsti(68,4-68,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.reg)
(HasType @x1
X64.Machine_s.nat64)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.update_reg @x0
@x1
@x2)
X64.Vale.State_i.state))
 

:pattern ((X64.Vale.State_i.update_reg @x0
@x1
@x2))
:qid typing_X64.Vale.State_i.update_reg))

:named typing_X64.Vale.State_i.update_reg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.eval_maddr; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(55,4-55,14); use=X64.Vale.State_i.fsti(55,4-55,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.maddr)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.eval_maddr @x0
@x1)
Prims.int))
 

:pattern ((X64.Vale.State_i.eval_maddr @x0
@x1))
:qid typing_X64.Vale.State_i.eval_maddr))

:named typing_X64.Vale.State_i.eval_maddr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__ok; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(27,2-27,4); use=X64.Vale.State_i.fsti(27,2-27,4)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__ok @x0)
Prims.bool))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__ok @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__ok))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__ok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__mem; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(30,2-30,5); use=X64.Vale.State_i.fsti(30,2-30,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
(FStar.Map.t Prims.int
X64.Machine_s.nat64)))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__mem @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__mem))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__flags; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(29,2-29,7); use=X64.Vale.State_i.fsti(29,2-29,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__flags @x0)
X64.Machine_s.nat64))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__flags @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__flags))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__flags))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.shift_right64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(273,4-273,17); use=X64.Vale.Decls.fsti(273,4-273,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.nat64)
(HasType @x1
X64.Machine_s.nat64))
(HasType (X64.Vale.Decls.shift_right64 @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Vale.Decls.shift_right64 @x0
@x1))
:qid typing_X64.Vale.Decls.shift_right64))

:named typing_X64.Vale.Decls.shift_right64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.logand64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(270,4-270,12); use=X64.Vale.Decls.fsti(270,4-270,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.nat64)
(HasType @x1
X64.Machine_s.nat64))
(HasType (X64.Vale.Decls.logand64 @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Vale.Decls.logand64 @x0
@x1))
:qid typing_X64.Vale.Decls.logand64))

:named typing_X64.Vale.Decls.logand64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.cf; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(27,4-27,6); use=X64.Vale.Decls.fsti(27,4-27,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.int)
(HasType (X64.Vale.Decls.cf @x0)
Prims.bool))
 

:pattern ((X64.Vale.Decls.cf @x0))
:qid typing_X64.Vale.Decls.cf))

:named typing_X64.Vale.Decls.cf))
;;;;;;;;;;;;;;;;typing_Tm_abs_53c55973f12c5cd6dba65c1cc5016627
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(69,43-69,75); use=X64.Vale.State_i.fsti(69,43-69,75)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_53c55973f12c5cd6dba65c1cc5016627 @x0
@x1
@x2)
Tm_arrow_1093f8e31085b67d2aaada502a6d45cd)
 

:pattern ((Tm_abs_53c55973f12c5cd6dba65c1cc5016627 @x0
@x1
@x2))
:qid typing_Tm_abs_53c55973f12c5cd6dba65c1cc5016627))

:named typing_Tm_abs_53c55973f12c5cd6dba65c1cc5016627))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.union; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(40,4-40,9); use=FStar.Set.fsti(40,4-40,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.union @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.union @x0
@x1
@x2))
:qid typing_FStar.Set.union))

:named typing_FStar.Set.union))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.singleton; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(37,4-37,13); use=FStar.Set.fsti(37,4-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(HasType (FStar.Set.singleton @x0
@x1)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.singleton @x0
@x1))
:qid typing_FStar.Set.singleton))

:named typing_FStar.Set.singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.set; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(22,4-22,7); use=FStar.Set.fsti(22,4-22,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.set @x0)
Tm_type))
 

:pattern ((FStar.Set.set @x0))
:qid typing_FStar.Set.set))

:named typing_FStar.Set.set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.mem; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(30,4-30,7); use=FStar.Set.fsti(30,4-30,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.mem @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Set.mem @x0
@x1
@x2))
:qid typing_FStar.Set.mem))

:named typing_FStar.Set.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.equal; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(25,4-25,9); use=FStar.Set.fsti(25,4-25,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.equal @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid typing_FStar.Set.equal))

:named typing_FStar.Set.equal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))
(HasType (FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
(FStar.Map.t @x0
@x1)))
 

:pattern ((FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Map.upd))

:named typing_FStar.Map.upd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.sel; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(39,4-39,7); use=FStar.Map.fsti(39,4-39,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Map.sel @x0
@x1
@x2
@x3)
@x1))
 

:pattern ((FStar.Map.sel @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.sel))

:named typing_FStar.Map.sel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.domain; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(48,4-48,10); use=FStar.Map.fsti(48,4-48,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1)))
(HasType (FStar.Map.domain @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Map.domain @x0
@x1
@x2))
:qid typing_FStar.Map.domain))

:named typing_FStar.Map.domain))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.contains; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(51,4-51,12); use=FStar.Map.fsti(51,4-51,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Map.contains @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((FStar.Map.contains @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.contains))

:named typing_FStar.Map.contains))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Map.upd@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Map.upd@tok
@x0)
@x1)
@x2)
@x3)
@x4))
:qid token_correspondence_FStar.Map.upd))

:named token_correspondence_FStar.Map.upd))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__ok; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(27,2-27,4); use=X64.Vale.State_i.fsti(27,2-27,4)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__ok @x0)
(X64.Vale.State_i.Mkstate_ok @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__ok @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_ok))

:named proj_equation_X64.Vale.State_i.Mkstate_ok))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__mem; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(30,2-30,5); use=X64.Vale.State_i.fsti(30,2-30,5)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
(X64.Vale.State_i.Mkstate_mem @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__mem @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_mem))

:named proj_equation_X64.Vale.State_i.Mkstate_mem))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__flags; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(29,2-29,7); use=X64.Vale.State_i.fsti(29,2-29,7)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__flags @x0)
(X64.Vale.State_i.Mkstate_flags @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__flags @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_flags))

:named proj_equation_X64.Vale.State_i.Mkstate_flags))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_union
;;; Fact-ids: Name FStar.Set.mem_union; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0))
(HasType @x3
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(72,12-72,58); use=FStar.Set.fsti(72,12-72,58)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3))
(Prims.op_BarBar (FStar.Set.mem @x0
@x1
@x2)
(FStar.Set.mem @x0
@x1
@x3)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3)))
:qid lemma_FStar.Set.mem_union))
:named lemma_FStar.Set.mem_union))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_singleton
;;; Fact-ids: Name FStar.Set.mem_singleton; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
@x0))

;; def=FStar.Set.fsti(67,12-67,41); use=FStar.Set.fsti(67,12-67,41)
(= (FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1))
(Prims.op_Equality @x0
@x1
@x2))
)
 

:pattern ((FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1)))
:qid lemma_FStar.Set.mem_singleton))
:named lemma_FStar.Set.mem_singleton))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_refl
;;; Fact-ids: Name FStar.Set.lemma_equal_refl; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(111,14-111,24); use=FStar.Set.fsti(111,14-111,24)
(= @x1
@x2)
)

;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(Valid 
;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_refl))
:named lemma_FStar.Set.lemma_equal_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_intro
;;; Fact-ids: Name FStar.Set.lemma_equal_intro; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(101,15-101,46); use=FStar.Set.fsti(101,15-101,46)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=FStar.Set.fsti(101,26-101,45); use=FStar.Set.fsti(101,26-101,45)
(= (FStar.Set.mem @x0
@x3
@x1)
(FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.lemma_equal_intro.1))
)

;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(Valid 
;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_intro))
:named lemma_FStar.Set.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_elim
;;; Fact-ids: Name FStar.Set.lemma_equal_elim; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(Valid 
;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(107,14-107,24); use=FStar.Set.fsti(107,14-107,24)
(= @x1
@x2)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_elim))
:named lemma_FStar.Set.lemma_equal_elim))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_UpdDomain
;;; Fact-ids: Name FStar.Map.lemma_UpdDomain; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))

;; def=FStar.Map.fsti(153,17-153,84); use=FStar.Map.fsti(153,17-153,84)
(Valid 
;; def=FStar.Map.fsti(153,17-153,84); use=FStar.Map.fsti(153,17-153,84)
(FStar.Set.equal @x0
(FStar.Map.domain @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
(FStar.Set.union @x0
(FStar.Map.domain @x0
@x1
@x2)
(FStar.Set.singleton @x0
@x3)))
)
)
 

:pattern ((FStar.Map.domain @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)))
:qid lemma_FStar.Map.lemma_UpdDomain))
:named lemma_FStar.Map.lemma_UpdDomain))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_SelUpd2
;;; Fact-ids: Name FStar.Map.lemma_SelUpd2; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1)

;; def=FStar.Map.fsti(100,51-100,58); use=FStar.Map.fsti(100,51-100,58)
(not 
;; def=FStar.Map.fsti(100,51-100,58); use=FStar.Map.fsti(100,51-100,58)
(= @x4
@x3)
)
)

;; def=FStar.Map.fsti(100,63-100,94); use=FStar.Map.fsti(100,63-100,94)
(= (FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3)
(FStar.Map.sel @x0
@x1
@x2
@x3))
)
 

:pattern ((FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3))
:qid lemma_FStar.Map.lemma_SelUpd2))
:named lemma_FStar.Map.lemma_SelUpd2))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_SelUpd1
;;; Fact-ids: Name FStar.Map.lemma_SelUpd1; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))

;; def=FStar.Map.fsti(96,50-96,74); use=FStar.Map.fsti(96,50-96,74)
(= (FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
@x3)
@x4)
)
 

:pattern ((FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
@x3))
:qid lemma_FStar.Map.lemma_SelUpd1))
:named lemma_FStar.Map.lemma_SelUpd1))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_InDomUpd2
;;; Fact-ids: Name FStar.Map.lemma_InDomUpd2; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1)

;; def=FStar.Map.fsti(128,53-128,60); use=FStar.Map.fsti(128,53-128,60)
(not 
;; def=FStar.Map.fsti(128,53-128,60); use=FStar.Map.fsti(128,53-128,60)
(= @x4
@x3)
)
)

;; def=FStar.Map.fsti(128,65-128,106); use=FStar.Map.fsti(128,65-128,106)
(= (FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3)
(FStar.Map.contains @x0
@x1
@x2
@x3))
)
 

:pattern ((FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3))
:qid lemma_FStar.Map.lemma_InDomUpd2))
:named lemma_FStar.Map.lemma_InDomUpd2))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_InDomUpd1
;;; Fact-ids: Name FStar.Map.lemma_InDomUpd1; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1))

;; def=FStar.Map.fsti(124,52-124,106); use=FStar.Map.fsti(124,52-124,106)
(= (FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x5)
@x4)
(Prims.op_BarBar (Prims.op_Equality @x0
@x3
@x4)
(FStar.Map.contains @x0
@x1
@x2
@x4)))
)
 

:pattern ((FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x5)
@x4))
:qid lemma_FStar.Map.lemma_InDomUpd1))
:named lemma_FStar.Map.lemma_InDomUpd1))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_ContainsDom
;;; Fact-ids: Name FStar.Map.lemma_ContainsDom; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))

;; def=FStar.Map.fsti(148,33-148,68); use=FStar.Map.fsti(148,33-148,68)
(= (FStar.Map.contains @x0
@x1
@x2
@x3)
(FStar.Set.mem @x0
@x3
(FStar.Map.domain @x0
@x1
@x2)))
)
 

:pattern ((FStar.Map.contains @x0
@x1
@x2
@x3))

:pattern ((FStar.Set.mem @x0
@x3
(FStar.Map.domain @x0
@x1
@x2)))
:qid lemma_FStar.Map.lemma_ContainsDom))
:named lemma_FStar.Map.lemma_ContainsDom))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b19283e90b47034162373413c6a19933
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! (HasType Tm_arrow_b19283e90b47034162373413c6a19933
Tm_type)
:named kinding_Tm_arrow_b19283e90b47034162373413c6a19933))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! (HasType Tm_arrow_1093f8e31085b67d2aaada502a6d45cd
Tm_type)
:named kinding_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_53c55973f12c5cd6dba65c1cc5016627
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(69,43-69,75); use=X64.Vale.State_i.fsti(69,43-69,75)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_53c55973f12c5cd6dba65c1cc5016627 @x1
@x2
@x3)
@x0)
(let ((@lb4 (Prims.op_Equality X64.Machine_s.reg
@x3
@x0)))
(ite (= @lb4
(BoxBool true))
@x1
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x0))))
 

:pattern ((ApplyTT (Tm_abs_53c55973f12c5cd6dba65c1cc5016627 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_53c55973f12c5cd6dba65c1cc5016627))

:named interpretation_Tm_abs_53c55973f12c5cd6dba65c1cc5016627))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType FStar.Map.upd@tok
Tm_arrow_b19283e90b47034162373413c6a19933))

;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Map.upd@tok
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Map.upd @x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.Map.upd @x1
@x2
@x3
@x4
@x5))
:qid function_token_typing_FStar.Map.upd.1))
)
 

:pattern ((ApplyTT @x0
FStar.Map.upd@tok))
:qid function_token_typing_FStar.Map.upd))

:named function_token_typing_FStar.Map.upd))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.valid_operand_norm
;;; Fact-ids: Name X64.Vale.StrongPost_i.valid_operand_norm; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(53,4-53,22); use=X64.Vale.StrongPost_i.fsti(53,4-53,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.valid_operand_norm @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (BoxInt 0)
(X64.Machine_s.OConst_n @lb2))
(Prims.op_LessThan (X64.Machine_s.OConst_n @lb2)
(BoxInt 18446744073709551616)))
(ite (is-X64.Machine_s.OReg @lb2)
(BoxBool true)
(ite (is-X64.Machine_s.OMem @lb2)
(X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.OMem_m @lb2)
@x1)
Tm_unit)))))
 

:pattern ((X64.Vale.StrongPost_i.valid_operand_norm @x0
@x1))
:qid equation_X64.Vale.StrongPost_i.valid_operand_norm))

:named equation_X64.Vale.StrongPost_i.valid_operand_norm))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.valid_maddr_norm
;;; Fact-ids: Name X64.Vale.StrongPost_i.valid_maddr_norm; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(50,4-50,20); use=X64.Vale.StrongPost_i.fsti(50,4-50,20)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.valid_maddr_norm @x0
@x1)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(X64.Vale.State_i.eval_maddr @x0
@x1)))
 

:pattern ((X64.Vale.StrongPost_i.valid_maddr_norm @x0
@x1))
:qid equation_X64.Vale.StrongPost_i.valid_maddr_norm))

:named equation_X64.Vale.StrongPost_i.valid_maddr_norm))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.eval_operand_norm
;;; Fact-ids: Name X64.Vale.StrongPost_i.eval_operand_norm; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(59,4-59,21); use=X64.Vale.StrongPost_i.fsti(59,4-59,21)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.eval_operand_norm @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(let ((@lb3 (Prims.op_AmpAmp (Prims.op_LessThanOrEqual (BoxInt 0)
(X64.Machine_s.OConst_n @lb2))
(Prims.op_LessThan (X64.Machine_s.OConst_n @lb2)
(BoxInt 18446744073709551616)))))
(ite (= @lb3
(BoxBool true))
(X64.Machine_s.OConst_n @lb2)
(BoxInt 0)))
(ite (is-X64.Machine_s.OReg @lb2)
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r @lb2))
(ite (is-X64.Machine_s.OMem @lb2)
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(X64.Vale.State_i.eval_maddr (X64.Machine_s.OMem_m @lb2)
@x1))
Tm_unit)))))
 

:pattern ((X64.Vale.StrongPost_i.eval_operand_norm @x0
@x1))
:qid equation_X64.Vale.StrongPost_i.eval_operand_norm))

:named equation_X64.Vale.StrongPost_i.eval_operand_norm))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.update_reg
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(68,4-68,14); use=X64.Vale.State_i.fsti(68,4-68,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.State_i.update_reg @x0
@x1
@x2)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok @x2)
(FStar.FunctionalExtensionality.on_domain X64.Machine_s.reg
Tm_abs_bde726dfeb2837d96e43a155f7c873f5
(Tm_abs_53c55973f12c5cd6dba65c1cc5016627 @x1
@x2
@x0))
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
 

:pattern ((X64.Vale.State_i.update_reg @x0
@x1
@x2))
:qid equation_X64.Vale.State_i.update_reg))

:named equation_X64.Vale.State_i.update_reg))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.eval_maddr
;;; Fact-ids: Name X64.Vale.State_i.eval_maddr; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(55,4-55,14); use=X64.Vale.State_i.fsti(55,4-55,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.eval_maddr @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.MConst @lb2)
(X64.Machine_s.MConst_n @lb2)
(ite (is-X64.Machine_s.MReg @lb2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MReg_r @lb2)))
(BoxInt_proj_0 (X64.Machine_s.MReg_offset @lb2))))
(ite (is-X64.Machine_s.MIndex @lb2)
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MIndex_base @lb2)))
(_mul (BoxInt_proj_0 (X64.Machine_s.MIndex_scale @lb2))
(BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MIndex_index @lb2)))))
(BoxInt_proj_0 (X64.Machine_s.MIndex_offset @lb2))))
Tm_unit)))))
 

:pattern ((X64.Vale.State_i.eval_maddr @x0
@x1))
:qid equation_X64.Vale.State_i.eval_maddr))

:named equation_X64.Vale.State_i.eval_maddr))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(23,24-23,27); use=X64.Vale.State_i.fsti(69,20-69,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_1093f8e31085b67d2aaada502a6d45cd)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))
:qid X64.Vale.State_i_pre_typing_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))

:named X64.Vale.State_i_pre_typing_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd
;;; Fact-ids: Name X64.Vale.State_i.update_reg; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(23,24-23,27); use=X64.Vale.State_i.fsti(69,20-69,29)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_1093f8e31085b67d2aaada502a6d45cd)
(and 
;; def=X64.Vale.Regs_i.fsti(23,24-23,27); use=X64.Vale.State_i.fsti(69,20-69,29)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)
(HasType (ApplyTT @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.State_i_interpretation_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))
:qid X64.Vale.State_i_interpretation_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))

:named X64.Vale.State_i_interpretation_Tm_arrow_1093f8e31085b67d2aaada502a6d45cd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b19283e90b47034162373413c6a19933)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b19283e90b47034162373413c6a19933))
:qid FStar.Map_pre_typing_Tm_arrow_b19283e90b47034162373413c6a19933))

:named FStar.Map_pre_typing_Tm_arrow_b19283e90b47034162373413c6a19933))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b19283e90b47034162373413c6a19933
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b19283e90b47034162373413c6a19933)
(and 
;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Map.t @x1
@x2))
(HasType @x4
@x1)
(HasType @x5
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Map.t @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.1))

(IsTotFun @x0)

;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.2))


;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.3))


;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Map.t @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.4))


;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Map.t @x1
@x2))
(HasType @x4
@x1))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.5))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b19283e90b47034162373413c6a19933))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933))

:named FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Vale.Decls.va_update; Namespace X64.Vale.Decls
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Map.upd@tok))
:named @kick_partial_app_8a7f7b4aae27e82e9b0c2aa043fb2952))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(106,2-189,7)

;;;;;;;;;;;;;;;;inss : Prims.list X64.Vale.StrongPost_i.ins (Prims.list X64.Vale.StrongPost_i.ins)
(declare-fun x_64054ab5c496dbf376bb97c3f7e4eb60_0 () Term)
;;;;;;;;;;;;;;;;binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0
;;; Fact-ids: 
(assert (! (HasType x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.list X64.Vale.StrongPost_i.ins))
:named binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0))
;;;;;;;;;;;;;;;;post : _: X64.Vale.State_i.state -> Type0 (_: X64.Vale.State_i.state -> Type)
(declare-fun x_f320b3fc087383fd4c4afa9cfa63312e_1 () Term)
;;;;;;;;;;;;;;;;_: X64.Vale.State_i.state -> Type
(declare-fun Tm_arrow_cf722942827e55438f3dd1004b1bb04b () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cf722942827e55438f3dd1004b1bb04b
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_cf722942827e55438f3dd1004b1bb04b
Tm_type)
:named kinding_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,41-105,55); use=X64.Vale.StrongPost_i.fsti(105,41-105,55)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,41-105,55); use=X64.Vale.StrongPost_i.fsti(105,41-105,55)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,41-105,55); use=X64.Vale.StrongPost_i.fsti(105,41-105,55)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.State_i.state)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
;;;;;;;;;;;;;;;;binder_x_f320b3fc087383fd4c4afa9cfa63312e_1
;;; Fact-ids: 
(assert (! (HasType x_f320b3fc087383fd4c4afa9cfa63312e_1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
:named binder_x_f320b3fc087383fd4c4afa9cfa63312e_1))
;;;;;;;;;;;;;;;;s0 : X64.Vale.State_i.state (X64.Vale.State_i.state)
(declare-fun x_de52c7fd4c52e1942aeef9a9143c43bf_2 () Term)
;;;;;;;;;;;;;;;;binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2
;;; Fact-ids: 
(assert (! (HasType x_de52c7fd4c52e1942aeef9a9143c43bf_2
X64.Vale.State_i.state)
:named binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2))

(declare-fun Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 (Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7d852c95ef383e3d684b2f1ea40239b5))

:named refinement_kinding_Tm_refine_7d852c95ef383e3d684b2f1ea40239b5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x2))
(and (HasTypeFuel @u0
@x1
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(or 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(105,17-105,21)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(105,17-105,21)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
@x1
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)

))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x2)))
:qid refinement_interpretation_Tm_refine_7d852c95ef383e3d684b2f1ea40239b5))

:named refinement_interpretation_Tm_refine_7d852c95ef383e3d684b2f1ea40239b5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7d852c95ef383e3d684b2f1ea40239b5
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x0)))
(Valid (Prims.hasEq X64.Vale.State_i.state)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x0))))
:qid haseqTm_refine_7d852c95ef383e3d684b2f1ea40239b5))

:named haseqTm_refine_7d852c95ef383e3d684b2f1ea40239b5))
(declare-fun X64.Vale.StrongPost_i.wp_code (Term Term Term) Term)


;;;;;;;;;;;;;;;;inss: Prims.list ins ->     post: (_: X64.Vale.State_i.state -> Type) ->     s0: X64.Vale.State_i.state{inss << inss \/ inss === inss /\ s0 << s0}   -> Type
(declare-fun Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f
Tm_type)
:named kinding_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x2
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(HasType @x3
(Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x1)))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f.1))

(IsTotFun @x0)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f.2))


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(105,17-189,7)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x2
Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))
(declare-fun X64.Vale.StrongPost_i.wp_code@tok () Term)
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,8-105,15); use=X64.Vale.StrongPost_i.fsti(105,8-105,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.wp_code@tok
@x0)
@x1)
@x2)
(X64.Vale.StrongPost_i.wp_code @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.wp_code@tok
@x0)
@x1)
@x2))
:qid token_correspondence_X64.Vale.StrongPost_i.wp_code))

:named token_correspondence_X64.Vale.StrongPost_i.wp_code))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,8-105,15); use=X64.Vale.StrongPost_i.fsti(105,8-105,15)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Vale.StrongPost_i.wp_code@tok
Tm_arrow_8dc2e59c8f89000cbd56b85442be0e2f))

;; def=X64.Vale.StrongPost_i.fsti(105,8-105,15); use=X64.Vale.StrongPost_i.fsti(105,8-105,15)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.wp_code@tok
@x1)
@x2)
@x3)
(X64.Vale.StrongPost_i.wp_code @x1
@x2
@x3))
 

:pattern ((X64.Vale.StrongPost_i.wp_code @x1
@x2
@x3))
:qid function_token_typing_X64.Vale.StrongPost_i.wp_code.1))
)
 

:pattern ((ApplyTT @x0
X64.Vale.StrongPost_i.wp_code@tok))
:qid function_token_typing_X64.Vale.StrongPost_i.wp_code))

:named function_token_typing_X64.Vale.StrongPost_i.wp_code))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,8-105,15); use=X64.Vale.StrongPost_i.fsti(105,8-105,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(HasType @x2
(Tm_refine_7d852c95ef383e3d684b2f1ea40239b5 @x0)))
(HasType (X64.Vale.StrongPost_i.wp_code @x0
@x1
@x2)
Tm_type))
 

:pattern ((X64.Vale.StrongPost_i.wp_code @x0
@x1
@x2))
:qid typing_X64.Vale.StrongPost_i.wp_code))

:named typing_X64.Vale.StrongPost_i.wp_code))
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)














; Encoding query formula : forall (k: Prims.pure_post Type0).
;   (forall (x: Type0). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;   (~(Nil? inss) /\ ~(Cons? inss) ==> Prims.l_False) /\
;   (~(Nil? inss) ==>
;     (forall (b: X64.Vale.StrongPost_i.ins) (b: Prims.list X64.Vale.StrongPost_i.ins).
;         inss == b :: b ==>
;         (forall (k: Prims.pure_post Type0).
;             (forall (x: Type0). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;             ~(Mov64? b && OReg? b.dst && Rsp? b.dst.r) ==>
;             (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                 b == X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg b) b ==>
;                 X64.Vale.StrongPost_i.valid_operand_norm b s0 ==>
;                 (forall (x: X64.Machine_s.nat64).
;                     x == X64.Vale.StrongPost_i.eval_operand_norm b s0 ==>
;                     b << inss \/ b === inss /\ X64.Vale.State_i.update_reg b x s0 << s0)) /\
;             (~(Mov64? b && OReg? b.dst) ==>
;               ~(Load64? b && OReg? b.dst && Rsp? b.dst.r) ==>
;               (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.reg) (b: Prims.int).
;                   b == X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg b) (X64.Machine_s.OReg b) b ==>
;                   X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (s0.regs b + b)) s0 ==>
;                   (forall (x: X64.Machine_s.nat64).
;                       x == FStar.Map.sel s0.mem (s0.regs b + b) ==>
;                       b << inss \/ b === inss /\ X64.Vale.State_i.update_reg b x s0 << s0)) /\
;               (~(Load64? b && OReg? b.dst && OReg? b.src) ==>
;                 (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand) (b: Prims.int).
;                     b == X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg b) b b ==>
;                     X64.Vale.StrongPost_i.valid_operand_norm b s0 /\
;                     FStar.Map.contains s0.mem (s0.regs b + b) ==>
;                     (forall (x: FStar.Map.t Prims.int X64.Machine_s.nat64).
;                         x ==
;                         FStar.Map.upd s0.mem
;                           (s0.regs b + b)
;                           (X64.Vale.StrongPost_i.eval_operand_norm b s0) ==>
;                         b << inss \/
;                         b === inss /\ X64.Vale.State_i.Mkstate s0.ok s0.regs s0.flags x << s0)) /\
;                 (~(Store64? b && OReg? b.dst) ==>
;                   ~(Add64Wrap? b && OReg? b.dst && Rsp? b.dst.r) ==>
;                   (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                       b == X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg b) b ==>
;                       X64.Vale.StrongPost_i.valid_operand_norm b s0 ==>
;                       (forall (a: Prims.int).
;                           (*  - Could not prove post-condition
; *)
;                           forall (x: X64.Machine_s.nat64).
;                             (*  - Could not prove post-condition
; *)
;                             forall (f: X64.Machine_s.nat64).
;                               a == s0.regs b + X64.Vale.StrongPost_i.eval_operand_norm b s0 /\
;                               x ==
;                               (match a < 0x10000000000000000 with
;                                 | true -> a
;                                 | _ -> a - 0x10000000000000000) /\
;                               X64.Vale.Decls.cf f == (a >= 0x10000000000000000) ==>
;                               b << inss \/
;                               b === inss /\
;                               X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg b x s0).ok
;                                 (X64.Vale.State_i.update_reg b x s0).regs
;                                 f
;                                 (X64.Vale.State_i.update_reg b x s0).mem <<
;                               s0)) /\
;                   (~(Add64Wrap? b && OReg? b.dst) ==>
;                     ~(Adc64Wrap? b && OReg? b.dst && Rsp? b.dst.r) ==>
;                     (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                         b == X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg b) b ==>
;                         X64.Vale.StrongPost_i.valid_operand_norm b s0 ==>
;                         (forall (a: Prims.int).
;                             (*  - Could not prove post-condition
; *)
;                             forall (x: X64.Machine_s.nat64).
;                               (*  - Could not prove post-condition
; *)
;                               forall (f: X64.Machine_s.nat64).
;                                 a ==
;                                 s0.regs b + X64.Vale.StrongPost_i.eval_operand_norm b s0 +
;                                 (match X64.Vale.Decls.cf s0.flags with
;                                   | true -> 1
;                                   | _ -> 0) /\
;                                 x ==
;                                 (match a < 0x10000000000000000 with
;                                   | true -> a
;                                   | _ -> a - 0x10000000000000000) /\
;                                 X64.Vale.Decls.cf f == (a >= 0x10000000000000000) ==>
;                                 b << inss \/
;                                 b === inss /\
;                                 X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg b x s0).ok
;                                   (X64.Vale.State_i.update_reg b x s0).regs
;                                   f
;                                   (X64.Vale.State_i.update_reg b x s0).mem <<
;                                 s0)) /\
;                     (~(Adc64Wrap? b && OReg? b.dst) ==>
;                       (forall (b: X64.Machine_s.operand).
;                           b == X64.Vale.StrongPost_i.Mul64Wrap b ==>
;                           X64.Vale.StrongPost_i.valid_operand_norm b s0 ==>
;                           (forall (rax: X64.Machine_s.nat64).
;                               (*  - Could not prove post-condition
; *)
;                               forall (rdx: X64.Machine_s.nat64).
;                                 (*  - Could not prove post-condition
; *)
;                                 forall (f: X64.Machine_s.nat64).
;                                   0x10000000000000000 * rdx + rax ==
;                                   s0.regs X64.Machine_s.Rax *
;                                   X64.Vale.StrongPost_i.eval_operand_norm b s0 ==>
;                                   b << inss \/
;                                   b === inss /\
;                                   X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                                     rdx
;                                     (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                                         rax
;                                         (X64.Vale.State_i.Mkstate s0.ok s0.regs f s0.mem)) <<
;                                   s0)) /\
;                       (~(Mul64Wrap? b) ==>
;                         ~(IMul64? b && OReg? b.dst && Rsp? b.dst.r) ==>
;                         (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                             b == X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg b) b ==>
;                             X64.Vale.StrongPost_i.valid_operand_norm b s0 /\
;                             s0.regs b * X64.Vale.StrongPost_i.eval_operand_norm b s0 <
;                             0x10000000000000000 ==>
;                             (forall (x: X64.Machine_s.nat64).
;                                 (*  - Could not prove post-condition
; *)
;                                 forall (f: X64.Machine_s.nat64).
;                                   x == s0.regs b * X64.Vale.StrongPost_i.eval_operand_norm b s0 ==>
;                                   b << inss \/
;                                   b === inss /\
;                                   X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg b x s0).ok
;                                     (X64.Vale.State_i.update_reg b x s0).regs
;                                     f
;                                     (X64.Vale.State_i.update_reg b x s0).mem <<
;                                   s0)) /\
;                         (~(IMul64? b && OReg? b.dst) ==>
;                           ~(And64? b && OReg? b.dst && Rsp? b.dst.r) ==>
;                           (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                               b == X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg b) b ==>
;                               X64.Vale.StrongPost_i.valid_operand_norm b s0 ==>
;                               (forall (x: X64.Machine_s.nat64).
;                                   (*  - Could not prove post-condition
; *)
;                                   forall (f: X64.Machine_s.nat64).
;                                     x ==
;                                     X64.Vale.Decls.logand64 (s0.regs b)
;                                       (X64.Vale.StrongPost_i.eval_operand_norm b s0) ==>
;                                     b << inss \/
;                                     b === inss /\
;                                     X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg b x s0).ok
;                                       (X64.Vale.State_i.update_reg b x s0).regs
;                                       f
;                                       (X64.Vale.State_i.update_reg b x s0).mem <<
;                                     s0)) /\
;                           (~(And64? b && OReg? b.dst) ==>
;                             ~(Shr64? b && OReg? b.dst && Rsp? b.dst.r) ==>
;                             (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                                 b == X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg b) b ==>
;                                 X64.Vale.StrongPost_i.valid_operand_norm b s0 ==>
;                                 (forall (x: X64.Machine_s.nat64).
;                                     (*  - Could not prove post-condition
; *)
;                                     forall (f: X64.Machine_s.nat64).
;                                       x ==
;                                       X64.Vale.Decls.shift_right64 (s0.regs b)
;                                         (X64.Vale.StrongPost_i.eval_operand_norm b s0) ==>
;                                       b << inss \/
;                                       b === inss /\
;                                       X64.Vale.State_i.Mkstate
;                                         (X64.Vale.State_i.update_reg b x s0).ok
;                                         (X64.Vale.State_i.update_reg b x s0).regs
;                                         f
;                                         (X64.Vale.State_i.update_reg b x s0).mem <<
;                                       s0)) /\
;                             (~(Shr64? b && OReg? b.dst) ==>
;                               ~(Sub64? b && OReg? b.dst && Rsp? b.dst.r) ==>
;                               (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                                   b == X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg b) b ==>
;                                   X64.Vale.StrongPost_i.valid_operand_norm b s0 /\
;                                   0 <= s0.regs b - X64.Vale.StrongPost_i.eval_operand_norm b s0 ==>
;                                   (forall (a: Prims.int).
;                                       (*  - Could not prove post-condition
; *)
;                                       forall (x: X64.Machine_s.nat64).
;                                         (*  - Could not prove post-condition
; *)
;                                         forall (f: X64.Machine_s.nat64).
;                                           a ==
;                                           s0.regs b - X64.Vale.StrongPost_i.eval_operand_norm b s0 /\
;                                           x == a ==>
;                                           b << inss \/
;                                           b === inss /\
;                                           X64.Vale.State_i.Mkstate
;                                             (X64.Vale.State_i.update_reg b x s0).ok
;                                             (X64.Vale.State_i.update_reg b x s0).regs
;                                             f
;                                             (X64.Vale.State_i.update_reg b x s0).mem <<
;                                           s0))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec wp_code`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Tm_type))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x1 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(ApplyTT @x0
@x1)
)

 

:pattern ((ApplyTT @x0
@x1))
:qid @query.1))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and (implies 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(106,8-106,12)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(106,8-106,12)
(not 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(106,8-106,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(106,8-106,12)
(not 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(106,8-106,12)
(BoxBool_proj_0 (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
)
)

label_1)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(106,8-106,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.StrongPost_i.ins)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fsti(105,17-115,14); use=X64.Vale.StrongPost_i.fsti(106,8-115,14)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
@x1
@x2))
)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Tm_type))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(ApplyTT @x3
@x4)
)

 

:pattern ((ApplyTT @x3
@x4))
:qid @query.5))


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-118,20); use=X64.Vale.StrongPost_i.fsti(117,12-118,20)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Mov64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x1)))))
)
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-119,29); use=X64.Vale.StrongPost_i.fsti(117,12-119,29)
(= @x1
(X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(120,1-120,26); use=X64.Vale.StrongPost_i.fsti(120,1-120,26)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(120,1-122,54)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(121,12-121,41); use=X64.Vale.StrongPost_i.fsti(121,12-121,41)
(= @x6
(X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(or label_2

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(122,32-122,53)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
 
;;no pats
:qid @query.6))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-119,14); use=X64.Vale.StrongPost_i.fsti(117,12-119,14)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mov64 @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x1))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-123,21); use=X64.Vale.StrongPost_i.fsti(117,12-123,21)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Load64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Load64__item__dst @x1)))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (HasType @x5
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=X64.Vale.StrongPost_i.fsti(115,4-124,44); use=X64.Vale.StrongPost_i.fsti(117,12-124,44)
(= @x1
(X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg @x4)
(X64.Machine_s.OReg @x5)
@x6))


;; def=X64.Vale.StrongPost_i.fsti(125,3-125,54); use=X64.Vale.StrongPost_i.fsti(125,3-125,54)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x5))
(BoxInt_proj_0 @x6))))
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(125,3-127,54)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(126,12-126,54); use=X64.Vale.StrongPost_i.fsti(126,12-126,54)
(= @x7
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem x_de52c7fd4c52e1942aeef9a9143c43bf_2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x5))
(BoxInt_proj_0 @x6)))))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(or label_3

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(127,32-127,53)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-124,15); use=X64.Vale.StrongPost_i.fsti(117,12-124,15)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Load64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__src @x1))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (HasType @x5
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.int)

;; def=X64.Vale.StrongPost_i.fsti(115,4-128,38); use=X64.Vale.StrongPost_i.fsti(117,12-128,38)
(= @x1
(X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg @x4)
@x5
@x6))


;; def=X64.Vale.StrongPost_i.fsti(129,1-129,28); use=X64.Vale.StrongPost_i.fsti(129,1-129,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))


;; def=X64.Vale.StrongPost_i.fsti(130,1-130,45); use=X64.Vale.StrongPost_i.fsti(130,1-130,45)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem x_de52c7fd4c52e1942aeef9a9143c43bf_2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 @x6)))))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(129,1-133,41)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(132,3-132,72); use=X64.Vale.StrongPost_i.fsti(132,3-132,72)
(= @x7
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem x_de52c7fd4c52e1942aeef9a9143c43bf_2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 @x6)))
(X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(or label_4

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(133,21-133,40)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok x_de52c7fd4c52e1942aeef9a9143c43bf_2)
(X64.Vale.State_i.__proj__Mkstate__item__regs x_de52c7fd4c52e1942aeef9a9143c43bf_2)
(X64.Vale.State_i.__proj__Mkstate__item__flags x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x7)
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.16))
)
 
;;no pats
:qid @query.15))
)
 
;;no pats
:qid @query.14))
)
 
;;no pats
:qid @query.13))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-128,16); use=X64.Vale.StrongPost_i.fsti(117,12-128,16)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Store64 @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Store64__item__dst @x1))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-134,24); use=X64.Vale.StrongPost_i.fsti(117,12-134,24)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x1)))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-135,33); use=X64.Vale.StrongPost_i.fsti(117,12-135,33)
(= @x1
(X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(136,1-136,28); use=X64.Vale.StrongPost_i.fsti(136,1-136,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(136,1-141,65)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.int)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(137,11-141,64)
(forall ((@x7 Term))
 (! (implies (HasType @x7
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(137,13-141,64)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(138,6-138,49); use=X64.Vale.StrongPost_i.fsti(138,6-138,49)
(= @x6
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))))


;; def=X64.Vale.StrongPost_i.fsti(139,6-139,55); use=X64.Vale.StrongPost_i.fsti(139,6-139,55)
(= @x7
(let ((@lb9 (Prims.op_LessThan @x6
(BoxInt 18446744073709551616))))
(ite (= @lb9
(BoxBool true))
@x6
(BoxInt (- (BoxInt_proj_0 @x6)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(140,4-140,28); use=X64.Vale.StrongPost_i.fsti(140,4-140,28)
(= (X64.Vale.Decls.cf @x8)
(Prims.op_GreaterThanOrEqual @x6
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(or label_5

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(141,26-141,64)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
@x8
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))
)
 
;;no pats
:qid @query.19))
)
 
;;no pats
:qid @query.18))
)
 
;;no pats
:qid @query.17))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-135,18); use=X64.Vale.StrongPost_i.fsti(117,12-135,18)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x1))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-142,24); use=X64.Vale.StrongPost_i.fsti(117,12-142,24)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x1)))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-143,33); use=X64.Vale.StrongPost_i.fsti(117,12-143,33)
(= @x1
(X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(144,1-144,28); use=X64.Vale.StrongPost_i.fsti(144,1-144,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(144,1-150,65)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.int)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(145,11-150,64)
(forall ((@x7 Term))
 (! (implies (HasType @x7
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(145,13-150,64)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(146,6-147,34); use=X64.Vale.StrongPost_i.fsti(146,6-147,34)
(= @x6
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
(BoxInt_proj_0 (let ((@lb9 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags x_de52c7fd4c52e1942aeef9a9143c43bf_2))))
(ite (= @lb9
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))


;; def=X64.Vale.StrongPost_i.fsti(148,6-148,55); use=X64.Vale.StrongPost_i.fsti(148,6-148,55)
(= @x7
(let ((@lb9 (Prims.op_LessThan @x6
(BoxInt 18446744073709551616))))
(ite (= @lb9
(BoxBool true))
@x6
(BoxInt (- (BoxInt_proj_0 @x6)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(149,5-149,29); use=X64.Vale.StrongPost_i.fsti(149,5-149,29)
(= (X64.Vale.Decls.cf @x8)
(Prims.op_GreaterThanOrEqual @x6
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(or label_6

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(150,26-150,64)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
@x8
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.26))
)
 
;;no pats
:qid @query.25))
)
 
;;no pats
:qid @query.24))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-143,18); use=X64.Vale.StrongPost_i.fsti(117,12-143,18)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x1))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-151,22); use=X64.Vale.StrongPost_i.fsti(117,12-151,22)
(= @x1
(X64.Vale.StrongPost_i.Mul64Wrap @x4))


;; def=X64.Vale.StrongPost_i.fsti(152,1-152,28); use=X64.Vale.StrongPost_i.fsti(152,1-152,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x4
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(152,1-157,37)
(forall ((@x5 Term))
 (! (implies (HasType @x5
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(153,21-157,36)
(forall ((@x6 Term))
 (! (implies (HasType @x6
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(153,33-157,36)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(154,3-155,56); use=X64.Vale.StrongPost_i.fsti(154,3-155,56)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x6))
(BoxInt_proj_0 @x5))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x4
x_de52c7fd4c52e1942aeef9a9143c43bf_2))))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(or label_7

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(156,23-157,36)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x6
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x5
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok x_de52c7fd4c52e1942aeef9a9143c43bf_2)
(X64.Vale.State_i.__proj__Mkstate__item__regs x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x7
(X64.Vale.State_i.__proj__Mkstate__item__mem x_de52c7fd4c52e1942aeef9a9143c43bf_2))))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.30))
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-115,6); use=X64.Vale.StrongPost_i.fsti(117,12-117,14)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x1))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-158,21); use=X64.Vale.StrongPost_i.fsti(117,12-158,21)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_IMul64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x1)))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-159,30); use=X64.Vale.StrongPost_i.fsti(117,12-159,30)
(= @x1
(X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(161,3-161,30); use=X64.Vale.StrongPost_i.fsti(161,3-161,30)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))


;; def=X64.Vale.StrongPost_i.fsti(162,3-162,18); use=X64.Vale.StrongPost_i.fsti(162,3-162,18)
(< (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
18446744073709551616)
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(161,3-165,65)
(forall ((@x6 Term))
 (! (implies (HasType @x6
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(163,21-165,64)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(164,6-164,12); use=X64.Vale.StrongPost_i.fsti(164,6-164,12)
(= @x6
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(or label_8

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(165,26-165,64)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
@x7
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))
)
 
;;no pats
:qid @query.31))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-159,15); use=X64.Vale.StrongPost_i.fsti(117,12-159,15)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_IMul64 @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x1))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-166,20); use=X64.Vale.StrongPost_i.fsti(117,12-166,20)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_And64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__And64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__And64__item__dst @x1)))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-167,29); use=X64.Vale.StrongPost_i.fsti(117,12-167,29)
(= @x1
(X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(169,1-169,28); use=X64.Vale.StrongPost_i.fsti(169,1-169,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(169,1-172,60)
(forall ((@x6 Term))
 (! (implies (HasType @x6
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(170,19-172,59)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(171,3-171,9); use=X64.Vale.StrongPost_i.fsti(171,3-171,9)
(= @x6
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4)
(X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(or label_9

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(172,21-172,59)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
@x7
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.38))
)
 
;;no pats
:qid @query.37))
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-167,14); use=X64.Vale.StrongPost_i.fsti(117,12-167,14)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_And64 @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__And64__item__dst @x1))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-173,20); use=X64.Vale.StrongPost_i.fsti(117,12-173,20)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Shr64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x1)))))
)
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-174,29); use=X64.Vale.StrongPost_i.fsti(117,12-174,29)
(= @x1
(X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(176,1-176,28); use=X64.Vale.StrongPost_i.fsti(176,1-176,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(176,1-179,60)
(forall ((@x6 Term))
 (! (implies (HasType @x6
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(177,19-179,59)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(178,3-178,9); use=X64.Vale.StrongPost_i.fsti(178,3-178,9)
(= @x6
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4)
(X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(or label_10

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(179,21-179,59)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
@x7
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg @x4
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
 
;;no pats
:qid @query.39))

(implies 
;; def=Prims.fst(389,18-389,39); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(and 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-174,14); use=X64.Vale.StrongPost_i.fsti(117,12-174,14)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Shr64 @x1))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x1))))
)


;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(not 
;; def=X64.Vale.StrongPost_i.fsti(115,4-180,20); use=X64.Vale.StrongPost_i.fsti(117,12-180,20)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Sub64 @x1)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x1))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r (X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x1)))))
)
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x4 Term))
 (! (implies (HasType @x4
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fsti(106,2-189,7)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fsti(115,4-181,29); use=X64.Vale.StrongPost_i.fsti(117,12-181,29)
(= @x1
(X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg @x4)
@x5))


;; def=X64.Vale.StrongPost_i.fsti(182,8-182,35); use=X64.Vale.StrongPost_i.fsti(182,8-182,35)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))


;; def=X64.Vale.StrongPost_i.fsti(183,8-183,53); use=X64.Vale.StrongPost_i.fsti(183,8-183,53)
(<= 0
(- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2))))
)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(182,8-187,72)
(forall ((@x6 Term))
 (! (implies (HasType @x6
Prims.int)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(184,18-187,71)
(forall ((@x7 Term))
 (! (implies (HasType @x7
X64.Machine_s.nat64)

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fsti(184,20-187,71)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(185,15-185,58); use=X64.Vale.StrongPost_i.fsti(185,15-185,58)
(= @x6
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x4))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x5
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))))


;; def=X64.Vale.StrongPost_i.fsti(186,15-186,21); use=X64.Vale.StrongPost_i.fsti(186,15-186,21)
(= @x7
@x6)
)

;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(or label_11

;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(105,17-189,7); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(105,17-105,21); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x2
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(106,2-189,7); use=X64.Vale.StrongPost_i.fsti(187,33-187,71)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2))
@x8
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg @x4
@x7
x_de52c7fd4c52e1942aeef9a9143c43bf_2)))
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
)
 
;;no pats
:qid @query.43))
))
))
))
))
))
))
))
))
))
)
 
;;no pats
:qid @query.4)))
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.wp_code, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0, disc_equation_Prims.Cons, disc_equation_Prims.Nil, fuel_guarded_inversion_Prims.list, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_tl, subterm_ordering_Prims.Cons

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec wp_code


; <Start encoding let rec wp_code>

;;;;;;;;;;;;;;;;_: X64.Vale.State_i.state -> Type
(declare-fun Tm_arrow_cf722942827e55438f3dd1004b1bb04b () Term)
(declare-fun X64.Vale.StrongPost_i.wp_code (Term Term Term) Term)

;;;;;;;;;;;;;;;;inss: Prims.list ins -> post: (_: X64.Vale.State_i.state -> Type) -> s0: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_8d2f22810657d75dc9812d34d3f30590 () Term)
(declare-fun X64.Vale.StrongPost_i.wp_code@tok () Term)

; </end encoding let rec wp_code>


; encoding sigelt let wp_code_delta


; <Start encoding let wp_code_delta>

(declare-fun X64.Vale.StrongPost_i.wp_code_delta (Dummy_sort) Term)

; </end encoding let wp_code_delta>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.wp_code; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,8-105,15); use=X64.Vale.StrongPost_i.fsti(105,8-105,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.wp_code @x0
@x1
@x2)
Tm_type))
 

:pattern ((X64.Vale.StrongPost_i.wp_code @x0
@x1
@x2))
:qid typing_X64.Vale.StrongPost_i.wp_code))

:named typing_X64.Vale.StrongPost_i.wp_code))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Prims.list X64.Machine_s.reg))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2)
Prims.logical))
 

:pattern ((X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2))
:qid typing_X64.Vale.StrongPost_i.regs_match))

:named typing_X64.Vale.StrongPost_i.regs_match))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.inss_to_codes; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType (X64.Vale.StrongPost_i.inss_to_codes @x0)
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
 

:pattern ((X64.Vale.StrongPost_i.inss_to_codes @x0))
:qid typing_X64.Vale.StrongPost_i.inss_to_codes))

:named typing_X64.Vale.StrongPost_i.inss_to_codes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,4-101,11); use=X64.Vale.StrongPost_i.fsti(101,4-101,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.augment @x0
@x1
@x2)
Tm_type))
 

:pattern ((X64.Vale.StrongPost_i.augment @x0
@x1
@x2))
:qid typing_X64.Vale.StrongPost_i.augment))

:named typing_X64.Vale.StrongPost_i.augment))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.all_regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(70,4-70,18); use=X64.Vale.StrongPost_i.fsti(70,4-70,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.all_regs_match @x0
@x1)
Prims.logical))
 

:pattern ((X64.Vale.StrongPost_i.all_regs_match @x0
@x1))
:qid typing_X64.Vale.StrongPost_i.all_regs_match))

:named typing_X64.Vale.StrongPost_i.all_regs_match))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_code_Mul64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(412,4-412,21); use=X64.Vale.Decls.fsti(412,4-412,21)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Vale.Decls.va_code_Mul64Wrap @x0)
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
 

:pattern ((X64.Vale.Decls.va_code_Mul64Wrap @x0))
:qid typing_X64.Vale.Decls.va_code_Mul64Wrap))

:named typing_X64.Vale.Decls.va_code_Mul64Wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.eval_code; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(164,4-164,13); use=X64.Vale.Decls.fsti(164,4-164,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.Decls.eval_code @x0
@x1
@x2)
Tm_type))
 

:pattern ((X64.Vale.Decls.eval_code @x0
@x1
@x2))
:qid typing_X64.Vale.Decls.eval_code))

:named typing_X64.Vale.Decls.eval_code))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_wp_monotonic; Namespace Prims
(assert (! 
;; def=Prims.fst(337,4-337,21); use=Prims.fst(337,4-337,21)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.pure_wp_ @x0)))
(HasType (Prims.pure_wp_monotonic @x0
@x1)
Prims.logical))
 

:pattern ((Prims.pure_wp_monotonic @x0
@x1))
:qid typing_Prims.pure_wp_monotonic))

:named typing_Prims.pure_wp_monotonic))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,4-325,12); use=Prims.fst(325,4-325,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_wp_ @x0)
Tm_type))
 

:pattern ((Prims.pure_wp_ @x0))
:qid typing_Prims.pure_wp_))

:named typing_Prims.pure_wp_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (HasType Prims.pure_pre
Tm_type)
:named typing_Prims.pure_pre))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,5-204,10); use=Prims.fst(204,5-204,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_imp @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid typing_Prims.l_imp))

:named typing_Prims.l_imp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.logical)
(HasType @x1
Prims.logical))
(HasType (Prims.l_and @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_and @x0
@x1))
:qid typing_Prims.l_and))

:named typing_Prims.l_and))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,5-286,13); use=Prims.fst(286,5-286,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (Prims.l_Forall @x0
@x1)
Prims.logical))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid typing_Prims.l_Forall))

:named typing_Prims.l_Forall))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Prims.logical)
:named typing_Prims.l_False))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.eq2 @x0
@x1
@x2)
Prims.logical))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid typing_Prims.eq2))

:named typing_Prims.eq2))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name X64.Vale.StrongPost_i.regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
(Prims.list X64.Machine_s.reg))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state))
(HasType (X64.Vale.StrongPost_i.regs_match.fuel_instrumented @u0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((X64.Vale.StrongPost_i.regs_match.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))

:named token_correspondence_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name X64.Vale.StrongPost_i.inss_to_codes; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType (X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
@x1)
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))
 

:pattern ((X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
@x1))
:qid token_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))

:named token_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,4-101,11); use=X64.Vale.StrongPost_i.fsti(101,4-101,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x0)
@x1)
@x2)
(X64.Vale.StrongPost_i.augment @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x0)
@x1)
@x2))
:qid token_correspondence_X64.Vale.StrongPost_i.augment))

:named token_correspondence_X64.Vale.StrongPost_i.augment))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1)
(Prims.pair @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.pair@tok
@x0)
@x1))

:pattern ((Prims.pair @x0
@x1))
:qid token_correspondence_Prims.pair@tok))

:named token_correspondence_Prims.pair@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2)
(Prims.equals @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1)
@x2))

:pattern ((Prims.equals @x0
@x1
@x2))
:qid token_correspondence_Prims.equals@tok))

:named token_correspondence_Prims.equals@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Pair @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(Prims.Pair @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid subterm_ordering_Prims.Pair))

:named subterm_ordering_Prims.Pair))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_q (Prims.Pair @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_q))

:named projection_inverse_Prims.Pair_q))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair_p (Prims.Pair @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair_p))

:named projection_inverse_Prims.Pair_p))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__2 (Prims.Pair @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__2))

:named projection_inverse_Prims.Pair__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Prims.Pair__1 (Prims.Pair @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid projection_inverse_Prims.Pair__1))

:named projection_inverse_Prims.Pair__1))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.pair@tok))
:named pre_kinding_Prims.pair@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.equals@tok))
:named pre_kinding_Prims.equals@tok))
;;;;;;;;;;;;;;;;==> interpretation
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (implies (Valid @x0)
(Valid @x1))
(Valid (Prims.l_imp @x0
@x1)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid l_imp-interp))
:named l_imp-interp))
;;;;;;;;;;;;;;;;/\ interpretation
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (iff (and (Valid @x0)
(Valid @x1))
(Valid (Prims.l_and @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid l_and-interp))
:named l_and-interp))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named kinding_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x0
@x1)
Tm_type))
:qid kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named kinding_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x0)
Tm_type))
:qid kinding_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))

:named kinding_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_cf722942827e55438f3dd1004b1bb04b
;;; Fact-ids: Name X64.Vale.StrongPost_i.wp_code; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_arrow_cf722942827e55438f3dd1004b1bb04b
Tm_type)
:named kinding_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f
Tm_type)
:named kinding_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! (HasType Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
Tm_type)
:named kinding_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (and (IsTotFun Prims.pair@tok)

;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.pair@tok
@x0))
 

:pattern ((ApplyTT Prims.pair@tok
@x0))
:qid kinding_Prims.pair@tok))


;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pair @x0
@x1)
Tm_type))
 

:pattern ((Prims.pair @x0
@x1))
:qid kinding_Prims.pair@tok.1))
)
:named kinding_Prims.pair@tok))
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (and (IsTotFun Prims.equals@tok)

;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT Prims.equals@tok
@x0))
 

:pattern ((ApplyTT Prims.equals@tok
@x0))
:qid kinding_Prims.equals@tok))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT Prims.equals@tok
@x0)
@x1))
:qid kinding_Prims.equals@tok.1))


;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
@x0)
(HasType @x2
@x0))
(HasType (Prims.equals @x0
@x1
@x2)
Tm_type))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid kinding_Prims.equals@tok.2))
)
:named kinding_Prims.equals@tok))
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! (HasType Prims.empty
Tm_type)
:named kinding_Prims.empty@tok))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,4-101,11); use=X64.Vale.StrongPost_i.fsti(101,4-101,11)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Vale.StrongPost_i.augment@tok
Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))

;; def=X64.Vale.StrongPost_i.fsti(101,4-101,11); use=X64.Vale.StrongPost_i.fsti(101,4-101,11)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x2)
@x3)
(X64.Vale.StrongPost_i.augment @x1
@x2
@x3))
 

:pattern ((X64.Vale.StrongPost_i.augment @x1
@x2
@x3))
:qid function_token_typing_X64.Vale.StrongPost_i.augment.1))
)
 

:pattern ((ApplyTT @x0
X64.Vale.StrongPost_i.augment@tok))
:qid function_token_typing_X64.Vale.StrongPost_i.augment))

:named function_token_typing_X64.Vale.StrongPost_i.augment))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (HasType Prims.pure_pre
Tm_type)
:named function_token_typing_Prims.pure_pre))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (HasType Prims.l_False
Prims.logical)
:named function_token_typing_Prims.l_False))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3))
(and (is-Prims.Pair @x1)
(= @x2
(Prims.Pair_p @x1))
(= @x3
(Prims.Pair_q @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.pair @x2
@x3)))
:qid fuel_guarded_inversion_Prims.pair))

:named fuel_guarded_inversion_Prims.pair))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4))
(is-Prims.Refl @x1))
 

:pattern ((HasTypeFuel @u0
@x1
(Prims.equals @x2
@x3
@x4)))
:qid fuel_guarded_inversion_Prims.equals))

:named fuel_guarded_inversion_Prims.equals))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! 
;; def=Prims.fst(86,5-86,10); use=Prims.fst(86,5-86,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.empty)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Prims.empty))
:qid fuel_guarded_inversion_Prims.empty))

:named fuel_guarded_inversion_Prims.empty))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! (= 151
(Term_constr_id Prims.pair@tok))
:named fresh_token_Prims.pair@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! (= 135
(Term_constr_id Prims.equals@tok))
:named fresh_token_Prims.equals@tok))
;;;;;;;;;;;;;;;;False interpretation
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (iff false
(Valid Prims.l_False))
:named false_interp))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: X64.Vale.StrongPost_i.regs_match
;;; Fact-ids: Name X64.Vale.StrongPost_i.regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
(Prims.list X64.Machine_s.reg))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state))
(= (X64.Vale.StrongPost_i.regs_match.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x1))
(ite (is-Prims.Nil @lb4)
Prims.l_True
(ite (is-Prims.Cons @lb4)
(Prims.l_and (Prims.eq2 X64.Machine_s.nat64
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(Prims.Cons_hd @lb4))
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x3)
(Prims.Cons_hd @lb4)))
(X64.Vale.StrongPost_i.regs_match.fuel_instrumented @u0
(Prims.Cons_tl @lb4)
@x2
@x3))
Tm_unit)))))
 :weight 0


:pattern ((X64.Vale.StrongPost_i.regs_match.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))

:named equation_with_fuel_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: X64.Vale.StrongPost_i.inss_to_codes
;;; Fact-ids: Name X64.Vale.StrongPost_i.inss_to_codes; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(= (X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Mov64_src (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb2))))
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Load64_offset (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Store64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Store64_src (Prims.Cons_hd @lb2))
(X64.Vale.StrongPost_i.Store64_offset (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Add64Wrap_src (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Adc64Wrap_src (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Mul64Wrap (Prims.Cons_hd @lb2)))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mul64Wrap (X64.Vale.StrongPost_i.Mul64Wrap_src (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.IMul64_src (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.And64_amt (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Shr64_amt (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb2)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb2)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb2)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb2))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb2))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb2))))
(X64.Vale.StrongPost_i.Sub64_src (Prims.Cons_hd @lb2)))
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb2)))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))))))))))))))))))))))
 :weight 0


:pattern ((X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))

:named equation_with_fuel_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.augment
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,4-101,11); use=X64.Vale.StrongPost_i.fsti(101,4-101,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (X64.Vale.StrongPost_i.augment @x0
@x1
@x2))

;; def=X64.Vale.StrongPost_i.fsti(102,1-102,30); use=X64.Vale.StrongPost_i.fsti(102,1-102,30)
(implies 
;; def=X64.Vale.StrongPost_i.fsti(102,1-102,18); use=X64.Vale.StrongPost_i.fsti(102,1-102,18)
(= @x2
@x0)


;; def=X64.Vale.StrongPost_i.fsti(102,23-102,30); use=X64.Vale.StrongPost_i.fsti(102,23-102,30)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(102,23-102,30); use=X64.Vale.StrongPost_i.fsti(102,23-102,30)
(ApplyTT @x1
Tm_unit)
)
)
)
 

:pattern ((X64.Vale.StrongPost_i.augment @x0
@x1
@x2))
:qid equation_X64.Vale.StrongPost_i.augment))

:named equation_X64.Vale.StrongPost_i.augment))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.all_regs_match
;;; Fact-ids: Name X64.Vale.StrongPost_i.all_regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(70,4-70,18); use=X64.Vale.StrongPost_i.fsti(70,4-70,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (X64.Vale.StrongPost_i.all_regs_match @x0
@x1))

;; def=X64.Vale.StrongPost_i.fsti(73,2-73,23); use=X64.Vale.StrongPost_i.fsti(73,2-73,23)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(73,2-73,23); use=X64.Vale.StrongPost_i.fsti(73,2-73,23)
(X64.Vale.StrongPost_i.regs_match (Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rax@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rbx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rcx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rdx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rsi@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rdi@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rbp@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rsp@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R8@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R9@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R10@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R11@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R12@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R13@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R14@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R15@tok
(Prims.Nil X64.Machine_s.reg)))))))))))))))))
@x0
@x1)
)
)
 

:pattern ((X64.Vale.StrongPost_i.all_regs_match @x0
@x1))
:qid equation_X64.Vale.StrongPost_i.all_regs_match))

:named equation_X64.Vale.StrongPost_i.all_regs_match))
;;;;;;;;;;;;;;;;Equation for Prims.pure_wp'
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,4-325,12); use=Prims.fst(325,4-325,12)
(forall ((@x0 Term))
 (! (= (Prims.pure_wp_ @x0)
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x0))
 

:pattern ((Prims.pure_wp_ @x0))
:qid equation_Prims.pure_wp_))

:named equation_Prims.pure_wp_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_pre
;;; Fact-ids: Name Prims.pure_pre; Namespace Prims
(assert (! (= Prims.pure_pre
Tm_type)
:named equation_Prims.pure_pre))
;;;;;;;;;;;;;;;;Equation for Prims.l_imp
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,5-204,10); use=Prims.fst(204,5-204,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_imp @x0
@x1)
(Prims.squash (Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x0)))
 

:pattern ((Prims.l_imp @x0
@x1))
:qid equation_Prims.l_imp))

:named equation_Prims.l_imp))
;;;;;;;;;;;;;;;;Equation for Prims.l_and
;;; Fact-ids: Name Prims.l_and; Namespace Prims
(assert (! 
;; def=Prims.fst(188,5-188,10); use=Prims.fst(188,5-188,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_and @x0
@x1)
(Prims.squash (Prims.pair @x0
@x1)))
 

:pattern ((Prims.l_and @x0
@x1))
:qid equation_Prims.l_and))

:named equation_Prims.l_and))
;;;;;;;;;;;;;;;;Equation for Prims.l_Forall
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,5-286,13); use=Prims.fst(286,5-286,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.l_Forall @x0
@x1)
(Prims.squash (Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x0)))
 

:pattern ((Prims.l_Forall @x0
@x1))
:qid equation_Prims.l_Forall))

:named equation_Prims.l_Forall))
;;;;;;;;;;;;;;;;Equation for Prims.l_False
;;; Fact-ids: Name Prims.l_False; Namespace Prims
(assert (! (= Prims.l_False
(Prims.squash Prims.empty))
:named equation_Prims.l_False))
;;;;;;;;;;;;;;;;Equation for Prims.eq2
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! 
;; def=Prims.fst(175,5-175,8); use=Prims.fst(175,5-175,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.eq2 @x0
@x1
@x2)
(Prims.squash (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid equation_Prims.eq2))

:named equation_Prims.eq2))
;;;;;;;;;;;;;;;;Eq2 interpretation
;;; Fact-ids: Name Prims.eq2; Namespace Prims
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (= @x1
@x2)
(Valid (Prims.eq2 @x0
@x1
@x2)))
 

:pattern ((Prims.eq2 @x0
@x1
@x2))
:qid eq2-interp))
:named eq2-interp))
;;;;;;;;;;;;;;;;Prop-typing for X64.Vale.StrongPost_i.augment
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,4-101,11); use=X64.Vale.StrongPost_i.fsti(101,4-101,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(HasType @x2
X64.Vale.State_i.state))
(Valid (Prims.subtype_of (X64.Vale.StrongPost_i.augment @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (X64.Vale.StrongPost_i.augment @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_X64.Vale.StrongPost_i.augment))

:named defn_equation_X64.Vale.StrongPost_i.augment))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.all_regs_match
;;; Fact-ids: Name X64.Vale.StrongPost_i.all_regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(70,4-70,18); use=X64.Vale.StrongPost_i.fsti(70,4-70,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.all_regs_match @x0
@x1)
(X64.Vale.StrongPost_i.regs_match (Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rax@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rbx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rcx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rdx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rsi@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rdi@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rbp@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rsp@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R8@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R9@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R10@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R11@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R12@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R13@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R14@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R15@tok
(Prims.Nil X64.Machine_s.reg)))))))))))))))))
@x0
@x1))
 

:pattern ((Prims.subtype_of (X64.Vale.StrongPost_i.all_regs_match @x0
@x1)
Prims.unit))
:qid defn_equation_X64.Vale.StrongPost_i.all_regs_match))

:named defn_equation_X64.Vale.StrongPost_i.all_regs_match))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(= @x2
@x3))
(HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(Prims.Refl @x1
@x2)
(Prims.equals @x1
@x2
@x3)))
:qid data_typing_intro_Prims.Refl@tok))

:named data_typing_intro_Prims.Refl@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x1
@x2)))
:qid data_typing_intro_Prims.Pair@tok))

:named data_typing_intro_Prims.Pair@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5))
(and (= @x4
@x5)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Refl @x1
@x2)
(Prims.equals @x3
@x4
@x5)))
:qid data_elim_Prims.Refl))

:named data_elim_Prims.Refl))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Pair @x1
@x2
@x3
@x4)
(Prims.pair @x5
@x6)))
:qid data_elim_Prims.Pair))

:named data_elim_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 150
(Term_constr_id (Prims.pair @x0
@x1)))
 

:pattern ((Prims.pair @x0
@x1))
:qid constructor_distinct_Prims.pair))

:named constructor_distinct_Prims.pair))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 134
(Term_constr_id (Prims.equals @x0
@x1
@x2)))
 

:pattern ((Prims.equals @x0
@x1
@x2))
:qid constructor_distinct_Prims.equals))

:named constructor_distinct_Prims.equals))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! (= 111
(Term_constr_id Prims.empty))
:named constructor_distinct_Prims.empty))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (= 141
(Term_constr_id (Prims.Refl @x0
@x1)))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_distinct_Prims.Refl))

:named constructor_distinct_Prims.Refl))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,34-183,38); use=Prims.fst(183,34-183,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 157
(Term_constr_id (Prims.Pair @x0
@x1
@x2
@x3)))
 

:pattern ((Prims.Pair @x0
@x1
@x2
@x3))
:qid constructor_distinct_Prims.Pair))

:named constructor_distinct_Prims.Pair))
;;;;;;;;;;;;;;;;Constructor base
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,46-165,50); use=Prims.fst(165,46-165,50)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (is-Prims.Refl (Prims.Refl @x0
@x1))
(= (Prims.Refl @x0
@x1)
Prims.Refl@base))
 

:pattern ((Prims.Refl @x0
@x1))
:qid constructor_base_Prims.Refl))

:named constructor_base_Prims.Refl))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.StrongPost_i.wp_code; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,41-105,55); use=X64.Vale.StrongPost_i.fsti(105,41-105,55)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,18-101,75); use=X64.Vale.StrongPost_i.fsti(101,18-101,75)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,32-101,45); use=X64.Vale.StrongPost_i.fsti(101,32-101,45)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b
;;; Fact-ids: Name X64.Vale.StrongPost_i.wp_code; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(105,41-105,55); use=X64.Vale.StrongPost_i.fsti(105,41-105,55)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_cf722942827e55438f3dd1004b1bb04b)
(and 
;; def=X64.Vale.StrongPost_i.fsti(105,41-105,55); use=X64.Vale.StrongPost_i.fsti(105,41-105,55)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.State_i.state)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_cf722942827e55438f3dd1004b1bb04b))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,18-101,75); use=X64.Vale.StrongPost_i.fsti(101,18-101,75)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f)
(and 
;; def=X64.Vale.StrongPost_i.fsti(101,18-101,75); use=X64.Vale.StrongPost_i.fsti(101,18-101,75)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
X64.Vale.State_i.state)
(HasType @x2
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(HasType @x3
X64.Vale.State_i.state))
(HasType (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
Tm_type))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f.1))

(IsTotFun @x0)

;; def=X64.Vale.StrongPost_i.fsti(101,18-101,75); use=X64.Vale.StrongPost_i.fsti(101,18-101,75)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.State_i.state)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f.2))


;; def=X64.Vale.StrongPost_i.fsti(101,18-101,75); use=X64.Vale.StrongPost_i.fsti(101,18-101,75)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
X64.Vale.State_i.state)
(HasType @x2
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f.3))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_c1fbc7152fe4a9480b02f0a9cdb9991f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe
;;; Fact-ids: Name X64.Vale.StrongPost_i.augment; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(101,32-101,45); use=X64.Vale.StrongPost_i.fsti(101,32-101,45)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(and 
;; def=X64.Vale.StrongPost_i.fsti(101,32-101,45); use=X64.Vale.StrongPost_i.fsti(101,32-101,45)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.unit)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.pair; Namespace Prims; Name Prims.Pair; Namespace Prims
(assert (! 
;; def=Prims.fst(183,5-183,9); use=Prims.fst(183,5-183,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3))
(= (Prims.pair @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.pair @x2
@x3)))
:qid Prims_pretyping_b7882067459c08225ce8e64864e7b31f))

:named Prims_pretyping_b7882067459c08225ce8e64864e7b31f))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.equals; Namespace Prims; Name Prims.Refl; Namespace Prims
(assert (! 
;; def=Prims.fst(165,5-165,11); use=Prims.fst(165,5-165,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4))
(= (Term_constr_id (Prims.equals @x2
@x3
@x4))
(Term_constr_id (PreType @x0))))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.equals @x2
@x3
@x4)))
:qid Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))

:named Prims_pretyping_b2d64ca214b8828a9eba2c140aea0816))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.empty; Namespace Prims
(assert (! 
;; def=Prims.fst(86,5-86,10); use=Prims.fst(86,5-86,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.empty)
(= Prims.empty
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.empty))
:qid Prims_pretyping_012c410d173b30f0cec8f55be7b4958c))

:named Prims_pretyping_012c410d173b30f0cec8f55be7b4958c))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named Prims_pre_typing_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x2
@x3)))
:qid Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_pre_typing_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x2)))
:qid Prims_pre_typing_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))

:named Prims_pre_typing_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x2))

;; def=Prims.fst(286,16-286,86); use=Prims.fst(286,71-286,86)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))

:named Prims_interpretation_Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f))
;;;;;;;;;;;;;;;;interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a
;;; Fact-ids: Name Prims.l_imp; Namespace Prims
(assert (! 
;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2))

;; def=Prims.fst(204,12-204,26); use=Prims.fst(204,57-204,68)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
@x1))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a.1))
)
 

:pattern ((HasTypeZ @x0
(Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a @x1
@x2)))
:qid Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))

:named Prims_interpretation_Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4
;;; Fact-ids: Name Prims.pure_wp'; Namespace Prims
(assert (! 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x1))
(and 
;; def=Prims.fst(325,25-325,53); use=Prims.fst(325,25-325,53)
(forall ((@x2 Term))
 (! (implies (HasType @x2
(Prims.pure_post @x1))
(HasType (ApplyTT @x0
@x2)
Prims.pure_pre))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 @x1)))
:qid Prims_interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))

:named Prims_interpretation_Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name X64.Vale.StrongPost_i.regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.StrongPost_i.regs_match.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(X64.Vale.StrongPost_i.regs_match.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((X64.Vale.StrongPost_i.regs_match.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))

:named @fuel_irrelevance_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name X64.Vale.StrongPost_i.inss_to_codes; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented (SFuel @u0)
@x1)
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented ZFuel
@x1))
 

:pattern ((X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))

:named @fuel_irrelevance_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name X64.Vale.StrongPost_i.regs_match; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(65,8-65,18); use=X64.Vale.StrongPost_i.fsti(65,8-65,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2)
(X64.Vale.StrongPost_i.regs_match.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((X64.Vale.StrongPost_i.regs_match @x0
@x1
@x2))
:qid @fuel_correspondence_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))

:named @fuel_correspondence_X64.Vale.StrongPost_i.regs_match.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name X64.Vale.StrongPost_i.inss_to_codes; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(75,8-75,21); use=X64.Vale.StrongPost_i.fsti(75,8-75,21)
(forall ((@x0 Term))
 (! (= (X64.Vale.StrongPost_i.inss_to_codes @x0)
(X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented MaxFuel
@x0))
 

:pattern ((X64.Vale.StrongPost_i.inss_to_codes @x0))
:qid @fuel_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))

:named @fuel_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fsti(208,87-222,4)

(declare-fun label_1 () Bool)



;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: 
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Vale.StrongPost_i.augment@tok))
:named @kick_partial_app_e810eb95a5c5b613fe55f18eb363cb1c))
;;;;;;;;;;;;;;;;f: X64.Machine_s.nat64 -> Prims.GTot Type0
(declare-fun Tm_arrow_7f199da4400cceca67ee0fd382abb844 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_7f199da4400cceca67ee0fd382abb844
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_7f199da4400cceca67ee0fd382abb844
Tm_type)
:named kinding_Tm_arrow_7f199da4400cceca67ee0fd382abb844))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,23-184,28); use=X64.Vale.StrongPost_i.fsti(184,20-184,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_7f199da4400cceca67ee0fd382abb844))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_7f199da4400cceca67ee0fd382abb844))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_7f199da4400cceca67ee0fd382abb844))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_7f199da4400cceca67ee0fd382abb844
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,23-184,28); use=X64.Vale.StrongPost_i.fsti(184,20-184,29)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
(and 
;; def=X64.Vale.StrongPost_i.fsti(184,23-184,28); use=X64.Vale.StrongPost_i.fsti(184,20-184,29)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.nat64)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_7f199da4400cceca67ee0fd382abb844.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_7f199da4400cceca67ee0fd382abb844))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_7f199da4400cceca67ee0fd382abb844))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_7f199da4400cceca67ee0fd382abb844))
(declare-fun Tm_abs_523d370521c15c7cd983b6c1f7800186 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_523d370521c15c7cd983b6c1f7800186
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,20-187,71); use=X64.Vale.StrongPost_i.fsti(184,20-187,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (HasType (Tm_abs_523d370521c15c7cd983b6c1f7800186 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_523d370521c15c7cd983b6c1f7800186 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid typing_Tm_abs_523d370521c15c7cd983b6c1f7800186))

:named typing_Tm_abs_523d370521c15c7cd983b6c1f7800186))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_523d370521c15c7cd983b6c1f7800186
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,20-187,71); use=X64.Vale.StrongPost_i.fsti(184,20-187,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= (ApplyTT (Tm_abs_523d370521c15c7cd983b6c1f7800186 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0)
(Prims.l_imp (Prims.l_and (Prims.eq2 Prims.int
@x1
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @x6)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))))
(Prims.eq2 Prims.int
@x7
@x1))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x9)
@x10)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))))
 

:pattern ((ApplyTT (Tm_abs_523d370521c15c7cd983b6c1f7800186 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0))
:qid interpretation_Tm_abs_523d370521c15c7cd983b6c1f7800186))

:named interpretation_Tm_abs_523d370521c15c7cd983b6c1f7800186))

(declare-fun Tm_abs_d3c4bd305f5c197f328528016153d834 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_d3c4bd305f5c197f328528016153d834
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,20-187,71); use=X64.Vale.StrongPost_i.fsti(184,20-187,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_d3c4bd305f5c197f328528016153d834 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_d3c4bd305f5c197f328528016153d834 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_d3c4bd305f5c197f328528016153d834))

:named typing_Tm_abs_d3c4bd305f5c197f328528016153d834))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d3c4bd305f5c197f328528016153d834
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,20-187,71); use=X64.Vale.StrongPost_i.fsti(184,20-187,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_d3c4bd305f5c197f328528016153d834 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_523d370521c15c7cd983b6c1f7800186 @x1
@x2
@x3
@x4
@x5
@x6
@x0
@x7
@x8
@x9)))
 

:pattern ((ApplyTT (Tm_abs_d3c4bd305f5c197f328528016153d834 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_d3c4bd305f5c197f328528016153d834))

:named interpretation_Tm_abs_d3c4bd305f5c197f328528016153d834))
;;;;;;;;;;;;;;;;a: Prims.int -> Prims.GTot Type0
(declare-fun Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2
Tm_type)
:named kinding_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(286,40-546,41); use=X64.Vale.StrongPost_i.fsti(184,16-184,17)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(286,40-546,41); use=X64.Vale.StrongPost_i.fsti(184,16-184,17)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2)
(and 
;; def=Prims.fst(286,40-546,41); use=X64.Vale.StrongPost_i.fsti(184,16-184,17)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.int)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2))
(declare-fun Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,18-187,71); use=X64.Vale.StrongPost_i.fsti(184,18-187,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2)
 

:pattern ((Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513))

:named typing_Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,18-187,71); use=X64.Vale.StrongPost_i.fsti(184,18-187,71)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_d3c4bd305f5c197f328528016153d834 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513))

:named interpretation_Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(184,8-187,72); use=X64.Vale.StrongPost_i.fsti(184,8-187,72)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall Prims.int
(Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(184,8-187,72); use=X64.Vale.StrongPost_i.fsti(184,8-187,72)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(185,15-185,58); use=X64.Vale.StrongPost_i.fsti(185,15-185,58)
(= @x8
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x3))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))))


;; def=X64.Vale.StrongPost_i.fsti(186,15-186,21); use=X64.Vale.StrongPost_i.fsti(186,15-186,21)
(= @x9
@x8)
)

;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)
)
 
;;no pats
:qid l_quant_interp_0d4e7ee8e5ba386c45e3c3dabeca12e3.1))
)
 

:pattern ((Valid (Prims.l_Forall Prims.int
(Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_0d4e7ee8e5ba386c45e3c3dabeca12e3))

:named l_quant_interp_0d4e7ee8e5ba386c45e3c3dabeca12e3))



(declare-fun Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(177,19-179,59); use=X64.Vale.StrongPost_i.fsti(177,19-179,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff))

:named typing_Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(177,19-179,59); use=X64.Vale.StrongPost_i.fsti(177,19-179,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_imp (Prims.eq2 X64.Machine_s.nat64
@x1
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x6)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @x6)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x7)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x8)
@x9)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))))
 

:pattern ((ApplyTT (Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff))

:named interpretation_Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff))

(declare-fun Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(177,19-179,59); use=X64.Vale.StrongPost_i.fsti(177,19-179,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258))

:named typing_Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(177,19-179,59); use=X64.Vale.StrongPost_i.fsti(177,19-179,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258))

:named interpretation_Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(177,1-179,60); use=X64.Vale.StrongPost_i.fsti(177,1-179,60)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(177,1-179,60); use=X64.Vale.StrongPost_i.fsti(177,1-179,60)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(178,3-178,9); use=X64.Vale.StrongPost_i.fsti(178,3-178,9)
(= @x8
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x3)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))
)

;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)
)
 
;;no pats
:qid l_quant_interp_f9514fd28d242bf49e1e6e6384044b80.1))
)
 

:pattern ((Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_f9514fd28d242bf49e1e6e6384044b80))

:named l_quant_interp_f9514fd28d242bf49e1e6e6384044b80))



(declare-fun Tm_abs_411888ac84c2e6c693b5360589e92ed6 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_411888ac84c2e6c693b5360589e92ed6
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(170,19-172,59); use=X64.Vale.StrongPost_i.fsti(170,19-172,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_411888ac84c2e6c693b5360589e92ed6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_411888ac84c2e6c693b5360589e92ed6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_411888ac84c2e6c693b5360589e92ed6))

:named typing_Tm_abs_411888ac84c2e6c693b5360589e92ed6))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_411888ac84c2e6c693b5360589e92ed6
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(170,19-172,59); use=X64.Vale.StrongPost_i.fsti(170,19-172,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_411888ac84c2e6c693b5360589e92ed6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_imp (Prims.eq2 X64.Machine_s.nat64
@x1
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x6)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.And64_amt @x6)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x7)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x8)
@x9)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))))
 

:pattern ((ApplyTT (Tm_abs_411888ac84c2e6c693b5360589e92ed6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_411888ac84c2e6c693b5360589e92ed6))

:named interpretation_Tm_abs_411888ac84c2e6c693b5360589e92ed6))

(declare-fun Tm_abs_6709275dbed167665b198f7bae6141d0 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_6709275dbed167665b198f7bae6141d0
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(170,19-172,59); use=X64.Vale.StrongPost_i.fsti(170,19-172,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_6709275dbed167665b198f7bae6141d0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_6709275dbed167665b198f7bae6141d0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_6709275dbed167665b198f7bae6141d0))

:named typing_Tm_abs_6709275dbed167665b198f7bae6141d0))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_6709275dbed167665b198f7bae6141d0
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(170,19-172,59); use=X64.Vale.StrongPost_i.fsti(170,19-172,59)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_6709275dbed167665b198f7bae6141d0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_411888ac84c2e6c693b5360589e92ed6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_6709275dbed167665b198f7bae6141d0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_6709275dbed167665b198f7bae6141d0))

:named interpretation_Tm_abs_6709275dbed167665b198f7bae6141d0))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(170,1-172,60); use=X64.Vale.StrongPost_i.fsti(170,1-172,60)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_6709275dbed167665b198f7bae6141d0 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(170,1-172,60); use=X64.Vale.StrongPost_i.fsti(170,1-172,60)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(171,3-171,9); use=X64.Vale.StrongPost_i.fsti(171,3-171,9)
(= @x8
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x3)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.And64_amt @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))
)

;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)
)
 
;;no pats
:qid l_quant_interp_3a1552c3b9d2de4728db09da41dcae37.1))
)
 

:pattern ((Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_6709275dbed167665b198f7bae6141d0 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_3a1552c3b9d2de4728db09da41dcae37))

:named l_quant_interp_3a1552c3b9d2de4728db09da41dcae37))




(declare-fun Tm_abs_d76ec1a0af7865dea39d49526b3f695f (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_d76ec1a0af7865dea39d49526b3f695f
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(163,21-165,64); use=X64.Vale.StrongPost_i.fsti(163,21-165,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_d76ec1a0af7865dea39d49526b3f695f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_d76ec1a0af7865dea39d49526b3f695f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_d76ec1a0af7865dea39d49526b3f695f))

:named typing_Tm_abs_d76ec1a0af7865dea39d49526b3f695f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d76ec1a0af7865dea39d49526b3f695f
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(163,21-165,64); use=X64.Vale.StrongPost_i.fsti(163,21-165,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_d76ec1a0af7865dea39d49526b3f695f @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_imp (Prims.eq2 Prims.int
@x1
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @x6)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x7)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x8)
@x9)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x6))
@x1
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))))
 

:pattern ((ApplyTT (Tm_abs_d76ec1a0af7865dea39d49526b3f695f @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_d76ec1a0af7865dea39d49526b3f695f))

:named interpretation_Tm_abs_d76ec1a0af7865dea39d49526b3f695f))

(declare-fun Tm_abs_8c060cc7d916a0b47b83997d4b4f481e (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_8c060cc7d916a0b47b83997d4b4f481e
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(163,21-165,64); use=X64.Vale.StrongPost_i.fsti(163,21-165,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_8c060cc7d916a0b47b83997d4b4f481e))

:named typing_Tm_abs_8c060cc7d916a0b47b83997d4b4f481e))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_8c060cc7d916a0b47b83997d4b4f481e
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(163,21-165,64); use=X64.Vale.StrongPost_i.fsti(163,21-165,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_d76ec1a0af7865dea39d49526b3f695f @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_8c060cc7d916a0b47b83997d4b4f481e))

:named interpretation_Tm_abs_8c060cc7d916a0b47b83997d4b4f481e))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(163,3-165,65); use=X64.Vale.StrongPost_i.fsti(163,3-165,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(163,3-165,65); use=X64.Vale.StrongPost_i.fsti(163,3-165,65)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(164,6-164,12); use=X64.Vale.StrongPost_i.fsti(164,6-164,12)
(= @x8
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x3))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))))
)

;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)
)
 
;;no pats
:qid l_quant_interp_befaafc6dd2de00f4f0a3a28a690b16f.1))
)
 

:pattern ((Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_befaafc6dd2de00f4f0a3a28a690b16f))

:named l_quant_interp_befaafc6dd2de00f4f0a3a28a690b16f))



(declare-fun Tm_abs_1cfe6d1850008274e09ebb8794117938 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_1cfe6d1850008274e09ebb8794117938
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,33-157,36); use=X64.Vale.StrongPost_i.fsti(153,33-157,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (HasType (Tm_abs_1cfe6d1850008274e09ebb8794117938 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_1cfe6d1850008274e09ebb8794117938 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid typing_Tm_abs_1cfe6d1850008274e09ebb8794117938))

:named typing_Tm_abs_1cfe6d1850008274e09ebb8794117938))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1cfe6d1850008274e09ebb8794117938
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,33-157,36); use=X64.Vale.StrongPost_i.fsti(153,33-157,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= (ApplyTT (Tm_abs_1cfe6d1850008274e09ebb8794117938 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0)
(Prims.l_imp (Prims.eq2 Prims.int
(BoxInt (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x1))
(BoxInt_proj_0 @x2)))
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x3
@x4
@x5
@x6))
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @x7)
(X64.Vale.State_i.Mkstate @x3
@x4
@x5
@x6))))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x9)
@x10)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x1
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x2
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x3
@x4
@x5
@x6))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x3
@x4
@x5
@x6))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x3
@x4
@x5
@x6))))))))
 

:pattern ((ApplyTT (Tm_abs_1cfe6d1850008274e09ebb8794117938 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0))
:qid interpretation_Tm_abs_1cfe6d1850008274e09ebb8794117938))

:named interpretation_Tm_abs_1cfe6d1850008274e09ebb8794117938))

(declare-fun Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_4ccf02134050f0ab1f8a657505cd20b0
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,33-157,36); use=X64.Vale.StrongPost_i.fsti(153,33-157,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_4ccf02134050f0ab1f8a657505cd20b0))

:named typing_Tm_abs_4ccf02134050f0ab1f8a657505cd20b0))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_4ccf02134050f0ab1f8a657505cd20b0
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,33-157,36); use=X64.Vale.StrongPost_i.fsti(153,33-157,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_1cfe6d1850008274e09ebb8794117938 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)))
 

:pattern ((ApplyTT (Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_4ccf02134050f0ab1f8a657505cd20b0))

:named interpretation_Tm_abs_4ccf02134050f0ab1f8a657505cd20b0))

(declare-fun Tm_abs_84b576455eb04a0e658495bfc4f21e9c (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_84b576455eb04a0e658495bfc4f21e9c
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,21-157,36); use=X64.Vale.StrongPost_i.fsti(153,21-157,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_84b576455eb04a0e658495bfc4f21e9c))

:named typing_Tm_abs_84b576455eb04a0e658495bfc4f21e9c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_84b576455eb04a0e658495bfc4f21e9c
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,21-157,36); use=X64.Vale.StrongPost_i.fsti(153,21-157,36)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_84b576455eb04a0e658495bfc4f21e9c))

:named interpretation_Tm_abs_84b576455eb04a0e658495bfc4f21e9c))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(153,1-157,37); use=X64.Vale.StrongPost_i.fsti(153,1-157,37)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(153,1-157,37); use=X64.Vale.StrongPost_i.fsti(153,1-157,37)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(154,3-155,56); use=X64.Vale.StrongPost_i.fsti(154,3-155,56)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x9))
(BoxInt_proj_0 @x8))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)

;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x9
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x8
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))))
)
)
 
;;no pats
:qid l_quant_interp_fba75cc3a7b942a9727a4630480e43af.1))
)
 

:pattern ((Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_fba75cc3a7b942a9727a4630480e43af))

:named l_quant_interp_fba75cc3a7b942a9727a4630480e43af))



(declare-fun Tm_abs_1dc304d511b35ded13105f895920c3de (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_1dc304d511b35ded13105f895920c3de
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,13-150,64); use=X64.Vale.StrongPost_i.fsti(145,13-150,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (HasType (Tm_abs_1dc304d511b35ded13105f895920c3de @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_1dc304d511b35ded13105f895920c3de @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid typing_Tm_abs_1dc304d511b35ded13105f895920c3de))

:named typing_Tm_abs_1dc304d511b35ded13105f895920c3de))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1dc304d511b35ded13105f895920c3de
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,13-150,64); use=X64.Vale.StrongPost_i.fsti(145,13-150,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= (ApplyTT (Tm_abs_1dc304d511b35ded13105f895920c3de @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0)
(Prims.l_imp (Prims.l_and (Prims.l_and (Prims.eq2 Prims.int
@x1
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @x6)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))
(BoxInt_proj_0 (let ((@lb11 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))
(ite (= @lb11
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))
(Prims.eq2 Prims.int
@x7
(let ((@lb11 (Prims.op_LessThan @x1
(BoxInt 18446744073709551616))))
(ite (= @lb11
(BoxBool true))
@x1
(BoxInt (- (BoxInt_proj_0 @x1)
18446744073709551616))))))
(Prims.eq2 Prims.bool
(X64.Vale.Decls.cf @x0)
(Prims.op_GreaterThanOrEqual @x1
(BoxInt 18446744073709551616))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x9)
@x10)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))))
 

:pattern ((ApplyTT (Tm_abs_1dc304d511b35ded13105f895920c3de @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0))
:qid interpretation_Tm_abs_1dc304d511b35ded13105f895920c3de))

:named interpretation_Tm_abs_1dc304d511b35ded13105f895920c3de))

(declare-fun Tm_abs_04c418cba24c1a0476d023a7c98168d6 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_04c418cba24c1a0476d023a7c98168d6
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,13-150,64); use=X64.Vale.StrongPost_i.fsti(145,13-150,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_04c418cba24c1a0476d023a7c98168d6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_04c418cba24c1a0476d023a7c98168d6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_04c418cba24c1a0476d023a7c98168d6))

:named typing_Tm_abs_04c418cba24c1a0476d023a7c98168d6))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_04c418cba24c1a0476d023a7c98168d6
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,13-150,64); use=X64.Vale.StrongPost_i.fsti(145,13-150,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_04c418cba24c1a0476d023a7c98168d6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_1dc304d511b35ded13105f895920c3de @x1
@x2
@x3
@x4
@x5
@x6
@x0
@x7
@x8
@x9)))
 

:pattern ((ApplyTT (Tm_abs_04c418cba24c1a0476d023a7c98168d6 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_04c418cba24c1a0476d023a7c98168d6))

:named interpretation_Tm_abs_04c418cba24c1a0476d023a7c98168d6))

(declare-fun Tm_abs_ac193f8a988a33a776b314be504ac3e1 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_ac193f8a988a33a776b314be504ac3e1
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,11-150,64); use=X64.Vale.StrongPost_i.fsti(145,11-150,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2)
 

:pattern ((Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_ac193f8a988a33a776b314be504ac3e1))

:named typing_Tm_abs_ac193f8a988a33a776b314be504ac3e1))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ac193f8a988a33a776b314be504ac3e1
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,11-150,64); use=X64.Vale.StrongPost_i.fsti(145,11-150,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_04c418cba24c1a0476d023a7c98168d6 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_ac193f8a988a33a776b314be504ac3e1))

:named interpretation_Tm_abs_ac193f8a988a33a776b314be504ac3e1))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(145,1-150,65); use=X64.Vale.StrongPost_i.fsti(145,1-150,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall Prims.int
(Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(145,1-150,65); use=X64.Vale.StrongPost_i.fsti(145,1-150,65)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(146,6-147,34); use=X64.Vale.StrongPost_i.fsti(146,6-147,34)
(= @x8
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x3))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))
(BoxInt_proj_0 (let ((@lb11 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
(ite (= @lb11
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))


;; def=X64.Vale.StrongPost_i.fsti(148,6-148,55); use=X64.Vale.StrongPost_i.fsti(148,6-148,55)
(= @x9
(let ((@lb11 (Prims.op_LessThan @x8
(BoxInt 18446744073709551616))))
(ite (= @lb11
(BoxBool true))
@x8
(BoxInt (- (BoxInt_proj_0 @x8)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(149,5-149,29); use=X64.Vale.StrongPost_i.fsti(149,5-149,29)
(= (X64.Vale.Decls.cf @x10)
(Prims.op_GreaterThanOrEqual @x8
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)
)
 
;;no pats
:qid l_quant_interp_46a6a211dfb215136443ac69c78e4782.1))
)
 

:pattern ((Valid (Prims.l_Forall Prims.int
(Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_46a6a211dfb215136443ac69c78e4782))

:named l_quant_interp_46a6a211dfb215136443ac69c78e4782))



(declare-fun Tm_abs_3a402ea231dc59757abf1bda1a013131 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_3a402ea231dc59757abf1bda1a013131
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,13-141,64); use=X64.Vale.StrongPost_i.fsti(137,13-141,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (HasType (Tm_abs_3a402ea231dc59757abf1bda1a013131 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_3a402ea231dc59757abf1bda1a013131 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
:qid typing_Tm_abs_3a402ea231dc59757abf1bda1a013131))

:named typing_Tm_abs_3a402ea231dc59757abf1bda1a013131))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_3a402ea231dc59757abf1bda1a013131
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,13-141,64); use=X64.Vale.StrongPost_i.fsti(137,13-141,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= (ApplyTT (Tm_abs_3a402ea231dc59757abf1bda1a013131 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0)
(Prims.l_imp (Prims.l_and (Prims.l_and (Prims.eq2 Prims.int
@x1
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @x6)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))))
(Prims.eq2 Prims.int
@x7
(let ((@lb11 (Prims.op_LessThan @x1
(BoxInt 18446744073709551616))))
(ite (= @lb11
(BoxBool true))
@x1
(BoxInt (- (BoxInt_proj_0 @x1)
18446744073709551616))))))
(Prims.eq2 Prims.bool
(X64.Vale.Decls.cf @x0)
(Prims.op_GreaterThanOrEqual @x1
(BoxInt 18446744073709551616))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x9)
@x10)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x6))
@x7
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))))
 

:pattern ((ApplyTT (Tm_abs_3a402ea231dc59757abf1bda1a013131 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10)
@x0))
:qid interpretation_Tm_abs_3a402ea231dc59757abf1bda1a013131))

:named interpretation_Tm_abs_3a402ea231dc59757abf1bda1a013131))

(declare-fun Tm_abs_37e7f37e83071c767f2d4adf63327c5a (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_37e7f37e83071c767f2d4adf63327c5a
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,13-141,64); use=X64.Vale.StrongPost_i.fsti(137,13-141,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_37e7f37e83071c767f2d4adf63327c5a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_37e7f37e83071c767f2d4adf63327c5a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_37e7f37e83071c767f2d4adf63327c5a))

:named typing_Tm_abs_37e7f37e83071c767f2d4adf63327c5a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_37e7f37e83071c767f2d4adf63327c5a
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,13-141,64); use=X64.Vale.StrongPost_i.fsti(137,13-141,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_37e7f37e83071c767f2d4adf63327c5a @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_3a402ea231dc59757abf1bda1a013131 @x1
@x2
@x3
@x4
@x5
@x6
@x0
@x7
@x8
@x9)))
 

:pattern ((ApplyTT (Tm_abs_37e7f37e83071c767f2d4adf63327c5a @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_37e7f37e83071c767f2d4adf63327c5a))

:named interpretation_Tm_abs_37e7f37e83071c767f2d4adf63327c5a))

(declare-fun Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_dc6af52893a9414c4d4d0faf359b80f5
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,11-141,64); use=X64.Vale.StrongPost_i.fsti(137,11-141,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2)
 

:pattern ((Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_dc6af52893a9414c4d4d0faf359b80f5))

:named typing_Tm_abs_dc6af52893a9414c4d4d0faf359b80f5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_dc6af52893a9414c4d4d0faf359b80f5
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,11-141,64); use=X64.Vale.StrongPost_i.fsti(137,11-141,64)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_37e7f37e83071c767f2d4adf63327c5a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_dc6af52893a9414c4d4d0faf359b80f5))

:named interpretation_Tm_abs_dc6af52893a9414c4d4d0faf359b80f5))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(137,1-141,65); use=X64.Vale.StrongPost_i.fsti(137,1-141,65)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall Prims.int
(Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(137,1-141,65); use=X64.Vale.StrongPost_i.fsti(137,1-141,65)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(138,6-138,49); use=X64.Vale.StrongPost_i.fsti(138,6-138,49)
(= @x8
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x3))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))))


;; def=X64.Vale.StrongPost_i.fsti(139,6-139,55); use=X64.Vale.StrongPost_i.fsti(139,6-139,55)
(= @x9
(let ((@lb11 (Prims.op_LessThan @x8
(BoxInt 18446744073709551616))))
(ite (= @lb11
(BoxBool true))
@x8
(BoxInt (- (BoxInt_proj_0 @x8)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(140,4-140,28); use=X64.Vale.StrongPost_i.fsti(140,4-140,28)
(= (X64.Vale.Decls.cf @x10)
(Prims.op_GreaterThanOrEqual @x8
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @x3))
@x9
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))))
)
)
 
;;no pats
:qid l_quant_interp_ac4e790aa23d0cb66dfee442b008a0d8.1))
)
 

:pattern ((Valid (Prims.l_Forall Prims.int
(Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_ac4e790aa23d0cb66dfee442b008a0d8))

:named l_quant_interp_ac4e790aa23d0cb66dfee442b008a0d8))



;;;;;;;;;;;;;;;;x: X64.Vale.State_i.mem -> Prims.GTot Type0
(declare-fun Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464
Tm_type)
:named kinding_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.State_i.fsti(30,7-30,10); use=X64.Vale.StrongPost_i.fsti(131,9-131,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.State_i.fsti(30,7-30,10); use=X64.Vale.StrongPost_i.fsti(131,9-131,10)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464)
(and 
;; def=X64.Vale.State_i.fsti(30,7-30,10); use=X64.Vale.StrongPost_i.fsti(131,9-131,10)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Map.t Prims.int
X64.Machine_s.nat64))
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464))
(declare-fun Tm_abs_29f4b9f5e52e7c434890c3854682ba8a (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_29f4b9f5e52e7c434890c3854682ba8a
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464)
 

:pattern ((Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_29f4b9f5e52e7c434890c3854682ba8a))

:named typing_Tm_abs_29f4b9f5e52e7c434890c3854682ba8a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_29f4b9f5e52e7c434890c3854682ba8a
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_imp (Prims.eq2 (FStar.Map.t Prims.int
X64.Machine_s.nat64)
@x0
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @x5))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @x5))))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Store64_src @x5)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x6)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x7)
@x8)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
@x0))))
 

:pattern ((ApplyTT (Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_29f4b9f5e52e7c434890c3854682ba8a))

:named interpretation_Tm_abs_29f4b9f5e52e7c434890c3854682ba8a))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall (FStar.Map.t Prims.int
X64.Machine_s.nat64)
(Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(132,3-132,72); use=X64.Vale.StrongPost_i.fsti(132,3-132,72)
(= @x8
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @x3))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @x3))))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Store64_src @x3)
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))))
)

;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
@x8))
)
)
 
;;no pats
:qid l_quant_interp_3fb95256e627a846e77cdda24f4c2832.1))
)
 

:pattern ((Valid (Prims.l_Forall (FStar.Map.t Prims.int
X64.Machine_s.nat64)
(Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_3fb95256e627a846e77cdda24f4c2832))

:named l_quant_interp_3fb95256e627a846e77cdda24f4c2832))




(declare-fun Tm_abs_9882345add7dc9c18114f4ddaf4663ad (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_9882345add7dc9c18114f4ddaf4663ad
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_9882345add7dc9c18114f4ddaf4663ad))

:named typing_Tm_abs_9882345add7dc9c18114f4ddaf4663ad))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9882345add7dc9c18114f4ddaf4663ad
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_imp (Prims.eq2 X64.Machine_s.nat64
@x0
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @x5))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @x5))))))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x6)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x7)
@x8)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @x5))
@x0
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))))
 

:pattern ((ApplyTT (Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_9882345add7dc9c18114f4ddaf4663ad))

:named interpretation_Tm_abs_9882345add7dc9c18114f4ddaf4663ad))


;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(126,12-126,54); use=X64.Vale.StrongPost_i.fsti(126,12-126,54)
(= @x8
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @x3))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @x3))))))
)

;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @x3))
@x8
(X64.Vale.State_i.Mkstate @x7
@x6
@x5
@x4)))
)
)
 
;;no pats
:qid l_quant_interp_a0306532728b1b2c094cd576fadf7094.1))
)
 

:pattern ((Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_a0306532728b1b2c094cd576fadf7094))

:named l_quant_interp_a0306532728b1b2c094cd576fadf7094))


(declare-fun Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0))

:named typing_Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_imp (Prims.eq2 X64.Machine_s.nat64
@x0
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mov64_src @x1)
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x6)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x7)
@x8)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @x1))
@x0
(X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))))
 

:pattern ((ApplyTT (Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0))

:named interpretation_Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0))

;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(121,12-121,41); use=X64.Vale.StrongPost_i.fsti(121,12-121,41)
(= @x8
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mov64_src @x7)
(X64.Vale.State_i.Mkstate @x6
@x5
@x4
@x3)))
)

;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @x2)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @x7))
@x8
(X64.Vale.State_i.Mkstate @x6
@x5
@x4
@x3)))
)
)
 
;;no pats
:qid l_quant_interp_988e978fee326f32fc3636b9ecf551c8.1))
)
 

:pattern ((Valid (Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @x7
@x6
@x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_988e978fee326f32fc3636b9ecf551c8))

:named l_quant_interp_988e978fee326f32fc3636b9ecf551c8))

(declare-fun Tm_abs_a9156775682f6b957fdf1df601182f40 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_a9156775682f6b957fdf1df601182f40
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,32-114,14); use=X64.Vale.StrongPost_i.fsti(108,32-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (HasType (Tm_abs_a9156775682f6b957fdf1df601182f40 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464)
 

:pattern ((Tm_abs_a9156775682f6b957fdf1df601182f40 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
:qid typing_Tm_abs_a9156775682f6b957fdf1df601182f40))

:named typing_Tm_abs_a9156775682f6b957fdf1df601182f40))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_a9156775682f6b957fdf1df601182f40
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,32-114,14); use=X64.Vale.StrongPost_i.fsti(108,32-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= (ApplyTT (Tm_abs_a9156775682f6b957fdf1df601182f40 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0)
(Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.eq2 Prims.bool
@x1
(X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)))
(Prims.eq2 (FStar.Map.t Prims.int
X64.Machine_s.nat64)
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))
(Prims.eq2 X64.Machine_s.nat64
@x6
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5))))
(X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate @x2
@x3
@x4
@x5)
(X64.Vale.State_i.Mkstate @x1
@x7
@x6
@x0)))
(X64.Vale.StrongPost_i.augment @x8
@x9
(X64.Vale.State_i.Mkstate @x1
@x7
@x6
@x0))))
 

:pattern ((ApplyTT (Tm_abs_a9156775682f6b957fdf1df601182f40 @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9)
@x0))
:qid interpretation_Tm_abs_a9156775682f6b957fdf1df601182f40))

:named interpretation_Tm_abs_a9156775682f6b957fdf1df601182f40))

(declare-fun Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,32-114,14); use=X64.Vale.StrongPost_i.fsti(108,32-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (HasType (Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
:qid typing_Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d))

:named typing_Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,32-114,14); use=X64.Vale.StrongPost_i.fsti(108,32-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= (ApplyTT (Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0)
(Prims.l_Forall (FStar.Map.t Prims.int
X64.Machine_s.nat64)
(Tm_abs_a9156775682f6b957fdf1df601182f40 @x1
@x2
@x3
@x4
@x5
@x0
@x6
@x7
@x8)))
 

:pattern ((ApplyTT (Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d @x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8)
@x0))
:qid interpretation_Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d))

:named interpretation_Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d))
;;;;;;;;;;;;;;;;regsN: X64.Vale.Regs_i.t -> Prims.GTot Type0
(declare-fun Tm_arrow_f79f40f8247e5ce17e698d34e391c59f () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_f79f40f8247e5ce17e698d34e391c59f
Tm_type)
:named kinding_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.State_i.fsti(28,8-28,16); use=X64.Vale.StrongPost_i.fsti(108,19-108,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_f79f40f8247e5ce17e698d34e391c59f)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.State_i.fsti(28,8-28,16); use=X64.Vale.StrongPost_i.fsti(108,19-108,24)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_f79f40f8247e5ce17e698d34e391c59f)
(and 
;; def=X64.Vale.State_i.fsti(28,8-28,16); use=X64.Vale.StrongPost_i.fsti(108,19-108,24)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.Regs_i.t)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_f79f40f8247e5ce17e698d34e391c59f))
(declare-fun Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,25-114,14); use=X64.Vale.StrongPost_i.fsti(108,25-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_arrow_f79f40f8247e5ce17e698d34e391c59f)
 

:pattern ((Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141))

:named typing_Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,25-114,14); use=X64.Vale.StrongPost_i.fsti(108,25-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 @x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d @x1
@x2
@x3
@x4
@x5
@x0
@x6
@x7)))
 

:pattern ((ApplyTT (Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 @x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0))
:qid interpretation_Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141))

:named interpretation_Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141))
;;;;;;;;;;;;;;;;okN: Prims.bool -> Prims.GTot Type0
(declare-fun Tm_arrow_500279c757ae94c6b581e1748c9c53d5 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_500279c757ae94c6b581e1748c9c53d5
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_500279c757ae94c6b581e1748c9c53d5
Tm_type)
:named kinding_Tm_arrow_500279c757ae94c6b581e1748c9c53d5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.State_i.fsti(27,6-27,10); use=X64.Vale.StrongPost_i.fsti(108,15-108,18)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_500279c757ae94c6b581e1748c9c53d5)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_500279c757ae94c6b581e1748c9c53d5))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_500279c757ae94c6b581e1748c9c53d5))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_500279c757ae94c6b581e1748c9c53d5))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_500279c757ae94c6b581e1748c9c53d5
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.State_i.fsti(27,6-27,10); use=X64.Vale.StrongPost_i.fsti(108,15-108,18)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_500279c757ae94c6b581e1748c9c53d5)
(and 
;; def=X64.Vale.State_i.fsti(27,6-27,10); use=X64.Vale.StrongPost_i.fsti(108,15-108,18)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.bool)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_500279c757ae94c6b581e1748c9c53d5.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_500279c757ae94c6b581e1748c9c53d5))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_500279c757ae94c6b581e1748c9c53d5))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_500279c757ae94c6b581e1748c9c53d5))
(declare-fun Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_464ef91dcc9b0808db7b2913b95faeb5
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,19-114,14); use=X64.Vale.StrongPost_i.fsti(108,19-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_arrow_500279c757ae94c6b581e1748c9c53d5)
 

:pattern ((Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_464ef91dcc9b0808db7b2913b95faeb5))

:named typing_Tm_abs_464ef91dcc9b0808db7b2913b95faeb5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_464ef91dcc9b0808db7b2913b95faeb5
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,19-114,14); use=X64.Vale.StrongPost_i.fsti(108,19-114,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_Forall X64.Vale.Regs_i.t
(Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 @x0
@x1
@x2
@x3
@x4
@x5
@x6)))
 

:pattern ((ApplyTT (Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_464ef91dcc9b0808db7b2913b95faeb5))

:named interpretation_Tm_abs_464ef91dcc9b0808db7b2913b95faeb5))
;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(108,7-114,15); use=X64.Vale.StrongPost_i.fsti(108,7-114,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.l_Forall Prims.bool
(Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x5
@x4
@x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(108,7-114,15); use=X64.Vale.StrongPost_i.fsti(108,7-114,15)
(forall ((@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x6
Prims.bool)
(HasType @x7
X64.Vale.Regs_i.t)
(HasType @x8
X64.Machine_s.nat64)
(HasType @x9
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(110,7-110,19); use=X64.Vale.StrongPost_i.fsti(110,7-110,19)
(= @x6
(X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x5
@x4
@x3
@x2)))


;; def=X64.Vale.StrongPost_i.fsti(111,7-111,21); use=X64.Vale.StrongPost_i.fsti(111,7-111,21)
(= @x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x5
@x4
@x3
@x2)))


;; def=X64.Vale.StrongPost_i.fsti(112,7-112,25); use=X64.Vale.StrongPost_i.fsti(112,7-112,25)
(= @x8
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x5
@x4
@x3
@x2)))


;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate @x5
@x4
@x3
@x2)
(X64.Vale.State_i.Mkstate @x6
@x7
@x8
@x9))
)
)

;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(X64.Vale.StrongPost_i.augment @x1
@x0
(X64.Vale.State_i.Mkstate @x6
@x7
@x8
@x9))
)
)
 
;;no pats
:qid l_quant_interp_fe43acd1f8ea1b2693b9ca699e0bf510.1))
)
 

:pattern ((Valid (Prims.l_Forall Prims.bool
(Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x5
@x4
@x3
@x2
@x1
@x0))))
:qid l_quant_interp_fe43acd1f8ea1b2693b9ca699e0bf510))

:named l_quant_interp_fe43acd1f8ea1b2693b9ca699e0bf510))

(declare-fun Tm_abs_4810d770f79f70642649dd78745d583b (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_4810d770f79f70642649dd78745d583b
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,29-219,68); use=X64.Vale.StrongPost_i.fsti(210,29-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (HasType (Tm_abs_4810d770f79f70642649dd78745d583b @x0
@x1
@x2
@x3
@x4
@x5
@x6)
Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464)
 

:pattern ((Tm_abs_4810d770f79f70642649dd78745d583b @x0
@x1
@x2
@x3
@x4
@x5
@x6))
:qid typing_Tm_abs_4810d770f79f70642649dd78745d583b))

:named typing_Tm_abs_4810d770f79f70642649dd78745d583b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_4810d770f79f70642649dd78745d583b
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,29-219,68); use=X64.Vale.StrongPost_i.fsti(210,29-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= (ApplyTT (Tm_abs_4810d770f79f70642649dd78745d583b @x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0)
(Prims.l_imp (Prims.l_and (Prims.l_and (Prims.l_and (Prims.eq2 Prims.bool
@x1
(X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
(Prims.eq2 X64.Vale.Regs_i.t
@x3
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)))
(Prims.eq2 X64.Machine_s.nat64
@x4
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)))
(Prims.eq2 (FStar.Map.t Prims.int
X64.Machine_s.nat64)
@x0
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
(Prims.l_and (Prims.l_and (Prims.b2t (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(let ((@lb8 @x5))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Mov64_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8))))
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Load64_offset (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Store64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Store64_src (Prims.Cons_hd @lb8))
(X64.Vale.StrongPost_i.Store64_offset (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Add64Wrap_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Adc64Wrap_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Mul64Wrap (Prims.Cons_hd @lb8)))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mul64Wrap (X64.Vale.StrongPost_i.Mul64Wrap_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.IMul64_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.And64_amt (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Shr64_amt (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Sub64_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))))))))))))))))))))
@x2
@x6))
(let ((@lb8 @x5))
(ite (is-Prims.Nil @lb8)
(Prims.l_Forall Prims.bool
(Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 @x1
@x3
@x4
@x0
@x6
@x7))
(ite (is-Prims.Cons @lb8)
(let ((@lb9 (Prims.Cons_hd @lb8)))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb9)))
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 @lb9
@x1
@x3
@x4
@x0
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb9)))
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb9)))))
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_9882345add7dc9c18114f4ddaf4663ad @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb9)))
(Prims.l_and (Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.b2t (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb9)))))))
(Prims.l_Forall (FStar.Map.t Prims.int
X64.Machine_s.nat64)
(Tm_abs_29f4b9f5e52e7c434890c3854682ba8a @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9)))
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall Prims.int
(Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9)))
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall Prims.int
(Tm_abs_ac193f8a988a33a776b314be504ac3e1 @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb9)
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_84b576455eb04a0e658495bfc4f21e9c @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb9)))
(Prims.l_and (Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.b2t (Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))))
(BoxInt 18446744073709551616))))
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_8c060cc7d916a0b47b83997d4b4f481e @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.And64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.And64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb9)))
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_6709275dbed167665b198f7bae6141d0 @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb9)))
(Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))))
Prims.l_False
(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb9)))
(Prims.l_and (Prims.l_and (Prims.b2t (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0)))
(Prims.b2t (Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
(X64.Vale.State_i.Mkstate @x1
@x3
@x4
@x0))))))))
(Prims.l_Forall Prims.int
(Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 @x1
@x3
@x4
@x0
@lb9
@lb8
@x6
@x7)))
Prims.l_False)))))))))))))))))))
Tm_unit))))))
 

:pattern ((ApplyTT (Tm_abs_4810d770f79f70642649dd78745d583b @x1
@x2
@x3
@x4
@x5
@x6
@x7)
@x0))
:qid interpretation_Tm_abs_4810d770f79f70642649dd78745d583b))

:named interpretation_Tm_abs_4810d770f79f70642649dd78745d583b))

(declare-fun Tm_abs_c9fbda340aa03c582ce912ec75995cd9 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_c9fbda340aa03c582ce912ec75995cd9
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,29-219,68); use=X64.Vale.StrongPost_i.fsti(210,29-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_abs_c9fbda340aa03c582ce912ec75995cd9 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_arrow_7f199da4400cceca67ee0fd382abb844)
 

:pattern ((Tm_abs_c9fbda340aa03c582ce912ec75995cd9 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_Tm_abs_c9fbda340aa03c582ce912ec75995cd9))

:named typing_Tm_abs_c9fbda340aa03c582ce912ec75995cd9))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_c9fbda340aa03c582ce912ec75995cd9
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,29-219,68); use=X64.Vale.StrongPost_i.fsti(210,29-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= (ApplyTT (Tm_abs_c9fbda340aa03c582ce912ec75995cd9 @x1
@x2
@x3
@x4
@x5
@x6)
@x0)
(Prims.l_Forall (FStar.Map.t Prims.int
X64.Machine_s.nat64)
(Tm_abs_4810d770f79f70642649dd78745d583b @x1
@x2
@x3
@x0
@x4
@x5
@x6)))
 

:pattern ((ApplyTT (Tm_abs_c9fbda340aa03c582ce912ec75995cd9 @x1
@x2
@x3
@x4
@x5
@x6)
@x0))
:qid interpretation_Tm_abs_c9fbda340aa03c582ce912ec75995cd9))

:named interpretation_Tm_abs_c9fbda340aa03c582ce912ec75995cd9))

(declare-fun Tm_abs_c72101bf1fb917230d7e293651f16324 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_c72101bf1fb917230d7e293651f16324
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,22-219,68); use=X64.Vale.StrongPost_i.fsti(210,22-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_abs_c72101bf1fb917230d7e293651f16324 @x0
@x1
@x2
@x3
@x4)
Tm_arrow_f79f40f8247e5ce17e698d34e391c59f)
 

:pattern ((Tm_abs_c72101bf1fb917230d7e293651f16324 @x0
@x1
@x2
@x3
@x4))
:qid typing_Tm_abs_c72101bf1fb917230d7e293651f16324))

:named typing_Tm_abs_c72101bf1fb917230d7e293651f16324))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_c72101bf1fb917230d7e293651f16324
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,22-219,68); use=X64.Vale.StrongPost_i.fsti(210,22-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (Tm_abs_c72101bf1fb917230d7e293651f16324 @x1
@x2
@x3
@x4
@x5)
@x0)
(Prims.l_Forall X64.Machine_s.nat64
(Tm_abs_c9fbda340aa03c582ce912ec75995cd9 @x1
@x2
@x0
@x3
@x4
@x5)))
 

:pattern ((ApplyTT (Tm_abs_c72101bf1fb917230d7e293651f16324 @x1
@x2
@x3
@x4
@x5)
@x0))
:qid interpretation_Tm_abs_c72101bf1fb917230d7e293651f16324))

:named interpretation_Tm_abs_c72101bf1fb917230d7e293651f16324))

(declare-fun Tm_abs_4106b6cc59033cd053e00f9f19382d08 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_4106b6cc59033cd053e00f9f19382d08
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,16-219,68); use=X64.Vale.StrongPost_i.fsti(210,16-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x0
@x1
@x2
@x3)
Tm_arrow_500279c757ae94c6b581e1748c9c53d5)
 

:pattern ((Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x0
@x1
@x2
@x3))
:qid typing_Tm_abs_4106b6cc59033cd053e00f9f19382d08))

:named typing_Tm_abs_4106b6cc59033cd053e00f9f19382d08))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_4106b6cc59033cd053e00f9f19382d08
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,16-219,68); use=X64.Vale.StrongPost_i.fsti(210,16-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x1
@x2
@x3
@x4)
@x0)
(Prims.l_Forall X64.Vale.Regs_i.t
(Tm_abs_c72101bf1fb917230d7e293651f16324 @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((ApplyTT (Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x1
@x2
@x3
@x4)
@x0))
:qid interpretation_Tm_abs_4106b6cc59033cd053e00f9f19382d08))

:named interpretation_Tm_abs_4106b6cc59033cd053e00f9f19382d08))























;;;;;;;;;;;;;;;;Interpretation of deeply embedded quantifier
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,5-219,68); use=X64.Vale.StrongPost_i.fsti(210,5-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.l_Forall Prims.bool
(Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x3
@x2
@x1
@x0)))

;; def=X64.Vale.StrongPost_i.fsti(210,5-219,68); use=X64.Vale.StrongPost_i.fsti(210,5-219,68)
(forall ((@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (and (HasType @x4
Prims.bool)
(HasType @x5
X64.Vale.Regs_i.t)
(HasType @x6
X64.Machine_s.nat64)
(HasType @x7
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(211,8-211,20); use=X64.Vale.StrongPost_i.fsti(211,8-211,20)
(= @x4
(X64.Vale.State_i.__proj__Mkstate__item__ok @x3))


;; def=X64.Vale.StrongPost_i.fsti(212,8-212,24); use=X64.Vale.StrongPost_i.fsti(212,8-212,24)
(= @x5
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3))


;; def=X64.Vale.StrongPost_i.fsti(213,8-213,26); use=X64.Vale.StrongPost_i.fsti(213,8-213,26)
(= @x6
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3))


;; def=X64.Vale.StrongPost_i.fsti(214,8-214,22); use=X64.Vale.StrongPost_i.fsti(214,8-214,22)
(= @x7
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3))
)

;; def=X64.Vale.StrongPost_i.fsti(215,8-219,68); use=X64.Vale.StrongPost_i.fsti(215,8-219,68)
(and 
;; def=X64.Vale.StrongPost_i.fsti(215,8-215,13); use=X64.Vale.StrongPost_i.fsti(215,8-215,13)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x3))


;; def=X64.Vale.StrongPost_i.fsti(216,8-216,72); use=X64.Vale.StrongPost_i.fsti(216,8-216,72)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(216,8-216,72); use=X64.Vale.StrongPost_i.fsti(216,8-216,72)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(let ((@lb8 @x2))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Mov64_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb8))))
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Load64_offset (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Store64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Store64_src (Prims.Cons_hd @lb8))
(X64.Vale.StrongPost_i.Store64_offset (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Add64Wrap_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Adc64Wrap_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Mul64Wrap (Prims.Cons_hd @lb8)))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mul64Wrap (X64.Vale.StrongPost_i.Mul64Wrap_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.IMul64_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.And64_amt (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Shr64_amt (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb8)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb8))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb8))))
(X64.Vale.StrongPost_i.Sub64_src (Prims.Cons_hd @lb8)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb8)))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))))))))))))))))))))
@x3
@x1)
)

(let ((@lb8 @x2))
(ite (is-Prims.Nil @lb8)

;; def=X64.Vale.StrongPost_i.fsti(108,7-114,15); use=X64.Vale.StrongPost_i.fsti(108,7-114,15)
(forall ((@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x9
Prims.bool)
(HasType @x10
X64.Vale.Regs_i.t)
(HasType @x11
X64.Machine_s.nat64)
(HasType @x12
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(110,7-110,19); use=X64.Vale.StrongPost_i.fsti(110,7-110,19)
(= @x9
(X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(111,7-111,21); use=X64.Vale.StrongPost_i.fsti(111,7-111,21)
(= @x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(112,7-112,25); use=X64.Vale.StrongPost_i.fsti(112,7-112,25)
(= @x11
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)
(X64.Vale.State_i.Mkstate @x9
@x10
@x11
@x12))
)
)

;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(X64.Vale.StrongPost_i.augment @x1
@x0
(X64.Vale.State_i.Mkstate @x9
@x10
@x11
@x12))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.2))

(ite (is-Prims.Cons @lb8)
(let ((@lb9 (Prims.Cons_hd @lb8)))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(118,32-118,37); use=X64.Vale.StrongPost_i.fsti(118,32-118,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(120,1-122,54); use=X64.Vale.StrongPost_i.fsti(120,1-122,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(120,1-120,26); use=X64.Vale.StrongPost_i.fsti(120,1-120,26)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(121,12-121,41); use=X64.Vale.StrongPost_i.fsti(121,12-121,41)
(= @x10
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
)

;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.3))
)

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(123,35-123,40); use=X64.Vale.StrongPost_i.fsti(123,35-123,40)
false

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(125,3-127,54); use=X64.Vale.StrongPost_i.fsti(125,3-127,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(125,3-125,54); use=X64.Vale.StrongPost_i.fsti(125,3-125,54)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb9)))))
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(126,12-126,54); use=X64.Vale.StrongPost_i.fsti(126,12-126,54)
(= @x10
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb9))))))
)

;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.4))
)

(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(129,1-133,41); use=X64.Vale.StrongPost_i.fsti(129,1-133,41)
(and 
;; def=X64.Vale.StrongPost_i.fsti(129,1-129,28); use=X64.Vale.StrongPost_i.fsti(129,1-129,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(130,1-130,45); use=X64.Vale.StrongPost_i.fsti(130,1-130,45)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb9))))))


;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(132,3-132,72); use=X64.Vale.StrongPost_i.fsti(132,3-132,72)
(= @x10
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb9))))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))
)

;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
@x10))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.5))
)

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(134,36-134,41); use=X64.Vale.StrongPost_i.fsti(134,36-134,41)
false

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(136,1-141,65); use=X64.Vale.StrongPost_i.fsti(136,1-141,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(136,1-136,28); use=X64.Vale.StrongPost_i.fsti(136,1-136,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(137,1-141,65); use=X64.Vale.StrongPost_i.fsti(137,1-141,65)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
Prims.int)
(HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(138,6-138,49); use=X64.Vale.StrongPost_i.fsti(138,6-138,49)
(= @x10
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))))


;; def=X64.Vale.StrongPost_i.fsti(139,6-139,55); use=X64.Vale.StrongPost_i.fsti(139,6-139,55)
(= @x11
(let ((@lb13 (Prims.op_LessThan @x10
(BoxInt 18446744073709551616))))
(ite (= @lb13
(BoxBool true))
@x10
(BoxInt (- (BoxInt_proj_0 @x10)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(140,4-140,28); use=X64.Vale.StrongPost_i.fsti(140,4-140,28)
(= (X64.Vale.Decls.cf @x12)
(Prims.op_GreaterThanOrEqual @x10
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.6))
)

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(142,36-142,41); use=X64.Vale.StrongPost_i.fsti(142,36-142,41)
false

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(144,1-150,65); use=X64.Vale.StrongPost_i.fsti(144,1-150,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(144,1-144,28); use=X64.Vale.StrongPost_i.fsti(144,1-144,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(145,1-150,65); use=X64.Vale.StrongPost_i.fsti(145,1-150,65)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
Prims.int)
(HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(146,6-147,34); use=X64.Vale.StrongPost_i.fsti(146,6-147,34)
(= @x10
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))
(BoxInt_proj_0 (let ((@lb13 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
(ite (= @lb13
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))


;; def=X64.Vale.StrongPost_i.fsti(148,6-148,55); use=X64.Vale.StrongPost_i.fsti(148,6-148,55)
(= @x11
(let ((@lb13 (Prims.op_LessThan @x10
(BoxInt 18446744073709551616))))
(ite (= @lb13
(BoxBool true))
@x10
(BoxInt (- (BoxInt_proj_0 @x10)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(149,5-149,29); use=X64.Vale.StrongPost_i.fsti(149,5-149,29)
(= (X64.Vale.Decls.cf @x12)
(Prims.op_GreaterThanOrEqual @x10
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.7))
)

(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb9)

;; def=X64.Vale.StrongPost_i.fsti(152,1-157,37); use=X64.Vale.StrongPost_i.fsti(152,1-157,37)
(and 
;; def=X64.Vale.StrongPost_i.fsti(152,1-152,28); use=X64.Vale.StrongPost_i.fsti(152,1-152,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(153,1-157,37); use=X64.Vale.StrongPost_i.fsti(153,1-157,37)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
X64.Machine_s.nat64)
(HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(154,3-155,56); use=X64.Vale.StrongPost_i.fsti(154,3-155,56)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x11))
(BoxInt_proj_0 @x10))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)

;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x11
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x10
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.8))
)

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(158,33-158,38); use=X64.Vale.StrongPost_i.fsti(158,33-158,38)
false

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(161,3-165,65); use=X64.Vale.StrongPost_i.fsti(161,3-165,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(161,3-161,30); use=X64.Vale.StrongPost_i.fsti(161,3-161,30)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(162,3-162,18); use=X64.Vale.StrongPost_i.fsti(162,3-162,18)
(< (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))
18446744073709551616)


;; def=X64.Vale.StrongPost_i.fsti(163,3-165,65); use=X64.Vale.StrongPost_i.fsti(163,3-165,65)
(forall ((@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x10
X64.Machine_s.nat64)
(HasType @x11
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(164,6-164,12); use=X64.Vale.StrongPost_i.fsti(164,6-164,12)
(= @x10
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))))
)

;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
@x11
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.9))
)

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(166,32-166,37); use=X64.Vale.StrongPost_i.fsti(166,32-166,37)
false

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(169,1-172,60); use=X64.Vale.StrongPost_i.fsti(169,1-172,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(169,1-169,28); use=X64.Vale.StrongPost_i.fsti(169,1-169,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(170,1-172,60); use=X64.Vale.StrongPost_i.fsti(170,1-172,60)
(forall ((@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x10
X64.Machine_s.nat64)
(HasType @x11
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(171,3-171,9); use=X64.Vale.StrongPost_i.fsti(171,3-171,9)
(= @x10
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))
)

;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
@x11
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.10))
)

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(173,32-173,37); use=X64.Vale.StrongPost_i.fsti(173,32-173,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(176,1-179,60); use=X64.Vale.StrongPost_i.fsti(176,1-179,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(176,1-176,28); use=X64.Vale.StrongPost_i.fsti(176,1-176,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(177,1-179,60); use=X64.Vale.StrongPost_i.fsti(177,1-179,60)
(forall ((@x10 Term) (@x11 Term))
 (! (implies (and (HasType @x10
X64.Machine_s.nat64)
(HasType @x11
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(178,3-178,9); use=X64.Vale.StrongPost_i.fsti(178,3-178,9)
(= @x10
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))
)

;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
@x11
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9))
@x10
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.11))
)

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb9))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))))

;; def=X64.Vale.StrongPost_i.fsti(180,32-180,37); use=X64.Vale.StrongPost_i.fsti(180,32-180,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb9)))

;; def=X64.Vale.StrongPost_i.fsti(182,8-187,72); use=X64.Vale.StrongPost_i.fsti(182,8-187,72)
(and 
;; def=X64.Vale.StrongPost_i.fsti(182,8-182,35); use=X64.Vale.StrongPost_i.fsti(182,8-182,35)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))


;; def=X64.Vale.StrongPost_i.fsti(183,8-183,53); use=X64.Vale.StrongPost_i.fsti(183,8-183,53)
(<= 0
(- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))


;; def=X64.Vale.StrongPost_i.fsti(184,8-187,72); use=X64.Vale.StrongPost_i.fsti(184,8-187,72)
(forall ((@x10 Term) (@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x10
Prims.int)
(HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(185,15-185,58); use=X64.Vale.StrongPost_i.fsti(185,15-185,58)
(= @x10
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7))))))


;; def=X64.Vale.StrongPost_i.fsti(186,15-186,21); use=X64.Vale.StrongPost_i.fsti(186,15-186,21)
(= @x11
@x10)
)

;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb8)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x1)
@x0)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))
@x11
(X64.Vale.State_i.Mkstate @x4
@x5
@x6
@x7)))))
)
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.12))
)


;; def=X64.Vale.StrongPost_i.fsti(188,13-188,18); use=X64.Vale.StrongPost_i.fsti(188,13-188,18)
false
)))))))))))))))))))
Unreachable))))
)
 
;;no pats
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f.1))
)
 

:pattern ((Valid (Prims.l_Forall Prims.bool
(Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x3
@x2
@x1
@x0))))
:qid l_quant_interp_bce3549f78510d29c361fbee6c4ad67f))

:named l_quant_interp_bce3549f78510d29c361fbee6c4ad67f))

;;;;;;;;;;;;;;;;post: (_: Prims.unit -> Type0) -> Prims.logical
(declare-fun Tm_arrow_162d92c99d245c9ecaa195458f1ca811 () Term)
;;;;;;;;;;;;;;;;kinding_Tm_arrow_162d92c99d245c9ecaa195458f1ca811
;;; Fact-ids: 
(assert (! (HasType Tm_arrow_162d92c99d245c9ecaa195458f1ca811
Tm_type)
:named kinding_Tm_arrow_162d92c99d245c9ecaa195458f1ca811))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(209,22-209,34); use=X64.Vale.StrongPost_i.fsti(209,22-210,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_162d92c99d245c9ecaa195458f1ca811)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_162d92c99d245c9ecaa195458f1ca811))
:qid X64.Vale.StrongPost_i_pre_typing_Tm_arrow_162d92c99d245c9ecaa195458f1ca811))

:named X64.Vale.StrongPost_i_pre_typing_Tm_arrow_162d92c99d245c9ecaa195458f1ca811))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_162d92c99d245c9ecaa195458f1ca811
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(209,22-209,34); use=X64.Vale.StrongPost_i.fsti(209,22-210,15)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_162d92c99d245c9ecaa195458f1ca811)
(and 
;; def=X64.Vale.StrongPost_i.fsti(209,22-209,34); use=X64.Vale.StrongPost_i.fsti(209,22-210,15)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
(HasType (ApplyTT @x0
@x1)
Prims.logical))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_162d92c99d245c9ecaa195458f1ca811.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_162d92c99d245c9ecaa195458f1ca811))
:qid X64.Vale.StrongPost_i_interpretation_Tm_arrow_162d92c99d245c9ecaa195458f1ca811))

:named X64.Vale.StrongPost_i_interpretation_Tm_arrow_162d92c99d245c9ecaa195458f1ca811))
(declare-fun Tm_abs_b403fd72f53407a3587f5dce59b5a546 (Term Term Term) Term)
;;;;;;;;;;;;;;;;typing_Tm_abs_b403fd72f53407a3587f5dce59b5a546
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,5-219,68); use=X64.Vale.StrongPost_i.fsti(210,5-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_b403fd72f53407a3587f5dce59b5a546 @x0
@x1
@x2)
Tm_arrow_162d92c99d245c9ecaa195458f1ca811)
 

:pattern ((Tm_abs_b403fd72f53407a3587f5dce59b5a546 @x0
@x1
@x2))
:qid typing_Tm_abs_b403fd72f53407a3587f5dce59b5a546))

:named typing_Tm_abs_b403fd72f53407a3587f5dce59b5a546))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_b403fd72f53407a3587f5dce59b5a546
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.StrongPost_i.fsti(210,5-219,68); use=X64.Vale.StrongPost_i.fsti(210,5-219,68)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_b403fd72f53407a3587f5dce59b5a546 @x1
@x2
@x3)
@x0)
(Prims.l_Forall Prims.bool
(Tm_abs_4106b6cc59033cd053e00f9f19382d08 @x1
@x2
@x3
@x0)))
 

:pattern ((ApplyTT (Tm_abs_b403fd72f53407a3587f5dce59b5a546 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_b403fd72f53407a3587f5dce59b5a546))

:named interpretation_Tm_abs_b403fd72f53407a3587f5dce59b5a546))












































































































































; Encoding query formula : forall (inss: Prims.list X64.Vale.StrongPost_i.ins)
;   (s0: X64.Vale.State_i.state)
;   (sN: X64.Vale.State_i.state).
;   (*  - Could not prove post-condition
; *)
;   forall (pure_result: Prims.unit).
;     Prims.pure_wp_monotonic Prims.unit
;       (fun post ->
;           forall (ok0: Prims.bool)
;             (regs0: X64.Vale.Regs_i.t)
;             (flags0: X64.Machine_s.nat64)
;             (mem0: FStar.Map.t Prims.int X64.Machine_s.nat64).
;             ok0 == s0.ok /\ regs0 == s0.regs /\ flags0 == s0.flags /\ mem0 == s0.mem ==>
;             s0.ok /\
;             X64.Vale.Decls.eval_code (X64.Machine_s.Block
;                 (match inss with
;                   | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;                   | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ :: _ ->
;                     []
;                   | X64.Vale.StrongPost_i.Load64
;                     (X64.Machine_s.OReg dst)
;                     (X64.Machine_s.OReg src)
;                     offset ::
;                   inss ->
;                     X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg dst)
;                       (X64.Machine_s.OReg src)
;                       offset ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset :: inss ->
;                     X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg dst) src offset ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                     []
;                   | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                     []
;                   | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Mul64Wrap src :: inss ->
;                     X64.Vale.Decls.va_code_Mul64Wrap src :: X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;                   | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;                   | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;                   | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;                   | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src :: inss ->
;                     X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg dst) src ::
;                     X64.Vale.StrongPost_i.inss_to_codes inss
;                   | _ -> []))
;               s0
;               sN /\
;             (match inss with
;               | [] ->
;                 forall (okN: Prims.bool)
;                   (regsN: X64.Vale.Regs_i.t)
;                   (flagsN: X64.Machine_s.nat64)
;                   (memN: X64.Vale.State_i.mem).
;                   okN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok /\
;                   memN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem /\
;                   flagsN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags /\
;                   X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate ok0
;                         regs0
;                         flags0
;                         mem0)
;                     (X64.Vale.State_i.Mkstate okN regsN flagsN memN) ==>
;                   X64.Vale.StrongPost_i.augment sN
;                     post
;                     (X64.Vale.State_i.Mkstate okN regsN flagsN memN)
;               | hd :: inss ->
;                 (match hd with
;                   | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (x: X64.Machine_s.nat64).
;                         x ==
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)))
;                   | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.Load64
;                     (X64.Machine_s.OReg dst)
;                     (X64.Machine_s.OReg src)
;                     offset ->
;                     X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst
;                         ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs src + offset))
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (x: X64.Machine_s.nat64).
;                         x ==
;                         FStar.Map.sel (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                           ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs src + offset) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)))
;                   | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     FStar.Map.contains (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                       ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst + offset) /\
;                     (forall (x: X64.Vale.State_i.mem).
;                         x ==
;                         FStar.Map.upd (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                           ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst + offset)
;                           (X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags
;                               x))
;                   | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                         a ==
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst +
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         x ==
;                         (match a < X64.Machine_s.nat64_max with
;                           | true -> a
;                           | _ -> a - X64.Machine_s.nat64_max) /\
;                         X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .ok
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .regs
;                               f
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .mem))
;                   | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                         a ==
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst +
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) +
;                         (match
;                             X64.Vale.Decls.cf (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags
;                           with
;                           | true -> 1
;                           | _ -> 0) /\
;                         x ==
;                         (match a < X64.Machine_s.nat64_max with
;                           | true -> a
;                           | _ -> a - X64.Machine_s.nat64_max) /\
;                         X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .ok
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .regs
;                               f
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .mem))
;                   | X64.Vale.StrongPost_i.Mul64Wrap src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (rax: X64.Machine_s.nat64)
;                         (rdx: X64.Machine_s.nat64)
;                         (f: X64.Machine_s.nat64).
;                         X64.Machine_s.nat64_max * rdx + rax ==
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs X64.Machine_s.Rax *
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                               rdx
;                               (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                                   rax
;                                   (X64.Vale.State_i.Mkstate
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs
;                                       f
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem))))
;                   | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst *
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) <
;                     X64.Machine_s.nat64_max /\
;                     (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                         x ==
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst *
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .ok
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .regs
;                               f
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .mem))
;                   | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                         x ==
;                         X64.Vale.Decls.logand64 ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)
;                               .regs dst)
;                           (X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .ok
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .regs
;                               f
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .mem))
;                   | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                         x ==
;                         X64.Vale.Decls.shift_right64 ((X64.Vale.State_i.Mkstate ok0
;                                 regs0
;                                 flags0
;                                 mem0)
;                               .regs dst)
;                           (X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .ok
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .regs
;                               f
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .mem))
;                   | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                     Prims.l_False
;                   | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src ->
;                     X64.Vale.StrongPost_i.valid_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     0 <=
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst -
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                         a ==
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst -
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\ x == a ==>
;                         X64.Vale.StrongPost_i.wp_code inss
;                           (X64.Vale.StrongPost_i.augment sN post)
;                           (X64.Vale.State_i.Mkstate
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .ok
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .regs
;                               f
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                 .mem))
;                   | _ -> Prims.l_False)
;                 <:
;                 Type0)) ==>
;     Prims.auto_squash (Prims.pure_wp_monotonic Prims.unit
;           (fun post ->
;               forall (ok0: Prims.bool)
;                 (regs0: X64.Vale.Regs_i.t)
;                 (flags0: X64.Machine_s.nat64)
;                 (mem0: FStar.Map.t Prims.int X64.Machine_s.nat64).
;                 ok0 == s0.ok /\ regs0 == s0.regs /\ flags0 == s0.flags /\ mem0 == s0.mem ==>
;                 s0.ok /\
;                 X64.Vale.Decls.eval_code (X64.Machine_s.Block
;                     (match inss with
;                       | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                         []
;                       | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ :: _ ->
;                         []
;                       | X64.Vale.StrongPost_i.Load64
;                         (X64.Machine_s.OReg dst)
;                         (X64.Machine_s.OReg src)
;                         offset ::
;                       inss ->
;                         X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg dst)
;                           (X64.Machine_s.OReg src)
;                           offset ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset :: inss ->
;                         X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg dst) src offset ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ::
;                       _ ->
;                         []
;                       | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ::
;                       _ ->
;                         []
;                       | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Mul64Wrap src :: inss ->
;                         X64.Vale.Decls.va_code_Mul64Wrap src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                         []
;                       | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                         []
;                       | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                         []
;                       | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ ->
;                         []
;                       | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src :: inss ->
;                         X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg dst) src ::
;                         X64.Vale.StrongPost_i.inss_to_codes inss
;                       | _ -> []))
;                   s0
;                   sN /\
;                 (match inss with
;                   | [] ->
;                     forall (okN: Prims.bool)
;                       (regsN: X64.Vale.Regs_i.t)
;                       (flagsN: X64.Machine_s.nat64)
;                       (memN: X64.Vale.State_i.mem).
;                       okN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok /\
;                       memN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem /\
;                       flagsN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags /\
;                       X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate ok0
;                             regs0
;                             flags0
;                             mem0)
;                         (X64.Vale.State_i.Mkstate okN regsN flagsN memN) ==>
;                       X64.Vale.StrongPost_i.augment sN
;                         post
;                         (X64.Vale.State_i.Mkstate okN regsN flagsN memN)
;                   | hd :: inss ->
;                     (match hd with
;                       | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (x: X64.Machine_s.nat64).
;                             x ==
;                             X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)))
;                       | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.Load64
;                         (X64.Machine_s.OReg dst)
;                         (X64.Machine_s.OReg src)
;                         offset ->
;                         X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst
;                             ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs src + offset))
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (x: X64.Machine_s.nat64).
;                             x ==
;                             FStar.Map.sel (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                               ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs src + offset) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.update_reg dst
;                                   x
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)))
;                       | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         FStar.Map.contains (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                           ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst + offset) /\
;                         (forall (x: X64.Vale.State_i.mem).
;                             x ==
;                             FStar.Map.upd (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                               ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst + offset)
;                               (X64.Vale.StrongPost_i.eval_operand_norm src
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags
;                                   x))
;                       | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                             a ==
;                             (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst +
;                             X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                             x ==
;                             (match a < X64.Machine_s.nat64_max with
;                               | true -> a
;                               | _ -> a - X64.Machine_s.nat64_max) /\
;                             X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .ok
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .regs
;                                   f
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .mem))
;                       | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                             a ==
;                             (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst +
;                             X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) +
;                             (match
;                                 X64.Vale.Decls.cf (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)
;                                     .flags
;                               with
;                               | true -> 1
;                               | _ -> 0) /\
;                             x ==
;                             (match a < X64.Machine_s.nat64_max with
;                               | true -> a
;                               | _ -> a - X64.Machine_s.nat64_max) /\
;                             X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .ok
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .regs
;                                   f
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .mem))
;                       | X64.Vale.StrongPost_i.Mul64Wrap src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (rax: X64.Machine_s.nat64)
;                             (rdx: X64.Machine_s.nat64)
;                             (f: X64.Machine_s.nat64).
;                             X64.Machine_s.nat64_max * rdx + rax ==
;                             (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs X64.Machine_s.Rax *
;                             X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                                   rdx
;                                   (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                                       rax
;                                       (X64.Vale.State_i.Mkstate
;                                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok
;                                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs
;                                           f
;                                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem))))
;                       | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst *
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) <
;                         X64.Machine_s.nat64_max /\
;                         (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                             x ==
;                             (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst *
;                             X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .ok
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .regs
;                                   f
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .mem))
;                       | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                             x ==
;                             X64.Vale.Decls.logand64 ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0
;                                 )
;                                   .regs dst)
;                               (X64.Vale.StrongPost_i.eval_operand_norm src
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .ok
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .regs
;                                   f
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .mem))
;                       | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                             x ==
;                             X64.Vale.Decls.shift_right64 ((X64.Vale.State_i.Mkstate ok0
;                                     regs0
;                                     flags0
;                                     mem0)
;                                   .regs dst)
;                               (X64.Vale.StrongPost_i.eval_operand_norm src
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .ok
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .regs
;                                   f
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .mem))
;                       | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                         Prims.l_False
;                       | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src ->
;                         X64.Vale.StrongPost_i.valid_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         0 <=
;                         (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst -
;                         X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                         (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                             a ==
;                             (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst -
;                             X64.Vale.StrongPost_i.eval_operand_norm src
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\ x == a ==>
;                             X64.Vale.StrongPost_i.wp_code inss
;                               (X64.Vale.StrongPost_i.augment sN post)
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .ok
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .regs
;                                   f
;                                   (X64.Vale.State_i.update_reg dst
;                                       x
;                                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                                     .mem))
;                       | _ -> Prims.l_False)
;                     <:
;                     Type0)))


; Context: While encoding a query
; While typechecking the top-level declaration `let va_lemma_weakest_pre_norm_wp`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fsti(221,2-221,8)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=X64.Vale.StrongPost_i.fsti(221,9-221,33); use=X64.Vale.StrongPost_i.fsti(221,2-221,8)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(221,9-221,33); use=X64.Vale.StrongPost_i.fsti(221,2-221,8)
(Prims.pure_wp_monotonic Prims.unit
(Tm_abs_b403fd72f53407a3587f5dce59b5a546 @x1
@x0
@x2))
)
)

;; def=Prims.fst(339,38-339,60); use=X64.Vale.StrongPost_i.fsti(222,2-222,4)
(or label_1

;; def=Prims.fst(339,38-339,60); use=X64.Vale.StrongPost_i.fsti(222,2-222,4)
(Valid 
;; def=Prims.fst(339,38-339,60); use=X64.Vale.StrongPost_i.fsti(222,2-222,4)
(Prims.pure_wp_monotonic Prims.unit
(Tm_abs_b403fd72f53407a3587f5dce59b5a546 @x1
@x0
@x2))
)
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.va_lemma_weakest_pre_norm_wp, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let va_lemma_weakest_pre_norm_wp


; <Start encoding let va_lemma_weakest_pre_norm_wp>

(declare-fun X64.Vale.StrongPost_i.va_lemma_weakest_pre_norm_wp (Term Term Term) Term)
;;;;;;;;;;;;;;;;inss: Prims.list ins -> s0: X64.Vale.State_i.state -> sN: X64.Vale.State_i.state   -> Prims.pure_wp Prims.unit
(declare-fun Tm_arrow_aa809ad41cca246bb49edf390b9f8a9a () Term)
(declare-fun X64.Vale.StrongPost_i.va_lemma_weakest_pre_norm_wp@tok () Term)



;;;;;;;;;;;;;;;;f: X64.Machine_s.nat64 -> Prims.GTot Type
(declare-fun Tm_arrow_7f199da4400cceca67ee0fd382abb844 () Term)
(declare-fun Tm_abs_523d370521c15c7cd983b6c1f7800186 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d3c4bd305f5c197f328528016153d834 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;a: Prims.int -> Prims.GTot Type
(declare-fun Tm_arrow_fce5e26d6599fbb4e26956c05e4721d2 () Term)
(declare-fun Tm_abs_d7ca0e0bcbcac1abcae0ba4d13d5d513 (Term Term Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_c80f6ea1b99dd8f6b6cefbed9095a1ff (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ee1ab6fe35cb8be4291aee0034bd0258 (Term Term Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_411888ac84c2e6c693b5360589e92ed6 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_6709275dbed167665b198f7bae6141d0 (Term Term Term Term Term Term Term Term) Term)






(declare-fun Tm_abs_d76ec1a0af7865dea39d49526b3f695f (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_8c060cc7d916a0b47b83997d4b4f481e (Term Term Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_1cfe6d1850008274e09ebb8794117938 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4ccf02134050f0ab1f8a657505cd20b0 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_84b576455eb04a0e658495bfc4f21e9c (Term Term Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_1dc304d511b35ded13105f895920c3de (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_04c418cba24c1a0476d023a7c98168d6 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_ac193f8a988a33a776b314be504ac3e1 (Term Term Term Term Term Term Term Term) Term)





(declare-fun Tm_abs_3a402ea231dc59757abf1bda1a013131 (Term Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_37e7f37e83071c767f2d4adf63327c5a (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_dc6af52893a9414c4d4d0faf359b80f5 (Term Term Term Term Term Term Term Term) Term)





;;;;;;;;;;;;;;;;x: X64.Vale.State_i.mem -> Prims.GTot Type
(declare-fun Tm_arrow_da9ee4a239d73cdcf4cf05a6b4151464 () Term)
(declare-fun Tm_abs_29f4b9f5e52e7c434890c3854682ba8a (Term Term Term Term Term Term Term Term) Term)






(declare-fun Tm_abs_9882345add7dc9c18114f4ddaf4663ad (Term Term Term Term Term Term Term Term) Term)




(declare-fun Tm_abs_c26b9e26df22c37eb4dbe5c657028ee0 (Term Term Term Term Term Term Term Term) Term)


(declare-fun Tm_abs_a9156775682f6b957fdf1df601182f40 (Term Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_d5d862df8370c8003ac9a3b5553a5c4d (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;regsN: X64.Vale.Regs_i.t -> Prims.GTot Type
(declare-fun Tm_arrow_f79f40f8247e5ce17e698d34e391c59f () Term)
(declare-fun Tm_abs_d58072bd6da35c2c7a6ababfa8b5f141 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;okN: Prims.bool -> Prims.GTot Type
(declare-fun Tm_arrow_500279c757ae94c6b581e1748c9c53d5 () Term)
(declare-fun Tm_abs_464ef91dcc9b0808db7b2913b95faeb5 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_4810d770f79f70642649dd78745d583b (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c9fbda340aa03c582ce912ec75995cd9 (Term Term Term Term Term Term) Term)

(declare-fun Tm_abs_c72101bf1fb917230d7e293651f16324 (Term Term Term Term Term) Term)

(declare-fun Tm_abs_4106b6cc59033cd053e00f9f19382d08 (Term Term Term Term) Term)
























;;;;;;;;;;;;;;;;post: (_: Prims.unit -> Type) -> Prims.logical
(declare-fun Tm_arrow_162d92c99d245c9ecaa195458f1ca811 () Term)
(declare-fun Tm_abs_b403fd72f53407a3587f5dce59b5a546 (Term Term Term) Term)

; </end encoding let va_lemma_weakest_pre_norm_wp>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(28,2-30,43)

;;;;;;;;;;;;;;;;regs : Prims.list X64.Machine_s.reg (Prims.list X64.Machine_s.reg)
(declare-fun x_136fd5270a258ddaaad5b0c5f45f8938_0 () Term)
;;;;;;;;;;;;;;;;binder_x_136fd5270a258ddaaad5b0c5f45f8938_0
;;; Fact-ids: 
(assert (! (HasType x_136fd5270a258ddaaad5b0c5f45f8938_0
(Prims.list X64.Machine_s.reg))
:named binder_x_136fd5270a258ddaaad5b0c5f45f8938_0))
;;;;;;;;;;;;;;;;s : X64.Vale.State_i.state (X64.Vale.State_i.state)
(declare-fun x_de52c7fd4c52e1942aeef9a9143c43bf_1 () Term)
;;;;;;;;;;;;;;;;binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1
;;; Fact-ids: 
(assert (! (HasType x_de52c7fd4c52e1942aeef9a9143c43bf_1
X64.Vale.State_i.state)
:named binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_regs_match_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_regs_match_self@tok () Term)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   (forall (pure_result: Prims.unit). X64.Vale.StrongPost_i.regs_match regs s s ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? regs) /\ ~(Cons? regs) ==> Prims.l_False) /\
;       (regs == [] ==> (forall (any_result: Prims.unit). k any_result)) /\
;       (~(Nil? regs) ==>
;         (forall (b: X64.Machine_s.reg) (b: Prims.list X64.Machine_s.reg).
;             regs == b :: b ==>
;             (b << regs \/ b === regs /\ s << s) /\
;             (forall (any_result: X64.Vale.State_i.state).
;                 s == any_result ==>
;                 (forall (pure_result: Prims.unit).
;                     X64.Vale.StrongPost_i.regs_match b s s ==> k pure_result)))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec lemma_regs_match_self`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=X64.Vale.StrongPost_i.fst(28,2-30,43); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(or label_2

;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(X64.Vale.StrongPost_i.regs_match x_136fd5270a258ddaaad5b0c5f45f8938_0
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(28,8-28,12)
(and 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(28,8-28,12)
(not 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(28,8-28,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Machine_s.reg
x_136fd5270a258ddaaad5b0c5f45f8938_0))
)


;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(28,8-28,12)
(not 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(28,8-28,12)
(BoxBool_proj_0 (Prims.uu___is_Cons X64.Machine_s.reg
x_136fd5270a258ddaaad5b0c5f45f8938_0))
)
)

label_3)
(implies 
;; def=X64.Vale.StrongPost_i.fst(25,31-29,6); use=X64.Vale.StrongPost_i.fst(28,8-29,6)
(= x_136fd5270a258ddaaad5b0c5f45f8938_0
(Prims.Nil X64.Machine_s.reg))


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.4))
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(not 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(28,8-28,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Machine_s.reg
x_136fd5270a258ddaaad5b0c5f45f8938_0))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Machine_s.reg))

;; def=X64.Vale.StrongPost_i.fst(25,31-30,11); use=X64.Vale.StrongPost_i.fst(28,8-30,11)
(= x_136fd5270a258ddaaad5b0c5f45f8938_0
(Prims.Cons X64.Machine_s.reg
@x2
@x3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(and 
;; def=X64.Vale.StrongPost_i.fst(25,31-30,43); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(or label_4

;; def=X64.Vale.StrongPost_i.fst(28,2-30,43); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(28,2-30,43); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(Prims.precedes (Prims.list X64.Machine_s.reg)
(Prims.list X64.Machine_s.reg)
@x3
x_136fd5270a258ddaaad5b0c5f45f8938_0)
)


;; def=X64.Vale.StrongPost_i.fst(25,31-30,43); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(and 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(25,31-25,35); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Machine_s.reg)
(Prims.list X64.Machine_s.reg)
@x3
x_136fd5270a258ddaaad5b0c5f45f8938_0)
)


;; def=X64.Vale.StrongPost_i.fst(28,2-30,43); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(28,2-30,43); use=X64.Vale.StrongPost_i.fst(30,42-30,43)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(25,47-25,48); use=X64.Vale.StrongPost_i.fst(28,2-30,43)
(= x_de52c7fd4c52e1942aeef9a9143c43bf_1
@x4)
)

;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(30,15-30,36)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(30,15-30,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(30,15-30,36)
(X64.Vale.StrongPost_i.regs_match @x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(30,15-30,36)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(30,15-30,36)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.7))
)
)
 
;;no pats
:qid @query.6))
)
 
;;no pats
:qid @query.5))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.lemma_regs_match_self, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_X64.Vale.StrongPost_i.regs_match.fuel_instrumented, @fuel_irrelevance_X64.Vale.StrongPost_i.regs_match.fuel_instrumented, @query, X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7, binder_x_136fd5270a258ddaaad5b0c5f45f8938_0, binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1, constructor_distinct_Prims.Cons, constructor_distinct_Prims.Nil, disc_equation_Prims.Cons, disc_equation_Prims.Nil, eq2-interp, equality_tok_X64.Machine_s.Rsp@tok, equation_X64.Machine_s.nat64, equation_with_fuel_X64.Vale.StrongPost_i.regs_match.fuel_instrumented, fuel_guarded_inversion_Prims.list, fuel_guarded_inversion_X64.Vale.State_i.state, l_and-interp, projection_inverse_BoxBool_proj_0, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_Prims.Nil_a, subterm_ordering_Prims.Cons, true_interp, typing_tok_X64.Machine_s.Rsp@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec lemma_regs_match_self


; <Start encoding let rec lemma_regs_match_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_regs_match_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_regs_match_self@tok () Term)

; </end encoding let rec lemma_regs_match_self>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Regs_i.equal; Namespace X64.Vale.Regs_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(25,4-25,9); use=X64.Vale.Regs_i.fsti(25,4-25,9)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.Regs_i.t)
(HasType @x1
X64.Vale.Regs_i.t))
(HasType (X64.Vale.Regs_i.equal @x0
@x1)
Tm_type))
 

:pattern ((X64.Vale.Regs_i.equal @x0
@x1))
:qid typing_X64.Vale.Regs_i.equal))

:named typing_X64.Vale.Regs_i.equal))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.Regs_i.lemma_equal_intro
;;; Fact-ids: Name X64.Vale.Regs_i.lemma_equal_intro; Namespace X64.Vale.Regs_i
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.Regs_i.t)
(HasType @x1
X64.Vale.Regs_i.t)

;; def=X64.Vale.Regs_i.fsti(28,12-28,40); use=X64.Vale.Regs_i.fsti(28,12-28,40)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Machine_s.reg)

;; def=X64.Vale.Regs_i.fsti(28,22-28,40); use=X64.Vale.Regs_i.fsti(28,22-28,40)
(= (ApplyTT @x0
@x2)
(ApplyTT @x1
@x2))
)
 
;;no pats
:qid lemma_X64.Vale.Regs_i.lemma_equal_intro.1))
)

;; def=X64.Vale.Regs_i.fsti(29,11-29,28); use=X64.Vale.Regs_i.fsti(29,11-29,28)
(Valid 
;; def=X64.Vale.Regs_i.fsti(29,11-29,28); use=X64.Vale.Regs_i.fsti(29,11-29,28)
(X64.Vale.Regs_i.equal @x0
@x1)
)
)
 

:pattern ((X64.Vale.Regs_i.equal @x0
@x1))
:qid lemma_X64.Vale.Regs_i.lemma_equal_intro))
:named lemma_X64.Vale.Regs_i.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.Regs_i.lemma_equal_elim
;;; Fact-ids: Name X64.Vale.Regs_i.lemma_equal_elim; Namespace X64.Vale.Regs_i
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.Regs_i.t)
(HasType @x1
X64.Vale.Regs_i.t)

;; def=X64.Vale.Regs_i.fsti(33,12-33,29); use=X64.Vale.Regs_i.fsti(33,12-33,29)
(Valid 
;; def=X64.Vale.Regs_i.fsti(33,12-33,29); use=X64.Vale.Regs_i.fsti(33,12-33,29)
(X64.Vale.Regs_i.equal @x0
@x1)
)
)

;; def=X64.Vale.Regs_i.fsti(34,11-34,25); use=X64.Vale.Regs_i.fsti(34,11-34,25)
(= @x0
@x1)
)
 

:pattern ((X64.Vale.Regs_i.equal @x0
@x1))
:qid lemma_X64.Vale.Regs_i.lemma_equal_elim))
:named lemma_X64.Vale.Regs_i.lemma_equal_elim))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(35,2-35,4)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (r: X64.Machine_s.reg)
;   (v: X64.Machine_s.nat64)
;   (s1: X64.Vale.State_i.state)
;   (s2: X64.Vale.State_i.state).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     X64.Vale.Regs_i.equal (X64.Vale.State_i.update_reg r v s1).regs s2.regs /\
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.State_i.update_reg r v s1).regs == s2.regs ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_update_reg_equal`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.reg)
(HasType @x1
X64.Machine_s.nat64)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(33,12-33,59); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(33,12-33,59); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(X64.Vale.Regs_i.equal (X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x0
@x1
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3))
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(34,11-34,48); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(or label_2

;; def=X64.Vale.StrongPost_i.fst(34,11-34,48); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(= (X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg @x0
@x1
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3))
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(35,2-35,4)
(ApplyTT @x4
@x5)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x4
@x5)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.lemma_update_reg_equal, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query, lemma_X64.Vale.Regs_i.lemma_equal_elim, typing_X64.Vale.State_i.__proj__Mkstate__item__regs, typing_X64.Vale.State_i.update_reg

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_update_reg_equal


; <Start encoding let lemma_update_reg_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_update_reg_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_update_reg_equal@tok () Term)

; </end encoding let lemma_update_reg_equal>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(40,4-40,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Type).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     p /\ (forall (pure_result: Prims.unit). p ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let assert_from_norm'`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(37,23-37,24); use=X64.Vale.StrongPost_i.fst(38,66-38,67)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(37,23-37,24); use=X64.Vale.StrongPost_i.fst(38,66-38,67)
@x0
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(40,4-40,6)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(37,23-37,24); use=X64.Vale.StrongPost_i.fst(39,11-39,12)
(or label_2

;; def=X64.Vale.StrongPost_i.fst(37,23-37,24); use=X64.Vale.StrongPost_i.fst(39,11-39,12)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(37,23-37,24); use=X64.Vale.StrongPost_i.fst(39,11-39,12)
@x0
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(40,4-40,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(40,4-40,6)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(40,4-40,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(40,4-40,6)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.assert_from_norm', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let assert_from_norm'


; <Start encoding let assert_from_norm'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.assert_from_norm_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.assert_from_norm_@tok () Term)

; </end encoding let assert_from_norm'>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(45,4-45,6)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (p: Type).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     p /\ (forall (pure_result: Prims.unit). p ==> p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let assert_to_norm'`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(42,21-42,22); use=X64.Vale.StrongPost_i.fst(43,12-43,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(42,21-42,22); use=X64.Vale.StrongPost_i.fst(43,12-43,13)
@x0
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(45,4-45,6)
(forall ((@x2 Term))
 (! (implies (and (or label_1
(HasType @x2
Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(42,21-42,22); use=X64.Vale.StrongPost_i.fst(44,65-44,66)
(or label_2

;; def=X64.Vale.StrongPost_i.fst(42,21-42,22); use=X64.Vale.StrongPost_i.fst(44,65-44,66)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(42,21-42,22); use=X64.Vale.StrongPost_i.fst(44,65-44,66)
@x0
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(45,4-45,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(45,4-45,6)
(ApplyTT @x1
@x2)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(45,4-45,6)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(45,4-45,6)
(ApplyTT @x1
@x2)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x2 Term))
 (! (implies (HasType @x2
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x1
@x2)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.assert_to_norm', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let assert_to_norm'


; <Start encoding let assert_to_norm'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.assert_to_norm_ (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.assert_to_norm_@tok () Term)

; </end encoding let assert_to_norm'>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.valid_operand; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(76,4-76,17); use=X64.Vale.State_i.fsti(76,4-76,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.valid_operand @x0
@x1)
Tm_type))
 

:pattern ((X64.Vale.State_i.valid_operand @x0
@x1))
:qid typing_X64.Vale.State_i.valid_operand))

:named typing_X64.Vale.State_i.valid_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.valid_maddr; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(73,4-73,15); use=X64.Vale.State_i.fsti(73,4-73,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.maddr)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.valid_maddr @x0
@x1)
Tm_type))
 

:pattern ((X64.Vale.State_i.valid_maddr @x0
@x1))
:qid typing_X64.Vale.State_i.valid_maddr))

:named typing_X64.Vale.State_i.valid_maddr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.state_eq; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(82,4-82,12); use=X64.Vale.State_i.fsti(82,4-82,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.state_eq @x0
@x1)
Tm_type))
 

:pattern ((X64.Vale.State_i.state_eq @x0
@x1))
:qid typing_X64.Vale.State_i.state_eq))

:named typing_X64.Vale.State_i.state_eq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.eval_operand; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(62,4-62,16); use=X64.Vale.State_i.fsti(62,4-62,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.eval_operand @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Vale.State_i.eval_operand @x0
@x1))
:qid typing_X64.Vale.State_i.eval_operand))

:named typing_X64.Vale.State_i.eval_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.add_wrap; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(88,4-88,12); use=X64.Vale.State_i.fsti(88,4-88,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (X64.Vale.State_i.add_wrap @x0
@x1)
Prims.int))
 

:pattern ((X64.Vale.State_i.add_wrap @x0
@x1))
:qid typing_X64.Vale.State_i.add_wrap))

:named typing_X64.Vale.State_i.add_wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_update_operand; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(118,4-118,21); use=X64.Vale.Decls.fsti(118,4-118,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.Decls.va_update_operand @x0
@x1
@x2)
X64.Vale.State_i.state))
 

:pattern ((X64.Vale.Decls.va_update_operand @x0
@x1
@x2))
:qid typing_X64.Vale.Decls.va_update_operand))

:named typing_X64.Vale.Decls.va_update_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_state_eq; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(169,4-169,15); use=X64.Vale.Decls.fsti(169,4-169,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.Decls.va_state_eq @x0
@x1)
Tm_type))
 

:pattern ((X64.Vale.Decls.va_state_eq @x0
@x1))
:qid typing_X64.Vale.Decls.va_state_eq))

:named typing_X64.Vale.Decls.va_state_eq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_require; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(171,4-171,14); use=X64.Vale.Decls.fsti(171,4-171,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state))
(HasType (X64.Vale.Decls.va_require @x0
@x1
@x2
@x3)
Tm_type))
 

:pattern ((X64.Vale.Decls.va_require @x0
@x1
@x2
@x3))
:qid typing_X64.Vale.Decls.va_require))

:named typing_X64.Vale.Decls.va_require))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Sub64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(388,4-388,18); use=X64.Vale.Decls.fsti(388,4-388,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(391,13-391,67); use=X64.Vale.Decls.fsti(391,13-391,67)
(Valid 
;; def=X64.Vale.Decls.fsti(391,13-391,67); use=X64.Vale.Decls.fsti(391,13-391,67)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Sub64 @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(392,5-392,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(392,5-392,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(392,49-392,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(392,49-392,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(392,88-393,10); use=X64.Vale.Decls.fsti(392,88-393,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.Decls.fsti(393,14-393,94); use=X64.Vale.Decls.fsti(393,14-393,94)
(<= 0
(- (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x3
@x1))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x4
@x1))))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_Sub64 @x0
@x1
@x2
@x3
@x4)
(Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_Sub64 @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_Sub64))

:named typing_X64.Vale.Decls.va_lemma_Sub64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Store64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(315,4-315,20); use=X64.Vale.Decls.fsti(315,4-315,20)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(318,13-318,76); use=X64.Vale.Decls.fsti(318,13-318,76)
(Valid 
;; def=X64.Vale.Decls.fsti(318,13-318,76); use=X64.Vale.Decls.fsti(318,13-318,76)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Store64 @x3
@x4
@x5)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(319,4-319,44); use=X64.Vale.Decls.fsti(319,4-319,44)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x3))


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(319,49-319,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(319,49-319,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(319,88-320,10); use=X64.Vale.Decls.fsti(319,88-320,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.Decls.fsti(320,14-321,12); use=X64.Vale.Decls.fsti(320,14-321,12)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.__proj__OReg__item__r @x3)))
(BoxInt_proj_0 @x5)))))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.Decls.va_reg_operand)
(HasType @x4
X64.Machine_s.operand)
(HasType @x5
Prims.int))
(HasType (X64.Vale.Decls.va_lemma_Store64 @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x0
@x1
@x2
@x3
@x5
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_Store64 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_X64.Vale.Decls.va_lemma_Store64))

:named typing_X64.Vale.Decls.va_lemma_Store64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Shr64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(480,4-480,18); use=X64.Vale.Decls.fsti(480,4-480,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(483,13-483,67); use=X64.Vale.Decls.fsti(483,13-483,67)
(Valid 
;; def=X64.Vale.Decls.fsti(483,13-483,67); use=X64.Vale.Decls.fsti(483,13-483,67)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Shr64 @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(484,5-484,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(484,5-484,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(485,4-485,21); use=X64.Vale.Decls.fsti(485,4-485,21)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_Shr64 @x0
@x1
@x2
@x3
@x4)
(Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_Shr64 @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_Shr64))

:named typing_X64.Vale.Decls.va_lemma_Shr64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mul64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(414,4-414,22); use=X64.Vale.Decls.fsti(414,4-414,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(416,13-416,67); use=X64.Vale.Decls.fsti(416,13-416,67)
(Valid 
;; def=X64.Vale.Decls.fsti(416,13-416,67); use=X64.Vale.Decls.fsti(416,13-416,67)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Mul64Wrap @x3)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(416,72-416,96)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(416,72-416,96)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(417,18-417,35); use=X64.Vale.Decls.fsti(417,18-417,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_Mul64Wrap @x0
@x1
@x2
@x3)
(Tm_refine_bf232d3bec88d8127293677ade6212f6 @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Vale.Decls.va_lemma_Mul64Wrap @x0
@x1
@x2
@x3))
:qid typing_X64.Vale.Decls.va_lemma_Mul64Wrap))

:named typing_X64.Vale.Decls.va_lemma_Mul64Wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mov64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(289,4-289,18); use=X64.Vale.Decls.fsti(289,4-289,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(292,13-292,67); use=X64.Vale.Decls.fsti(292,13-292,67)
(Valid 
;; def=X64.Vale.Decls.fsti(292,13-292,67); use=X64.Vale.Decls.fsti(292,13-292,67)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Mov64 @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(293,5-293,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(293,5-293,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(293,49-293,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(293,49-293,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(293,88-294,10); use=X64.Vale.Decls.fsti(293,88-294,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_Mov64 @x0
@x1
@x2
@x3
@x4)
(Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_Mov64 @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_Mov64))

:named typing_X64.Vale.Decls.va_lemma_Mov64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Load64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(301,4-301,19); use=X64.Vale.Decls.fsti(301,4-301,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(304,13-304,75); use=X64.Vale.Decls.fsti(304,13-304,75)
(Valid 
;; def=X64.Vale.Decls.fsti(304,13-304,75); use=X64.Vale.Decls.fsti(304,13-304,75)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Load64 @x3
@x4
@x5)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(305,5-305,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(305,5-305,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(305,48-305,88); use=X64.Vale.Decls.fsti(305,48-305,88)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x4))


;; def=X64.Vale.Decls.fsti(306,4-306,21); use=X64.Vale.Decls.fsti(306,4-306,21)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.Decls.fsti(306,25-307,14); use=X64.Vale.Decls.fsti(306,25-307,14)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.__proj__OReg__item__r @x4)))
(BoxInt_proj_0 @x5)))))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Vale.Decls.va_reg_operand)
(HasType @x5
Prims.int))
(HasType (X64.Vale.Decls.va_lemma_Load64 @x0
@x1
@x2
@x3
@x4
@x5)
(Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((X64.Vale.Decls.va_lemma_Load64 @x0
@x1
@x2
@x3
@x4
@x5))
:qid typing_X64.Vale.Decls.va_lemma_Load64))

:named typing_X64.Vale.Decls.va_lemma_Load64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_IMul64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(426,4-426,19); use=X64.Vale.Decls.fsti(426,4-426,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(429,13-429,68); use=X64.Vale.Decls.fsti(429,13-429,68)
(Valid 
;; def=X64.Vale.Decls.fsti(429,13-429,68); use=X64.Vale.Decls.fsti(429,13-429,68)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_IMul64 @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(430,5-430,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(430,5-430,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(430,49-430,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(430,49-430,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(430,88-431,10); use=X64.Vale.Decls.fsti(430,88-431,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.Decls.fsti(431,14-432,20); use=X64.Vale.Decls.fsti(431,14-432,20)
(< (_mul (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x3
@x1))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x4
@x1)))
18446744073709551616)

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_IMul64 @x0
@x1
@x2
@x3
@x4)
(Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_IMul64 @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_IMul64))

:named typing_X64.Vale.Decls.va_lemma_IMul64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_And64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(454,4-454,18); use=X64.Vale.Decls.fsti(454,4-454,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(457,13-457,67); use=X64.Vale.Decls.fsti(457,13-457,67)
(Valid 
;; def=X64.Vale.Decls.fsti(457,13-457,67); use=X64.Vale.Decls.fsti(457,13-457,67)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_And64 @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(458,5-458,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(458,5-458,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(458,49-458,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(458,49-458,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(458,88-459,10); use=X64.Vale.Decls.fsti(458,88-459,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_And64 @x0
@x1
@x2
@x3
@x4)
(Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_And64 @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_And64))

:named typing_X64.Vale.Decls.va_lemma_And64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Add64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(343,4-343,22); use=X64.Vale.Decls.fsti(343,4-343,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(346,13-346,71); use=X64.Vale.Decls.fsti(346,13-346,71)
(Valid 
;; def=X64.Vale.Decls.fsti(346,13-346,71); use=X64.Vale.Decls.fsti(346,13-346,71)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Add64Wrap @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(347,5-347,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(347,5-347,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(347,49-347,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(347,49-347,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(347,88-348,10); use=X64.Vale.Decls.fsti(347,88-348,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_Add64Wrap @x0
@x1
@x2
@x3
@x4)
(Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_Add64Wrap @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_Add64Wrap))

:named typing_X64.Vale.Decls.va_lemma_Add64Wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Adc64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(372,4-372,22); use=X64.Vale.Decls.fsti(372,4-372,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(375,13-375,71); use=X64.Vale.Decls.fsti(375,13-375,71)
(Valid 
;; def=X64.Vale.Decls.fsti(375,13-375,71); use=X64.Vale.Decls.fsti(375,13-375,71)
(X64.Vale.Decls.va_require @x0
(X64.Vale.Decls.va_code_Adc64Wrap @x3
@x4)
@x1
@x2)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(376,5-376,33)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.Decls.fsti(376,5-376,33)
(X64.Vale.State_i.valid_operand @x3
@x1)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(376,49-376,73)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.Decls.fsti(376,49-376,73)
(X64.Vale.State_i.valid_operand @x4
@x1)
)


;; def=X64.Vale.Decls.fsti(376,88-377,10); use=X64.Vale.Decls.fsti(376,88-377,10)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))

(HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Machine_s.dst_op)
(HasType @x4
X64.Machine_s.operand))
(HasType (X64.Vale.Decls.va_lemma_Adc64Wrap @x0
@x1
@x2
@x3
@x4)
(Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Vale.Decls.va_lemma_Adc64Wrap @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_lemma_Adc64Wrap))

:named typing_X64.Vale.Decls.va_lemma_Adc64Wrap))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_ensure; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(176,4-176,13); use=X64.Vale.Decls.fsti(176,4-176,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
X64.Vale.State_i.state))
(HasType (X64.Vale.Decls.va_ensure @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((X64.Vale.Decls.va_ensure @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Decls.va_ensure))

:named typing_X64.Vale.Decls.va_ensure))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,11-28,23); use=X64.Machine_s.fst(28,11-28,23)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.int)
(HasType (X64.Machine_s.int_to_nat64 @x0)
(Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)))
 

:pattern ((X64.Machine_s.int_to_nat64 @x0))
:qid typing_X64.Machine_s.int_to_nat64))

:named typing_X64.Machine_s.int_to_nat64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! 
;; def=Prims.fst(616,20-616,22); use=Prims.fst(616,20-616,22)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 @x0)))
(HasType (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.list @x0)))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid typing_Prims.__proj__Cons__item__tl))

:named typing_Prims.__proj__Cons__item__tl))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.equal; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(167,4-167,9); use=FStar.Map.fsti(167,4-167,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
(FStar.Map.t @x0
@x1)))
(HasType (FStar.Map.equal @x0
@x1
@x2
@x3)
Prims.prop))
 

:pattern ((FStar.Map.equal @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.equal))

:named typing_FStar.Map.equal))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Sub64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(390,11-390,32); use=X64.Vale.Decls.fsti(390,11-390,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6))

:named refinement_kinding_Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Shr64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(482,11-482,32); use=X64.Vale.Decls.fsti(482,11-482,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69))

:named refinement_kinding_Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Adc64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(374,11-374,32); use=X64.Vale.Decls.fsti(374,11-374,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c))

:named refinement_kinding_Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mul64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(415,11-415,32); use=X64.Vale.Decls.fsti(415,11-415,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (HasType (Tm_refine_bf232d3bec88d8127293677ade6212f6 @x0
@x1
@x2
@x3)
Tm_type)
 

:pattern ((HasType (Tm_refine_bf232d3bec88d8127293677ade6212f6 @x0
@x1
@x2
@x3)
Tm_type))
:qid refinement_kinding_Tm_refine_bf232d3bec88d8127293677ade6212f6))

:named refinement_kinding_Tm_refine_bf232d3bec88d8127293677ade6212f6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mov64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(291,11-291,32); use=X64.Vale.Decls.fsti(291,11-291,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_aeaf3d355722e3eefc4cf25c317d331e))

:named refinement_kinding_Tm_refine_aeaf3d355722e3eefc4cf25c317d331e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_And64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(456,11-456,32); use=X64.Vale.Decls.fsti(456,11-456,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_90e29103d2094b2e7f2859b0ede9ee29))

:named refinement_kinding_Tm_refine_90e29103d2094b2e7f2859b0ede9ee29))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Add64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(345,11-345,32); use=X64.Vale.Decls.fsti(345,11-345,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_7e7d860c9a7f82e99838e098518d6f0b))

:named refinement_kinding_Tm_refine_7e7d860c9a7f82e99838e098518d6f0b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Store64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(317,11-317,32); use=X64.Vale.Decls.fsti(317,11-317,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_74984ba0cb0da7a366a6d33bf1929b63))

:named refinement_kinding_Tm_refine_74984ba0cb0da7a366a6d33bf1929b63))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_IMul64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(428,11-428,32); use=X64.Vale.Decls.fsti(428,11-428,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_432928d5ebcfc11189e56c5c97f803b7))

:named refinement_kinding_Tm_refine_432928d5ebcfc11189e56c5c97f803b7))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,35-28,78); use=X64.Machine_s.fst(28,35-28,78)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))

:named refinement_kinding_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Load64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(303,11-303,32); use=X64.Vale.Decls.fsti(303,11-303,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (HasType (Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type)
 

:pattern ((HasType (Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x0
@x1
@x2
@x3
@x4
@x5)
Tm_type))
:qid refinement_kinding_Tm_refine_059fb7e36b37aa500817c1dfb9940fd8))

:named refinement_kinding_Tm_refine_059fb7e36b37aa500817c1dfb9940fd8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Sub64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(390,11-390,32); use=X64.Vale.Decls.fsti(390,11-390,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(394,56-397,96); use=X64.Vale.Decls.fsti(394,56-397,96)
(and 
;; def=X64.Vale.Decls.fsti(394,57-394,98); use=X64.Vale.Decls.fsti(394,57-394,98)
(Valid 
;; def=X64.Vale.Decls.fsti(394,57-394,98); use=X64.Vale.Decls.fsti(394,57-394,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(395,7-395,24); use=X64.Vale.Decls.fsti(395,7-395,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.State_i.fsti(90,38-90,46); use=X64.Vale.Decls.fsti(395,29-395,35)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(BoxInt (- (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x5
@x3))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x6
@x3)))))


;; def=X64.Vale.Decls.fsti(396,86-397,95); use=X64.Vale.Decls.fsti(396,86-397,95)
(Valid 
;; def=X64.Vale.Decls.fsti(396,86-397,95); use=X64.Vale.Decls.fsti(396,86-397,95)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6))

:named refinement_interpretation_Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Shr64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(482,11-482,32); use=X64.Vale.Decls.fsti(482,11-482,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(486,56-489,96); use=X64.Vale.Decls.fsti(486,56-489,96)
(and 
;; def=X64.Vale.Decls.fsti(486,57-486,98); use=X64.Vale.Decls.fsti(486,57-486,98)
(Valid 
;; def=X64.Vale.Decls.fsti(486,57-486,98); use=X64.Vale.Decls.fsti(486,57-486,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(487,7-487,24); use=X64.Vale.Decls.fsti(487,7-487,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.Decls.fsti(487,28-488,80); use=X64.Vale.Decls.fsti(487,28-488,80)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.Decls.shift_right64 (X64.Vale.State_i.eval_operand @x5
@x3)
(X64.Vale.State_i.eval_operand @x6
@x3)))


;; def=X64.Vale.Decls.fsti(488,84-489,95); use=X64.Vale.Decls.fsti(488,84-489,95)
(Valid 
;; def=X64.Vale.Decls.fsti(488,84-489,95); use=X64.Vale.Decls.fsti(488,84-489,95)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69))

:named refinement_interpretation_Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Adc64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(374,11-374,32); use=X64.Vale.Decls.fsti(374,11-374,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(378,56-384,67); use=X64.Vale.Decls.fsti(378,56-384,67)
(and 
;; def=X64.Vale.Decls.fsti(378,57-378,98); use=X64.Vale.Decls.fsti(378,57-378,98)
(Valid 
;; def=X64.Vale.Decls.fsti(378,57-378,98); use=X64.Vale.Decls.fsti(378,57-378,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(379,7-379,24); use=X64.Vale.Decls.fsti(379,7-379,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.Decls.fsti(379,28-381,41); use=X64.Vale.Decls.fsti(379,28-381,41)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.add_wrap (X64.Vale.State_i.add_wrap (X64.Vale.State_i.eval_operand @x5
@x3)
(X64.Vale.State_i.eval_operand @x6
@x3))
(let ((@lb8 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags @x3))))
(ite (= @lb8
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))


;; def=X64.Vale.Decls.fsti(381,45-383,54); use=X64.Vale.Decls.fsti(381,45-383,54)
(= (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(Prims.op_GreaterThanOrEqual (BoxInt (+ (+ (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x5
@x3))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x6
@x3)))
(BoxInt_proj_0 (let ((@lb8 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags @x3))))
(ite (= @lb8
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))))
(BoxInt 18446744073709551616)))


;; def=X64.Vale.Decls.fsti(383,58-384,66); use=X64.Vale.Decls.fsti(383,58-384,66)
(Valid 
;; def=X64.Vale.Decls.fsti(383,58-384,66); use=X64.Vale.Decls.fsti(383,58-384,66)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c))

:named refinement_interpretation_Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mul64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(415,11-415,32); use=X64.Vale.Decls.fsti(415,11-415,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bf232d3bec88d8127293677ade6212f6 @x2
@x3
@x4
@x5))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb6 @x1))

;; def=X64.Vale.Decls.fsti(418,56-422,21); use=X64.Vale.Decls.fsti(418,56-422,21)
(and 
;; def=X64.Vale.Decls.fsti(418,57-418,98); use=X64.Vale.Decls.fsti(418,57-418,98)
(Valid 
;; def=X64.Vale.Decls.fsti(418,57-418,98); use=X64.Vale.Decls.fsti(418,57-418,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb6)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb6)
@x4)
)


;; def=X64.Vale.Decls.fsti(419,7-419,24); use=X64.Vale.Decls.fsti(419,7-419,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6)))


;; def=X64.Vale.Decls.fsti(419,28-420,78); use=X64.Vale.Decls.fsti(419,28-420,78)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb6))
X64.Machine_s.Rdx@tok)))
(BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb6))
X64.Machine_s.Rax@tok)))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x3)
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x5
@x3))))


;; def=X64.Vale.Decls.fsti(420,82-422,20); use=X64.Vale.Decls.fsti(420,82-422,20)
(Valid 
;; def=X64.Vale.Decls.fsti(420,82-422,20); use=X64.Vale.Decls.fsti(420,82-422,20)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb6)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb6))
X64.Machine_s.Rdx@tok)
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb6))
X64.Machine_s.Rax@tok)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bf232d3bec88d8127293677ade6212f6 @x2
@x3
@x4
@x5)))
:qid refinement_interpretation_Tm_refine_bf232d3bec88d8127293677ade6212f6))

:named refinement_interpretation_Tm_refine_bf232d3bec88d8127293677ade6212f6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mov64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(291,11-291,32); use=X64.Vale.Decls.fsti(291,11-291,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(295,56-297,93); use=X64.Vale.Decls.fsti(295,56-297,93)
(and 
;; def=X64.Vale.Decls.fsti(295,57-295,98); use=X64.Vale.Decls.fsti(295,57-295,98)
(Valid 
;; def=X64.Vale.Decls.fsti(295,57-295,98); use=X64.Vale.Decls.fsti(295,57-295,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(296,7-296,24); use=X64.Vale.Decls.fsti(296,7-296,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.Decls.fsti(296,28-297,8); use=X64.Vale.Decls.fsti(296,28-297,8)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.eval_operand @x6
@x3))


;; def=X64.Vale.Decls.fsti(297,12-297,92); use=X64.Vale.Decls.fsti(297,12-297,92)
(Valid 
;; def=X64.Vale.Decls.fsti(297,12-297,92); use=X64.Vale.Decls.fsti(297,12-297,92)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_aeaf3d355722e3eefc4cf25c317d331e))

:named refinement_interpretation_Tm_refine_aeaf3d355722e3eefc4cf25c317d331e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_And64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(456,11-456,32); use=X64.Vale.Decls.fsti(456,11-456,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(460,56-463,96); use=X64.Vale.Decls.fsti(460,56-463,96)
(and 
;; def=X64.Vale.Decls.fsti(460,57-460,98); use=X64.Vale.Decls.fsti(460,57-460,98)
(Valid 
;; def=X64.Vale.Decls.fsti(460,57-460,98); use=X64.Vale.Decls.fsti(460,57-460,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(461,7-461,24); use=X64.Vale.Decls.fsti(461,7-461,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.Decls.fsti(461,28-462,78); use=X64.Vale.Decls.fsti(461,28-462,78)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.Decls.logand64 (X64.Vale.State_i.eval_operand @x5
@x3)
(X64.Vale.State_i.eval_operand @x6
@x3)))


;; def=X64.Vale.Decls.fsti(462,82-463,95); use=X64.Vale.Decls.fsti(462,82-463,95)
(Valid 
;; def=X64.Vale.Decls.fsti(462,82-463,95); use=X64.Vale.Decls.fsti(462,82-463,95)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_90e29103d2094b2e7f2859b0ede9ee29))

:named refinement_interpretation_Tm_refine_90e29103d2094b2e7f2859b0ede9ee29))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Add64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(345,11-345,32); use=X64.Vale.Decls.fsti(345,11-345,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(349,56-354,47); use=X64.Vale.Decls.fsti(349,56-354,47)
(and 
;; def=X64.Vale.Decls.fsti(349,57-349,98); use=X64.Vale.Decls.fsti(349,57-349,98)
(Valid 
;; def=X64.Vale.Decls.fsti(349,57-349,98); use=X64.Vale.Decls.fsti(349,57-349,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(350,7-350,24); use=X64.Vale.Decls.fsti(350,7-350,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.Decls.fsti(350,28-351,78); use=X64.Vale.Decls.fsti(350,28-351,78)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.add_wrap (X64.Vale.State_i.eval_operand @x5
@x3)
(X64.Vale.State_i.eval_operand @x6
@x3)))


;; def=X64.Vale.Decls.fsti(351,82-353,14); use=X64.Vale.Decls.fsti(351,82-353,14)
(= (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(Prims.op_GreaterThanOrEqual (BoxInt (+ (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x5
@x3))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x6
@x3))))
(BoxInt 18446744073709551616)))


;; def=X64.Vale.Decls.fsti(353,18-354,46); use=X64.Vale.Decls.fsti(353,18-354,46)
(Valid 
;; def=X64.Vale.Decls.fsti(353,18-354,46); use=X64.Vale.Decls.fsti(353,18-354,46)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_7e7d860c9a7f82e99838e098518d6f0b))

:named refinement_interpretation_Tm_refine_7e7d860c9a7f82e99838e098518d6f0b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Store64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(317,11-317,32); use=X64.Vale.Decls.fsti(317,11-317,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb8 @x1))

;; def=X64.Vale.Decls.fsti(322,56-325,73); use=X64.Vale.Decls.fsti(322,56-325,73)
(and 
;; def=X64.Vale.Decls.fsti(322,57-322,98); use=X64.Vale.Decls.fsti(322,57-322,98)
(Valid 
;; def=X64.Vale.Decls.fsti(322,57-322,98); use=X64.Vale.Decls.fsti(322,57-322,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb8)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x4)
)


;; def=X64.Vale.Decls.fsti(323,7-323,24); use=X64.Vale.Decls.fsti(323,7-323,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb8)))


;; def=X64.Vale.Decls.fsti(323,28-324,89); use=X64.Vale.Decls.fsti(323,28-324,89)
(= (X64.Vale.State_i.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb8))
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x3)
(X64.Machine_s.__proj__OReg__item__r @x5)))
(BoxInt_proj_0 @x6)))
(X64.Vale.State_i.eval_operand @x7
@x3)))


;; def=X64.Vale.Decls.fsti(325,4-325,72); use=X64.Vale.Decls.fsti(325,4-325,72)
(Valid 
;; def=X64.Vale.Decls.fsti(325,4-325,72); use=X64.Vale.Decls.fsti(325,4-325,72)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb8)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb8))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb8))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb8))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x3)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x3)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x3)))
(X64.Vale.State_i.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb8))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_74984ba0cb0da7a366a6d33bf1929b63))

:named refinement_interpretation_Tm_refine_74984ba0cb0da7a366a6d33bf1929b63))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_IMul64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(428,11-428,32); use=X64.Vale.Decls.fsti(428,11-428,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb7 @x1))

;; def=X64.Vale.Decls.fsti(433,56-437,14); use=X64.Vale.Decls.fsti(433,56-437,14)
(and 
;; def=X64.Vale.Decls.fsti(433,57-433,98); use=X64.Vale.Decls.fsti(433,57-433,98)
(Valid 
;; def=X64.Vale.Decls.fsti(433,57-433,98); use=X64.Vale.Decls.fsti(433,57-433,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)


;; def=X64.Vale.Decls.fsti(434,7-434,24); use=X64.Vale.Decls.fsti(434,7-434,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))


;; def=X64.Vale.State_i.fsti(90,38-90,46); use=X64.Vale.Decls.fsti(434,29-434,35)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7))
(BoxInt (_mul (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x5
@x3))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x6
@x3)))))


;; def=X64.Vale.Decls.fsti(436,4-437,13); use=X64.Vale.Decls.fsti(436,4-437,13)
(Valid 
;; def=X64.Vale.Decls.fsti(436,4-437,13); use=X64.Vale.Decls.fsti(436,4-437,13)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb7)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3))))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_432928d5ebcfc11189e56c5c97f803b7))

:named refinement_interpretation_Tm_refine_432928d5ebcfc11189e56c5c97f803b7))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,35-28,78); use=X64.Machine_s.fst(28,35-28,78)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x2))
(and (HasTypeFuel @u0
@x1
X64.Machine_s.nat64)

;; def=X64.Machine_s.fst(28,43-28,77); use=X64.Machine_s.fst(28,43-28,77)
(implies 
;; def=X64.Machine_s.fst(28,43-28,66); use=X64.Machine_s.fst(28,43-28,66)
(and (BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x2))
(BoxBool_proj_0 (Prims.op_LessThan @x2
(BoxInt 18446744073709551616))))


;; def=X64.Machine_s.fst(28,71-28,77); use=X64.Machine_s.fst(28,71-28,77)
(= @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x2)))
:qid refinement_interpretation_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))

:named refinement_interpretation_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Load64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(303,11-303,32); use=X64.Vale.Decls.fsti(303,11-303,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x2
@x3
@x4
@x5
@x6
@x7))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb8 @x1))

;; def=X64.Vale.Decls.fsti(308,56-311,52); use=X64.Vale.Decls.fsti(308,56-311,52)
(and 
;; def=X64.Vale.Decls.fsti(308,57-308,98); use=X64.Vale.Decls.fsti(308,57-308,98)
(Valid 
;; def=X64.Vale.Decls.fsti(308,57-308,98); use=X64.Vale.Decls.fsti(308,57-308,98)
(X64.Vale.Decls.va_ensure @x2
(FStar.Pervasives.Native.Mktuple2__1 @lb8)
@x3
(FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x4)
)


;; def=X64.Vale.Decls.fsti(309,7-309,24); use=X64.Vale.Decls.fsti(309,7-309,24)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb8)))


;; def=X64.Vale.Decls.fsti(309,28-310,61); use=X64.Vale.Decls.fsti(309,28-310,61)
(= (X64.Vale.State_i.eval_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb8))
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb8))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x3)
(X64.Machine_s.__proj__OReg__item__r @x6)))
(BoxInt_proj_0 @x7)))))


;; def=X64.Vale.Decls.fsti(310,65-311,51); use=X64.Vale.Decls.fsti(310,65-311,51)
(Valid 
;; def=X64.Vale.Decls.fsti(310,65-311,51); use=X64.Vale.Decls.fsti(310,65-311,51)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb8)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb8))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x3))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand @x5
(FStar.Pervasives.Native.Mktuple2__2 @lb8)
@x3))))
)
)
)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x2
@x3
@x4
@x5
@x6
@x7)))
:qid refinement_interpretation_Tm_refine_059fb7e36b37aa500817c1dfb9940fd8))

:named refinement_interpretation_Tm_refine_059fb7e36b37aa500817c1dfb9940fd8))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name Prims.__proj__Cons__item__tl; Namespace Prims
(assert (! 
;; def=Prims.fst(616,20-616,22); use=Prims.fst(616,20-616,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.__proj__Cons__item__tl @x0
@x1)
(Prims.Cons_tl @x1))
 

:pattern ((Prims.__proj__Cons__item__tl @x0
@x1))
:qid proj_equation_Prims.Cons_tl))

:named proj_equation_Prims.Cons_tl))
;;; Fact-ids: Name Prims.op_disEquality; Namespace Prims
(assert (! 
;; def=Prims.fst(594,4-594,18); use=Prims.fst(594,4-594,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_disEquality @x0
@x1
@x2)
(BoxBool (not (= @x1
@x2))))
 

:pattern ((Prims.op_disEquality @x0
@x1
@x2))
:qid primitive_Prims.op_disEquality))

:named primitive_Prims.op_disEquality))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_equal_intro
;;; Fact-ids: Name FStar.Map.lemma_equal_intro; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
(FStar.Map.t @x0
@x1))

;; def=FStar.Map.fsti(173,39-174,75); use=FStar.Map.fsti(173,39-174,75)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=FStar.Map.fsti(173,50-174,74); use=FStar.Map.fsti(173,50-174,74)
(and 
;; def=FStar.Map.fsti(173,50-173,70); use=FStar.Map.fsti(173,50-173,70)
(= (FStar.Map.sel @x0
@x1
@x2
@x4)
(FStar.Map.sel @x0
@x1
@x3
@x4))


;; def=FStar.Map.fsti(174,45-174,74); use=FStar.Map.fsti(174,45-174,74)
(= (FStar.Map.contains @x0
@x1
@x2
@x4)
(FStar.Map.contains @x0
@x1
@x3
@x4))
)
)
 
;;no pats
:qid lemma_FStar.Map.lemma_equal_intro.1))
)

;; def=FStar.Map.fsti(175,38-175,51); use=FStar.Map.fsti(175,38-175,51)
(Valid 
;; def=FStar.Map.fsti(175,38-175,51); use=FStar.Map.fsti(175,38-175,51)
(FStar.Map.equal @x0
@x1
@x2
@x3)
)
)
 

:pattern ((FStar.Map.equal @x0
@x1
@x2
@x3))
:qid lemma_FStar.Map.lemma_equal_intro))
:named lemma_FStar.Map.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_equal_elim
;;; Fact-ids: Name FStar.Map.lemma_equal_elim; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
(FStar.Map.t @x0
@x1)))

;; def=FStar.Map.fsti(183,37-183,64); use=FStar.Map.fsti(183,37-183,64)
(iff 
;; def=FStar.Map.fsti(183,38-183,49); use=FStar.Map.fsti(183,38-183,49)
(Valid 
;; def=FStar.Map.fsti(183,38-183,49); use=FStar.Map.fsti(183,38-183,49)
(FStar.Map.equal @x0
@x1
@x2
@x3)
)


;; def=FStar.Map.fsti(183,55-183,63); use=FStar.Map.fsti(183,55-183,63)
(= @x2
@x3)
)
)
 

:pattern ((FStar.Map.equal @x0
@x1
@x2
@x3))
:qid lemma_FStar.Map.lemma_equal_elim))
:named lemma_FStar.Map.lemma_equal_elim))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Sub64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(390,11-390,32); use=X64.Vale.Decls.fsti(390,11-390,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6))

:named haseqTm_refine_f6afd6a3f237f9a96b7ff2f9d85718e6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Shr64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(482,11-482,32); use=X64.Vale.Decls.fsti(482,11-482,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ebc838a63e6c93c88a7ebbece2bc2b69 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_ebc838a63e6c93c88a7ebbece2bc2b69))

:named haseqTm_refine_ebc838a63e6c93c88a7ebbece2bc2b69))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Adc64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(374,11-374,32); use=X64.Vale.Decls.fsti(374,11-374,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e9b3e2ef72d43c9aa6ae2a423112456c @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_e9b3e2ef72d43c9aa6ae2a423112456c))

:named haseqTm_refine_e9b3e2ef72d43c9aa6ae2a423112456c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bf232d3bec88d8127293677ade6212f6
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mul64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(415,11-415,32); use=X64.Vale.Decls.fsti(415,11-415,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bf232d3bec88d8127293677ade6212f6 @x0
@x1
@x2
@x3)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bf232d3bec88d8127293677ade6212f6 @x0
@x1
@x2
@x3))))
:qid haseqTm_refine_bf232d3bec88d8127293677ade6212f6))

:named haseqTm_refine_bf232d3bec88d8127293677ade6212f6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_aeaf3d355722e3eefc4cf25c317d331e
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Mov64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(291,11-291,32); use=X64.Vale.Decls.fsti(291,11-291,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_aeaf3d355722e3eefc4cf25c317d331e @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_aeaf3d355722e3eefc4cf25c317d331e))

:named haseqTm_refine_aeaf3d355722e3eefc4cf25c317d331e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_90e29103d2094b2e7f2859b0ede9ee29
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_And64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(456,11-456,32); use=X64.Vale.Decls.fsti(456,11-456,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_90e29103d2094b2e7f2859b0ede9ee29 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_90e29103d2094b2e7f2859b0ede9ee29))

:named haseqTm_refine_90e29103d2094b2e7f2859b0ede9ee29))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7e7d860c9a7f82e99838e098518d6f0b
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Add64Wrap; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(345,11-345,32); use=X64.Vale.Decls.fsti(345,11-345,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7e7d860c9a7f82e99838e098518d6f0b @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_7e7d860c9a7f82e99838e098518d6f0b))

:named haseqTm_refine_7e7d860c9a7f82e99838e098518d6f0b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_74984ba0cb0da7a366a6d33bf1929b63
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Store64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(317,11-317,32); use=X64.Vale.Decls.fsti(317,11-317,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_74984ba0cb0da7a366a6d33bf1929b63 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_74984ba0cb0da7a366a6d33bf1929b63))

:named haseqTm_refine_74984ba0cb0da7a366a6d33bf1929b63))
;;;;;;;;;;;;;;;;haseq for Tm_refine_432928d5ebcfc11189e56c5c97f803b7
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_IMul64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(428,11-428,32); use=X64.Vale.Decls.fsti(428,11-428,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_432928d5ebcfc11189e56c5c97f803b7 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_432928d5ebcfc11189e56c5c97f803b7))

:named haseqTm_refine_432928d5ebcfc11189e56c5c97f803b7))
;;;;;;;;;;;;;;;;haseq for Tm_refine_33c23e946048d3d79f362ad9f81ccafe
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,35-28,78); use=X64.Machine_s.fst(28,35-28,78)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)))
(Valid (Prims.hasEq X64.Machine_s.nat64)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0))))
:qid haseqTm_refine_33c23e946048d3d79f362ad9f81ccafe))

:named haseqTm_refine_33c23e946048d3d79f362ad9f81ccafe))
;;;;;;;;;;;;;;;;haseq for Tm_refine_059fb7e36b37aa500817c1dfb9940fd8
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_Load64; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(303,11-303,32); use=X64.Vale.Decls.fsti(303,11-303,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x0
@x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_059fb7e36b37aa500817c1dfb9940fd8 @x0
@x1
@x2
@x3
@x4
@x5))))
:qid haseqTm_refine_059fb7e36b37aa500817c1dfb9940fd8))

:named haseqTm_refine_059fb7e36b37aa500817c1dfb9940fd8))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.valid_operand
;;; Fact-ids: Name X64.Vale.State_i.valid_operand; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(76,4-76,17); use=X64.Vale.State_i.fsti(76,4-76,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.valid_operand @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(Prims.l_and (Prims.b2t (Prims.op_LessThanOrEqual (BoxInt 0)
(X64.Machine_s.OConst_n @lb2)))
(Prims.b2t (Prims.op_LessThan (X64.Machine_s.OConst_n @lb2)
(BoxInt 18446744073709551616))))
(ite (is-X64.Machine_s.OReg @lb2)
Prims.l_True
(ite (is-X64.Machine_s.OMem @lb2)
(X64.Vale.State_i.valid_maddr (X64.Machine_s.OMem_m @lb2)
@x1)
Tm_unit)))))
 

:pattern ((X64.Vale.State_i.valid_operand @x0
@x1))
:qid equation_X64.Vale.State_i.valid_operand))

:named equation_X64.Vale.State_i.valid_operand))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.valid_maddr
;;; Fact-ids: Name X64.Vale.State_i.valid_maddr; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(73,4-73,15); use=X64.Vale.State_i.fsti(73,4-73,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.valid_maddr @x0
@x1)
(Prims.b2t (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(X64.Vale.State_i.eval_maddr @x0
@x1))))
 

:pattern ((X64.Vale.State_i.valid_maddr @x0
@x1))
:qid equation_X64.Vale.State_i.valid_maddr))

:named equation_X64.Vale.State_i.valid_maddr))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.state_eq
;;; Fact-ids: Name X64.Vale.State_i.state_eq; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(82,4-82,12); use=X64.Vale.State_i.fsti(82,4-82,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (X64.Vale.State_i.state_eq @x0
@x1))

;; def=X64.Vale.State_i.fsti(83,2-86,25); use=X64.Vale.State_i.fsti(83,2-86,25)
(and 
;; def=X64.Vale.State_i.fsti(83,2-83,16); use=X64.Vale.State_i.fsti(83,2-83,16)
(= (X64.Vale.State_i.__proj__Mkstate__item__ok @x0)
(X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.State_i.fsti(84,2-84,30); use=X64.Vale.State_i.fsti(84,2-84,30)
(Valid 
;; def=X64.Vale.State_i.fsti(84,2-84,30); use=X64.Vale.State_i.fsti(84,2-84,30)
(X64.Vale.Regs_i.equal (X64.Vale.State_i.__proj__Mkstate__item__regs @x0)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x1))
)


;; def=X64.Vale.State_i.fsti(85,2-85,22); use=X64.Vale.State_i.fsti(85,2-85,22)
(= (X64.Vale.State_i.__proj__Mkstate__item__flags @x0)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x1))


;; def=X64.Vale.State_i.fsti(86,2-86,25); use=X64.Vale.State_i.fsti(86,2-86,25)
(Valid 
;; def=X64.Vale.State_i.fsti(86,2-86,25); use=X64.Vale.State_i.fsti(86,2-86,25)
(FStar.Map.equal Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1))
)
)
)
 

:pattern ((X64.Vale.State_i.state_eq @x0
@x1))
:qid equation_X64.Vale.State_i.state_eq))

:named equation_X64.Vale.State_i.state_eq))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.eval_operand
;;; Fact-ids: Name X64.Vale.State_i.eval_operand; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(62,4-62,16); use=X64.Vale.State_i.fsti(62,4-62,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.eval_operand @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(X64.Machine_s.int_to_nat64 (X64.Machine_s.OConst_n @lb2))
(ite (is-X64.Machine_s.OReg @lb2)
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r @lb2))
(ite (is-X64.Machine_s.OMem @lb2)
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(X64.Vale.State_i.eval_maddr (X64.Machine_s.OMem_m @lb2)
@x1))
Tm_unit)))))
 

:pattern ((X64.Vale.State_i.eval_operand @x0
@x1))
:qid equation_X64.Vale.State_i.eval_operand))

:named equation_X64.Vale.State_i.eval_operand))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.add_wrap
;;; Fact-ids: Name X64.Vale.State_i.add_wrap; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(88,4-88,12); use=X64.Vale.State_i.fsti(88,4-88,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.add_wrap @x0
@x1)
(let ((@lb2 (Prims.op_LessThan (BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))
(BoxInt 18446744073709551616))))
(ite (= @lb2
(BoxBool true))
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))
(BoxInt (- (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))
18446744073709551616)))))
 

:pattern ((X64.Vale.State_i.add_wrap @x0
@x1))
:qid equation_X64.Vale.State_i.add_wrap))

:named equation_X64.Vale.State_i.add_wrap))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Decls.va_update_operand
;;; Fact-ids: Name X64.Vale.Decls.va_update_operand; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(118,4-118,21); use=X64.Vale.Decls.fsti(118,4-118,21)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Vale.Decls.va_update_operand @x0
@x1
@x2)
(let ((@lb3 @x0))
(ite (is-X64.Machine_s.OConst @lb3)
@x2
(ite (is-X64.Machine_s.OReg @lb3)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r @lb3)
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r @lb3))
@x2)
(ite (is-X64.Machine_s.OMem @lb3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok @x2)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1))
Tm_unit)))))
 

:pattern ((X64.Vale.Decls.va_update_operand @x0
@x1
@x2))
:qid equation_X64.Vale.Decls.va_update_operand))

:named equation_X64.Vale.Decls.va_update_operand))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Decls.va_state_eq
;;; Fact-ids: Name X64.Vale.Decls.va_state_eq; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(169,4-169,15); use=X64.Vale.Decls.fsti(169,4-169,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.Decls.va_state_eq @x0
@x1)
(X64.Vale.State_i.state_eq @x0
@x1))
 

:pattern ((X64.Vale.Decls.va_state_eq @x0
@x1))
:qid equation_X64.Vale.Decls.va_state_eq))

:named equation_X64.Vale.Decls.va_state_eq))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Decls.va_require
;;; Fact-ids: Name X64.Vale.Decls.va_require; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(171,4-171,14); use=X64.Vale.Decls.fsti(171,4-171,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (X64.Vale.Decls.va_require @x0
@x1
@x2
@x3))

;; def=X64.Vale.Decls.fsti(172,2-174,34); use=X64.Vale.Decls.fsti(172,2-174,34)
(and 
;; def=X64.Vale.Decls.fsti(172,2-172,13); use=X64.Vale.Decls.fsti(172,2-172,13)
(BoxBool_proj_0 (Prims.uu___is_Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
@x0))


;; def=X64.Vale.Decls.fsti(173,2-173,21); use=X64.Vale.Decls.fsti(173,2-173,21)
(= (Prims.__proj__Cons__item__hd (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
@x0)
@x1)


;; def=X64.Vale.Decls.fsti(174,2-174,34); use=X64.Vale.Decls.fsti(174,2-174,34)
(Valid 
;; def=X64.Vale.Decls.fsti(174,2-174,34); use=X64.Vale.Decls.fsti(174,2-174,34)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
@x0)
@x2
@x3)
)
)
)
 

:pattern ((X64.Vale.Decls.va_require @x0
@x1
@x2
@x3))
:qid equation_X64.Vale.Decls.va_require))

:named equation_X64.Vale.Decls.va_require))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Decls.va_ensure
;;; Fact-ids: Name X64.Vale.Decls.va_ensure; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(176,4-176,13); use=X64.Vale.Decls.fsti(176,4-176,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (Valid (X64.Vale.Decls.va_ensure @x0
@x1
@x2
@x3
@x4))

;; def=X64.Vale.Decls.fsti(177,2-180,31); use=X64.Vale.Decls.fsti(177,2-180,31)
(and 
;; def=X64.Vale.Decls.fsti(177,2-177,10); use=X64.Vale.Decls.fsti(177,2-177,10)
(BoxBool_proj_0 (Prims.uu___is_Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
@x0))


;; def=X64.Vale.Decls.fsti(178,2-178,19); use=X64.Vale.Decls.fsti(178,2-178,19)
(= (Prims.__proj__Cons__item__tl (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
@x0)
@x1)


;; def=X64.Vale.Decls.fsti(179,2-179,31); use=X64.Vale.Decls.fsti(179,2-179,31)
(Valid 
;; def=X64.Vale.Decls.fsti(179,2-179,31); use=X64.Vale.Decls.fsti(179,2-179,31)
(X64.Vale.Decls.eval_code (Prims.__proj__Cons__item__hd (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
@x0)
@x2
@x3)
)


;; def=X64.Vale.Decls.fsti(180,2-180,31); use=X64.Vale.Decls.fsti(180,2-180,31)
(Valid 
;; def=X64.Vale.Decls.fsti(180,2-180,31); use=X64.Vale.Decls.fsti(180,2-180,31)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
@x1)
@x3
@x4)
)
)
)
 

:pattern ((X64.Vale.Decls.va_ensure @x0
@x1
@x2
@x3
@x4))
:qid equation_X64.Vale.Decls.va_ensure))

:named equation_X64.Vale.Decls.va_ensure))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Prop-typing for X64.Vale.State_i.state_eq
;;; Fact-ids: Name X64.Vale.State_i.state_eq; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(82,4-82,12); use=X64.Vale.State_i.fsti(82,4-82,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Vale.State_i.state))
(Valid (Prims.subtype_of (X64.Vale.State_i.state_eq @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (X64.Vale.State_i.state_eq @x0
@x1)
Prims.unit))
:qid defn_equation_X64.Vale.State_i.state_eq))

:named defn_equation_X64.Vale.State_i.state_eq))
;;;;;;;;;;;;;;;;Prop-typing for X64.Vale.Decls.va_require
;;; Fact-ids: Name X64.Vale.Decls.va_require; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(171,4-171,14); use=X64.Vale.Decls.fsti(171,4-171,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
(X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state))
(Valid (Prims.subtype_of (X64.Vale.Decls.va_require @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (X64.Vale.Decls.va_require @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_X64.Vale.Decls.va_require))

:named defn_equation_X64.Vale.Decls.va_require))
;;;;;;;;;;;;;;;;Prop-typing for X64.Vale.Decls.va_ensure
;;; Fact-ids: Name X64.Vale.Decls.va_ensure; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(176,4-176,13); use=X64.Vale.Decls.fsti(176,4-176,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x1
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
X64.Vale.State_i.state))
(Valid (Prims.subtype_of (X64.Vale.Decls.va_ensure @x0
@x1
@x2
@x3
@x4)
Prims.unit)))
 

:pattern ((Prims.subtype_of (X64.Vale.Decls.va_ensure @x0
@x1
@x2
@x3
@x4)
Prims.unit))
:qid defn_equation_X64.Vale.Decls.va_ensure))

:named defn_equation_X64.Vale.Decls.va_ensure))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Vale.StrongPost_i.va_lemma_weakest_pre_norm_wp; Namespace X64.Vale.StrongPost_i
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Vale.StrongPost_i.augment@tok))
:named @kick_partial_app_e810eb95a5c5b613fe55f18eb363cb1c))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(59,44-135,13)

(declare-fun label_67 () Bool)
(declare-fun label_66 () Bool)
(declare-fun label_65 () Bool)
(declare-fun label_64 () Bool)
(declare-fun label_63 () Bool)
(declare-fun label_62 () Bool)
(declare-fun label_61 () Bool)
(declare-fun label_60 () Bool)
(declare-fun label_59 () Bool)
(declare-fun label_58 () Bool)
(declare-fun label_57 () Bool)
(declare-fun label_56 () Bool)
(declare-fun label_55 () Bool)
(declare-fun label_54 () Bool)
(declare-fun label_53 () Bool)
(declare-fun label_52 () Bool)
(declare-fun label_51 () Bool)
(declare-fun label_50 () Bool)
(declare-fun label_49 () Bool)
(declare-fun label_48 () Bool)
(declare-fun label_47 () Bool)
(declare-fun label_46 () Bool)
(declare-fun label_45 () Bool)
(declare-fun label_44 () Bool)
(declare-fun label_43 () Bool)
(declare-fun label_42 () Bool)
(declare-fun label_41 () Bool)
(declare-fun label_40 () Bool)
(declare-fun label_39 () Bool)
(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


(declare-fun Tm_refine_ff50a8c23b926f3de83da6821911823f (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_ff50a8c23b926f3de83da6821911823f @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_ff50a8c23b926f3de83da6821911823f @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_ff50a8c23b926f3de83da6821911823f))

:named refinement_kinding_Tm_refine_ff50a8c23b926f3de83da6821911823f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ff50a8c23b926f3de83da6821911823f @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=X64.Vale.StrongPost_i.fst(50,20-50,25); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))


;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x3
@x4)))
@x2
@x5)
)


;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons X64.Vale.StrongPost_i.ins
@x3
@x4)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x5)
@x6)
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ff50a8c23b926f3de83da6821911823f @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_ff50a8c23b926f3de83da6821911823f))

:named refinement_interpretation_Tm_refine_ff50a8c23b926f3de83da6821911823f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ff50a8c23b926f3de83da6821911823f
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ff50a8c23b926f3de83da6821911823f @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ff50a8c23b926f3de83da6821911823f @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_ff50a8c23b926f3de83da6821911823f))

:named haseqTm_refine_ff50a8c23b926f3de83da6821911823f))























































; Encoding query formula : forall (i: X64.Vale.StrongPost_i.ins)
;   (inss: Prims.list X64.Vale.StrongPost_i.ins)
;   (s0: X64.Vale.State_i.state)
;   (sN: X64.Vale.State_i.state)
;   (post: (_: Prims.unit -> Type)).
;   (forall (sM:
;       _:
;       FStar.Pervasives.Native.option X64.Vale.State_i.state
;         { s0.ok /\
;           X64.Vale.Decls.eval_code (X64.Machine_s.Block
;               (X64.Vale.StrongPost_i.inss_to_codes (i :: inss)))
;             s0
;             sN /\
;           X64.Vale.StrongPost_i.wp_code (i :: inss) (X64.Vale.StrongPost_i.augment sN post) s0 }).
;       (*  - Could not prove post-condition
; *)
;       forall (k: Prims.pure_post Type0).
;         (forall (x: Type0). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;         ~(None? sM) /\ ~(Some? sM) ==> Prims.l_False) /\
;   (forall (p: Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)).
;       s0.ok /\
;       X64.Vale.Decls.eval_code (X64.Machine_s.Block
;           (X64.Vale.StrongPost_i.inss_to_codes (i :: inss)))
;         s0
;         sN /\ X64.Vale.StrongPost_i.wp_code (i :: inss) (X64.Vale.StrongPost_i.augment sN post) s0 /\
;       (forall (ghost_result: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;           (match ghost_result with
;             | FStar.Pervasives.Native.None  -> Prims.l_False
;             | FStar.Pervasives.Native.Some sM ->
;               X64.Vale.Decls.eval_code (X64.Machine_s.Block
;                   (X64.Vale.StrongPost_i.inss_to_codes inss))
;                 sM
;                 sN /\ sM.ok /\
;               X64.Vale.StrongPost_i.wp_code inss (X64.Vale.StrongPost_i.augment sN post) sM) ==>
;           p ghost_result) ==>
;       X64.Vale.StrongPost_i.wp_code (i :: inss) (X64.Vale.StrongPost_i.augment sN post) s0 /\
;       (forall (pure_result: Prims.unit).
;           (match i with
;             | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;             | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               (forall (x: X64.Machine_s.nat64).
;                   x == X64.Vale.StrongPost_i.eval_operand_norm src s0 ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.update_reg dst x s0))
;             | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ ->
;               Prims.l_False
;             | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg dst) (X64.Machine_s.OReg src) offset ->
;               X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (s0.regs src + offset))
;                 s0 /\
;               (forall (x: X64.Machine_s.nat64).
;                   x == FStar.Map.sel s0.mem (s0.regs src + offset) ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.update_reg dst x s0))
;             | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               FStar.Map.contains s0.mem (s0.regs dst + offset) /\
;               (forall (x: X64.Vale.State_i.mem).
;                   x ==
;                   FStar.Map.upd s0.mem
;                     (s0.regs dst + offset)
;                     (X64.Vale.StrongPost_i.eval_operand_norm src s0) ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate s0.ok s0.regs s0.flags x))
;             | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;               Prims.l_False
;             | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                   a == s0.regs dst + X64.Vale.StrongPost_i.eval_operand_norm src s0 /\
;                   x ==
;                   (match a < X64.Machine_s.nat64_max with
;                     | true -> a
;                     | _ -> a - X64.Machine_s.nat64_max) /\
;                   X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                         (X64.Vale.State_i.update_reg dst x s0).regs
;                         f
;                         (X64.Vale.State_i.update_reg dst x s0).mem))
;             | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;               Prims.l_False
;             | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                   a ==
;                   s0.regs dst + X64.Vale.StrongPost_i.eval_operand_norm src s0 +
;                   (match X64.Vale.Decls.cf s0.flags with
;                     | true -> 1
;                     | _ -> 0) /\
;                   x ==
;                   (match a < X64.Machine_s.nat64_max with
;                     | true -> a
;                     | _ -> a - X64.Machine_s.nat64_max) /\
;                   X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                         (X64.Vale.State_i.update_reg dst x s0).regs
;                         f
;                         (X64.Vale.State_i.update_reg dst x s0).mem))
;             | X64.Vale.StrongPost_i.Mul64Wrap src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               (forall (rax: X64.Machine_s.nat64)
;                   (rdx: X64.Machine_s.nat64)
;                   (f: X64.Machine_s.nat64).
;                   X64.Machine_s.nat64_max * rdx + rax ==
;                   s0.regs X64.Machine_s.Rax * X64.Vale.StrongPost_i.eval_operand_norm src s0 ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                         rdx
;                         (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                             rax
;                             (X64.Vale.State_i.Mkstate s0.ok s0.regs f s0.mem))))
;             | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;             | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               s0.regs dst * X64.Vale.StrongPost_i.eval_operand_norm src s0 < X64.Machine_s.nat64_max /\
;               (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                   x == s0.regs dst * X64.Vale.StrongPost_i.eval_operand_norm src s0 ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                         (X64.Vale.State_i.update_reg dst x s0).regs
;                         f
;                         (X64.Vale.State_i.update_reg dst x s0).mem))
;             | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;             | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                   x ==
;                   X64.Vale.Decls.logand64 (s0.regs dst)
;                     (X64.Vale.StrongPost_i.eval_operand_norm src s0) ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                         (X64.Vale.State_i.update_reg dst x s0).regs
;                         f
;                         (X64.Vale.State_i.update_reg dst x s0).mem))
;             | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;             | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                   x ==
;                   X64.Vale.Decls.shift_right64 (s0.regs dst)
;                     (X64.Vale.StrongPost_i.eval_operand_norm src s0) ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                         (X64.Vale.State_i.update_reg dst x s0).regs
;                         f
;                         (X64.Vale.State_i.update_reg dst x s0).mem))
;             | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;             | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src ->
;               X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;               0 <= s0.regs dst - X64.Vale.StrongPost_i.eval_operand_norm src s0 /\
;               (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                   a == s0.regs dst - X64.Vale.StrongPost_i.eval_operand_norm src s0 /\ x == a ==>
;                   X64.Vale.StrongPost_i.wp_code inss
;                     (X64.Vale.StrongPost_i.augment sN post)
;                     (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                         (X64.Vale.State_i.update_reg dst x s0).regs
;                         f
;                         (X64.Vale.State_i.update_reg dst x s0).mem))
;             | _ -> Prims.l_False) ==>
;           (forall (k: Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)).
;               (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                   {:pattern Prims.guard_free (k x)}
;                   (x ==
;                     (match i with
;                       | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                         inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Load64
;                         (X64.Machine_s.OReg dst)
;                         (X64.Machine_s.OReg src)
;                         offset ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             FStar.Map.contains s0.mem (s0.regs src + offset)
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes (
;                                         i :: inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   (X64.Machine_s.OReg src)
;                                   offset
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset ->
;                         (match
;                             FStar.Map.contains s0.mem (s0.regs dst + offset) &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes
;                                       (i :: inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                                   offset
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                       (i :: inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                       (i :: inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Mul64Wrap src ->
;                         (match X64.Vale.StrongPost_i.valid_operand_norm src s0 with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                       (i :: inss))
;                                   s0
;                                   sN
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0 &&
;                             s0.regs dst * X64.Vale.StrongPost_i.eval_operand_norm src s0 <
;                             0x10000000000000000
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes (
;                                         i :: inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                         inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                         inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src ->
;                         (match
;                             dst <> X64.Machine_s.Rsp &&
;                             X64.Vale.StrongPost_i.valid_operand_norm src s0 &&
;                             0 <= s0.regs dst - X64.Vale.StrongPost_i.eval_operand_norm src s0
;                           with
;                           | true ->
;                             (let _, sM =
;                                 X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                         inss))
;                                   s0
;                                   sN
;                                   (X64.Machine_s.OReg dst)
;                                   src
;                               in
;                               FStar.Pervasives.Native.Some sM)
;                             <:
;                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                           | _ -> FStar.Pervasives.Native.None)
;                         <:
;                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                       | _ -> FStar.Pervasives.Native.None) ==>
;                     (forall (return_val: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                         return_val == x ==> p return_val)) ==>
;                   k x) ==>
;               (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                   i == X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg b) b ==>
;                   Prims.hasEq X64.Machine_s.reg /\
;                   (forall (any_result: Prims.bool).
;                       (b <> X64.Machine_s.Rsp && X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                       any_result ==>
;                       (forall (k:
;                           Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)).
;                           (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                               {:pattern Prims.guard_free (k x)}
;                               k x ==> k x) ==>
;                           ((b <> X64.Machine_s.Rsp && X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                             true ==>
;                             X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                             (forall (return_val: X64.Machine_s.dst_op).
;                                 return_val == X64.Machine_s.OReg b ==>
;                                 X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                         inss))
;                                   (X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg b) b)
;                                   s0
;                                   sN /\ X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b) s0 /\
;                                 X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                 (forall (ghost_result:
;                                     Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                           X64.Vale.Decls.ocmp) &
;                                     X64.Vale.State_i.state).
;                                     (let va_bM, va_sM = ghost_result in
;                                       X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (
;                                               i :: inss))
;                                         va_bM
;                                         s0
;                                         va_sM
;                                         sN /\ va_sM.ok /\
;                                       X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b) va_sM ==
;                                       X64.Vale.State_i.eval_operand b s0 /\
;                                       X64.Vale.Decls.va_state_eq va_sM
;                                         (X64.Vale.State_i.Mkstate va_sM.ok
;                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg b)
;                                                 va_sM
;                                                 s0)
;                                               .regs
;                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg b)
;                                                 va_sM
;                                                 s0)
;                                               .flags
;                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg b)
;                                                 va_sM
;                                                 s0)
;                                               .mem)) ==>
;                                     X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes
;                                           (i :: inss))
;                                       s0
;                                       sN
;                                       (X64.Machine_s.OReg b)
;                                       b ==
;                                     ghost_result ==>
;                                     (forall (b:
;                                         Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                               X64.Vale.Decls.ocmp))
;                                         (b: X64.Vale.State_i.state).
;                                         X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes
;                                               (i :: inss))
;                                           s0
;                                           sN
;                                           (X64.Machine_s.OReg b)
;                                           b ==
;                                         (b,
;                                         b) ==>
;                                         (forall (any_result:
;                                             FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                             k any_result))))) /\
;                           (~((b <> X64.Machine_s.Rsp &&
;                               X64.Vale.StrongPost_i.valid_operand_norm b s0) =
;                               true) ==>
;                             (forall (b: Prims.bool).
;                                 (b <> X64.Machine_s.Rsp &&
;                                 X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                 b ==>
;                                 (forall (any_result:
;                                     FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                     k any_result)))))) /\
;               (~(Mov64? i && OReg? i.dst) ==>
;                 (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.reg) (b: Prims.int).
;                     i ==
;                     X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg b) (X64.Machine_s.OReg b) b ==>
;                     Prims.hasEq X64.Machine_s.reg /\
;                     (forall (any_result: Prims.bool).
;                         (b <> X64.Machine_s.Rsp && FStar.Map.contains s0.mem (s0.regs b + b)) ==
;                         any_result ==>
;                         (forall (k:
;                             Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state))
;                           .
;                             (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                 {:pattern Prims.guard_free (k x)}
;                                 k x ==> k x) ==>
;                             ((b <> X64.Machine_s.Rsp && FStar.Map.contains s0.mem (s0.regs b + b)) ==
;                               true ==>
;                               X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                               (forall (return_val: X64.Machine_s.dst_op).
;                                   return_val == X64.Machine_s.OReg b ==>
;                                   OReg? (X64.Machine_s.OReg b) /\
;                                   (forall (return_val: X64.Vale.Decls.va_reg_operand).
;                                       return_val == X64.Machine_s.OReg b ==>
;                                       X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                             (i :: inss))
;                                         (X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg b)
;                                             (X64.Machine_s.OReg b)
;                                             b)
;                                         s0
;                                         sN /\
;                                       X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b) s0 /\
;                                       OReg? (X64.Machine_s.OReg b) /\ s0.ok /\
;                                       FStar.Map.contains s0.mem
;                                         (s0.regs (X64.Machine_s.OReg b).r + b) /\
;                                       (forall (ghost_result:
;                                           Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                 X64.Vale.Decls.ocmp) &
;                                           X64.Vale.State_i.state).
;                                           (let va_bM, va_sM = ghost_result in
;                                             X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                   (i :: inss))
;                                               va_bM
;                                               s0
;                                               va_sM
;                                               sN /\ va_sM.ok /\
;                                             X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b)
;                                               va_sM ==
;                                             FStar.Map.sel va_sM.mem
;                                               (s0.regs (X64.Machine_s.OReg b).r + b) /\
;                                             X64.Vale.Decls.va_state_eq va_sM
;                                               (X64.Vale.State_i.Mkstate va_sM.ok
;                                                   (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                         b)
;                                                       va_sM
;                                                       s0)
;                                                     .regs
;                                                   (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                         b)
;                                                       va_sM
;                                                       s0)
;                                                     .flags
;                                                   (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                         b)
;                                                       va_sM
;                                                       s0)
;                                                     .mem)) ==>
;                                           X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                 (i :: inss))
;                                             s0
;                                             sN
;                                             (X64.Machine_s.OReg b)
;                                             (X64.Machine_s.OReg b)
;                                             b ==
;                                           ghost_result ==>
;                                           (forall (b:
;                                               Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                     X64.Vale.Decls.ocmp))
;                                               (b: X64.Vale.State_i.state).
;                                               X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                     (i :: inss))
;                                                 s0
;                                                 sN
;                                                 (X64.Machine_s.OReg b)
;                                                 (X64.Machine_s.OReg b)
;                                                 b ==
;                                               (b,
;                                               b) ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                   ).
;                                                   k any_result)))))) /\
;                             (~((b <> X64.Machine_s.Rsp && FStar.Map.contains s0.mem (s0.regs b + b)) =
;                                 true) ==>
;                               (forall (b: Prims.bool).
;                                   (b <> X64.Machine_s.Rsp &&
;                                   FStar.Map.contains s0.mem (s0.regs b + b)) ==
;                                   b ==>
;                                   (forall (any_result:
;                                       FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                       k any_result)))))) /\
;                 (~(Load64? i && OReg? i.dst && OReg? i.src) ==>
;                   (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand) (b: Prims.int).
;                       i == X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg b) b b ==>
;                       (forall (k:
;                           Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)).
;                           (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                               {:pattern Prims.guard_free (k x)}
;                               k x ==> k x) ==>
;                           ((FStar.Map.contains s0.mem (s0.regs b + b) &&
;                             X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                             true ==>
;                             OReg? (X64.Machine_s.OReg b) /\
;                             (forall (return_val: X64.Vale.Decls.va_reg_operand).
;                                 return_val == X64.Machine_s.OReg b ==>
;                                 X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                         inss))
;                                   (X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg b) b b)
;                                   s0
;                                   sN /\ OReg? (X64.Machine_s.OReg b) /\
;                                 X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                 FStar.Map.contains s0.mem (s0.regs (X64.Machine_s.OReg b).r + b) /\
;                                 (forall (ghost_result:
;                                     Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                           X64.Vale.Decls.ocmp) &
;                                     X64.Vale.State_i.state).
;                                     (let va_bM, va_sM = ghost_result in
;                                       X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (
;                                               i :: inss))
;                                         va_bM
;                                         s0
;                                         va_sM
;                                         sN /\ va_sM.ok /\
;                                       va_sM.mem ==
;                                       FStar.Map.upd s0.mem
;                                         (s0.regs (X64.Machine_s.OReg b).r + b)
;                                         (X64.Vale.State_i.eval_operand b s0) /\
;                                       X64.Vale.Decls.va_state_eq va_sM
;                                         (X64.Vale.State_i.Mkstate
;                                             (X64.Vale.State_i.Mkstate va_sM.ok
;                                                 s0.regs
;                                                 s0.flags
;                                                 s0.mem)
;                                               .ok
;                                             (X64.Vale.State_i.Mkstate va_sM.ok
;                                                 s0.regs
;                                                 s0.flags
;                                                 s0.mem)
;                                               .regs
;                                             (X64.Vale.State_i.Mkstate va_sM.ok
;                                                 s0.regs
;                                                 s0.flags
;                                                 s0.mem)
;                                               .flags
;                                             va_sM.mem)) ==>
;                                     X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes
;                                           (i :: inss))
;                                       s0
;                                       sN
;                                       (X64.Machine_s.OReg b)
;                                       b
;                                       b ==
;                                     ghost_result ==>
;                                     (forall (b:
;                                         Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                               X64.Vale.Decls.ocmp))
;                                         (b: X64.Vale.State_i.state).
;                                         X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes
;                                               (i :: inss))
;                                           s0
;                                           sN
;                                           (X64.Machine_s.OReg b)
;                                           b
;                                           b ==
;                                         (b,
;                                         b) ==>
;                                         (forall (any_result:
;                                             FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                             k any_result))))) /\
;                           (~((FStar.Map.contains s0.mem (s0.regs b + b) &&
;                               X64.Vale.StrongPost_i.valid_operand_norm b s0) =
;                               true) ==>
;                             (forall (b: Prims.bool).
;                                 (FStar.Map.contains s0.mem (s0.regs b + b) &&
;                                 X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                 b ==>
;                                 (forall (any_result:
;                                     FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                     k any_result))))) /\
;                   (~(Store64? i && OReg? i.dst) ==>
;                     (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                         i == X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg b) b ==>
;                         Prims.hasEq X64.Machine_s.reg /\
;                         (forall (any_result: Prims.bool).
;                             (b <> X64.Machine_s.Rsp && X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                             any_result ==>
;                             (forall (k:
;                                 Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                     )).
;                                 (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                     {:pattern Prims.guard_free (k x)}
;                                     k x ==> k x) ==>
;                                 ((b <> X64.Machine_s.Rsp &&
;                                   X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                   true ==>
;                                   X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                                   (forall (return_val: X64.Machine_s.dst_op).
;                                       return_val == X64.Machine_s.OReg b ==>
;                                       X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                             (i :: inss))
;                                         (X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg b) b)
;                                         s0
;                                         sN /\
;                                       X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b) s0 /\
;                                       X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                       (forall (ghost_result:
;                                           Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                 X64.Vale.Decls.ocmp) &
;                                           X64.Vale.State_i.state).
;                                           (let va_bM, va_sM = ghost_result in
;                                             X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                   (i :: inss))
;                                               va_bM
;                                               s0
;                                               va_sM
;                                               sN /\ va_sM.ok /\
;                                             X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b)
;                                               va_sM ==
;                                             X64.Vale.State_i.add_wrap (X64.Vale.State_i.eval_operand
;                                                   (X64.Machine_s.OReg b)
;                                                   s0)
;                                               (X64.Vale.State_i.eval_operand b s0) /\
;                                             X64.Vale.Decls.cf va_sM.flags ==
;                                             (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b) s0 +
;                                             X64.Vale.State_i.eval_operand b s0 >=
;                                             0x10000000000000000) /\
;                                             X64.Vale.Decls.va_state_eq va_sM
;                                               (X64.Vale.State_i.Mkstate
;                                                   (X64.Vale.State_i.Mkstate va_sM.ok
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .regs
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .flags
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .mem)
;                                                     .ok
;                                                   (X64.Vale.State_i.Mkstate va_sM.ok
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .regs
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .flags
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .mem)
;                                                     .regs
;                                                   va_sM.flags
;                                                   (X64.Vale.State_i.Mkstate va_sM.ok
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .regs
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .flags
;                                                       (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM
;                                                           s0)
;                                                         .mem)
;                                                     .mem)) ==>
;                                           X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                                 (i :: inss))
;                                             s0
;                                             sN
;                                             (X64.Machine_s.OReg b)
;                                             b ==
;                                           ghost_result ==>
;                                           (forall (b:
;                                               Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                     X64.Vale.Decls.ocmp))
;                                               (b: X64.Vale.State_i.state).
;                                               X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                                     (i :: inss))
;                                                 s0
;                                                 sN
;                                                 (X64.Machine_s.OReg b)
;                                                 b ==
;                                               (b,
;                                               b) ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                   ).
;                                                   k any_result))))) /\
;                                 (~((b <> X64.Machine_s.Rsp &&
;                                     X64.Vale.StrongPost_i.valid_operand_norm b s0) =
;                                     true) ==>
;                                   (forall (b: Prims.bool).
;                                       (b <> X64.Machine_s.Rsp &&
;                                       X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                       b ==>
;                                       (forall (any_result:
;                                           FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                           k any_result)))))) /\
;                     (~(Add64Wrap? i && OReg? i.dst) ==>
;                       (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                           i == X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg b) b ==>
;                           Prims.hasEq X64.Machine_s.reg /\
;                           (forall (any_result: Prims.bool).
;                               (b <> X64.Machine_s.Rsp &&
;                               X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                               any_result ==>
;                               (forall (k:
;                                   Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                       )).
;                                   (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state)
;                                     .
;                                       {:pattern Prims.guard_free (k x)}
;                                       k x ==> k x) ==>
;                                   ((b <> X64.Machine_s.Rsp &&
;                                     X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                     true ==>
;                                     X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                                     (forall (return_val: X64.Machine_s.dst_op).
;                                         return_val == X64.Machine_s.OReg b ==>
;                                         X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                               (i :: inss))
;                                           (X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg b) b
;                                           )
;                                           s0
;                                           sN /\
;                                         X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b) s0 /\
;                                         X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                         (forall (ghost_result:
;                                             Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                   X64.Vale.Decls.ocmp) &
;                                             X64.Vale.State_i.state).
;                                             (let va_bM, va_sM = ghost_result in
;                                               X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                     (i :: inss))
;                                                 va_bM
;                                                 s0
;                                                 va_sM
;                                                 sN /\ va_sM.ok /\
;                                               X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b)
;                                                 va_sM ==
;                                               X64.Vale.State_i.add_wrap (X64.Vale.State_i.add_wrap (X64.Vale.State_i.eval_operand
;                                                         (X64.Machine_s.OReg b)
;                                                         s0)
;                                                     (X64.Vale.State_i.eval_operand b s0))
;                                                 (match X64.Vale.Decls.cf s0.flags with
;                                                   | true -> 1
;                                                   | _ -> 0) /\
;                                               X64.Vale.Decls.cf va_sM.flags ==
;                                               (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b)
;                                                 s0 +
;                                               X64.Vale.State_i.eval_operand b s0 +
;                                               (match X64.Vale.Decls.cf s0.flags with
;                                                 | true -> 1
;                                                 | _ -> 0) >=
;                                               0x10000000000000000) /\
;                                               X64.Vale.Decls.va_state_eq va_sM
;                                                 (X64.Vale.State_i.Mkstate
;                                                     (X64.Vale.State_i.Mkstate va_sM.ok
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .regs
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .flags
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .mem)
;                                                       .ok
;                                                     (X64.Vale.State_i.Mkstate va_sM.ok
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .regs
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .flags
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .mem)
;                                                       .regs
;                                                     va_sM.flags
;                                                     (X64.Vale.State_i.Mkstate va_sM.ok
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .regs
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .flags
;                                                         (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                               b)
;                                                             va_sM
;                                                             s0)
;                                                           .mem)
;                                                       .mem)) ==>
;                                             X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                                   (i :: inss))
;                                               s0
;                                               sN
;                                               (X64.Machine_s.OReg b)
;                                               b ==
;                                             ghost_result ==>
;                                             (forall (b:
;                                                 Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                       X64.Vale.Decls.ocmp))
;                                                 (b: X64.Vale.State_i.state).
;                                                 X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                                       (i :: inss))
;                                                   s0
;                                                   sN
;                                                   (X64.Machine_s.OReg b)
;                                                   b ==
;                                                 (b,
;                                                 b) ==>
;                                                 (forall (any_result:
;                                                     FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                     ).
;                                                     k any_result))))) /\
;                                   (~((b <> X64.Machine_s.Rsp &&
;                                       X64.Vale.StrongPost_i.valid_operand_norm b s0) =
;                                       true) ==>
;                                     (forall (b: Prims.bool).
;                                         (b <> X64.Machine_s.Rsp &&
;                                         X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                         b ==>
;                                         (forall (any_result:
;                                             FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                             k any_result)))))) /\
;                       (~(Adc64Wrap? i && OReg? i.dst) ==>
;                         (forall (b: X64.Machine_s.operand).
;                             i == X64.Vale.StrongPost_i.Mul64Wrap b ==>
;                             (forall (k:
;                                 Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                     )).
;                                 (forall (x: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                     {:pattern Prims.guard_free (k x)}
;                                     k x ==> k x) ==>
;                                 (X64.Vale.StrongPost_i.valid_operand_norm b s0 == true ==>
;                                   X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (i ::
;                                           inss))
;                                     (X64.Vale.Decls.va_code_Mul64Wrap b)
;                                     s0
;                                     sN /\ X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                   (forall (ghost_result:
;                                       Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                             X64.Vale.Decls.ocmp) &
;                                       X64.Vale.State_i.state).
;                                       (let va_bM, va_sM = ghost_result in
;                                         X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                               (i :: inss))
;                                           va_bM
;                                           s0
;                                           va_sM
;                                           sN /\ va_sM.ok /\
;                                         0x10000000000000000 * va_sM.regs X64.Machine_s.Rdx +
;                                         va_sM.regs X64.Machine_s.Rax ==
;                                         s0.regs X64.Machine_s.Rax *
;                                         X64.Vale.State_i.eval_operand b s0 /\
;                                         X64.Vale.Decls.va_state_eq va_sM
;                                           (X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                                               (va_sM.regs X64.Machine_s.Rdx)
;                                               (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                                                   (va_sM.regs X64.Machine_s.Rax)
;                                                   (X64.Vale.State_i.Mkstate
;                                                       (X64.Vale.State_i.Mkstate va_sM.ok
;                                                           s0.regs
;                                                           s0.flags
;                                                           s0.mem)
;                                                         .ok
;                                                       (X64.Vale.State_i.Mkstate va_sM.ok
;                                                           s0.regs
;                                                           s0.flags
;                                                           s0.mem)
;                                                         .regs
;                                                       va_sM.flags
;                                                       (X64.Vale.State_i.Mkstate va_sM.ok
;                                                           s0.regs
;                                                           s0.flags
;                                                           s0.mem)
;                                                         .mem)))) ==>
;                                       X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                             (i :: inss))
;                                         s0
;                                         sN
;                                         b ==
;                                       ghost_result ==>
;                                       (forall (b:
;                                           Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                 X64.Vale.Decls.ocmp))
;                                           (b: X64.Vale.State_i.state).
;                                           X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes
;                                                 (i :: inss))
;                                             s0
;                                             sN
;                                             b ==
;                                           (b,
;                                           b) ==>
;                                           (forall (any_result:
;                                               FStar.Pervasives.Native.option X64.Vale.State_i.state)
;                                             .
;                                               k any_result)))) /\
;                                 (~(X64.Vale.StrongPost_i.valid_operand_norm b s0 = true) ==>
;                                   (forall (b: Prims.bool).
;                                       X64.Vale.StrongPost_i.valid_operand_norm b s0 == b ==>
;                                       (forall (any_result:
;                                           FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                           k any_result))))) /\
;                         (~(Mul64Wrap? i) ==>
;                           (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                               i == X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg b) b ==>
;                               Prims.hasEq X64.Machine_s.reg /\
;                               (forall (any_result: Prims.bool).
;                                   (b <> X64.Machine_s.Rsp &&
;                                   X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                   s0.regs b * X64.Vale.StrongPost_i.eval_operand_norm b s0 <
;                                   0x10000000000000000) ==
;                                   any_result ==>
;                                   (forall (k:
;                                       Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                           )).
;                                       (forall (x:
;                                           FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                           {:pattern Prims.guard_free (k x)}
;                                           k x ==> k x) ==>
;                                       ((b <> X64.Machine_s.Rsp &&
;                                         X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                         s0.regs b * X64.Vale.StrongPost_i.eval_operand_norm b s0 <
;                                         0x10000000000000000) ==
;                                         true ==>
;                                         X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                                         (forall (return_val: X64.Machine_s.dst_op).
;                                             return_val == X64.Machine_s.OReg b ==>
;                                             X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                                   (i :: inss))
;                                               (X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg b)
;                                                   b)
;                                               s0
;                                               sN /\
;                                             X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b) s0 /\
;                                             X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                             X64.Vale.State_i.eval_operand (X64.Machine_s.OReg b) s0 *
;                                             X64.Vale.State_i.eval_operand b s0 <
;                                             0x10000000000000000 /\
;                                             (forall (ghost_result:
;                                                 Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                       X64.Vale.Decls.ocmp) &
;                                                 X64.Vale.State_i.state).
;                                                 (let va_bM, va_sM = ghost_result in
;                                                   X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                         (i :: inss))
;                                                     va_bM
;                                                     s0
;                                                     va_sM
;                                                     sN /\ va_sM.ok /\
;                                                   X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                       b)
;                                                     va_sM ==
;                                                   X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                       b)
;                                                     s0 *
;                                                   X64.Vale.State_i.eval_operand b s0 /\
;                                                   X64.Vale.Decls.va_state_eq va_sM
;                                                     (X64.Vale.State_i.Mkstate
;                                                         (X64.Vale.State_i.Mkstate va_sM.ok
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .regs
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .flags
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .mem)
;                                                           .ok
;                                                         (X64.Vale.State_i.Mkstate va_sM.ok
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .regs
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .flags
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .mem)
;                                                           .regs
;                                                         va_sM.flags
;                                                         (X64.Vale.State_i.Mkstate va_sM.ok
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .regs
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .flags
;                                                             (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                   b)
;                                                                 va_sM
;                                                                 s0)
;                                                               .mem)
;                                                           .mem)) ==>
;                                                 X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                       (i :: inss))
;                                                   s0
;                                                   sN
;                                                   (X64.Machine_s.OReg b)
;                                                   b ==
;                                                 ghost_result ==>
;                                                 (forall (b:
;                                                     Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                           X64.Vale.Decls.ocmp))
;                                                     (b: X64.Vale.State_i.state).
;                                                     X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                           (i :: inss))
;                                                       s0
;                                                       sN
;                                                       (X64.Machine_s.OReg b)
;                                                       b ==
;                                                     (b,
;                                                     b) ==>
;                                                     (forall (any_result:
;                                                         FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                         ).
;                                                         k any_result))))) /\
;                                       (~((b <> X64.Machine_s.Rsp &&
;                                           X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                           s0.regs b * X64.Vale.StrongPost_i.eval_operand_norm b s0 <
;                                           0x10000000000000000) =
;                                           true) ==>
;                                         (forall (b: Prims.bool).
;                                             (b <> X64.Machine_s.Rsp &&
;                                             X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                             s0.regs b * X64.Vale.StrongPost_i.eval_operand_norm b s0 <
;                                             0x10000000000000000) ==
;                                             b ==>
;                                             (forall (any_result:
;                                                 FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                 ).
;                                                 k any_result)))))) /\
;                           (~(IMul64? i && OReg? i.dst) ==>
;                             (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                                 i == X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg b) b ==>
;                                 Prims.hasEq X64.Machine_s.reg /\
;                                 (forall (any_result: Prims.bool).
;                                     (b <> X64.Machine_s.Rsp &&
;                                     X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                     any_result ==>
;                                     (forall (k:
;                                         Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                             )).
;                                         (forall (x:
;                                             FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                             {:pattern Prims.guard_free (k x)}
;                                             k x ==> k x) ==>
;                                         ((b <> X64.Machine_s.Rsp &&
;                                           X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                           true ==>
;                                           X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                                           (forall (return_val: X64.Machine_s.dst_op).
;                                               return_val == X64.Machine_s.OReg b ==>
;                                               X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                                     (i :: inss))
;                                                 (X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg b)
;                                                     b)
;                                                 s0
;                                                 sN /\
;                                               X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b)
;                                                 s0 /\ X64.Vale.State_i.valid_operand b s0 /\ s0.ok /\
;                                               (forall (ghost_result:
;                                                   Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                         X64.Vale.Decls.ocmp) &
;                                                   X64.Vale.State_i.state).
;                                                   (let va_bM, va_sM = ghost_result in
;                                                     X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                           (i :: inss))
;                                                       va_bM
;                                                       s0
;                                                       va_sM
;                                                       sN /\ va_sM.ok /\
;                                                     X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                         b)
;                                                       va_sM ==
;                                                     X64.Vale.Decls.logand64 (X64.Vale.State_i.eval_operand
;                                                           (X64.Machine_s.OReg b)
;                                                           s0)
;                                                       (X64.Vale.State_i.eval_operand b s0) /\
;                                                     X64.Vale.Decls.va_state_eq va_sM
;                                                       (X64.Vale.State_i.Mkstate
;                                                           (X64.Vale.State_i.Mkstate va_sM.ok
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .regs
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .flags
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .mem)
;                                                             .ok
;                                                           (X64.Vale.State_i.Mkstate va_sM.ok
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .regs
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .flags
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .mem)
;                                                             .regs
;                                                           va_sM.flags
;                                                           (X64.Vale.State_i.Mkstate va_sM.ok
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .regs
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .flags
;                                                               (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                     b)
;                                                                   va_sM
;                                                                   s0)
;                                                                 .mem)
;                                                             .mem)) ==>
;                                                   X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                         (i :: inss))
;                                                     s0
;                                                     sN
;                                                     (X64.Machine_s.OReg b)
;                                                     b ==
;                                                   ghost_result ==>
;                                                   (forall (b:
;                                                       Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                             X64.Vale.Decls.ocmp))
;                                                       (b: X64.Vale.State_i.state).
;                                                       X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                             (i :: inss))
;                                                         s0
;                                                         sN
;                                                         (X64.Machine_s.OReg b)
;                                                         b ==
;                                                       (b,
;                                                       b) ==>
;                                                       (forall (any_result:
;                                                           FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                           ).
;                                                           k any_result))))) /\
;                                         (~((b <> X64.Machine_s.Rsp &&
;                                             X64.Vale.StrongPost_i.valid_operand_norm b s0) =
;                                             true) ==>
;                                           (forall (b: Prims.bool).
;                                               (b <> X64.Machine_s.Rsp &&
;                                               X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                               b ==>
;                                               (forall (any_result:
;                                                   FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                   ).
;                                                   k any_result)))))) /\
;                             (~(And64? i && OReg? i.dst) ==>
;                               (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                                   i == X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg b) b ==>
;                                   Prims.hasEq X64.Machine_s.reg /\
;                                   (forall (any_result: Prims.bool).
;                                       (b <> X64.Machine_s.Rsp &&
;                                       X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                       any_result ==>
;                                       (forall (k:
;                                           Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                               )).
;                                           (forall (x:
;                                               FStar.Pervasives.Native.option X64.Vale.State_i.state)
;                                             .
;                                               {:pattern Prims.guard_free (k x)}
;                                               k x ==> k x) ==>
;                                           ((b <> X64.Machine_s.Rsp &&
;                                             X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                             true ==>
;                                             X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                                             (forall (return_val: X64.Machine_s.dst_op).
;                                                 return_val == X64.Machine_s.OReg b ==>
;                                                 X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                                       (i :: inss))
;                                                   (X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg
;                                                         b)
;                                                       b)
;                                                   s0
;                                                   sN /\
;                                                 X64.Vale.State_i.valid_operand (X64.Machine_s.OReg b
;                                                   )
;                                                   s0 /\ s0.ok /\
;                                                 (forall (ghost_result:
;                                                     Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                           X64.Vale.Decls.ocmp) &
;                                                     X64.Vale.State_i.state).
;                                                     (let va_bM, va_sM = ghost_result in
;                                                       X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                             (i :: inss))
;                                                         va_bM
;                                                         s0
;                                                         va_sM
;                                                         sN /\ va_sM.ok /\
;                                                       X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                           b)
;                                                         va_sM ==
;                                                       X64.Vale.Decls.shift_right64 (X64.Vale.State_i.eval_operand
;                                                             (X64.Machine_s.OReg b)
;                                                             s0)
;                                                         (X64.Vale.State_i.eval_operand b s0) /\
;                                                       X64.Vale.Decls.va_state_eq va_sM
;                                                         (X64.Vale.State_i.Mkstate
;                                                             (X64.Vale.State_i.Mkstate va_sM.ok
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .regs
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .flags
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .mem)
;                                                               .ok
;                                                             (X64.Vale.State_i.Mkstate va_sM.ok
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .regs
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .flags
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .mem)
;                                                               .regs
;                                                             va_sM.flags
;                                                             (X64.Vale.State_i.Mkstate va_sM.ok
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .regs
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .flags
;                                                                 (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg
;                                                                       b)
;                                                                     va_sM
;                                                                     s0)
;                                                                   .mem)
;                                                               .mem)) ==>
;                                                     X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                           (i :: inss))
;                                                       s0
;                                                       sN
;                                                       (X64.Machine_s.OReg b)
;                                                       b ==
;                                                     ghost_result ==>
;                                                     (forall (b:
;                                                         Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                               X64.Vale.Decls.ocmp))
;                                                         (b: X64.Vale.State_i.state).
;                                                         X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                               (i :: inss))
;                                                           s0
;                                                           sN
;                                                           (X64.Machine_s.OReg b)
;                                                           b ==
;                                                         (b,
;                                                         b) ==>
;                                                         (forall (any_result:
;                                                             FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                             ).
;                                                             k any_result))))) /\
;                                           (~((b <> X64.Machine_s.Rsp &&
;                                               X64.Vale.StrongPost_i.valid_operand_norm b s0) =
;                                               true) ==>
;                                             (forall (b: Prims.bool).
;                                                 (b <> X64.Machine_s.Rsp &&
;                                                 X64.Vale.StrongPost_i.valid_operand_norm b s0) ==
;                                                 b ==>
;                                                 (forall (any_result:
;                                                     FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                     ).
;                                                     k any_result)))))) /\
;                               (~(Shr64? i && OReg? i.dst) ==>
;                                 (forall (b: X64.Machine_s.reg) (b: X64.Machine_s.operand).
;                                     i == X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg b) b ==>
;                                     Prims.hasEq X64.Machine_s.reg /\
;                                     (forall (any_result: Prims.bool).
;                                         (b <> X64.Machine_s.Rsp &&
;                                         X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                         0 <=
;                                         s0.regs b - X64.Vale.StrongPost_i.eval_operand_norm b s0) ==
;                                         any_result ==>
;                                         (forall (k:
;                                             Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                 )).
;                                             (forall (x:
;                                                 FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                 ).
;                                                 {:pattern Prims.guard_free (k x)}
;                                                 k x ==> k x) ==>
;                                             ((b <> X64.Machine_s.Rsp &&
;                                               X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                               0 <=
;                                               s0.regs b -
;                                               X64.Vale.StrongPost_i.eval_operand_norm b s0) ==
;                                               true ==>
;                                               X64.Machine_s.valid_dst (X64.Machine_s.OReg b) /\
;                                               (forall (return_val: X64.Machine_s.dst_op).
;                                                   return_val == X64.Machine_s.OReg b ==>
;                                                   X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes
;                                                         (i :: inss))
;                                                     (X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg
;                                                           b)
;                                                         b)
;                                                     s0
;                                                     sN /\
;                                                   X64.Vale.State_i.valid_operand (X64.Machine_s.OReg
;                                                       b)
;                                                     s0 /\ X64.Vale.State_i.valid_operand b s0 /\
;                                                   s0.ok /\
;                                                   0 <=
;                                                   X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                       b)
;                                                     s0 -
;                                                   X64.Vale.State_i.eval_operand b s0 /\
;                                                   (forall (ghost_result:
;                                                       Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                             X64.Vale.Decls.ocmp) &
;                                                       X64.Vale.State_i.state).
;                                                       (let va_bM, va_sM = ghost_result in
;                                                         X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes
;                                                               (i :: inss))
;                                                           va_bM
;                                                           s0
;                                                           va_sM
;                                                           sN /\ va_sM.ok /\
;                                                         X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           va_sM ==
;                                                         X64.Vale.State_i.eval_operand (X64.Machine_s.OReg
;                                                             b)
;                                                           s0 -
;                                                         X64.Vale.State_i.eval_operand b s0 /\
;                                                         X64.Vale.Decls.va_state_eq va_sM
;                                                           (X64.Vale.State_i.Mkstate
;                                                               (X64.Vale.State_i.Mkstate va_sM.ok
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .regs
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .flags
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .mem)
;                                                                 .ok
;                                                               (X64.Vale.State_i.Mkstate va_sM.ok
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .regs
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .flags
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .mem)
;                                                                 .regs
;                                                               va_sM.flags
;                                                               (X64.Vale.State_i.Mkstate va_sM.ok
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .regs
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .flags
;                                                                   (X64.Vale.Decls.va_update_operand (
;                                                                         X64.Machine_s.OReg b)
;                                                                       va_sM
;                                                                       s0)
;                                                                     .mem)
;                                                                 .mem)) ==>
;                                                       X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                             (i :: inss))
;                                                         s0
;                                                         sN
;                                                         (X64.Machine_s.OReg b)
;                                                         b ==
;                                                       ghost_result ==>
;                                                       (forall (b:
;                                                           Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
;                                                                 X64.Vale.Decls.ocmp))
;                                                           (b: X64.Vale.State_i.state).
;                                                           X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes
;                                                                 (i :: inss))
;                                                             s0
;                                                             sN
;                                                             (X64.Machine_s.OReg b)
;                                                             b ==
;                                                           (b,
;                                                           b) ==>
;                                                           (forall (any_result:
;                                                               FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                               ).
;                                                               k any_result))))) /\
;                                             (~((b <> X64.Machine_s.Rsp &&
;                                                 X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                                 0 <=
;                                                 s0.regs b -
;                                                 X64.Vale.StrongPost_i.eval_operand_norm b s0) =
;                                                 true) ==>
;                                               (forall (b: Prims.bool).
;                                                   (b <> X64.Machine_s.Rsp &&
;                                                   X64.Vale.StrongPost_i.valid_operand_norm b s0 &&
;                                                   0 <=
;                                                   s0.regs b -
;                                                   X64.Vale.StrongPost_i.eval_operand_norm b s0) ==
;                                                   b ==>
;                                                   (forall (any_result:
;                                                       FStar.Pervasives.Native.option X64.Vale.State_i.state
;                                                       ).
;                                                       k any_result)))))) /\
;                                 (~(Sub64? i && OReg? i.dst) ==>
;                                   (forall (b: X64.Vale.StrongPost_i.ins).
;                                       i == b ==>
;                                       (forall (any_result:
;                                           FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                                           k any_result)))))))))))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_weak_pre_ins`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(and 
;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x5 Term))
 (! (implies (HasType @x5
(Tm_refine_ff50a8c23b926f3de83da6821911823f @x2
@x0
@x1
@x3
@x4))

;; def=dummy(0,0-0,0); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(Prims.pure_post Tm_type))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x7 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x6
@x7)
)

 

:pattern ((ApplyTT @x6
@x7))
:qid @query.3))


;; def=X64.Vale.StrongPost_i.fst(53,16-53,18); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(53,16-53,18); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None X64.Vale.State_i.state
@x5))
)


;; def=X64.Vale.StrongPost_i.fst(53,16-53,18); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(53,16-53,18); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some X64.Vale.State_i.state
@x5))
)
)
label_1)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))


;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=X64.Vale.StrongPost_i.fst(50,20-50,25); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))


;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1)))
@x2
@x3)
)


;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
@x2)
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x6 Term))
 (! (implies (and (or label_2
(HasType @x6
(FStar.Pervasives.Native.option X64.Vale.State_i.state)))
(let ((@lb7 @x6))
(ite (is-FStar.Pervasives.Native.None @lb7)
label_3
(ite (is-FStar.Pervasives.Native.Some @lb7)

;; def=X64.Vale.StrongPost_i.fst(57,7-59,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(or label_4

;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes @x1))
(FStar.Pervasives.Native.Some_v @lb7)
@x3)
)
)


;; def=X64.Vale.StrongPost_i.fst(58,7-58,12); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(or label_5

;; def=X64.Vale.StrongPost_i.fst(58,7-58,12); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Some_v @lb7)))
)


;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(or label_6

;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(FStar.Pervasives.Native.Some_v @lb7))
)
)
)

Unreachable))))

;; def=Prims.fst(485,85-485,99); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(485,85-485,99); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(485,85-485,99); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(485,85-485,99); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x5
@x6)
)
)
:qid @query.5))
)

;; def=Prims.fst(441,29-441,97); use=X64.Vale.StrongPost_i.fst(69,10-69,25)
(and 
;; def=X64.Vale.StrongPost_i.fst(69,25-69,65); use=X64.Vale.StrongPost_i.fst(69,10-69,25)
(or label_7

;; def=X64.Vale.StrongPost_i.fst(69,25-69,65); use=X64.Vale.StrongPost_i.fst(69,10-69,25)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(69,25-69,65); use=X64.Vale.StrongPost_i.fst(69,10-69,25)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
@x2)
)
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(69,10-69,25)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)
(let ((@lb7 @x0))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(118,32-118,37); use=X64.Vale.StrongPost_i.fsti(118,32-118,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(120,1-122,54); use=X64.Vale.StrongPost_i.fsti(120,1-122,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(120,1-120,26); use=X64.Vale.StrongPost_i.fsti(120,1-120,26)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(121,12-121,41); use=X64.Vale.StrongPost_i.fsti(121,12-121,41)
(= @x8
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb7)
@x2))
)

;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb7))
@x8
@x2))
)
)
 
;;no pats
:qid @query.7))
)

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(123,35-123,40); use=X64.Vale.StrongPost_i.fsti(123,35-123,40)
false

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb7))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(125,3-127,54); use=X64.Vale.StrongPost_i.fsti(125,3-127,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(125,3-125,54); use=X64.Vale.StrongPost_i.fsti(125,3-125,54)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb7)))))
@x2))


;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(126,12-126,54); use=X64.Vale.StrongPost_i.fsti(126,12-126,54)
(= @x8
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb7))))))
)

;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb7))
@x8
@x2))
)
)
 
;;no pats
:qid @query.8))
)

(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(129,1-133,41); use=X64.Vale.StrongPost_i.fsti(129,1-133,41)
(and 
;; def=X64.Vale.StrongPost_i.fsti(129,1-129,28); use=X64.Vale.StrongPost_i.fsti(129,1-129,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(130,1-130,45); use=X64.Vale.StrongPost_i.fsti(130,1-130,45)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb7))))))


;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(132,3-132,72); use=X64.Vale.StrongPost_i.fsti(132,3-132,72)
(= @x8
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb7))))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb7)
@x2)))
)

;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok @x2)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
@x8))
)
)
 
;;no pats
:qid @query.9))
)

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(134,36-134,41); use=X64.Vale.StrongPost_i.fsti(134,36-134,41)
false

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(136,1-141,65); use=X64.Vale.StrongPost_i.fsti(136,1-141,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(136,1-136,28); use=X64.Vale.StrongPost_i.fsti(136,1-136,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(137,1-141,65); use=X64.Vale.StrongPost_i.fsti(137,1-141,65)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(138,6-138,49); use=X64.Vale.StrongPost_i.fsti(138,6-138,49)
(= @x8
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb7)
@x2)))))


;; def=X64.Vale.StrongPost_i.fsti(139,6-139,55); use=X64.Vale.StrongPost_i.fsti(139,6-139,55)
(= @x9
(let ((@lb11 (Prims.op_LessThan @x8
(BoxInt 18446744073709551616))))
(ite (= @lb11
(BoxBool true))
@x8
(BoxInt (- (BoxInt_proj_0 @x8)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(140,4-140,28); use=X64.Vale.StrongPost_i.fsti(140,4-140,28)
(= (X64.Vale.Decls.cf @x10)
(Prims.op_GreaterThanOrEqual @x8
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7))
@x9
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7))
@x9
@x2))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb7))
@x9
@x2))))
)
)
 
;;no pats
:qid @query.10))
)

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(142,36-142,41); use=X64.Vale.StrongPost_i.fsti(142,36-142,41)
false

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(144,1-150,65); use=X64.Vale.StrongPost_i.fsti(144,1-150,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(144,1-144,28); use=X64.Vale.StrongPost_i.fsti(144,1-144,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(145,1-150,65); use=X64.Vale.StrongPost_i.fsti(145,1-150,65)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(146,6-147,34); use=X64.Vale.StrongPost_i.fsti(146,6-147,34)
(= @x8
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb7)
@x2)))
(BoxInt_proj_0 (let ((@lb11 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags @x2))))
(ite (= @lb11
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))


;; def=X64.Vale.StrongPost_i.fsti(148,6-148,55); use=X64.Vale.StrongPost_i.fsti(148,6-148,55)
(= @x9
(let ((@lb11 (Prims.op_LessThan @x8
(BoxInt 18446744073709551616))))
(ite (= @lb11
(BoxBool true))
@x8
(BoxInt (- (BoxInt_proj_0 @x8)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(149,5-149,29); use=X64.Vale.StrongPost_i.fsti(149,5-149,29)
(= (X64.Vale.Decls.cf @x10)
(Prims.op_GreaterThanOrEqual @x8
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7))
@x9
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7))
@x9
@x2))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb7))
@x9
@x2))))
)
)
 
;;no pats
:qid @query.11))
)

(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb7)

;; def=X64.Vale.StrongPost_i.fsti(152,1-157,37); use=X64.Vale.StrongPost_i.fsti(152,1-157,37)
(and 
;; def=X64.Vale.StrongPost_i.fsti(152,1-152,28); use=X64.Vale.StrongPost_i.fsti(152,1-152,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(153,1-157,37); use=X64.Vale.StrongPost_i.fsti(153,1-157,37)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(154,3-155,56); use=X64.Vale.StrongPost_i.fsti(154,3-155,56)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x9))
(BoxInt_proj_0 @x8))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb7)
@x2))))
)

;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x9
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x8
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok @x2)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))))
)
)
 
;;no pats
:qid @query.12))
)

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(158,33-158,38); use=X64.Vale.StrongPost_i.fsti(158,33-158,38)
false

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(161,3-165,65); use=X64.Vale.StrongPost_i.fsti(161,3-165,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(161,3-161,30); use=X64.Vale.StrongPost_i.fsti(161,3-161,30)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(162,3-162,18); use=X64.Vale.StrongPost_i.fsti(162,3-162,18)
(< (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb7)
@x2)))
18446744073709551616)


;; def=X64.Vale.StrongPost_i.fsti(163,3-165,65); use=X64.Vale.StrongPost_i.fsti(163,3-165,65)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(164,6-164,12); use=X64.Vale.StrongPost_i.fsti(164,6-164,12)
(= @x8
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb7)
@x2)))))
)

;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb7))
@x8
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb7))
@x8
@x2))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb7))
@x8
@x2))))
)
)
 
;;no pats
:qid @query.13))
)

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(166,32-166,37); use=X64.Vale.StrongPost_i.fsti(166,32-166,37)
false

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(169,1-172,60); use=X64.Vale.StrongPost_i.fsti(169,1-172,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(169,1-169,28); use=X64.Vale.StrongPost_i.fsti(169,1-169,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(170,1-172,60); use=X64.Vale.StrongPost_i.fsti(170,1-172,60)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(171,3-171,9); use=X64.Vale.StrongPost_i.fsti(171,3-171,9)
(= @x8
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb7)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb7)
@x2)))
)

;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb7))
@x8
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb7))
@x8
@x2))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb7))
@x8
@x2))))
)
)
 
;;no pats
:qid @query.14))
)

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(173,32-173,37); use=X64.Vale.StrongPost_i.fsti(173,32-173,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(176,1-179,60); use=X64.Vale.StrongPost_i.fsti(176,1-179,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(176,1-176,28); use=X64.Vale.StrongPost_i.fsti(176,1-176,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(177,1-179,60); use=X64.Vale.StrongPost_i.fsti(177,1-179,60)
(forall ((@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(178,3-178,9); use=X64.Vale.StrongPost_i.fsti(178,3-178,9)
(= @x8
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb7)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb7)
@x2)))
)

;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb7))
@x8
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb7))
@x8
@x2))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb7))
@x8
@x2))))
)
)
 
;;no pats
:qid @query.15))
)

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb7))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb7))))

;; def=X64.Vale.StrongPost_i.fsti(180,32-180,37); use=X64.Vale.StrongPost_i.fsti(180,32-180,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb7)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb7)))

;; def=X64.Vale.StrongPost_i.fsti(182,8-187,72); use=X64.Vale.StrongPost_i.fsti(182,8-187,72)
(and 
;; def=X64.Vale.StrongPost_i.fsti(182,8-182,35); use=X64.Vale.StrongPost_i.fsti(182,8-182,35)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb7)
@x2))


;; def=X64.Vale.StrongPost_i.fsti(183,8-183,53); use=X64.Vale.StrongPost_i.fsti(183,8-183,53)
(<= 0
(- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb7)
@x2))))


;; def=X64.Vale.StrongPost_i.fsti(184,8-187,72); use=X64.Vale.StrongPost_i.fsti(184,8-187,72)
(forall ((@x8 Term) (@x9 Term) (@x10 Term))
 (! (implies (and (HasType @x8
Prims.int)
(HasType @x9
X64.Machine_s.nat64)
(HasType @x10
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(185,15-185,58); use=X64.Vale.StrongPost_i.fsti(185,15-185,58)
(= @x8
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb7))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb7)
@x2)))))


;; def=X64.Vale.StrongPost_i.fsti(186,15-186,21); use=X64.Vale.StrongPost_i.fsti(186,15-186,21)
(= @x9
@x8)
)

;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(X64.Vale.StrongPost_i.wp_code @x1
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb7))
@x9
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb7))
@x9
@x2))
@x10
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb7))
@x9
@x2))))
)
)
 
;;no pats
:qid @query.16))
)


;; def=X64.Vale.StrongPost_i.fsti(188,13-188,18); use=X64.Vale.StrongPost_i.fsti(188,13-188,18)
false
))))))))))))))))))))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (implies 
;; def=X64.Vale.StrongPost_i.fst(49,8-135,13); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x8
(let ((@lb9 @x0))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb9)
@x2))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb9)))
(X64.Vale.StrongPost_i.Mov64_src @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb9))
X64.Machine_s.Rsp@tok)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb9))))))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb9)))
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb9)))
(X64.Vale.StrongPost_i.Load64_offset @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb9)))))
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb9)
@x2))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb9)))
(X64.Vale.StrongPost_i.Store64_src @lb9)
(X64.Vale.StrongPost_i.Store64_offset @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb9)
@x2))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb9)))
(X64.Vale.StrongPost_i.Add64Wrap_src @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb9)
@x2))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb9)))
(X64.Vale.StrongPost_i.Adc64Wrap_src @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb9)
(let ((@lb10 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb9)
@x2)))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Vale.StrongPost_i.Mul64Wrap_src @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
@x2))
(Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb9)
@x2))))
(BoxInt 18446744073709551616)))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb9)))
(X64.Vale.StrongPost_i.IMul64_src @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.And64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb9)
@x2))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb9)))
(X64.Vale.StrongPost_i.And64_amt @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb9)
@x2))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb9)))
(X64.Vale.StrongPost_i.Shr64_amt @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb9)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb9)))
(let ((@lb10 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
@x2))
(Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb9)
@x2))))))))
(ite (= @lb10
(BoxBool true))
(let ((@lb11 (X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb9)))
(X64.Vale.StrongPost_i.Sub64_src @lb9))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb11)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))))))))))))


;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x9
@x8)
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x5
@x9)
)
)
 
;;no pats
:qid @query.19))
)

;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x8)
)
)
 :weight 0


:pattern ((ApplyTT @x7
@x8))
:qid @query.18))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-71,24); use=X64.Vale.StrongPost_i.fst(70,8-71,24)
(= @x0
(X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(72,16-72,19)
(or label_8

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(72,16-72,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(72,16-72,19)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(72,9-72,48); use=X64.Vale.StrongPost_i.fst(72,9-72,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.24))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(72,9-72,48); use=X64.Vale.StrongPost_i.fst(72,9-72,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(73,47-73,57)
(or label_9

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(73,47-73,57)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(and 
;; def=X64.Vale.Decls.fsti(292,13-292,67); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(or label_10

;; def=X64.Vale.Decls.fsti(292,13-292,67); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(Valid 
;; def=X64.Vale.Decls.fsti(292,13-292,67); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(or label_11

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(or label_12

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(293,88-294,10); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(or label_13

;; def=X64.Vale.Decls.fsti(293,88-294,10); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(295,56-297,93); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(and 
;; def=X64.Vale.Decls.fsti(295,57-295,98); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(Valid 
;; def=X64.Vale.Decls.fsti(295,57-295,98); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(296,7-296,24); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.Decls.fsti(296,28-297,8); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.eval_operand @x9
@x2))


;; def=X64.Vale.Decls.fsti(297,12-297,92); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(Valid 
;; def=X64.Vale.Decls.fsti(297,12-297,92); use=X64.Vale.StrongPost_i.fst(73,23-73,37)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(73,13-73,61); use=X64.Vale.StrongPost_i.fst(73,13-73,61)
(= (X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(73,13-73,19); use=X64.Vale.StrongPost_i.fst(73,13-73,19)
(= (X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.29))
)
 
;;no pats
:qid @query.28))
)
 
;;no pats
:qid @query.27))
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.25))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(72,9-72,48); use=X64.Vale.StrongPost_i.fst(72,9-72,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(72,9-76,7); use=X64.Vale.StrongPost_i.fst(72,9-76,7)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.31))
)
 
;;no pats
:qid @query.30))
))
)
 
;;no pats
:qid @query.23))
)
 
;;no pats
:qid @query.22))
)
)
 
;;no pats
:qid @query.21))
)
 
;;no pats
:qid @query.20))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-71,9); use=X64.Vale.StrongPost_i.fst(70,8-71,9)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mov64 @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Mov64__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (HasType @x9
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=X64.Vale.StrongPost_i.fst(47,24-77,39); use=X64.Vale.StrongPost_i.fst(70,8-77,39)
(= @x0
(X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg @x8)
(X64.Machine_s.OReg @x9)
@x10))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(78,16-78,19)
(or label_14

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(78,16-78,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(78,16-78,19)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(78,9-78,67); use=X64.Vale.StrongPost_i.fst(78,9-78,67)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x9))
(BoxInt_proj_0 @x10)))))
@x11)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x13)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x12
@x13)
)
)
 :weight 0


:pattern ((ApplyTT @x12
@x13))
:qid @query.37))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(78,9-78,67); use=X64.Vale.StrongPost_i.fst(78,9-78,67)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x9))
(BoxInt_proj_0 @x10)))))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(79,48-79,58)
(or label_15

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(79,48-79,58)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x13
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fst(79,59-79,69)
(or label_16

;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fst(79,59-79,69)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Machine_s.OReg @x9)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (and (HasType @x14
X64.Vale.Decls.va_reg_operand)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x14
(X64.Machine_s.OReg @x9))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(and 
;; def=X64.Vale.Decls.fsti(304,13-304,75); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(or label_17

;; def=X64.Vale.Decls.fsti(304,13-304,75); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(Valid 
;; def=X64.Vale.Decls.fsti(304,13-304,75); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg @x8)
(X64.Machine_s.OReg @x9)
@x10)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(or label_18

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(305,48-305,88); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(or label_19

;; def=X64.Vale.Decls.fsti(305,48-305,88); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Machine_s.OReg @x9)))
)


;; def=X64.Vale.Decls.fsti(306,4-306,21); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(or label_20

;; def=X64.Vale.Decls.fsti(306,4-306,21); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=X64.Vale.Decls.fsti(306,25-307,14); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(or label_21

;; def=X64.Vale.Decls.fsti(306,25-307,14); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.__proj__OReg__item__r (X64.Machine_s.OReg @x9))))
(BoxInt_proj_0 @x10)))))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb16 @x15))

;; def=X64.Vale.Decls.fsti(308,56-311,52); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(and 
;; def=X64.Vale.Decls.fsti(308,57-308,98); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(Valid 
;; def=X64.Vale.Decls.fsti(308,57-308,98); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb16)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb16)
@x3)
)


;; def=X64.Vale.Decls.fsti(309,7-309,24); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb16)))


;; def=X64.Vale.Decls.fsti(309,28-310,61); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb16))
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb16))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.__proj__OReg__item__r (X64.Machine_s.OReg @x9))))
(BoxInt_proj_0 @x10)))))


;; def=X64.Vale.Decls.fsti(310,65-311,51); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(Valid 
;; def=X64.Vale.Decls.fsti(310,65-311,51); use=X64.Vale.StrongPost_i.fst(79,23-79,38)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb16)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb16))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb16)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb16)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb16)
@x2))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(79,13-79,76); use=X64.Vale.StrongPost_i.fst(79,13-79,76)
(= (X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
(X64.Machine_s.OReg @x9)
@x10)
@x15)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x17 Term))
 (! (implies (and (HasType @x17
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(79,13-79,19); use=X64.Vale.StrongPost_i.fst(79,13-79,19)
(= (X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
(X64.Machine_s.OReg @x9)
@x10)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x16
@x17))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x18 Term))
 (! (implies (HasType @x18
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x12
@x18)
)
)
 
;;no pats
:qid @query.43))
)
 
;;no pats
:qid @query.42))
)
 
;;no pats
:qid @query.41))
)
 
;;no pats
:qid @query.40))
)
)
 
;;no pats
:qid @query.39))
)
)
 
;;no pats
:qid @query.38))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(78,9-78,67); use=X64.Vale.StrongPost_i.fst(78,9-78,67)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x9))
(BoxInt_proj_0 @x10)))))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(78,9-82,9); use=X64.Vale.StrongPost_i.fst(78,9-82,9)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x9))
(BoxInt_proj_0 @x10)))))
@x13)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x12
@x14)
)
)
 
;;no pats
:qid @query.45))
)
 
;;no pats
:qid @query.44))
))
)
 
;;no pats
:qid @query.36))
)
 
;;no pats
:qid @query.35))
)
)
 
;;no pats
:qid @query.34))
)
 
;;no pats
:qid @query.33))
)
 
;;no pats
:qid @query.32))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-77,10); use=X64.Vale.StrongPost_i.fst(70,8-77,10)
(and (BoxBool_proj_0 (Prims.op_AmpAmp (X64.Vale.StrongPost_i.uu___is_Load64 @x0)
(X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__dst @x0))))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Load64__item__src @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (HasType @x9
X64.Machine_s.operand)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.int)

;; def=X64.Vale.StrongPost_i.fst(47,24-83,33); use=X64.Vale.StrongPost_i.fst(70,8-83,33)
(= @x0
(X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg @x8)
@x9
@x10))
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.50))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(84,9-84,82); use=X64.Vale.StrongPost_i.fst(84,9-84,82)
(= (Prims.op_AmpAmp (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 @x10))))
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fst(85,49-85,59)
(or label_22

;; def=X64.Vale.Decls.fsti(44,31-44,38); use=X64.Vale.StrongPost_i.fst(85,49-85,59)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Vale.Decls.va_reg_operand)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(and 
;; def=X64.Vale.Decls.fsti(318,13-318,76); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(or label_23

;; def=X64.Vale.Decls.fsti(318,13-318,76); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(Valid 
;; def=X64.Vale.Decls.fsti(318,13-318,76); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg @x8)
@x9
@x10)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(319,4-319,44); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(or label_24

;; def=X64.Vale.Decls.fsti(319,4-319,44); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Machine_s.OReg @x8)))
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(or label_25

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(319,88-320,10); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(or label_26

;; def=X64.Vale.Decls.fsti(319,88-320,10); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=X64.Vale.Decls.fsti(320,14-321,12); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(or label_27

;; def=X64.Vale.Decls.fsti(320,14-321,12); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.__proj__OReg__item__r (X64.Machine_s.OReg @x8))))
(BoxInt_proj_0 @x10)))))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(322,56-325,73); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(and 
;; def=X64.Vale.Decls.fsti(322,57-322,98); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(Valid 
;; def=X64.Vale.Decls.fsti(322,57-322,98); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(323,7-323,24); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.Decls.fsti(323,28-324,89); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(= (X64.Vale.State_i.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.__proj__OReg__item__r (X64.Machine_s.OReg @x8))))
(BoxInt_proj_0 @x10)))
(X64.Vale.State_i.eval_operand @x9
@x2)))


;; def=X64.Vale.Decls.fsti(325,4-325,72); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(Valid 
;; def=X64.Vale.Decls.fsti(325,4-325,72); use=X64.Vale.StrongPost_i.fst(85,23-85,39)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
(X64.Vale.State_i.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb14))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(85,13-85,70); use=X64.Vale.StrongPost_i.fst(85,13-85,70)
(= (X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9
@x10)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(85,13-85,19); use=X64.Vale.StrongPost_i.fst(85,13-85,19)
(= (X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9
@x10)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.55))
)
 
;;no pats
:qid @query.54))
)
 
;;no pats
:qid @query.53))
)
 
;;no pats
:qid @query.52))
)
)
 
;;no pats
:qid @query.51))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(84,9-84,82); use=X64.Vale.StrongPost_i.fst(84,9-84,82)
(= (Prims.op_AmpAmp (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 @x10))))
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(84,9-88,9); use=X64.Vale.StrongPost_i.fst(84,9-88,9)
(= (Prims.op_AmpAmp (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 @x10))))
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.57))
)
 
;;no pats
:qid @query.56))
))
)
 
;;no pats
:qid @query.49))
)
 
;;no pats
:qid @query.48))
)
 
;;no pats
:qid @query.47))
)
 
;;no pats
:qid @query.46))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-83,11); use=X64.Vale.StrongPost_i.fst(70,8-83,11)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Store64 @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Store64__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-89,28); use=X64.Vale.StrongPost_i.fst(70,8-89,28)
(= @x0
(X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(90,16-90,19)
(or label_28

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(90,16-90,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(90,16-90,19)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(90,9-90,48); use=X64.Vale.StrongPost_i.fst(90,9-90,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.62))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(90,9-90,48); use=X64.Vale.StrongPost_i.fst(90,9-90,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(91,51-91,61)
(or label_29

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(91,51-91,61)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(and 
;; def=X64.Vale.Decls.fsti(346,13-346,71); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(or label_30

;; def=X64.Vale.Decls.fsti(346,13-346,71); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(Valid 
;; def=X64.Vale.Decls.fsti(346,13-346,71); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(or label_31

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(or label_32

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(347,88-348,10); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(or label_33

;; def=X64.Vale.Decls.fsti(347,88-348,10); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(349,56-354,47); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(and 
;; def=X64.Vale.Decls.fsti(349,57-349,98); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(Valid 
;; def=X64.Vale.Decls.fsti(349,57-349,98); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(350,7-350,24); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.Decls.fsti(350,28-351,78); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.add_wrap (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2)
(X64.Vale.State_i.eval_operand @x9
@x2)))


;; def=X64.Vale.Decls.fsti(351,82-353,14); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(= (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14)))
(Prims.op_GreaterThanOrEqual (BoxInt (+ (BoxInt_proj_0 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x9
@x2))))
(BoxInt 18446744073709551616)))


;; def=X64.Vale.Decls.fsti(353,18-354,46); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(Valid 
;; def=X64.Vale.Decls.fsti(353,18-354,46); use=X64.Vale.StrongPost_i.fst(91,23-91,41)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(91,13-91,65); use=X64.Vale.StrongPost_i.fst(91,13-91,65)
(= (X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(91,13-91,19); use=X64.Vale.StrongPost_i.fst(91,13-91,19)
(= (X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.67))
)
 
;;no pats
:qid @query.66))
)
 
;;no pats
:qid @query.65))
)
 
;;no pats
:qid @query.64))
)
)
 
;;no pats
:qid @query.63))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(90,9-90,48); use=X64.Vale.StrongPost_i.fst(90,9-90,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(90,9-94,9); use=X64.Vale.StrongPost_i.fst(90,9-94,9)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.69))
)
 
;;no pats
:qid @query.68))
))
)
 
;;no pats
:qid @query.61))
)
 
;;no pats
:qid @query.60))
)
)
 
;;no pats
:qid @query.59))
)
 
;;no pats
:qid @query.58))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-89,13); use=X64.Vale.StrongPost_i.fst(70,8-89,13)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Add64Wrap @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Add64Wrap__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-95,28); use=X64.Vale.StrongPost_i.fst(70,8-95,28)
(= @x0
(X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(96,16-96,19)
(or label_34

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(96,16-96,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(96,16-96,19)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(96,9-96,48); use=X64.Vale.StrongPost_i.fst(96,9-96,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.74))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(96,9-96,48); use=X64.Vale.StrongPost_i.fst(96,9-96,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(97,51-97,61)
(or label_35

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(97,51-97,61)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(and 
;; def=X64.Vale.Decls.fsti(375,13-375,71); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(or label_36

;; def=X64.Vale.Decls.fsti(375,13-375,71); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(Valid 
;; def=X64.Vale.Decls.fsti(375,13-375,71); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(or label_37

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(or label_38

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(376,88-377,10); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(or label_39

;; def=X64.Vale.Decls.fsti(376,88-377,10); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(378,56-384,67); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(and 
;; def=X64.Vale.Decls.fsti(378,57-378,98); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(Valid 
;; def=X64.Vale.Decls.fsti(378,57-378,98); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(379,7-379,24); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.Decls.fsti(379,28-381,41); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.add_wrap (X64.Vale.State_i.add_wrap (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2)
(X64.Vale.State_i.eval_operand @x9
@x2))
(let ((@lb15 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags @x2))))
(ite (= @lb15
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))


;; def=X64.Vale.Decls.fsti(381,45-383,54); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(= (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14)))
(Prims.op_GreaterThanOrEqual (BoxInt (+ (+ (BoxInt_proj_0 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x9
@x2)))
(BoxInt_proj_0 (let ((@lb15 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags @x2))))
(ite (= @lb15
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))))
(BoxInt 18446744073709551616)))


;; def=X64.Vale.Decls.fsti(383,58-384,66); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(Valid 
;; def=X64.Vale.Decls.fsti(383,58-384,66); use=X64.Vale.StrongPost_i.fst(97,23-97,41)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(97,13-97,65); use=X64.Vale.StrongPost_i.fst(97,13-97,65)
(= (X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(97,13-97,19); use=X64.Vale.StrongPost_i.fst(97,13-97,19)
(= (X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.79))
)
 
;;no pats
:qid @query.78))
)
 
;;no pats
:qid @query.77))
)
 
;;no pats
:qid @query.76))
)
)
 
;;no pats
:qid @query.75))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(96,9-96,48); use=X64.Vale.StrongPost_i.fst(96,9-96,48)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(96,9-100,9); use=X64.Vale.StrongPost_i.fst(96,9-100,9)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.81))
)
 
;;no pats
:qid @query.80))
))
)
 
;;no pats
:qid @query.73))
)
 
;;no pats
:qid @query.72))
)
)
 
;;no pats
:qid @query.71))
)
 
;;no pats
:qid @query.70))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-95,13); use=X64.Vale.StrongPost_i.fst(70,8-95,13)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Adc64Wrap @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Adc64Wrap__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-101,17); use=X64.Vale.StrongPost_i.fst(70,8-101,17)
(= @x0
(X64.Vale.StrongPost_i.Mul64Wrap @x8))
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x10)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x9
@x10)
)
)
 :weight 0


:pattern ((ApplyTT @x9
@x10))
:qid @query.84))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(102,9-102,34); use=X64.Vale.StrongPost_i.fst(102,9-102,34)
(= (X64.Vale.StrongPost_i.valid_operand_norm @x8
@x2)
(BoxBool true))


;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(and 
;; def=X64.Vale.Decls.fsti(416,13-416,67); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(or label_40

;; def=X64.Vale.Decls.fsti(416,13-416,67); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(Valid 
;; def=X64.Vale.Decls.fsti(416,13-416,67); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Mul64Wrap @x8)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(or label_41

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(X64.Vale.State_i.valid_operand @x8
@x2)
)
)


;; def=X64.Vale.Decls.fsti(417,18-417,35); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(or label_42

;; def=X64.Vale.Decls.fsti(417,18-417,35); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb11 @x10))

;; def=X64.Vale.Decls.fsti(418,56-422,21); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(and 
;; def=X64.Vale.Decls.fsti(418,57-418,98); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(Valid 
;; def=X64.Vale.Decls.fsti(418,57-418,98); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb11)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb11)
@x3)
)


;; def=X64.Vale.Decls.fsti(419,7-419,24); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb11)))


;; def=X64.Vale.Decls.fsti(419,28-420,78); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb11))
X64.Machine_s.Rdx@tok)))
(BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb11))
X64.Machine_s.Rax@tok)))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x8
@x2))))


;; def=X64.Vale.Decls.fsti(420,82-422,20); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(Valid 
;; def=X64.Vale.Decls.fsti(420,82-422,20); use=X64.Vale.StrongPost_i.fst(103,23-103,41)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb11)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb11))
X64.Machine_s.Rdx@tok)
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(FStar.Pervasives.Native.Mktuple2__2 @lb11))
X64.Machine_s.Rax@tok)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb11))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb11))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb11))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb11))
(X64.Vale.State_i.__proj__Mkstate__item__regs @x2)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x2)
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(103,13-103,54); use=X64.Vale.StrongPost_i.fst(103,13-103,54)
(= (X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
@x8)
@x10)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(103,13-103,19); use=X64.Vale.StrongPost_i.fst(103,13-103,19)
(= (X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
@x8)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x11
@x12))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x9
@x13)
)
)
 
;;no pats
:qid @query.88))
)
 
;;no pats
:qid @query.87))
)
 
;;no pats
:qid @query.86))
)
 
;;no pats
:qid @query.85))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(102,9-102,34); use=X64.Vale.StrongPost_i.fst(102,9-102,34)
(= (X64.Vale.StrongPost_i.valid_operand_norm @x8
@x2)
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(102,9-106,9); use=X64.Vale.StrongPost_i.fst(102,9-106,9)
(= (X64.Vale.StrongPost_i.valid_operand_norm @x8
@x2)
@x10)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (HasType @x11
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x9
@x11)
)
)
 
;;no pats
:qid @query.90))
)
 
;;no pats
:qid @query.89))
))
)
 
;;no pats
:qid @query.83))
)
 
;;no pats
:qid @query.82))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-47,25); use=X64.Vale.StrongPost_i.fst(70,8-70,9)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Mul64Wrap @x0))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-107,25); use=X64.Vale.StrongPost_i.fst(70,8-107,25)
(= @x0
(X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(109,16-109,19)
(or label_43

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(109,16-109,19)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(109,16-109,19)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(109,9-109,65); use=X64.Vale.StrongPost_i.fst(109,9-109,65)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))
(BoxInt 18446744073709551616)))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.95))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(109,9-109,65); use=X64.Vale.StrongPost_i.fst(109,9-109,65)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))
(BoxInt 18446744073709551616)))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(110,48-110,58)
(or label_44

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(110,48-110,58)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(and 
;; def=X64.Vale.Decls.fsti(429,13-429,68); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(or label_45

;; def=X64.Vale.Decls.fsti(429,13-429,68); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(Valid 
;; def=X64.Vale.Decls.fsti(429,13-429,68); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(or label_46

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(or label_47

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(430,88-431,10); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(or label_48

;; def=X64.Vale.Decls.fsti(430,88-431,10); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=X64.Vale.Decls.fsti(431,14-432,20); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(or label_49

;; def=X64.Vale.Decls.fsti(431,14-432,20); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(< (_mul (BoxInt_proj_0 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x9
@x2)))
18446744073709551616)
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(433,56-437,14); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(and 
;; def=X64.Vale.Decls.fsti(433,57-433,98); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(Valid 
;; def=X64.Vale.Decls.fsti(433,57-433,98); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(434,7-434,24); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.State_i.fsti(90,38-90,46); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(BoxInt (_mul (BoxInt_proj_0 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x9
@x2)))))


;; def=X64.Vale.Decls.fsti(436,4-437,13); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(Valid 
;; def=X64.Vale.Decls.fsti(436,4-437,13); use=X64.Vale.StrongPost_i.fst(110,23-110,38)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(110,13-110,62); use=X64.Vale.StrongPost_i.fst(110,13-110,62)
(= (X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(110,13-110,19); use=X64.Vale.StrongPost_i.fst(110,13-110,19)
(= (X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.100))
)
 
;;no pats
:qid @query.99))
)
 
;;no pats
:qid @query.98))
)
 
;;no pats
:qid @query.97))
)
)
 
;;no pats
:qid @query.96))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(109,9-109,65); use=X64.Vale.StrongPost_i.fst(109,9-109,65)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))
(BoxInt 18446744073709551616)))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(109,9-113,9); use=X64.Vale.StrongPost_i.fst(109,9-113,9)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))
(BoxInt 18446744073709551616)))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.102))
)
 
;;no pats
:qid @query.101))
))
)
 
;;no pats
:qid @query.94))
)
 
;;no pats
:qid @query.93))
)
)
 
;;no pats
:qid @query.92))
)
 
;;no pats
:qid @query.91))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-107,10); use=X64.Vale.StrongPost_i.fst(70,8-107,10)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_IMul64 @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__IMul64__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-114,24); use=X64.Vale.StrongPost_i.fst(70,8-114,24)
(= @x0
(X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(116,14-116,17)
(or label_50

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(116,14-116,17)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(116,14-116,17)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(116,7-116,46); use=X64.Vale.StrongPost_i.fst(116,7-116,46)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.107))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(116,7-116,46); use=X64.Vale.StrongPost_i.fst(116,7-116,46)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(117,45-117,55)
(or label_51

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(117,45-117,55)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(and 
;; def=X64.Vale.Decls.fsti(457,13-457,67); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(or label_52

;; def=X64.Vale.Decls.fsti(457,13-457,67); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(Valid 
;; def=X64.Vale.Decls.fsti(457,13-457,67); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(or label_53

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(or label_54

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(458,88-459,10); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(or label_55

;; def=X64.Vale.Decls.fsti(458,88-459,10); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(460,56-463,96); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(and 
;; def=X64.Vale.Decls.fsti(460,57-460,98); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(Valid 
;; def=X64.Vale.Decls.fsti(460,57-460,98); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(461,7-461,24); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.Decls.fsti(461,28-462,78); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.Decls.logand64 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2)
(X64.Vale.State_i.eval_operand @x9
@x2)))


;; def=X64.Vale.Decls.fsti(462,82-463,95); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(Valid 
;; def=X64.Vale.Decls.fsti(462,82-463,95); use=X64.Vale.StrongPost_i.fst(117,21-117,35)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(117,11-117,59); use=X64.Vale.StrongPost_i.fst(117,11-117,59)
(= (X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(117,11-117,17); use=X64.Vale.StrongPost_i.fst(117,11-117,17)
(= (X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.112))
)
 
;;no pats
:qid @query.111))
)
 
;;no pats
:qid @query.110))
)
 
;;no pats
:qid @query.109))
)
)
 
;;no pats
:qid @query.108))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(116,7-116,46); use=X64.Vale.StrongPost_i.fst(116,7-116,46)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(116,7-120,9); use=X64.Vale.StrongPost_i.fst(116,7-120,9)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.114))
)
 
;;no pats
:qid @query.113))
))
)
 
;;no pats
:qid @query.106))
)
 
;;no pats
:qid @query.105))
)
)
 
;;no pats
:qid @query.104))
)
 
;;no pats
:qid @query.103))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-114,9); use=X64.Vale.StrongPost_i.fst(70,8-114,9)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_And64 @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__And64__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-121,24); use=X64.Vale.StrongPost_i.fst(70,8-121,24)
(= @x0
(X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(123,14-123,17)
(or label_56

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(123,14-123,17)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(123,14-123,17)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(123,7-123,46); use=X64.Vale.StrongPost_i.fst(123,7-123,46)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.119))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(123,7-123,46); use=X64.Vale.StrongPost_i.fst(123,7-123,46)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(124,45-124,55)
(or label_57

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(124,45-124,55)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(and 
;; def=X64.Vale.Decls.fsti(483,13-483,67); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(or label_58

;; def=X64.Vale.Decls.fsti(483,13-483,67); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(Valid 
;; def=X64.Vale.Decls.fsti(483,13-483,67); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(or label_59

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(485,4-485,21); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(or label_60

;; def=X64.Vale.Decls.fsti(485,4-485,21); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(486,56-489,96); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(and 
;; def=X64.Vale.Decls.fsti(486,57-486,98); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(Valid 
;; def=X64.Vale.Decls.fsti(486,57-486,98); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(487,7-487,24); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.Decls.fsti(487,28-488,80); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.Decls.shift_right64 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2)
(X64.Vale.State_i.eval_operand @x9
@x2)))


;; def=X64.Vale.Decls.fsti(488,84-489,95); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(Valid 
;; def=X64.Vale.Decls.fsti(488,84-489,95); use=X64.Vale.StrongPost_i.fst(124,21-124,35)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(124,11-124,59); use=X64.Vale.StrongPost_i.fst(124,11-124,59)
(= (X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(124,11-124,17); use=X64.Vale.StrongPost_i.fst(124,11-124,17)
(= (X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.124))
)
 
;;no pats
:qid @query.123))
)
 
;;no pats
:qid @query.122))
)
 
;;no pats
:qid @query.121))
)
)
 
;;no pats
:qid @query.120))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(123,7-123,46); use=X64.Vale.StrongPost_i.fst(123,7-123,46)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(123,7-127,9); use=X64.Vale.StrongPost_i.fst(123,7-127,9)
(= (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.126))
)
 
;;no pats
:qid @query.125))
))
)
 
;;no pats
:qid @query.118))
)
 
;;no pats
:qid @query.117))
)
)
 
;;no pats
:qid @query.116))
)
 
;;no pats
:qid @query.115))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-121,9); use=X64.Vale.StrongPost_i.fst(70,8-121,9)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Shr64 @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Shr64__item__dst @x0))))
)


;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (HasType @x8
X64.Machine_s.reg)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (and (HasType @x9
X64.Machine_s.operand)

;; def=X64.Vale.StrongPost_i.fst(47,24-128,24); use=X64.Vale.StrongPost_i.fst(70,8-128,24)
(= @x0
(X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg @x8)
@x9))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(129,14-129,17)
(or label_61

;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(129,14-129,17)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.StrongPost_i.fst(129,14-129,17)
(Prims.hasEq X64.Machine_s.reg)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x10 Term))
 (! (implies (and (HasType @x10
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(129,7-130,48); use=X64.Vale.StrongPost_i.fst(129,7-130,48)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))))
@x10)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(Prims.pure_post (FStar.Pervasives.Native.option X64.Vale.State_i.state)))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x12)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x12)
)
)
 :weight 0


:pattern ((ApplyTT @x11
@x12))
:qid @query.131))
)

;; def=Prims.fst(389,2-389,39); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(129,7-130,48); use=X64.Vale.StrongPost_i.fst(129,7-130,48)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))))
(BoxBool true))


;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(and 
;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(131,45-131,55)
(or label_62

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Vale.StrongPost_i.fst(131,45-131,55)
(BoxBool_proj_0 (X64.Machine_s.valid_dst (X64.Machine_s.OReg @x8)))
)


;; def=Prims.fst(356,2-356,58); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
X64.Machine_s.dst_op)

;; def=Prims.fst(356,26-356,41); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(= @x12
(X64.Machine_s.OReg @x8))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(and 
;; def=X64.Vale.Decls.fsti(391,13-391,67); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(or label_63

;; def=X64.Vale.Decls.fsti(391,13-391,67); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(Valid 
;; def=X64.Vale.Decls.fsti(391,13-391,67); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(X64.Vale.Decls.va_require (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg @x8)
@x9)
@x2
@x3)
)
)


;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(or label_64

;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(Valid 
;; def=X64.Vale.Decls.fsti(93,74-93,91); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(X64.Vale.State_i.valid_operand (X64.Machine_s.OReg @x8)
@x2)
)
)


;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(or label_65

;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(Valid 
;; def=X64.Vale.Decls.fsti(91,63-91,80); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(X64.Vale.State_i.valid_operand @x9
@x2)
)
)


;; def=X64.Vale.Decls.fsti(392,88-393,10); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(or label_66

;; def=X64.Vale.Decls.fsti(392,88-393,10); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))
)


;; def=X64.Vale.Decls.fsti(393,14-393,94); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(or label_67

;; def=X64.Vale.Decls.fsti(393,14-393,94); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(<= 0
(- (BoxInt_proj_0 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x9
@x2))))
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(forall ((@x13 Term))
 (! (implies (and (HasType @x13
(FStar.Pervasives.Native.tuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state))
(let ((@lb14 @x13))

;; def=X64.Vale.Decls.fsti(394,56-397,96); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(and 
;; def=X64.Vale.Decls.fsti(394,57-394,98); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(Valid 
;; def=X64.Vale.Decls.fsti(394,57-394,98); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(X64.Vale.Decls.va_ensure (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
(FStar.Pervasives.Native.Mktuple2__1 @lb14)
@x2
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x3)
)


;; def=X64.Vale.Decls.fsti(395,7-395,24); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14)))


;; def=X64.Vale.State_i.fsti(90,38-90,46); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(= (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14))
(BoxInt (- (BoxInt_proj_0 (X64.Vale.State_i.eval_operand (X64.Machine_s.OReg @x8)
@x2))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x9
@x2)))))


;; def=X64.Vale.Decls.fsti(396,86-397,95); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(Valid 
;; def=X64.Vale.Decls.fsti(396,86-397,95); use=X64.Vale.StrongPost_i.fst(131,21-131,35)
(X64.Vale.Decls.va_state_eq (FStar.Pervasives.Native.Mktuple2__2 @lb14)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))
(X64.Vale.State_i.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb14))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.Decls.va_update_operand (X64.Machine_s.OReg @x8)
(FStar.Pervasives.Native.Mktuple2__2 @lb14)
@x2))))))
)
)
)

;; def=X64.Vale.StrongPost_i.fst(131,11-131,59); use=X64.Vale.StrongPost_i.fst(131,11-131,59)
(= (X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
@x13)
)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x14 Term))
 (! (implies (HasType @x14
(Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x15 Term))
 (! (implies (and (HasType @x15
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(131,11-131,17); use=X64.Vale.StrongPost_i.fst(131,11-131,17)
(= (X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg @x8)
@x9)
(FStar.Pervasives.Native.Mktuple2 (Prims.list (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
X64.Vale.State_i.state
@x14
@x15))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x16 Term))
 (! (implies (HasType @x16
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x16)
)
)
 
;;no pats
:qid @query.136))
)
 
;;no pats
:qid @query.135))
)
 
;;no pats
:qid @query.134))
)
 
;;no pats
:qid @query.133))
)
)
 
;;no pats
:qid @query.132))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(129,7-130,48); use=X64.Vale.StrongPost_i.fst(129,7-130,48)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))))
(BoxBool true))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x12 Term))
 (! (implies (and (HasType @x12
Prims.bool)

;; def=X64.Vale.StrongPost_i.fst(129,7-134,9); use=X64.Vale.StrongPost_i.fst(129,7-134,9)
(= (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
@x8
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm @x9
@x2))
(Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
@x8))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm @x9
@x2))))))
@x12)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x13 Term))
 (! (implies (HasType @x13
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x11
@x13)
)
)
 
;;no pats
:qid @query.138))
)
 
;;no pats
:qid @query.137))
))
)
 
;;no pats
:qid @query.130))
)
 
;;no pats
:qid @query.129))
)
)
 
;;no pats
:qid @query.128))
)
 
;;no pats
:qid @query.127))

(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(not 
;; def=X64.Vale.StrongPost_i.fst(47,24-128,9); use=X64.Vale.StrongPost_i.fst(70,8-128,9)
(and (BoxBool_proj_0 (X64.Vale.StrongPost_i.uu___is_Sub64 @x0))
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg (X64.Vale.StrongPost_i.__proj__Sub64__item__dst @x0))))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
X64.Vale.StrongPost_i.ins)

;; def=X64.Vale.StrongPost_i.fst(47,24-135,5); use=X64.Vale.StrongPost_i.fst(70,8-135,5)
(= @x0
@x8)
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(forall ((@x9 Term))
 (! (implies (HasType @x9
(FStar.Pervasives.Native.option X64.Vale.State_i.state))

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(59,44-135,13)
(ApplyTT @x7
@x9)
)
)
 
;;no pats
:qid @query.140))
)
 
;;no pats
:qid @query.139))
))
))
))
))
))
))
))
))
))
))
)
 
;;no pats
:qid @query.17))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.4))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_67")
(eval label_67)
(echo "label_66")
(eval label_66)
(echo "label_65")
(eval label_65)
(echo "label_64")
(eval label_64)
(echo "label_63")
(eval label_63)
(echo "label_62")
(eval label_62)
(echo "label_61")
(eval label_61)
(echo "label_60")
(eval label_60)
(echo "label_59")
(eval label_59)
(echo "label_58")
(eval label_58)
(echo "label_57")
(eval label_57)
(echo "label_56")
(eval label_56)
(echo "label_55")
(eval label_55)
(echo "label_54")
(eval label_54)
(echo "label_53")
(eval label_53)
(echo "label_52")
(eval label_52)
(echo "label_51")
(eval label_51)
(echo "label_50")
(eval label_50)
(echo "label_49")
(eval label_49)
(echo "label_48")
(eval label_48)
(echo "label_47")
(eval label_47)
(echo "label_46")
(eval label_46)
(echo "label_45")
(eval label_45)
(echo "label_44")
(eval label_44)
(echo "label_43")
(eval label_43)
(echo "label_42")
(eval label_42)
(echo "label_41")
(eval label_41)
(echo "label_40")
(eval label_40)
(echo "label_39")
(eval label_39)
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.lemma_weak_pre_ins, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, @fuel_irrelevance_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, @query, FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a, Prims_pretyping_ae567c2fb75be05905677af440075565, X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7, X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee, X64.Vale.State_i_pretyping_de52c7fd4c52e1942aeef9a9143c43bf, X64.Vale.StrongPost_i_pretyping_b57a61b8460583814cc6086893d3abc9, assumption_X64.Machine_s.reg__uu___haseq, b2t_def, bool_inversion, bool_typing, constructor_distinct_FStar.Pervasives.Native.Some, constructor_distinct_Prims.Cons, constructor_distinct_X64.Machine_s.MConst, constructor_distinct_X64.Machine_s.OReg, constructor_distinct_X64.Machine_s.Rsp, constructor_distinct_X64.Vale.StrongPost_i.Adc64Wrap, constructor_distinct_X64.Vale.StrongPost_i.Add64Wrap, constructor_distinct_X64.Vale.StrongPost_i.And64, constructor_distinct_X64.Vale.StrongPost_i.IMul64, constructor_distinct_X64.Vale.StrongPost_i.Load64, constructor_distinct_X64.Vale.StrongPost_i.Mov64, constructor_distinct_X64.Vale.StrongPost_i.Mul64Wrap, constructor_distinct_X64.Vale.StrongPost_i.Shr64, constructor_distinct_X64.Vale.StrongPost_i.Store64, constructor_distinct_X64.Vale.StrongPost_i.Sub64, data_elim_X64.Machine_s.OConst, data_elim_X64.Vale.State_i.Mkstate, data_elim_X64.Vale.StrongPost_i.Load64, data_typing_intro_Prims.Cons@tok, data_typing_intro_X64.Machine_s.OReg@tok, data_typing_intro_X64.Vale.State_i.Mkstate@tok, disc_equation_FStar.Pervasives.Native.None, disc_equation_FStar.Pervasives.Native.Some, disc_equation_Prims.Cons, disc_equation_X64.Machine_s.OConst, disc_equation_X64.Machine_s.OReg, disc_equation_X64.Machine_s.Rsp, disc_equation_X64.Vale.StrongPost_i.Adc64Wrap, disc_equation_X64.Vale.StrongPost_i.Add64Wrap, disc_equation_X64.Vale.StrongPost_i.And64, disc_equation_X64.Vale.StrongPost_i.IMul64, disc_equation_X64.Vale.StrongPost_i.Load64, disc_equation_X64.Vale.StrongPost_i.Mov64, disc_equation_X64.Vale.StrongPost_i.Mul64Wrap, disc_equation_X64.Vale.StrongPost_i.Shr64, disc_equation_X64.Vale.StrongPost_i.Store64, disc_equation_X64.Vale.StrongPost_i.Sub64, equality_tok_X64.Machine_s.Rax@tok, equality_tok_X64.Machine_s.Rdx@tok, equality_tok_X64.Machine_s.Rsp@tok, equation_FStar.FunctionalExtensionality.restricted_t, equation_Prims.nat, equation_X64.Machine_s.dst_op, equation_X64.Machine_s.nat64, equation_X64.Machine_s.valid_dst, equation_X64.Vale.Decls.va_ensure, equation_X64.Vale.Decls.va_reg_operand, equation_X64.Vale.Decls.va_require, equation_X64.Vale.Decls.va_state_eq, equation_X64.Vale.Decls.va_update_operand, equation_X64.Vale.Regs_i.t, equation_X64.Vale.State_i.add_wrap, equation_X64.Vale.State_i.eval_maddr, equation_X64.Vale.State_i.eval_operand, equation_X64.Vale.State_i.state_eq, equation_X64.Vale.State_i.update_reg, equation_X64.Vale.State_i.valid_maddr, equation_X64.Vale.State_i.valid_operand, equation_X64.Vale.StrongPost_i.eval_operand_norm, equation_X64.Vale.StrongPost_i.valid_maddr_norm, equation_X64.Vale.StrongPost_i.valid_operand_norm, equation_with_fuel_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, fuel_guarded_inversion_FStar.Pervasives.Native.option, fuel_guarded_inversion_X64.Machine_s.operand, fuel_guarded_inversion_X64.Vale.State_i.state, function_token_typing_Prims.__cache_version_number__, function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs, int_inversion, int_typing, interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5, kinding_X64.Vale.State_i.state@tok, kinding_X64.Vale.StrongPost_i.ins@tok, l_and-interp, lemma_FStar.Map.lemma_equal_elim, lemma_FStar.Pervasives.invertOption, lemma_X64.Vale.Regs_i.lemma_equal_elim, primitive_Prims.op_AmpAmp, primitive_Prims.op_BarBar, primitive_Prims.op_GreaterThanOrEqual, primitive_Prims.op_LessThan, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Negation, primitive_Prims.op_disEquality, proj_equation_Prims.Cons_hd, proj_equation_Prims.Cons_tl, proj_equation_X64.Machine_s.OReg_r, proj_equation_X64.Vale.State_i.Mkstate_flags, proj_equation_X64.Vale.State_i.Mkstate_mem, proj_equation_X64.Vale.State_i.Mkstate_ok, proj_equation_X64.Vale.State_i.Mkstate_regs, proj_equation_X64.Vale.StrongPost_i.Adc64Wrap_dst, proj_equation_X64.Vale.StrongPost_i.Add64Wrap_dst, proj_equation_X64.Vale.StrongPost_i.And64_dst, proj_equation_X64.Vale.StrongPost_i.IMul64_dst, proj_equation_X64.Vale.StrongPost_i.Load64_dst, proj_equation_X64.Vale.StrongPost_i.Load64_src, proj_equation_X64.Vale.StrongPost_i.Mov64_dst, proj_equation_X64.Vale.StrongPost_i.Shr64_dst, proj_equation_X64.Vale.StrongPost_i.Store64_dst, proj_equation_X64.Vale.StrongPost_i.Sub64_dst, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_FStar.Pervasives.Native.Some_a, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Prims.Cons_a, projection_inverse_Prims.Cons_hd, projection_inverse_Prims.Cons_tl, projection_inverse_X64.Machine_s.MConst_n, projection_inverse_X64.Machine_s.OReg_r, projection_inverse_X64.Vale.State_i.Mkstate_flags, projection_inverse_X64.Vale.State_i.Mkstate_mem, projection_inverse_X64.Vale.State_i.Mkstate_ok, projection_inverse_X64.Vale.State_i.Mkstate_regs, projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_dst, projection_inverse_X64.Vale.StrongPost_i.Adc64Wrap_src, projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_dst, projection_inverse_X64.Vale.StrongPost_i.Add64Wrap_src, projection_inverse_X64.Vale.StrongPost_i.And64_amt, projection_inverse_X64.Vale.StrongPost_i.And64_dst, projection_inverse_X64.Vale.StrongPost_i.IMul64_dst, projection_inverse_X64.Vale.StrongPost_i.IMul64_src, projection_inverse_X64.Vale.StrongPost_i.Load64_dst, projection_inverse_X64.Vale.StrongPost_i.Load64_offset, projection_inverse_X64.Vale.StrongPost_i.Load64_src, projection_inverse_X64.Vale.StrongPost_i.Mov64_dst, projection_inverse_X64.Vale.StrongPost_i.Mov64_src, projection_inverse_X64.Vale.StrongPost_i.Mul64Wrap_src, projection_inverse_X64.Vale.StrongPost_i.Shr64_amt, projection_inverse_X64.Vale.StrongPost_i.Shr64_dst, projection_inverse_X64.Vale.StrongPost_i.Store64_dst, projection_inverse_X64.Vale.StrongPost_i.Store64_offset, projection_inverse_X64.Vale.StrongPost_i.Store64_src, projection_inverse_X64.Vale.StrongPost_i.Sub64_dst, projection_inverse_X64.Vale.StrongPost_i.Sub64_src, refinement_interpretation_Tm_refine_059fb7e36b37aa500817c1dfb9940fd8, refinement_interpretation_Tm_refine_33c23e946048d3d79f362ad9f81ccafe, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58, refinement_interpretation_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e, refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40, refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc, refinement_interpretation_Tm_refine_ff50a8c23b926f3de83da6821911823f, refinement_kinding_Tm_refine_a608a89bbc0a207d5920d37d906f7f40, token_correspondence_X64.Vale.State_i.__proj__Mkstate__item__regs, true_interp, typing_FStar.Map.contains, typing_FStar.Map.upd, typing_Prims.int, typing_X64.Machine_s.int_to_nat64, typing_X64.Vale.Decls.logand64, typing_X64.Vale.Decls.shift_right64, typing_X64.Vale.Decls.va_lemma_Load64, typing_X64.Vale.Decls.va_update_operand, typing_X64.Vale.State_i.__proj__Mkstate__item__flags, typing_X64.Vale.State_i.__proj__Mkstate__item__mem, typing_X64.Vale.State_i.__proj__Mkstate__item__ok, typing_X64.Vale.State_i.__proj__Mkstate__item__regs, typing_X64.Vale.State_i.add_wrap, typing_X64.Vale.State_i.eval_operand, typing_X64.Vale.State_i.update_reg, typing_X64.Vale.StrongPost_i.eval_operand_norm, typing_X64.Vale.StrongPost_i.inss_to_codes, typing_X64.Vale.StrongPost_i.valid_operand_norm, typing_tok_X64.Machine_s.Rax@tok, typing_tok_X64.Machine_s.Rdx@tok, typing_tok_X64.Machine_s.Rsp@tok

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_weak_pre_ins


; <Start encoding let lemma_weak_pre_ins>



(declare-fun X64.Vale.StrongPost_i.lemma_weak_pre_ins (Term Term Term Term Term) Term)


(declare-fun Tm_refine_a4915127f7561059f8cb6a073d9a5c0f (Term Term Term) Term)

;;;;;;;;;;;;;;;;i: ins ->     inss: Prims.list ins ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state ->     post: (_: Prims.unit -> Type)   -> Prims.Ghost (FStar.Pervasives.Native.option X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_35f01a6a05a4c80ce4239e027eee1495 () Term)
(declare-fun X64.Vale.StrongPost_i.lemma_weak_pre_ins@tok () Term)








; </end encoding let lemma_weak_pre_ins>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StrongPost_i.lemma_weak_pre_ins; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fst(47,4-47,22); use=X64.Vale.StrongPost_i.fst(47,4-47,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and 
;; def=X64.Vale.StrongPost_i.fst(50,20-50,25); use=X64.Vale.StrongPost_i.fst(50,20-50,25)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x2))


;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(51,6-51,58)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(51,6-51,58)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1)))
@x2
@x3)
)


;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(52,6-52,44)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(52,6-52,44)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
@x2)
)

(HasType @x0
X64.Vale.StrongPost_i.ins)
(HasType @x1
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))
(HasType (X64.Vale.StrongPost_i.lemma_weak_pre_ins @x0
@x1
@x2
@x3
@x4)
(Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x1
@x3
@x4)))
 

:pattern ((X64.Vale.StrongPost_i.lemma_weak_pre_ins @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.StrongPost_i.lemma_weak_pre_ins))

:named typing_X64.Vale.StrongPost_i.lemma_weak_pre_ins))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_empty; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(222,4-222,18); use=X64.Vale.Decls.fsti(222,4-222,18)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=X64.Vale.Decls.fsti(223,12-223,53); use=X64.Vale.Decls.fsti(223,12-223,53)
(Valid 
;; def=X64.Vale.Decls.fsti(223,12-223,53); use=X64.Vale.Decls.fsti(223,12-223,53)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
@x0
@x1)
)

(HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.Decls.va_lemma_empty @x0
@x1)
(Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x0
@x1)))
 

:pattern ((X64.Vale.Decls.va_lemma_empty @x0
@x1))
:qid typing_X64.Vale.Decls.va_lemma_empty))

:named typing_X64.Vale.Decls.va_lemma_empty))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.StrongPost_i.lemma_weak_pre_ins; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fst(49,8-49,22); use=X64.Vale.StrongPost_i.fst(49,8-49,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_a4915127f7561059f8cb6a073d9a5c0f))

:named refinement_kinding_Tm_refine_a4915127f7561059f8cb6a073d9a5c0f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_empty; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(42,22-42,27); use=X64.Vale.Decls.fsti(222,61-222,69)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e))

:named refinement_kinding_Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.StrongPost_i.lemma_weak_pre_ins; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fst(49,8-49,22); use=X64.Vale.StrongPost_i.fst(49,8-49,22)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option X64.Vale.State_i.state))
(let ((@lb5 @x1))
(ite (is-FStar.Pervasives.Native.None @lb5)

;; def=X64.Vale.StrongPost_i.fst(55,17-55,22); use=X64.Vale.StrongPost_i.fst(55,17-55,22)
false

(ite (is-FStar.Pervasives.Native.Some @lb5)

;; def=X64.Vale.StrongPost_i.fst(57,7-59,40); use=X64.Vale.StrongPost_i.fst(57,7-59,40)
(and 
;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(57,7-57,54)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(57,7-57,54)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes @x2))
(FStar.Pervasives.Native.Some_v @lb5)
@x3)
)


;; def=X64.Vale.StrongPost_i.fst(58,7-58,12); use=X64.Vale.StrongPost_i.fst(58,7-58,12)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Some_v @lb5)))


;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(59,7-59,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(59,7-59,40)
(X64.Vale.StrongPost_i.wp_code @x2
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x3)
@x4)
(FStar.Pervasives.Native.Some_v @lb5))
)
)

Unreachable)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_a4915127f7561059f8cb6a073d9a5c0f))

:named refinement_interpretation_Tm_refine_a4915127f7561059f8cb6a073d9a5c0f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_empty; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(42,22-42,27); use=X64.Vale.Decls.fsti(222,61-222,69)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x2
@x3))
(and (HasTypeFuel @u0
@x1
X64.Vale.State_i.state)

;; def=X64.Vale.Decls.fsti(224,23-224,31); use=X64.Vale.Decls.fsti(224,23-224,31)
(= @x1
@x2)


;; def=X64.Vale.Decls.fsti(224,35-224,43); use=X64.Vale.Decls.fsti(224,35-224,43)
(= @x1
@x3)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e))

:named refinement_interpretation_Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a4915127f7561059f8cb6a073d9a5c0f
;;; Fact-ids: Name X64.Vale.StrongPost_i.lemma_weak_pre_ins; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fst(49,8-49,22); use=X64.Vale.StrongPost_i.fst(49,8-49,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x0
@x1
@x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_a4915127f7561059f8cb6a073d9a5c0f @x0
@x1
@x2))))
:qid haseqTm_refine_a4915127f7561059f8cb6a073d9a5c0f))

:named haseqTm_refine_a4915127f7561059f8cb6a073d9a5c0f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e
;;; Fact-ids: Name X64.Vale.Decls.va_lemma_empty; Namespace X64.Vale.Decls
(assert (! 
;; def=X64.Vale.Decls.fsti(42,22-42,27); use=X64.Vale.Decls.fsti(222,61-222,69)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x0
@x1)))
(Valid (Prims.hasEq X64.Vale.State_i.state)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e @x0
@x1))))
:qid haseqTm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e))

:named haseqTm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e))
;;;;;;;;;;;;;;;;Equation for X64.Vale.StrongPost_i.lemma_weak_pre_ins
;;; Fact-ids: Name X64.Vale.StrongPost_i.lemma_weak_pre_ins; Namespace X64.Vale.StrongPost_i
(assert (! 
;; def=X64.Vale.StrongPost_i.fst(47,4-47,22); use=X64.Vale.StrongPost_i.fst(47,4-47,22)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Vale.StrongPost_i.lemma_weak_pre_ins @x0
@x1
@x2
@x3
@x4)
(let ((@lb5 @x0))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb5)
@x2))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Mov64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb5)))
(X64.Vale.StrongPost_i.Mov64_src @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb5))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb5))
X64.Machine_s.Rsp@tok)
(FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb5))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb5))))))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Load64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb5)))
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb5)))
(X64.Vale.StrongPost_i.Load64_offset @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb5))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb5)))))
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb5)
@x2))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Store64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb5)))
(X64.Vale.StrongPost_i.Store64_src @lb5)
(X64.Vale.StrongPost_i.Store64_offset @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb5)
@x2))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Add64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb5)))
(X64.Vale.StrongPost_i.Add64Wrap_src @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb5)
@x2))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Adc64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb5)))
(X64.Vale.StrongPost_i.Adc64Wrap_src @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb5)
(let ((@lb6 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb5)
@x2)))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Mul64Wrap (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Vale.StrongPost_i.Mul64Wrap_src @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb5)
@x2))
(Prims.op_LessThan (BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb5))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb5)
@x2))))
(BoxInt 18446744073709551616)))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_IMul64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb5)))
(X64.Vale.StrongPost_i.IMul64_src @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.And64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb5)
@x2))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_And64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb5)))
(X64.Vale.StrongPost_i.And64_amt @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb5)
@x2))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Shr64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb5)))
(X64.Vale.StrongPost_i.Shr64_amt @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb5)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb5)))
(let ((@lb6 (Prims.op_AmpAmp (Prims.op_AmpAmp (Prims.op_disEquality X64.Machine_s.reg
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb5))
X64.Machine_s.Rsp@tok)
(X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb5)
@x2))
(Prims.op_LessThanOrEqual (BoxInt 0)
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x2)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb5))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb5)
@x2))))))))
(ite (= @lb6
(BoxBool true))
(let ((@lb7 (X64.Vale.Decls.va_lemma_Sub64 (X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x0
@x1))
@x2
@x3
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb5)))
(X64.Vale.StrongPost_i.Sub64_src @lb5))))
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
(FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))
(FStar.Pervasives.Native.None X64.Vale.State_i.state)))))))))))))
 

:pattern ((X64.Vale.StrongPost_i.lemma_weak_pre_ins @x0
@x1
@x2
@x3
@x4))
:qid equation_X64.Vale.StrongPost_i.lemma_weak_pre_ins))

:named equation_X64.Vale.StrongPost_i.lemma_weak_pre_ins))
(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(146,2-159,5)

;;;;;;;;;;;;;;;;inss : Prims.list X64.Vale.StrongPost_i.ins (Prims.list X64.Vale.StrongPost_i.ins)
(declare-fun x_64054ab5c496dbf376bb97c3f7e4eb60_0 () Term)
;;;;;;;;;;;;;;;;binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0
;;; Fact-ids: 
(assert (! (HasType x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.list X64.Vale.StrongPost_i.ins))
:named binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0))
;;;;;;;;;;;;;;;;s0 : X64.Vale.State_i.state (X64.Vale.State_i.state)
(declare-fun x_de52c7fd4c52e1942aeef9a9143c43bf_1 () Term)
;;;;;;;;;;;;;;;;binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1
;;; Fact-ids: 
(assert (! (HasType x_de52c7fd4c52e1942aeef9a9143c43bf_1
X64.Vale.State_i.state)
:named binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1))
;;;;;;;;;;;;;;;;sN : X64.Vale.State_i.state (X64.Vale.State_i.state)
(declare-fun x_de52c7fd4c52e1942aeef9a9143c43bf_2 () Term)
;;;;;;;;;;;;;;;;binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2
;;; Fact-ids: 
(assert (! (HasType x_de52c7fd4c52e1942aeef9a9143c43bf_2
X64.Vale.State_i.state)
:named binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2))
;;;;;;;;;;;;;;;;post : _: Prims.unit -> Type0 (_: Prims.unit -> Type)
(declare-fun x_3284329bb1c5b2e1dbce923927b2072b_3 () Term)

;;;;;;;;;;;;;;;;binder_x_3284329bb1c5b2e1dbce923927b2072b_3
;;; Fact-ids: 
(assert (! (HasType x_3284329bb1c5b2e1dbce923927b2072b_3
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)
:named binder_x_3284329bb1c5b2e1dbce923927b2072b_3))
;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_weak_pre (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_weak_pre@tok () Term)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)







; Encoding query formula : forall (p: Prims.pure_post Prims.unit).
;   X64.Vale.Decls.eval_code (X64.Machine_s.Block (X64.Vale.StrongPost_i.inss_to_codes inss)) s0 sN /\
;   s0.ok /\ X64.Vale.StrongPost_i.wp_code inss (X64.Vale.StrongPost_i.augment sN post) s0 /\
;   (forall (pure_result: Prims.unit). post () ==> p pure_result) ==>
;   (forall (k: Prims.pure_post Prims.unit).
;       (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} p x ==> k x) ==>
;       (~(Nil? inss) /\ ~(Cons? inss) ==> Prims.l_False) /\
;       (inss == [] ==>
;         X64.Vale.Decls.eval_code (X64.Machine_s.Block []) s0 sN /\
;         (forall (ghost_result: X64.Vale.State_i.state).
;             ghost_result == s0 /\ ghost_result == sN ==>
;             X64.Vale.Decls.va_lemma_empty s0 sN == ghost_result ==>
;             (forall (pure_result: Prims.unit).
;                 X64.Vale.StrongPost_i.regs_match [
;                     X64.Machine_s.Rax; X64.Machine_s.Rbx; X64.Machine_s.Rcx; X64.Machine_s.Rdx;
;                     X64.Machine_s.Rsi; X64.Machine_s.Rdi; X64.Machine_s.Rbp; X64.Machine_s.Rsp;
;                     X64.Machine_s.R8; X64.Machine_s.R9; X64.Machine_s.R10; X64.Machine_s.R11;
;                     X64.Machine_s.R12; X64.Machine_s.R13; X64.Machine_s.R14; X64.Machine_s.R15
;                   ]
;                   s0
;                   s0 ==>
;                 X64.Vale.StrongPost_i.wp_code [] (X64.Vale.StrongPost_i.augment sN post) s0 /\
;                 (forall (pure_result: Prims.unit).
;                     (forall (okN: Prims.bool)
;                         (regsN: X64.Vale.Regs_i.t)
;                         (flagsN: X64.Machine_s.nat64)
;                         (memN: X64.Vale.State_i.mem).
;                         okN ==
;                         (match s0 as proj_ret returns$ Prims.bool with
;                           | { ok = ok ; regs = _ ; flags = _ ; mem = _ } -> ok) /\
;                         memN ==
;                         (match s0 as proj_ret returns$ X64.Vale.State_i.mem with
;                           | { ok = _ ; regs = _ ; flags = _ ; mem = mem } -> mem) /\
;                         flagsN ==
;                         (match s0 as proj_ret returns$ X64.Machine_s.nat64 with
;                           | { ok = _ ; regs = _ ; flags = flags ; mem = _ } -> flags) /\
;                         ((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rax
;                            ==
;                           regsN X64.Machine_s.Rax) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rbx
;                            ==
;                           regsN X64.Machine_s.Rbx) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rcx
;                            ==
;                           regsN X64.Machine_s.Rcx) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rdx
;                            ==
;                           regsN X64.Machine_s.Rdx) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rsi
;                            ==
;                           regsN X64.Machine_s.Rsi) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rdi
;                            ==
;                           regsN X64.Machine_s.Rdi) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rbp
;                            ==
;                           regsN X64.Machine_s.Rbp) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.Rsp
;                            ==
;                           regsN X64.Machine_s.Rsp) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R8
;                            ==
;                           regsN X64.Machine_s.R8) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R9
;                            ==
;                           regsN X64.Machine_s.R9) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R10
;                            ==
;                           regsN X64.Machine_s.R10) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R11
;                            ==
;                           regsN X64.Machine_s.R11) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R12
;                            ==
;                           regsN X64.Machine_s.R12) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R13
;                            ==
;                           regsN X64.Machine_s.R13) /\
;                         (((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R14
;                            ==
;                           regsN X64.Machine_s.R14) /\
;                         ((match s0 as proj_ret returns$ X64.Vale.Regs_i.t with
;                             | { ok = _ ; regs = regs ; flags = _ ; mem = _ } -> regs) X64.Machine_s.R15
;                            ==
;                           regsN X64.Machine_s.R15))))))))))))))) ==>
;                         X64.Vale.State_i.Mkstate okN regsN flagsN memN == sN ==> post ()) ==>
;                     (forall (any_result: Prims.unit). k any_result))))) /\
;       (~(Nil? inss) ==>
;         (forall (b: X64.Vale.StrongPost_i.ins) (b: Prims.list X64.Vale.StrongPost_i.ins).
;             inss == b :: b ==>
;             s0.ok /\
;             X64.Vale.Decls.eval_code (X64.Machine_s.Block
;                 (X64.Vale.StrongPost_i.inss_to_codes (b :: b)))
;               s0
;               sN /\
;             X64.Vale.StrongPost_i.wp_code (b :: b) (X64.Vale.StrongPost_i.augment sN post) s0 /\
;             (forall (ghost_result: FStar.Pervasives.Native.option X64.Vale.State_i.state).
;                 (match ghost_result with
;                   | FStar.Pervasives.Native.None  -> Prims.l_False
;                   | FStar.Pervasives.Native.Some sM ->
;                     X64.Vale.Decls.eval_code (X64.Machine_s.Block
;                         (X64.Vale.StrongPost_i.inss_to_codes b))
;                       sM
;                       sN /\ sM.ok /\
;                     X64.Vale.StrongPost_i.wp_code b (X64.Vale.StrongPost_i.augment sN post) sM) ==>
;                 X64.Vale.StrongPost_i.lemma_weak_pre_ins b b s0 sN post == ghost_result ==>
;                 (forall (k: Prims.pure_post Prims.unit).
;                     (forall (x: Prims.unit). {:pattern Prims.guard_free (k x)} k x ==> k x) ==>
;                     (~(None? (X64.Vale.StrongPost_i.lemma_weak_pre_ins b b s0 sN post)) /\
;                       ~(Some? (X64.Vale.StrongPost_i.lemma_weak_pre_ins b b s0 sN post)) ==>
;                       Prims.l_False) /\
;                     (X64.Vale.StrongPost_i.lemma_weak_pre_ins b b s0 sN post ==
;                       FStar.Pervasives.Native.None ==>
;                       post () /\ (forall (pure_result: Prims.unit). post () ==> k pure_result)) /\
;                     (~(None? (X64.Vale.StrongPost_i.lemma_weak_pre_ins b b s0 sN post)) ==>
;                       (forall (b: X64.Vale.State_i.state).
;                           X64.Vale.StrongPost_i.lemma_weak_pre_ins b b s0 sN post ==
;                           FStar.Pervasives.Native.Some b ==>
;                           (b << inss \/ b === inss /\ (b << s0 \/ b === s0 /\ sN << sN)) /\
;                           (forall (any_result: (_: Prims.unit -> Type0)).
;                               post == any_result ==>
;                               X64.Vale.Decls.eval_code (X64.Machine_s.Block
;                                   (X64.Vale.StrongPost_i.inss_to_codes b))
;                                 b
;                                 sN /\ b.ok /\
;                               X64.Vale.StrongPost_i.wp_code b
;                                 (X64.Vale.StrongPost_i.augment sN post)
;                                 b /\ (forall (pure_result: Prims.unit). post () ==> k pure_result)))
;                     ))))))


; Context: While encoding a query
; While typechecking the top-level declaration `let rec lemma_weak_pre`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x0 Term))
 (! (implies (and (HasType @x0
(Prims.pure_post Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes x_64054ab5c496dbf376bb97c3f7e4eb60_0))
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)


;; def=X64.Vale.StrongPost_i.fst(141,4-141,9); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok x_de52c7fd4c52e1942aeef9a9143c43bf_1))


;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(X64.Vale.StrongPost_i.wp_code x_64054ab5c496dbf376bb97c3f7e4eb60_0
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_3284329bb1c5b2e1dbce923927b2072b_3)
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x1 Term))
 (! (implies (and (or label_1
(HasType @x1
Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(or label_2

;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT x_3284329bb1c5b2e1dbce923927b2072b_3
Tm_unit)
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x0
@x1)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x0
@x1)
)
)
:qid @query.1))
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x1 Term))
 (! (implies (and (HasType @x1
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x2 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x0
@x2)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x1
@x2)
)
)
 :weight 0


:pattern ((ApplyTT @x1
@x2))
:qid @query.3))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(146,8-146,12)
(and 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(146,8-146,12)
(not 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(146,8-146,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
)


;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(146,8-146,12)
(not 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(146,8-146,12)
(BoxBool_proj_0 (Prims.uu___is_Cons X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
)
)

label_3)
(implies 
;; def=X64.Vale.StrongPost_i.fst(138,25-147,6); use=X64.Vale.StrongPost_i.fst(146,8-147,6)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Nil X64.Vale.StrongPost_i.ins))


;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(and 
;; def=X64.Vale.Decls.fsti(223,12-223,53); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(or label_4

;; def=X64.Vale.Decls.fsti(223,12-223,53); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(Valid 
;; def=X64.Vale.Decls.fsti(223,12-223,53); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)))
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(forall ((@x2 Term))
 (! (implies (and (HasType @x2
X64.Vale.State_i.state)

;; def=X64.Vale.Decls.fsti(224,23-224,31); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(= @x2
x_de52c7fd4c52e1942aeef9a9143c43bf_1)


;; def=X64.Vale.Decls.fsti(224,35-224,43); use=X64.Vale.StrongPost_i.fst(148,14-148,28)
(= @x2
x_de52c7fd4c52e1942aeef9a9143c43bf_2)


;; def=X64.Vale.StrongPost_i.fst(148,10-148,34); use=X64.Vale.StrongPost_i.fst(148,10-148,34)
(= (X64.Vale.Decls.va_lemma_empty x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
@x2)
)

;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(151,6-151,27)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
Prims.unit)

;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(151,6-151,27)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(27,11-27,32); use=X64.Vale.StrongPost_i.fst(151,6-151,27)
(X64.Vale.StrongPost_i.regs_match (Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rax@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rbx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rcx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rdx@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rsi@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rdi@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rbp@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.Rsp@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R8@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R9@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R10@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R11@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R12@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R13@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R14@tok
(Prims.Cons X64.Machine_s.reg
X64.Machine_s.R15@tok
(Prims.Nil X64.Machine_s.reg)))))))))))))))))
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)
)

;; def=Prims.fst(441,29-441,97); use=X64.Vale.StrongPost_i.fst(152,6-152,21)
(and 
;; def=X64.Vale.StrongPost_i.fst(152,21-152,54); use=X64.Vale.StrongPost_i.fst(152,6-152,21)
(or label_5

;; def=X64.Vale.StrongPost_i.fst(152,21-152,54); use=X64.Vale.StrongPost_i.fst(152,6-152,21)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(152,21-152,54); use=X64.Vale.StrongPost_i.fst(152,6-152,21)
(X64.Vale.StrongPost_i.wp_code (Prims.Nil X64.Vale.StrongPost_i.ins)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_3284329bb1c5b2e1dbce923927b2072b_3)
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(152,6-152,21)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
Prims.unit)

;; def=X64.Vale.StrongPost_i.fsti(108,7-114,15); use=X64.Vale.StrongPost_i.fsti(108,7-114,15)
(forall ((@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x5
Prims.bool)
(HasType @x6
X64.Vale.Regs_i.t)
(HasType @x7
X64.Machine_s.nat64)
(HasType @x8
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(110,7-110,19); use=X64.Vale.StrongPost_i.fsti(110,7-110,19)
(= @x5
(let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_ok @lb9)))


;; def=X64.Vale.StrongPost_i.fsti(111,7-111,21); use=X64.Vale.StrongPost_i.fsti(111,7-111,21)
(= @x8
(let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_mem @lb9)))


;; def=X64.Vale.StrongPost_i.fsti(112,7-112,25); use=X64.Vale.StrongPost_i.fsti(112,7-112,25)
(= @x7
(let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_flags @lb9)))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rax@tok)
(ApplyTT @x6
X64.Machine_s.Rax@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rbx@tok)
(ApplyTT @x6
X64.Machine_s.Rbx@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rcx@tok)
(ApplyTT @x6
X64.Machine_s.Rcx@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rdx@tok)
(ApplyTT @x6
X64.Machine_s.Rdx@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rsi@tok)
(ApplyTT @x6
X64.Machine_s.Rsi@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rdi@tok)
(ApplyTT @x6
X64.Machine_s.Rdi@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rbp@tok)
(ApplyTT @x6
X64.Machine_s.Rbp@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.Rsp@tok)
(ApplyTT @x6
X64.Machine_s.Rsp@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R8@tok)
(ApplyTT @x6
X64.Machine_s.R8@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R9@tok)
(ApplyTT @x6
X64.Machine_s.R9@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R10@tok)
(ApplyTT @x6
X64.Machine_s.R10@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R11@tok)
(ApplyTT @x6
X64.Machine_s.R11@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R12@tok)
(ApplyTT @x6
X64.Machine_s.R12@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R13@tok)
(ApplyTT @x6
X64.Machine_s.R13@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R14@tok)
(ApplyTT @x6
X64.Machine_s.R14@tok))


;; def=X64.Vale.StrongPost_i.fsti(68,15-68,37); use=X64.Vale.StrongPost_i.fsti(68,15-68,37)
(= (ApplyTT (let ((@lb9 x_de52c7fd4c52e1942aeef9a9143c43bf_1))
(X64.Vale.State_i.Mkstate_regs @lb9))
X64.Machine_s.R15@tok)
(ApplyTT @x6
X64.Machine_s.R15@tok))


;; def=X64.Vale.StrongPost_i.fsti(102,1-102,18); use=X64.Vale.StrongPost_i.fsti(102,1-102,18)
(= (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)

;; def=X64.Vale.StrongPost_i.fsti(102,23-102,30); use=X64.Vale.StrongPost_i.fsti(102,23-102,30)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(102,23-102,30); use=X64.Vale.StrongPost_i.fsti(102,23-102,30)
(ApplyTT x_3284329bb1c5b2e1dbce923927b2072b_3
Tm_unit)
)
)
 
;;no pats
:qid @query.7))
)

;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x5 Term))
 (! (implies (HasType @x5
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(451,90-451,102); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x1
@x5)
)
)
 
;;no pats
:qid @query.8))
)
 
;;no pats
:qid @query.6))
)
)
 
;;no pats
:qid @query.5))
)
 
;;no pats
:qid @query.4))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(not 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(146,8-146,12)
(BoxBool_proj_0 (Prims.uu___is_Nil X64.Vale.StrongPost_i.ins
x_64054ab5c496dbf376bb97c3f7e4eb60_0))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Vale.StrongPost_i.ins)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.list X64.Vale.StrongPost_i.ins))

;; def=X64.Vale.StrongPost_i.fst(138,25-154,11); use=X64.Vale.StrongPost_i.fst(146,8-154,11)
(= x_64054ab5c496dbf376bb97c3f7e4eb60_0
(Prims.Cons X64.Vale.StrongPost_i.ins
@x2
@x3))
)

;; def=Prims.fst(485,29-485,100); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(and 
;; def=X64.Vale.StrongPost_i.fst(50,20-50,25); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(or label_6

;; def=X64.Vale.StrongPost_i.fst(50,20-50,25); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok x_de52c7fd4c52e1942aeef9a9143c43bf_1))
)


;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(or label_7

;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(51,6-51,58); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons X64.Vale.StrongPost_i.ins
@x2
@x3)))
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)


;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(or label_8

;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(52,6-52,44); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons X64.Vale.StrongPost_i.ins
@x2
@x3)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_3284329bb1c5b2e1dbce923927b2072b_3)
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(FStar.Pervasives.Native.option X64.Vale.State_i.state))
(let ((@lb5 @x4))
(ite (is-FStar.Pervasives.Native.None @lb5)

;; def=X64.Vale.StrongPost_i.fst(55,17-55,22); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
false

(ite (is-FStar.Pervasives.Native.Some @lb5)

;; def=X64.Vale.StrongPost_i.fst(57,7-59,40); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(and 
;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(57,7-57,54); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes @x3))
(FStar.Pervasives.Native.Some_v @lb5)
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)


;; def=X64.Vale.StrongPost_i.fst(58,7-58,12); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Some_v @lb5)))


;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(59,7-59,40); use=X64.Vale.StrongPost_i.fst(156,12-156,30)
(X64.Vale.StrongPost_i.wp_code @x3
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_3284329bb1c5b2e1dbce923927b2072b_3)
(FStar.Pervasives.Native.Some_v @lb5))
)
)

Unreachable)))

;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(= (X64.Vale.StrongPost_i.lemma_weak_pre_ins @x2
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_3284329bb1c5b2e1dbce923927b2072b_3)
@x4)
)

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post Prims.unit))

;; def=Prims.fst(402,2-402,97); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x6 Term))
 (! (implies 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(402,73-402,79); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x1
@x6)
)


;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(ApplyTT @x5
@x6)
)
)
 :weight 0


:pattern ((ApplyTT @x5
@x6))
:qid @query.13))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(and (implies 
;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(and 
;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(not 
;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None X64.Vale.State_i.state
(X64.Vale.StrongPost_i.lemma_weak_pre_ins @x2
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_3284329bb1c5b2e1dbce923927b2072b_3)))
)


;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(not 
;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some X64.Vale.State_i.state
(X64.Vale.StrongPost_i.lemma_weak_pre_ins @x2
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_3284329bb1c5b2e1dbce923927b2072b_3)))
)
)

label_9)
(implies 
;; def=X64.Vale.StrongPost_i.fst(156,12-157,12); use=X64.Vale.StrongPost_i.fst(156,12-157,12)
(= (X64.Vale.StrongPost_i.lemma_weak_pre_ins @x2
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_3284329bb1c5b2e1dbce923927b2072b_3)
(FStar.Pervasives.Native.None X64.Vale.State_i.state))


;; def=Prims.fst(441,29-441,97); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(and 
;; def=X64.Vale.StrongPost_i.fst(157,22-157,31); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(or label_10

;; def=X64.Vale.StrongPost_i.fst(157,22-157,31); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(157,22-157,31); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(ApplyTT x_3284329bb1c5b2e1dbce923927b2072b_3
Tm_unit)
)
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=X64.Vale.StrongPost_i.fst(157,22-157,31); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(157,22-157,31); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(ApplyTT x_3284329bb1c5b2e1dbce923927b2072b_3
Tm_unit)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(157,16-157,22)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.14))
)
)
(implies 
;; def=Prims.fst(389,19-389,21); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(not 
;; def=X64.Vale.StrongPost_i.fst(156,12-156,48); use=X64.Vale.StrongPost_i.fst(156,12-156,48)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None X64.Vale.State_i.state
(X64.Vale.StrongPost_i.lemma_weak_pre_ins @x2
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_3284329bb1c5b2e1dbce923927b2072b_3)))
)


;; def=Prims.fst(413,99-413,120); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
X64.Vale.State_i.state)

;; def=X64.Vale.StrongPost_i.fst(156,12-158,15); use=X64.Vale.StrongPost_i.fst(156,12-158,15)
(= (X64.Vale.StrongPost_i.lemma_weak_pre_ins @x2
@x3
x_de52c7fd4c52e1942aeef9a9143c43bf_1
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_3284329bb1c5b2e1dbce923927b2072b_3)
(FStar.Pervasives.Native.Some X64.Vale.State_i.state
@x6))
)

;; def=Prims.fst(459,77-459,89); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(and 
;; def=X64.Vale.StrongPost_i.fst(138,25-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(or label_11

;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Prims.precedes (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fst(138,25-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(and 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(138,25-138,29); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Prims.op_Equals_Equals_Equals (Prims.list X64.Vale.StrongPost_i.ins)
(Prims.list X64.Vale.StrongPost_i.ins)
@x3
x_64054ab5c496dbf376bb97c3f7e4eb60_0)
)


;; def=X64.Vale.StrongPost_i.fst(138,41-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(or 
;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)


;; def=X64.Vale.StrongPost_i.fst(138,41-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(and 
;; def=X64.Vale.StrongPost_i.fst(138,41-138,43); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(138,41-138,43); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Prims.op_Equals_Equals_Equals X64.Vale.State_i.state
X64.Vale.State_i.state
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_1)
)


;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(146,2-159,5); use=X64.Vale.StrongPost_i.fst(158,45-158,49)
(Prims.precedes X64.Vale.State_i.state
X64.Vale.State_i.state
x_de52c7fd4c52e1942aeef9a9143c43bf_2
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)
)
)
)


;; def=Prims.fst(451,66-451,102); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe)

;; def=X64.Vale.StrongPost_i.fst(138,63-138,67); use=X64.Vale.StrongPost_i.fst(146,2-159,5)
(= x_3284329bb1c5b2e1dbce923927b2072b_3
@x7)
)

;; def=Prims.fst(441,29-441,97); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(and 
;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(or label_12

;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes @x3))
@x6
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
)
)


;; def=X64.Vale.StrongPost_i.fst(141,4-141,9); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(or label_13

;; def=X64.Vale.StrongPost_i.fst(141,4-141,9); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x6))
)


;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(or label_14

;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(X64.Vale.StrongPost_i.wp_code @x3
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
x_de52c7fd4c52e1942aeef9a9143c43bf_2)
x_3284329bb1c5b2e1dbce923927b2072b_3)
@x6)
)
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
Prims.unit)

;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(ApplyTT x_3284329bb1c5b2e1dbce923927b2072b_3
Tm_unit)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(158,19-158,33)
(ApplyTT @x5
@x8)
)
)
 
;;no pats
:qid @query.17))
)
)
 
;;no pats
:qid @query.16))
)
)
 
;;no pats
:qid @query.15))
))
)
 
;;no pats
:qid @query.12))
)
 
;;no pats
:qid @query.11))
)
)
 
;;no pats
:qid @query.10))
)
 
;;no pats
:qid @query.9))
))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.lemma_weak_pre, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, @query, X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7, X64.Vale.State_i_pretyping_de52c7fd4c52e1942aeef9a9143c43bf, binder_x_64054ab5c496dbf376bb97c3f7e4eb60_0, binder_x_de52c7fd4c52e1942aeef9a9143c43bf_1, binder_x_de52c7fd4c52e1942aeef9a9143c43bf_2, constructor_distinct_FStar.Pervasives.Native.None, constructor_distinct_Prims.Nil, data_elim_X64.Vale.State_i.Mkstate, disc_equation_Prims.Cons, disc_equation_Prims.Nil, equality_tok_X64.Machine_s.Rsp@tok, equation_FStar.FunctionalExtensionality.restricted_t, equation_Prims.nat, equation_X64.Machine_s.nat64, equation_X64.Vale.Regs_i.t, equation_with_fuel_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, fuel_guarded_inversion_Prims.list, fuel_guarded_inversion_X64.Vale.State_i.state, int_inversion, kinding_X64.Vale.State_i.state@tok, lemma_FStar.Pervasives.invertOption, proj_equation_X64.Vale.State_i.Mkstate_ok, projection_inverse_BoxBool_proj_0, projection_inverse_FStar.Pervasives.Native.Some_v, projection_inverse_Prims.Cons_tl, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e, refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40, subterm_ordering_Prims.Cons, typing_X64.Vale.State_i.__proj__Mkstate__item__ok, typing_tok_X64.Machine_s.Rsp@tok, unit_inversion, unit_typing

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let rec lemma_weak_pre


; <Start encoding let rec lemma_weak_pre>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_weak_pre (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StrongPost_i.lemma_weak_pre@tok () Term)

; </end encoding let rec lemma_weak_pre>

(push) ;; push{2

; Starting query at X64.Vale.StrongPost_i.fst(174,2-175,32)

(declare-fun label_38 () Bool)
(declare-fun label_37 () Bool)
(declare-fun label_36 () Bool)
(declare-fun label_35 () Bool)
(declare-fun label_34 () Bool)
(declare-fun label_33 () Bool)
(declare-fun label_32 () Bool)
(declare-fun label_31 () Bool)
(declare-fun label_30 () Bool)
(declare-fun label_29 () Bool)
(declare-fun label_28 () Bool)
(declare-fun label_27 () Bool)
(declare-fun label_26 () Bool)
(declare-fun label_25 () Bool)
(declare-fun label_24 () Bool)
(declare-fun label_23 () Bool)
(declare-fun label_22 () Bool)
(declare-fun label_21 () Bool)
(declare-fun label_20 () Bool)
(declare-fun label_19 () Bool)
(declare-fun label_18 () Bool)
(declare-fun label_17 () Bool)
(declare-fun label_16 () Bool)
(declare-fun label_15 () Bool)
(declare-fun label_14 () Bool)
(declare-fun label_13 () Bool)
(declare-fun label_12 () Bool)
(declare-fun label_11 () Bool)
(declare-fun label_10 () Bool)
(declare-fun label_9 () Bool)
(declare-fun label_8 () Bool)
(declare-fun label_7 () Bool)
(declare-fun label_6 () Bool)
(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)


















































; Encoding query formula : forall (inss: Prims.list X64.Vale.StrongPost_i.ins)
;   (s0: X64.Vale.State_i.state)
;   (sN: X64.Vale.State_i.state)
;   (post: (_: Prims.unit -> Type)).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (ok0: Prims.bool)
;         (regs0: X64.Vale.Regs_i.t)
;         (flags0: X64.Machine_s.nat64)
;         (mem0: FStar.Map.t Prims.int X64.Machine_s.nat64).
;         ok0 == s0.ok /\ regs0 == s0.regs /\ flags0 == s0.flags /\ mem0 == s0.mem ==>
;         s0.ok /\
;         X64.Vale.Decls.eval_code (X64.Machine_s.Block
;             (match inss with
;               | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ :: _ -> []
;               | X64.Vale.StrongPost_i.Load64
;                 (X64.Machine_s.OReg dst)
;                 (X64.Machine_s.OReg src)
;                 offset ::
;               inss ->
;                 X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg dst)
;                   (X64.Machine_s.OReg src)
;                   offset ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset :: inss ->
;                 X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg dst) src offset ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Mul64Wrap src :: inss ->
;                 X64.Vale.Decls.va_code_Mul64Wrap src :: X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ :: _ -> []
;               | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src :: inss ->
;                 X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg dst) src ::
;                 X64.Vale.StrongPost_i.inss_to_codes inss
;               | _ -> []))
;           s0
;           sN /\
;         (match inss with
;           | [] ->
;             forall (okN: Prims.bool)
;               (regsN: X64.Vale.Regs_i.t)
;               (flagsN: X64.Machine_s.nat64)
;               (memN: X64.Vale.State_i.mem).
;               okN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok /\
;               memN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem /\
;               flagsN == (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags /\
;               X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)
;                 (X64.Vale.State_i.Mkstate okN regsN flagsN memN) ==>
;               X64.Vale.StrongPost_i.augment sN post (X64.Vale.State_i.Mkstate okN regsN flagsN memN)
;           | hd :: inss ->
;             (match hd with
;               | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (x: X64.Machine_s.nat64).
;                     x ==
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.update_reg dst
;                           x
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)))
;               | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.Load64
;                 (X64.Machine_s.OReg dst)
;                 (X64.Machine_s.OReg src)
;                 offset ->
;                 X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst
;                     ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs src + offset))
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (x: X64.Machine_s.nat64).
;                     x ==
;                     FStar.Map.sel (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                       ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs src + offset) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.update_reg dst
;                           x
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)))
;               | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 FStar.Map.contains (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                   ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst + offset) /\
;                 (forall (x: X64.Vale.State_i.mem).
;                     x ==
;                     FStar.Map.upd (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem
;                       ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst + offset)
;                       (X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags
;                           x))
;               | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                     a ==
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst +
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                     x ==
;                     (match a < X64.Machine_s.nat64_max with
;                       | true -> a
;                       | _ -> a - X64.Machine_s.nat64_max) /\
;                     X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .ok
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .regs
;                           f
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .mem))
;               | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                     a ==
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst +
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) +
;                     (match
;                         X64.Vale.Decls.cf (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).flags
;                       with
;                       | true -> 1
;                       | _ -> 0) /\
;                     x ==
;                     (match a < X64.Machine_s.nat64_max with
;                       | true -> a
;                       | _ -> a - X64.Machine_s.nat64_max) /\
;                     X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .ok
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .regs
;                           f
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .mem))
;               | X64.Vale.StrongPost_i.Mul64Wrap src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (rax: X64.Machine_s.nat64)
;                     (rdx: X64.Machine_s.nat64)
;                     (f: X64.Machine_s.nat64).
;                     X64.Machine_s.nat64_max * rdx + rax ==
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs X64.Machine_s.Rax *
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                           rdx
;                           (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                               rax
;                               (X64.Vale.State_i.Mkstate
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).ok
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs
;                                   f
;                                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).mem))))
;               | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst *
;                 X64.Vale.StrongPost_i.eval_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) <
;                 X64.Machine_s.nat64_max /\
;                 (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                     x ==
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst *
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .ok
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .regs
;                           f
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .mem))
;               | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                     x ==
;                     X64.Vale.Decls.logand64 ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst
;                         )
;                       (X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .ok
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .regs
;                           f
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .mem))
;               | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                     x ==
;                     X64.Vale.Decls.shift_right64 ((X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)
;                           .regs dst)
;                       (X64.Vale.StrongPost_i.eval_operand_norm src
;                           (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0)) ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .ok
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .regs
;                           f
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .mem))
;               | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;                 Prims.l_False
;               | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src ->
;                 X64.Vale.StrongPost_i.valid_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 0 <=
;                 (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst -
;                 X64.Vale.StrongPost_i.eval_operand_norm src
;                   (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\
;                 (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                     a ==
;                     (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0).regs dst -
;                     X64.Vale.StrongPost_i.eval_operand_norm src
;                       (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0) /\ x == a ==>
;                     X64.Vale.StrongPost_i.wp_code inss
;                       (X64.Vale.StrongPost_i.augment sN post)
;                       (X64.Vale.State_i.Mkstate
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .ok
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .regs
;                           f
;                           (X64.Vale.State_i.update_reg dst
;                               x
;                               (X64.Vale.State_i.Mkstate ok0 regs0 flags0 mem0))
;                             .mem))
;               | _ -> Prims.l_False)
;             <:
;             Type0)) /\ (forall (pure_result: Prims.unit). post () ==> p pure_result) ==>
;     (match inss with
;       | [] ->
;         forall (okN: Prims.bool)
;           (regsN: X64.Vale.Regs_i.t)
;           (flagsN: X64.Machine_s.nat64)
;           (memN: X64.Vale.State_i.mem).
;           okN == s0.ok /\ memN == s0.mem /\ flagsN == s0.flags /\
;           X64.Vale.StrongPost_i.all_regs_match s0 (X64.Vale.State_i.Mkstate okN regsN flagsN memN) ==>
;           X64.Vale.StrongPost_i.augment sN post (X64.Vale.State_i.Mkstate okN regsN flagsN memN)
;       | hd :: inss ->
;         (match hd with
;           | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;           | X64.Vale.StrongPost_i.Mov64 (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             (forall (x: X64.Machine_s.nat64).
;                 x == X64.Vale.StrongPost_i.eval_operand_norm src s0 ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.update_reg dst x s0))
;           | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ _ -> Prims.l_False
;           | X64.Vale.StrongPost_i.Load64 (X64.Machine_s.OReg dst) (X64.Machine_s.OReg src) offset ->
;             X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (s0.regs src + offset)) s0 /\
;             (forall (x: X64.Machine_s.nat64).
;                 x == FStar.Map.sel s0.mem (s0.regs src + offset) ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.update_reg dst x s0))
;           | X64.Vale.StrongPost_i.Store64 (X64.Machine_s.OReg dst) src offset ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             FStar.Map.contains s0.mem (s0.regs dst + offset) /\
;             (forall (x: X64.Vale.State_i.mem).
;                 x ==
;                 FStar.Map.upd s0.mem
;                   (s0.regs dst + offset)
;                   (X64.Vale.StrongPost_i.eval_operand_norm src s0) ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate s0.ok s0.regs s0.flags x))
;           | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;             Prims.l_False
;           | X64.Vale.StrongPost_i.Add64Wrap (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 a == s0.regs dst + X64.Vale.StrongPost_i.eval_operand_norm src s0 /\
;                 x ==
;                 (match a < X64.Machine_s.nat64_max with
;                   | true -> a
;                   | _ -> a - X64.Machine_s.nat64_max) /\
;                 X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                       (X64.Vale.State_i.update_reg dst x s0).regs
;                       f
;                       (X64.Vale.State_i.update_reg dst x s0).mem))
;           | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg X64.Machine_s.Rsp) _ ->
;             Prims.l_False
;           | X64.Vale.StrongPost_i.Adc64Wrap (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 a ==
;                 s0.regs dst + X64.Vale.StrongPost_i.eval_operand_norm src s0 +
;                 (match X64.Vale.Decls.cf s0.flags with
;                   | true -> 1
;                   | _ -> 0) /\
;                 x ==
;                 (match a < X64.Machine_s.nat64_max with
;                   | true -> a
;                   | _ -> a - X64.Machine_s.nat64_max) /\
;                 X64.Vale.Decls.cf f == (a >= X64.Machine_s.nat64_max) ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                       (X64.Vale.State_i.update_reg dst x s0).regs
;                       f
;                       (X64.Vale.State_i.update_reg dst x s0).mem))
;           | X64.Vale.StrongPost_i.Mul64Wrap src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             (forall (rax: X64.Machine_s.nat64) (rdx: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 X64.Machine_s.nat64_max * rdx + rax ==
;                 s0.regs X64.Machine_s.Rax * X64.Vale.StrongPost_i.eval_operand_norm src s0 ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.update_reg X64.Machine_s.Rdx
;                       rdx
;                       (X64.Vale.State_i.update_reg X64.Machine_s.Rax
;                           rax
;                           (X64.Vale.State_i.Mkstate s0.ok s0.regs f s0.mem))))
;           | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;           | X64.Vale.StrongPost_i.IMul64 (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             s0.regs dst * X64.Vale.StrongPost_i.eval_operand_norm src s0 < X64.Machine_s.nat64_max /\
;             (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 x == s0.regs dst * X64.Vale.StrongPost_i.eval_operand_norm src s0 ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                       (X64.Vale.State_i.update_reg dst x s0).regs
;                       f
;                       (X64.Vale.State_i.update_reg dst x s0).mem))
;           | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;           | X64.Vale.StrongPost_i.And64 (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 x ==
;                 X64.Vale.Decls.logand64 (s0.regs dst)
;                   (X64.Vale.StrongPost_i.eval_operand_norm src s0) ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                       (X64.Vale.State_i.update_reg dst x s0).regs
;                       f
;                       (X64.Vale.State_i.update_reg dst x s0).mem))
;           | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;           | X64.Vale.StrongPost_i.Shr64 (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             (forall (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 x ==
;                 X64.Vale.Decls.shift_right64 (s0.regs dst)
;                   (X64.Vale.StrongPost_i.eval_operand_norm src s0) ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                       (X64.Vale.State_i.update_reg dst x s0).regs
;                       f
;                       (X64.Vale.State_i.update_reg dst x s0).mem))
;           | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg X64.Machine_s.Rsp) _ -> Prims.l_False
;           | X64.Vale.StrongPost_i.Sub64 (X64.Machine_s.OReg dst) src ->
;             X64.Vale.StrongPost_i.valid_operand_norm src s0 /\
;             0 <= s0.regs dst - X64.Vale.StrongPost_i.eval_operand_norm src s0 /\
;             (forall (a: Prims.int) (x: X64.Machine_s.nat64) (f: X64.Machine_s.nat64).
;                 a == s0.regs dst - X64.Vale.StrongPost_i.eval_operand_norm src s0 /\ x == a ==>
;                 X64.Vale.StrongPost_i.wp_code inss
;                   (X64.Vale.StrongPost_i.augment sN post)
;                   (X64.Vale.State_i.Mkstate (X64.Vale.State_i.update_reg dst x s0).ok
;                       (X64.Vale.State_i.update_reg dst x s0).regs
;                       f
;                       (X64.Vale.State_i.update_reg dst x s0).mem))
;           | _ -> Prims.l_False)
;         <:
;         Type0) /\
;     (forall (pure_result: Prims.unit).
;         X64.Vale.StrongPost_i.wp_code inss (X64.Vale.StrongPost_i.augment sN post) s0 ==>
;         X64.Vale.Decls.eval_code (X64.Machine_s.Block (X64.Vale.StrongPost_i.inss_to_codes inss))
;           s0
;           sN /\ s0.ok /\
;         X64.Vale.StrongPost_i.wp_code inss (X64.Vale.StrongPost_i.augment sN post) s0 /\
;         (forall (pure_result: Prims.unit). post () ==> p pure_result))


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_weakest_pre_norm'`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
(Prims.list X64.Vale.StrongPost_i.ins))
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state)
(HasType @x3
Tm_arrow_b9ff16838ca14be79c4714dd5f2c76fe))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x4 Term))
 (! (implies (and (HasType @x4
(Prims.pure_post Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(163,3-172,55); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(forall ((@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x5
Prims.bool)
(HasType @x6
X64.Vale.Regs_i.t)
(HasType @x7
X64.Machine_s.nat64)
(HasType @x8
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fst(164,10-164,22); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(= @x5
(X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.StrongPost_i.fst(165,10-165,26); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(= @x6
(X64.Vale.State_i.__proj__Mkstate__item__regs @x1))


;; def=X64.Vale.StrongPost_i.fst(166,10-166,28); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(= @x7
(X64.Vale.State_i.__proj__Mkstate__item__flags @x1))


;; def=X64.Vale.StrongPost_i.fst(167,10-167,24); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(= @x8
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1))
)

;; def=X64.Vale.StrongPost_i.fst(168,5-172,54); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(and 
;; def=X64.Vale.StrongPost_i.fst(168,5-168,10); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.StrongPost_i.fst(169,5-169,69); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(169,5-169,69); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(let ((@lb9 @x0))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Mov64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mov64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Mov64_src (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Load64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Load64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst (Prims.Cons_hd @lb9))))
(X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Load64_offset (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Store64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Store64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Store64_src (Prims.Cons_hd @lb9))
(X64.Vale.StrongPost_i.Store64_offset (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Add64Wrap (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Add64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Add64Wrap_src (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Adc64Wrap (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Adc64Wrap (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Adc64Wrap_src (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Mul64Wrap (Prims.Cons_hd @lb9)))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Mul64Wrap (X64.Vale.StrongPost_i.Mul64Wrap_src (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.IMul64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_IMul64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.IMul64_src (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.And64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_And64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.And64_amt (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Shr64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Shr64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Shr64_amt (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb9)))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb9)))))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))
(ite (and (is-Prims.Cons @lb9)
(is-X64.Vale.StrongPost_i.Sub64 (Prims.Cons_hd @lb9))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb9))))
(Prims.Cons (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp)
(X64.Vale.Decls.va_code_Sub64 (X64.Machine_s.OReg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst (Prims.Cons_hd @lb9))))
(X64.Vale.StrongPost_i.Sub64_src (Prims.Cons_hd @lb9)))
(X64.Vale.StrongPost_i.inss_to_codes (Prims.Cons_tl @lb9)))
(Prims.Nil (X64.Machine_s.precode X64.Vale.Decls.ins
X64.Vale.Decls.ocmp))))))))))))))))))))))
@x1
@x2)
)

(let ((@lb9 @x0))
(ite (is-Prims.Nil @lb9)

;; def=X64.Vale.StrongPost_i.fsti(108,7-114,15); use=X64.Vale.StrongPost_i.fsti(108,7-114,15)
(forall ((@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x10
Prims.bool)
(HasType @x11
X64.Vale.Regs_i.t)
(HasType @x12
X64.Machine_s.nat64)
(HasType @x13
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(110,7-110,19); use=X64.Vale.StrongPost_i.fsti(110,7-110,19)
(= @x10
(X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(111,7-111,21); use=X64.Vale.StrongPost_i.fsti(111,7-111,21)
(= @x13
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(112,7-112,25); use=X64.Vale.StrongPost_i.fsti(112,7-112,25)
(= @x12
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(X64.Vale.StrongPost_i.all_regs_match (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)
(X64.Vale.State_i.Mkstate @x10
@x11
@x12
@x13))
)
)

;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(X64.Vale.StrongPost_i.augment @x2
@x3
(X64.Vale.State_i.Mkstate @x10
@x11
@x12
@x13))
)
)
 
;;no pats
:qid @query.3))

(ite (is-Prims.Cons @lb9)
(let ((@lb10 (Prims.Cons_hd @lb9)))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(118,32-118,37); use=X64.Vale.StrongPost_i.fsti(118,32-118,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(120,1-122,54); use=X64.Vale.StrongPost_i.fsti(120,1-122,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(120,1-120,26); use=X64.Vale.StrongPost_i.fsti(120,1-120,26)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(121,12-121,41); use=X64.Vale.StrongPost_i.fsti(121,12-121,41)
(= @x11
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
)

;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
)
)
 
;;no pats
:qid @query.4))
)

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(123,35-123,40); use=X64.Vale.StrongPost_i.fsti(123,35-123,40)
false

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb10))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(125,3-127,54); use=X64.Vale.StrongPost_i.fsti(125,3-127,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(125,3-125,54); use=X64.Vale.StrongPost_i.fsti(125,3-125,54)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb10)))))
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(126,12-126,54); use=X64.Vale.StrongPost_i.fsti(126,12-126,54)
(= @x11
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb10))))))
)

;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
)
)
 
;;no pats
:qid @query.5))
)

(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(129,1-133,41); use=X64.Vale.StrongPost_i.fsti(129,1-133,41)
(and 
;; def=X64.Vale.StrongPost_i.fsti(129,1-129,28); use=X64.Vale.StrongPost_i.fsti(129,1-129,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(130,1-130,45); use=X64.Vale.StrongPost_i.fsti(130,1-130,45)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb10))))))


;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x11 Term))
 (! (implies (and (HasType @x11
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(132,3-132,72); use=X64.Vale.StrongPost_i.fsti(132,3-132,72)
(= @x11
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb10))))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))
)

;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
@x11))
)
)
 
;;no pats
:qid @query.6))
)

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(134,36-134,41); use=X64.Vale.StrongPost_i.fsti(134,36-134,41)
false

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(136,1-141,65); use=X64.Vale.StrongPost_i.fsti(136,1-141,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(136,1-136,28); use=X64.Vale.StrongPost_i.fsti(136,1-136,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(137,1-141,65); use=X64.Vale.StrongPost_i.fsti(137,1-141,65)
(forall ((@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x11
Prims.int)
(HasType @x12
X64.Machine_s.nat64)
(HasType @x13
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(138,6-138,49); use=X64.Vale.StrongPost_i.fsti(138,6-138,49)
(= @x11
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))))


;; def=X64.Vale.StrongPost_i.fsti(139,6-139,55); use=X64.Vale.StrongPost_i.fsti(139,6-139,55)
(= @x12
(let ((@lb14 (Prims.op_LessThan @x11
(BoxInt 18446744073709551616))))
(ite (= @lb14
(BoxBool true))
@x11
(BoxInt (- (BoxInt_proj_0 @x11)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(140,4-140,28); use=X64.Vale.StrongPost_i.fsti(140,4-140,28)
(= (X64.Vale.Decls.cf @x13)
(Prims.op_GreaterThanOrEqual @x11
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
@x13
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)
)
 
;;no pats
:qid @query.7))
)

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(142,36-142,41); use=X64.Vale.StrongPost_i.fsti(142,36-142,41)
false

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(144,1-150,65); use=X64.Vale.StrongPost_i.fsti(144,1-150,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(144,1-144,28); use=X64.Vale.StrongPost_i.fsti(144,1-144,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(145,1-150,65); use=X64.Vale.StrongPost_i.fsti(145,1-150,65)
(forall ((@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x11
Prims.int)
(HasType @x12
X64.Machine_s.nat64)
(HasType @x13
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(146,6-147,34); use=X64.Vale.StrongPost_i.fsti(146,6-147,34)
(= @x11
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))
(BoxInt_proj_0 (let ((@lb14 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
(ite (= @lb14
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))


;; def=X64.Vale.StrongPost_i.fsti(148,6-148,55); use=X64.Vale.StrongPost_i.fsti(148,6-148,55)
(= @x12
(let ((@lb14 (Prims.op_LessThan @x11
(BoxInt 18446744073709551616))))
(ite (= @lb14
(BoxBool true))
@x11
(BoxInt (- (BoxInt_proj_0 @x11)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(149,5-149,29); use=X64.Vale.StrongPost_i.fsti(149,5-149,29)
(= (X64.Vale.Decls.cf @x13)
(Prims.op_GreaterThanOrEqual @x11
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
@x13
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)
)
 
;;no pats
:qid @query.8))
)

(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb10)

;; def=X64.Vale.StrongPost_i.fsti(152,1-157,37); use=X64.Vale.StrongPost_i.fsti(152,1-157,37)
(and 
;; def=X64.Vale.StrongPost_i.fsti(152,1-152,28); use=X64.Vale.StrongPost_i.fsti(152,1-152,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(153,1-157,37); use=X64.Vale.StrongPost_i.fsti(153,1-157,37)
(forall ((@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)
(HasType @x13
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(154,3-155,56); use=X64.Vale.StrongPost_i.fsti(154,3-155,56)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x12))
(BoxInt_proj_0 @x11))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)

;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x12
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x11
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
@x13
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))))
)
)
 
;;no pats
:qid @query.9))
)

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(158,33-158,38); use=X64.Vale.StrongPost_i.fsti(158,33-158,38)
false

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(161,3-165,65); use=X64.Vale.StrongPost_i.fsti(161,3-165,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(161,3-161,30); use=X64.Vale.StrongPost_i.fsti(161,3-161,30)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(162,3-162,18); use=X64.Vale.StrongPost_i.fsti(162,3-162,18)
(< (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))
18446744073709551616)


;; def=X64.Vale.StrongPost_i.fsti(163,3-165,65); use=X64.Vale.StrongPost_i.fsti(163,3-165,65)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(164,6-164,12); use=X64.Vale.StrongPost_i.fsti(164,6-164,12)
(= @x11
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))))
)

;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)
)
 
;;no pats
:qid @query.10))
)

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(166,32-166,37); use=X64.Vale.StrongPost_i.fsti(166,32-166,37)
false

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(169,1-172,60); use=X64.Vale.StrongPost_i.fsti(169,1-172,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(169,1-169,28); use=X64.Vale.StrongPost_i.fsti(169,1-169,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(170,1-172,60); use=X64.Vale.StrongPost_i.fsti(170,1-172,60)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(171,3-171,9); use=X64.Vale.StrongPost_i.fsti(171,3-171,9)
(= @x11
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb10)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))
)

;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)
)
 
;;no pats
:qid @query.11))
)

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(173,32-173,37); use=X64.Vale.StrongPost_i.fsti(173,32-173,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(176,1-179,60); use=X64.Vale.StrongPost_i.fsti(176,1-179,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(176,1-176,28); use=X64.Vale.StrongPost_i.fsti(176,1-176,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(177,1-179,60); use=X64.Vale.StrongPost_i.fsti(177,1-179,60)
(forall ((@x11 Term) (@x12 Term))
 (! (implies (and (HasType @x11
X64.Machine_s.nat64)
(HasType @x12
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(178,3-178,9); use=X64.Vale.StrongPost_i.fsti(178,3-178,9)
(= @x11
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb10)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))
)

;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
@x12
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb10))
@x11
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)
)
 
;;no pats
:qid @query.12))
)

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb10))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb10))))

;; def=X64.Vale.StrongPost_i.fsti(180,32-180,37); use=X64.Vale.StrongPost_i.fsti(180,32-180,37)
false

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb10)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb10)))

;; def=X64.Vale.StrongPost_i.fsti(182,8-187,72); use=X64.Vale.StrongPost_i.fsti(182,8-187,72)
(and 
;; def=X64.Vale.StrongPost_i.fsti(182,8-182,35); use=X64.Vale.StrongPost_i.fsti(182,8-182,35)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))


;; def=X64.Vale.StrongPost_i.fsti(183,8-183,53); use=X64.Vale.StrongPost_i.fsti(183,8-183,53)
(<= 0
(- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))


;; def=X64.Vale.StrongPost_i.fsti(184,8-187,72); use=X64.Vale.StrongPost_i.fsti(184,8-187,72)
(forall ((@x11 Term) (@x12 Term) (@x13 Term))
 (! (implies (and (HasType @x11
Prims.int)
(HasType @x12
X64.Machine_s.nat64)
(HasType @x13
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(185,15-185,58); use=X64.Vale.StrongPost_i.fsti(185,15-185,58)
(= @x11
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb10))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb10)
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8))))))


;; def=X64.Vale.StrongPost_i.fsti(186,15-186,21); use=X64.Vale.StrongPost_i.fsti(186,15-186,21)
(= @x12
@x11)
)

;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb9)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))
@x13
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb10))
@x12
(X64.Vale.State_i.Mkstate @x5
@x6
@x7
@x8)))))
)
)
 
;;no pats
:qid @query.13))
)


;; def=X64.Vale.StrongPost_i.fsti(188,13-188,18); use=X64.Vale.StrongPost_i.fsti(188,13-188,18)
false
)))))))))))))))))))
Unreachable))))
)
 
;;no pats
:qid @query.2))


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(forall ((@x5 Term))
 (! (implies (and (or label_1
(HasType @x5
Prims.unit))

;; def=X64.Vale.StrongPost_i.fst(173,10-173,19); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(or label_2

;; def=X64.Vale.StrongPost_i.fst(173,10-173,19); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(173,10-173,19); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(ApplyTT @x3
Tm_unit)
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(ApplyTT @x4
@x5)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(174,2-175,32)
(ApplyTT @x4
@x5)
)
)
:qid @query.14))
)

;; def=Prims.fst(441,29-441,97); use=X64.Vale.StrongPost_i.fst(174,2-174,19)
(and (let ((@lb5 @x0))
(ite (is-Prims.Nil @lb5)

;; def=X64.Vale.StrongPost_i.fsti(108,7-114,15); use=X64.Vale.StrongPost_i.fsti(108,7-114,15)
(forall ((@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x6
Prims.bool)
(HasType @x7
X64.Vale.Regs_i.t)
(HasType @x8
X64.Machine_s.nat64)
(HasType @x9
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(110,7-110,19); use=X64.Vale.StrongPost_i.fsti(110,7-110,19)
(= @x6
(X64.Vale.State_i.__proj__Mkstate__item__ok @x1))


;; def=X64.Vale.StrongPost_i.fsti(111,7-111,21); use=X64.Vale.StrongPost_i.fsti(111,7-111,21)
(= @x9
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1))


;; def=X64.Vale.StrongPost_i.fsti(112,7-112,25); use=X64.Vale.StrongPost_i.fsti(112,7-112,25)
(= @x8
(X64.Vale.State_i.__proj__Mkstate__item__flags @x1))


;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(113,7-113,27); use=X64.Vale.StrongPost_i.fsti(113,7-113,27)
(X64.Vale.StrongPost_i.all_regs_match @x1
(X64.Vale.State_i.Mkstate @x6
@x7
@x8
@x9))
)
)

;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(or label_3

;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(114,7-114,14); use=X64.Vale.StrongPost_i.fsti(114,7-114,14)
(X64.Vale.StrongPost_i.augment @x2
@x3
(X64.Vale.State_i.Mkstate @x6
@x7
@x8
@x9))
)
)
)
 
;;no pats
:qid @query.15))

(ite (is-Prims.Cons @lb5)
(let ((@lb6 (Prims.Cons_hd @lb5)))
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb6))))
label_4
(ite (and (is-X64.Vale.StrongPost_i.Mov64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Mov64_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(120,1-122,54); use=X64.Vale.StrongPost_i.fsti(120,1-122,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(120,1-120,26); use=X64.Vale.StrongPost_i.fsti(120,1-120,26)
(or label_5

;; def=X64.Vale.StrongPost_i.fsti(120,1-120,26); use=X64.Vale.StrongPost_i.fsti(120,1-120,26)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(121,1-122,54); use=X64.Vale.StrongPost_i.fsti(121,1-122,54)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(121,12-121,41); use=X64.Vale.StrongPost_i.fsti(121,12-121,41)
(= @x7
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mov64_src @lb6)
@x1))
)

;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(or label_6

;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(122,14-122,53); use=X64.Vale.StrongPost_i.fsti(122,14-122,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Mov64_dst @lb6))
@x7
@x1))
)
)
)
 
;;no pats
:qid @query.16))
)

(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb6))))
label_7
(ite (and (is-X64.Vale.StrongPost_i.Load64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_dst @lb6))
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Load64_src @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(125,3-127,54); use=X64.Vale.StrongPost_i.fsti(125,3-127,54)
(and 
;; def=X64.Vale.StrongPost_i.fsti(125,3-125,54); use=X64.Vale.StrongPost_i.fsti(125,3-125,54)
(or label_8

;; def=X64.Vale.StrongPost_i.fsti(125,3-125,54); use=X64.Vale.StrongPost_i.fsti(125,3-125,54)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_maddr_norm (X64.Machine_s.MConst (BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb6)))))
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(126,1-127,54); use=X64.Vale.StrongPost_i.fsti(126,1-127,54)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(126,12-126,54); use=X64.Vale.StrongPost_i.fsti(126,12-126,54)
(= @x7
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_src @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Load64_offset @lb6))))))
)

;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(or label_9

;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(127,14-127,53); use=X64.Vale.StrongPost_i.fsti(127,14-127,53)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Load64_dst @lb6))
@x7
@x1))
)
)
)
 
;;no pats
:qid @query.17))
)

(ite (and (is-X64.Vale.StrongPost_i.Store64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Store64_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(129,1-133,41); use=X64.Vale.StrongPost_i.fsti(129,1-133,41)
(and 
;; def=X64.Vale.StrongPost_i.fsti(129,1-129,28); use=X64.Vale.StrongPost_i.fsti(129,1-129,28)
(or label_10

;; def=X64.Vale.StrongPost_i.fsti(129,1-129,28); use=X64.Vale.StrongPost_i.fsti(129,1-129,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(130,1-130,45); use=X64.Vale.StrongPost_i.fsti(130,1-130,45)
(or label_11

;; def=X64.Vale.StrongPost_i.fsti(130,1-130,45); use=X64.Vale.StrongPost_i.fsti(130,1-130,45)
(BoxBool_proj_0 (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb6))))))
)


;; def=X64.Vale.StrongPost_i.fsti(131,1-133,41); use=X64.Vale.StrongPost_i.fsti(131,1-133,41)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
(FStar.Map.t Prims.int
X64.Machine_s.nat64))

;; def=X64.Vale.StrongPost_i.fsti(132,3-132,72); use=X64.Vale.StrongPost_i.fsti(132,3-132,72)
(= @x7
(FStar.Map.upd Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Store64_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.Store64_offset @lb6))))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Store64_src @lb6)
@x1)))
)

;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(or label_12

;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(133,3-133,40); use=X64.Vale.StrongPost_i.fsti(133,3-133,40)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok @x1)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x1)
(X64.Vale.State_i.__proj__Mkstate__item__flags @x1)
@x7))
)
)
)
 
;;no pats
:qid @query.18))
)

(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6))))
label_13
(ite (and (is-X64.Vale.StrongPost_i.Add64Wrap @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(136,1-141,65); use=X64.Vale.StrongPost_i.fsti(136,1-141,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(136,1-136,28); use=X64.Vale.StrongPost_i.fsti(136,1-136,28)
(or label_14

;; def=X64.Vale.StrongPost_i.fsti(136,1-136,28); use=X64.Vale.StrongPost_i.fsti(136,1-136,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(137,1-141,65); use=X64.Vale.StrongPost_i.fsti(137,1-141,65)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
Prims.int)
(HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(138,6-138,49); use=X64.Vale.StrongPost_i.fsti(138,6-138,49)
(= @x7
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Add64Wrap_src @lb6)
@x1)))))


;; def=X64.Vale.StrongPost_i.fsti(139,6-139,55); use=X64.Vale.StrongPost_i.fsti(139,6-139,55)
(= @x8
(let ((@lb10 (Prims.op_LessThan @x7
(BoxInt 18446744073709551616))))
(ite (= @lb10
(BoxBool true))
@x7
(BoxInt (- (BoxInt_proj_0 @x7)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(140,4-140,28); use=X64.Vale.StrongPost_i.fsti(140,4-140,28)
(= (X64.Vale.Decls.cf @x9)
(Prims.op_GreaterThanOrEqual @x7
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(or label_15

;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(141,8-141,64); use=X64.Vale.StrongPost_i.fsti(141,8-141,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6))
@x8
@x1))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6))
@x8
@x1))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Add64Wrap_dst @lb6))
@x8
@x1))))
)
)
)
 
;;no pats
:qid @query.19))
)

(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6))))
label_16
(ite (and (is-X64.Vale.StrongPost_i.Adc64Wrap @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(144,1-150,65); use=X64.Vale.StrongPost_i.fsti(144,1-150,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(144,1-144,28); use=X64.Vale.StrongPost_i.fsti(144,1-144,28)
(or label_17

;; def=X64.Vale.StrongPost_i.fsti(144,1-144,28); use=X64.Vale.StrongPost_i.fsti(144,1-144,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(145,1-150,65); use=X64.Vale.StrongPost_i.fsti(145,1-150,65)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
Prims.int)
(HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(146,6-147,34); use=X64.Vale.StrongPost_i.fsti(146,6-147,34)
(= @x7
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Adc64Wrap_src @lb6)
@x1)))
(BoxInt_proj_0 (let ((@lb10 (X64.Vale.Decls.cf (X64.Vale.State_i.__proj__Mkstate__item__flags @x1))))
(ite (= @lb10
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))))


;; def=X64.Vale.StrongPost_i.fsti(148,6-148,55); use=X64.Vale.StrongPost_i.fsti(148,6-148,55)
(= @x8
(let ((@lb10 (Prims.op_LessThan @x7
(BoxInt 18446744073709551616))))
(ite (= @lb10
(BoxBool true))
@x7
(BoxInt (- (BoxInt_proj_0 @x7)
18446744073709551616)))))


;; def=X64.Vale.StrongPost_i.fsti(149,5-149,29); use=X64.Vale.StrongPost_i.fsti(149,5-149,29)
(= (X64.Vale.Decls.cf @x9)
(Prims.op_GreaterThanOrEqual @x7
(BoxInt 18446744073709551616)))
)

;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(or label_18

;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(150,8-150,64); use=X64.Vale.StrongPost_i.fsti(150,8-150,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6))
@x8
@x1))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6))
@x8
@x1))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Adc64Wrap_dst @lb6))
@x8
@x1))))
)
)
)
 
;;no pats
:qid @query.20))
)

(ite (is-X64.Vale.StrongPost_i.Mul64Wrap @lb6)

;; def=X64.Vale.StrongPost_i.fsti(152,1-157,37); use=X64.Vale.StrongPost_i.fsti(152,1-157,37)
(and 
;; def=X64.Vale.StrongPost_i.fsti(152,1-152,28); use=X64.Vale.StrongPost_i.fsti(152,1-152,28)
(or label_19

;; def=X64.Vale.StrongPost_i.fsti(152,1-152,28); use=X64.Vale.StrongPost_i.fsti(152,1-152,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(153,1-157,37); use=X64.Vale.StrongPost_i.fsti(153,1-157,37)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)
(HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(154,3-155,56); use=X64.Vale.StrongPost_i.fsti(154,3-155,56)
(= (+ (_mul 18446744073709551616
(BoxInt_proj_0 @x8))
(BoxInt_proj_0 @x7))
(_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
X64.Machine_s.Rax@tok))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Mul64Wrap_src @lb6)
@x1))))
)

;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(or label_20

;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(156,5-157,36); use=X64.Vale.StrongPost_i.fsti(156,5-157,36)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.update_reg X64.Machine_s.Rdx@tok
@x8
(X64.Vale.State_i.update_reg X64.Machine_s.Rax@tok
@x7
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok @x1)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x1)
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)))))
)
)
)
 
;;no pats
:qid @query.21))
)

(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb6))))
label_21
(ite (and (is-X64.Vale.StrongPost_i.IMul64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.IMul64_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(161,3-165,65); use=X64.Vale.StrongPost_i.fsti(161,3-165,65)
(and 
;; def=X64.Vale.StrongPost_i.fsti(161,3-161,30); use=X64.Vale.StrongPost_i.fsti(161,3-161,30)
(or label_22

;; def=X64.Vale.StrongPost_i.fsti(161,3-161,30); use=X64.Vale.StrongPost_i.fsti(161,3-161,30)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(162,3-162,18); use=X64.Vale.StrongPost_i.fsti(162,3-162,18)
(or label_23

;; def=X64.Vale.StrongPost_i.fsti(162,3-162,18); use=X64.Vale.StrongPost_i.fsti(162,3-162,18)
(< (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb6)
@x1)))
18446744073709551616)
)


;; def=X64.Vale.StrongPost_i.fsti(163,3-165,65); use=X64.Vale.StrongPost_i.fsti(163,3-165,65)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)
(HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(164,6-164,12); use=X64.Vale.StrongPost_i.fsti(164,6-164,12)
(= @x7
(BoxInt (_mul (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.IMul64_src @lb6)
@x1)))))
)

;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(or label_24

;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(165,8-165,64); use=X64.Vale.StrongPost_i.fsti(165,8-165,64)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb6))
@x7
@x1))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb6))
@x7
@x1))
@x8
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.IMul64_dst @lb6))
@x7
@x1))))
)
)
)
 
;;no pats
:qid @query.22))
)

(ite (and (is-X64.Vale.StrongPost_i.And64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb6))))
label_25
(ite (and (is-X64.Vale.StrongPost_i.And64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.And64_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(169,1-172,60); use=X64.Vale.StrongPost_i.fsti(169,1-172,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(169,1-169,28); use=X64.Vale.StrongPost_i.fsti(169,1-169,28)
(or label_26

;; def=X64.Vale.StrongPost_i.fsti(169,1-169,28); use=X64.Vale.StrongPost_i.fsti(169,1-169,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(170,1-172,60); use=X64.Vale.StrongPost_i.fsti(170,1-172,60)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)
(HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(171,3-171,9); use=X64.Vale.StrongPost_i.fsti(171,3-171,9)
(= @x7
(X64.Vale.Decls.logand64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb6)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.And64_amt @lb6)
@x1)))
)

;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(or label_27

;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(172,3-172,59); use=X64.Vale.StrongPost_i.fsti(172,3-172,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb6))
@x7
@x1))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb6))
@x7
@x1))
@x8
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.And64_dst @lb6))
@x7
@x1))))
)
)
)
 
;;no pats
:qid @query.23))
)

(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb6))))
label_28
(ite (and (is-X64.Vale.StrongPost_i.Shr64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Shr64_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(176,1-179,60); use=X64.Vale.StrongPost_i.fsti(176,1-179,60)
(and 
;; def=X64.Vale.StrongPost_i.fsti(176,1-176,28); use=X64.Vale.StrongPost_i.fsti(176,1-176,28)
(or label_29

;; def=X64.Vale.StrongPost_i.fsti(176,1-176,28); use=X64.Vale.StrongPost_i.fsti(176,1-176,28)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(177,1-179,60); use=X64.Vale.StrongPost_i.fsti(177,1-179,60)
(forall ((@x7 Term) (@x8 Term))
 (! (implies (and (HasType @x7
X64.Machine_s.nat64)
(HasType @x8
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(178,3-178,9); use=X64.Vale.StrongPost_i.fsti(178,3-178,9)
(= @x7
(X64.Vale.Decls.shift_right64 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb6)))
(X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Shr64_amt @lb6)
@x1)))
)

;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(or label_30

;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(179,3-179,59); use=X64.Vale.StrongPost_i.fsti(179,3-179,59)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb6))
@x7
@x1))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb6))
@x7
@x1))
@x8
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Shr64_dst @lb6))
@x7
@x1))))
)
)
)
 
;;no pats
:qid @query.24))
)

(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb6))
(is-X64.Machine_s.Rsp (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb6))))
label_31
(ite (and (is-X64.Vale.StrongPost_i.Sub64 @lb6)
(is-X64.Machine_s.OReg (X64.Vale.StrongPost_i.Sub64_dst @lb6)))

;; def=X64.Vale.StrongPost_i.fsti(182,8-187,72); use=X64.Vale.StrongPost_i.fsti(182,8-187,72)
(and 
;; def=X64.Vale.StrongPost_i.fsti(182,8-182,35); use=X64.Vale.StrongPost_i.fsti(182,8-182,35)
(or label_32

;; def=X64.Vale.StrongPost_i.fsti(182,8-182,35); use=X64.Vale.StrongPost_i.fsti(182,8-182,35)
(BoxBool_proj_0 (X64.Vale.StrongPost_i.valid_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb6)
@x1))
)


;; def=X64.Vale.StrongPost_i.fsti(183,8-183,53); use=X64.Vale.StrongPost_i.fsti(183,8-183,53)
(or label_33

;; def=X64.Vale.StrongPost_i.fsti(183,8-183,53); use=X64.Vale.StrongPost_i.fsti(183,8-183,53)
(<= 0
(- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb6)
@x1))))
)


;; def=X64.Vale.StrongPost_i.fsti(184,8-187,72); use=X64.Vale.StrongPost_i.fsti(184,8-187,72)
(forall ((@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (and (HasType @x7
Prims.int)
(HasType @x8
X64.Machine_s.nat64)
(HasType @x9
X64.Machine_s.nat64)

;; def=X64.Vale.StrongPost_i.fsti(185,15-185,58); use=X64.Vale.StrongPost_i.fsti(185,15-185,58)
(= @x7
(BoxInt (- (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb6))))
(BoxInt_proj_0 (X64.Vale.StrongPost_i.eval_operand_norm (X64.Vale.StrongPost_i.Sub64_src @lb6)
@x1)))))


;; def=X64.Vale.StrongPost_i.fsti(186,15-186,21); use=X64.Vale.StrongPost_i.fsti(186,15-186,21)
(= @x8
@x7)
)

;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(or label_34

;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(Valid 
;; def=X64.Vale.StrongPost_i.fsti(187,15-187,71); use=X64.Vale.StrongPost_i.fsti(187,15-187,71)
(X64.Vale.StrongPost_i.wp_code (Prims.Cons_tl @lb5)
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.__proj__Mkstate__item__ok (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb6))
@x8
@x1))
(X64.Vale.State_i.__proj__Mkstate__item__regs (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb6))
@x8
@x1))
@x9
(X64.Vale.State_i.__proj__Mkstate__item__mem (X64.Vale.State_i.update_reg (X64.Machine_s.OReg_r (X64.Vale.StrongPost_i.Sub64_dst @lb6))
@x8
@x1))))
)
)
)
 
;;no pats
:qid @query.25))
)

label_35)))))))))))))))))))
Unreachable)))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(174,2-174,19)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
Prims.unit)

;; def=X64.Vale.StrongPost_i.fst(174,20-174,55); use=X64.Vale.StrongPost_i.fst(174,2-174,19)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(174,20-174,55); use=X64.Vale.StrongPost_i.fst(174,2-174,19)
(X64.Vale.StrongPost_i.wp_code @x0
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
@x1)
)
)

;; def=Prims.fst(441,29-441,97); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(and 
;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(or label_36

;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(140,4-140,51); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(X64.Vale.Decls.eval_code (X64.Machine_s.Block X64.Vale.Decls.ins
X64.Vale.Decls.ocmp
(X64.Vale.StrongPost_i.inss_to_codes @x0))
@x1
@x2)
)
)


;; def=X64.Vale.StrongPost_i.fst(141,4-141,9); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(or label_37

;; def=X64.Vale.StrongPost_i.fst(141,4-141,9); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(BoxBool_proj_0 (X64.Vale.State_i.__proj__Mkstate__item__ok @x1))
)


;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(or label_38

;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(142,4-142,37); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(X64.Vale.StrongPost_i.wp_code @x0
(ApplyTT (ApplyTT X64.Vale.StrongPost_i.augment@tok
@x2)
@x3)
@x1)
)
)


;; def=Prims.fst(441,36-441,97); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
Prims.unit)

;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(Valid 
;; def=X64.Vale.StrongPost_i.fst(144,4-144,11); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(ApplyTT @x3
Tm_unit)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.StrongPost_i.fst(175,2-175,16)
(ApplyTT @x4
@x6)
)
)
 
;;no pats
:qid @query.27))
)
)
 
;;no pats
:qid @query.26))
)
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 10893120)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_38")
(eval label_38)
(echo "label_37")
(eval label_37)
(echo "label_36")
(eval label_36)
(echo "label_35")
(eval label_35)
(echo "label_34")
(eval label_34)
(echo "label_33")
(eval label_33)
(echo "label_32")
(eval label_32)
(echo "label_31")
(eval label_31)
(echo "label_30")
(eval label_30)
(echo "label_29")
(eval label_29)
(echo "label_28")
(eval label_28)
(echo "label_27")
(eval label_27)
(echo "label_26")
(eval label_26)
(echo "label_25")
(eval label_25)
(echo "label_24")
(eval label_24)
(echo "label_23")
(eval label_23)
(echo "label_22")
(eval label_22)
(echo "label_21")
(eval label_21)
(echo "label_20")
(eval label_20)
(echo "label_19")
(eval label_19)
(echo "label_18")
(eval label_18)
(echo "label_17")
(eval label_17)
(echo "label_16")
(eval label_16)
(echo "label_15")
(eval label_15)
(echo "label_14")
(eval label_14)
(echo "label_13")
(eval label_13)
(echo "label_12")
(eval label_12)
(echo "label_11")
(eval label_11)
(echo "label_10")
(eval label_10)
(echo "label_9")
(eval label_9)
(echo "label_8")
(eval label_8)
(echo "label_7")
(eval label_7)
(echo "label_6")
(eval label_6)
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.StrongPost_i.lemma_weakest_pre_norm', 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, @fuel_irrelevance_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, @query, Prims_pretyping_ae567c2fb75be05905677af440075565, X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee, bool_inversion, bool_typing, constructor_distinct_X64.Machine_s.MConst, data_elim_X64.Vale.State_i.Mkstate, equation_Prims.nat, equation_X64.Machine_s.nat64, equation_X64.Vale.State_i.eval_maddr, equation_X64.Vale.StrongPost_i.valid_maddr_norm, equation_with_fuel_X64.Vale.StrongPost_i.inss_to_codes.fuel_instrumented, fuel_guarded_inversion_X64.Vale.State_i.state, function_token_typing_Prims.__cache_version_number__, function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs, int_inversion, int_typing, proj_equation_X64.Vale.State_i.Mkstate_flags, proj_equation_X64.Vale.State_i.Mkstate_mem, proj_equation_X64.Vale.State_i.Mkstate_ok, proj_equation_X64.Vale.State_i.Mkstate_regs, projection_inverse_BoxInt_proj_0, projection_inverse_X64.Machine_s.MConst_n, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40, refinement_kinding_Tm_refine_a608a89bbc0a207d5920d37d906f7f40, token_correspondence_X64.Vale.State_i.__proj__Mkstate__item__regs, typing_FStar.Map.contains, typing_Prims.int
