
; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(set-option :global-decls false)
(set-option :smt.mbqi false)
(set-option :auto_config false)
(set-option :produce-unsat-cores true)
(set-option :model true)
(set-option :smt.case_split 3)
(set-option :smt.relevancy 2)
(set-option :smt.arith.solver 2)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.arith.nl false)

(declare-sort FString)
(declare-fun FString_constr_id (FString) Int)

(declare-sort Term)
(declare-fun Term_constr_id (Term) Int)
(declare-sort Dummy_sort)
(declare-fun Dummy_value () Dummy_sort)
(declare-datatypes () ((Fuel 
(ZFuel) 
(SFuel (prec Fuel)))))
(declare-fun MaxIFuel () Fuel)
(declare-fun MaxFuel () Fuel)
(declare-fun PreType (Term) Term)
(declare-fun Valid (Term) Bool)
(declare-fun HasTypeFuel (Fuel Term Term) Bool)
(define-fun HasTypeZ ((x Term) (t Term)) Bool
(HasTypeFuel ZFuel x t))
(define-fun HasType ((x Term) (t Term)) Bool
(HasTypeFuel MaxIFuel x t))
(declare-fun IsTotFun (Term) Bool)

                ;;fuel irrelevance
(assert (forall ((f Fuel) (x Term) (t Term))
(! (= (HasTypeFuel (SFuel f) x t)
(HasTypeZ x t))
:pattern ((HasTypeFuel (SFuel f) x t)))))
(declare-fun NoHoist (Term Bool) Bool)
;;no-hoist
(assert (forall ((dummy Term) (b Bool))
(! (= (NoHoist dummy b)
b)
:pattern ((NoHoist dummy b)))))
(define-fun  IsTyped ((x Term)) Bool
(exists ((t Term)) (HasTypeZ x t)))
(declare-fun ApplyTF (Term Fuel) Term)
(declare-fun ApplyTT (Term Term) Term)
(declare-fun Prec (Term Term) Bool)
(assert (forall ((x Term) (y Term) (z Term))
(! (implies (and (Prec x y) (Prec y z))
(Prec x z))
                                   :pattern ((Prec x z) (Prec x y)))))
(assert (forall ((x Term) (y Term))
(implies (Prec x y)
(not (Prec y x)))))
(declare-fun Closure (Term) Term)
(declare-fun ConsTerm (Term Term) Term)
(declare-fun ConsFuel (Fuel Term) Term)
(declare-fun Tm_uvar (Int) Term)
(define-fun Reify ((x Term)) Term x)
(declare-fun Prims.precedes (Term Term Term Term) Term)
(declare-fun Range_const (Int) Term)
(declare-fun _mul (Int Int) Int)
(declare-fun _div (Int Int) Int)
(declare-fun _mod (Int Int) Int)
(declare-fun __uu__PartialApp () Term)
(assert (forall ((x Int) (y Int)) (! (= (_mul x y) (* x y)) :pattern ((_mul x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_div x y) (div x y)) :pattern ((_div x y)))))
(assert (forall ((x Int) (y Int)) (! (= (_mod x y) (mod x y)) :pattern ((_mod x y)))))
(declare-fun _rmul (Real Real) Real)
(declare-fun _rdiv (Real Real) Real)
(assert (forall ((x Real) (y Real)) (! (= (_rmul x y) (* x y)) :pattern ((_rmul x y)))))
(assert (forall ((x Real) (y Real)) (! (= (_rdiv x y) (/ x y)) :pattern ((_rdiv x y)))))
(define-fun Unreachable () Bool false)
; <start constructor FString_const>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FString_const (Int) FString)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 0
(FString_constr_id (FString_const @u0)))
 

:pattern ((FString_const @u0))
:qid constructor_distinct_FString_const))
:named constructor_distinct_FString_const))
;;;;;;;;;;;;;;;;Projector
(declare-fun FString_const_proj_0 (FString) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (FString_const_proj_0 (FString_const @u0))
@u0)
 

:pattern ((FString_const @u0))
:qid projection_inverse_FString_const_proj_0))
:named projection_inverse_FString_const_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FString_const ((__@u0 FString)) Bool
 (and (= (FString_constr_id __@u0)
0)
(= __@u0
(FString_const (FString_const_proj_0 __@u0)))))

; </end constructor FString_const>


; <start constructor Tm_type>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_type () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 2
(Term_constr_id Tm_type))
:named constructor_distinct_Tm_type))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_type ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
2)
(= __@x0
Tm_type)))

; </end constructor Tm_type>


; <start constructor Tm_arrow>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_arrow (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 3
(Term_constr_id (Tm_arrow @u0)))
 

:pattern ((Tm_arrow @u0))
:qid constructor_distinct_Tm_arrow))
:named constructor_distinct_Tm_arrow))
;;;;;;;;;;;;;;;;Projector
(declare-fun Tm_arrow_id (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (Tm_arrow_id (Tm_arrow @u0))
@u0)
 

:pattern ((Tm_arrow @u0))
:qid projection_inverse_Tm_arrow_id))
:named projection_inverse_Tm_arrow_id))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_arrow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
3)
(= __@x0
(Tm_arrow (Tm_arrow_id __@x0)))))

; </end constructor Tm_arrow>


; <start constructor Tm_unit>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Tm_unit () Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (= 6
(Term_constr_id Tm_unit))
:named constructor_distinct_Tm_unit))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Tm_unit ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
6)
(= __@x0
Tm_unit)))

; </end constructor Tm_unit>


; <start constructor BoxInt>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxInt (Int) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= 7
(Term_constr_id (BoxInt @u0)))
 

:pattern ((BoxInt @u0))
:qid constructor_distinct_BoxInt))
:named constructor_distinct_BoxInt))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxInt_proj_0 (Term) Int)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Int))
 (! (= (BoxInt_proj_0 (BoxInt @u0))
@u0)
 

:pattern ((BoxInt @u0))
:qid projection_inverse_BoxInt_proj_0))
:named projection_inverse_BoxInt_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxInt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
7)
(= __@x0
(BoxInt (BoxInt_proj_0 __@x0)))))

; </end constructor BoxInt>


; <start constructor BoxBool>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxBool (Bool) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= 8
(Term_constr_id (BoxBool @u0)))
 

:pattern ((BoxBool @u0))
:qid constructor_distinct_BoxBool))
:named constructor_distinct_BoxBool))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxBool_proj_0 (Term) Bool)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Bool))
 (! (= (BoxBool_proj_0 (BoxBool @u0))
@u0)
 

:pattern ((BoxBool @u0))
:qid projection_inverse_BoxBool_proj_0))
:named projection_inverse_BoxBool_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxBool ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
8)
(= __@x0
(BoxBool (BoxBool_proj_0 __@x0)))))

; </end constructor BoxBool>


; <start constructor BoxString>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxString (FString) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= 9
(Term_constr_id (BoxString @u0)))
 

:pattern ((BoxString @u0))
:qid constructor_distinct_BoxString))
:named constructor_distinct_BoxString))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxString_proj_0 (Term) FString)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 FString))
 (! (= (BoxString_proj_0 (BoxString @u0))
@u0)
 

:pattern ((BoxString @u0))
:qid projection_inverse_BoxString_proj_0))
:named projection_inverse_BoxString_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxString ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
9)
(= __@x0
(BoxString (BoxString_proj_0 __@x0)))))

; </end constructor BoxString>


; <start constructor BoxReal>

;;;;;;;;;;;;;;;;Constructor
(declare-fun BoxReal (Real) Term)
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= 10
(Term_constr_id (BoxReal @u0)))
 

:pattern ((BoxReal @u0))
:qid constructor_distinct_BoxReal))
:named constructor_distinct_BoxReal))
;;;;;;;;;;;;;;;;Projector
(declare-fun BoxReal_proj_0 (Term) Real)
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: 
(assert (! (forall ((@u0 Real))
 (! (= (BoxReal_proj_0 (BoxReal @u0))
@u0)
 

:pattern ((BoxReal @u0))
:qid projection_inverse_BoxReal_proj_0))
:named projection_inverse_BoxReal_proj_0))
;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-BoxReal ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
10)
(= __@x0
(BoxReal (BoxReal_proj_0 __@x0)))))

; </end constructor BoxReal>

(declare-fun Prims.precedes@tok () Term)
(assert
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
(! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)
(Prims.precedes @x0 @x1 @x2 @x3))

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT Prims.precedes@tok
@x0)
@x1)
@x2)
@x3)))))

(declare-fun Prims.lex_t () Term)
(assert (forall ((t1 Term) (t2 Term) (e1 Term) (e2 Term))
(! (iff (Valid (Prims.precedes t1 t2 e1 e2))
(Valid (Prims.precedes Prims.lex_t Prims.lex_t e1 e2)))
:pattern (Prims.precedes t1 t2 e1 e2))))
(assert (forall ((t1 Term) (t2 Term))
(! (iff (Valid (Prims.precedes Prims.lex_t Prims.lex_t t1 t2)) 
(Prec t1 t2))
:pattern ((Prims.precedes Prims.lex_t Prims.lex_t t1 t2)))))
(assert (forall ((e Term) (t Term))
(! (implies (HasType e t)
(Valid t))
:pattern ((HasType e t)
(Valid t))
:qid __prelude_valid_intro)))


; Externals for module Prims


; <Start encoding val Prims.attribute>

(declare-fun Prims.attribute () Term)

; </end encoding val Prims.attribute>


; <Start encoding val Prims.cps>

(declare-fun Prims.cps () Term)

; </end encoding val Prims.cps>


; <Start encoding val Prims.tac_opaque>

(declare-fun Prims.tac_opaque () Term)

; </end encoding val Prims.tac_opaque>


; <Start encoding val Prims.unrefine>

(declare-fun Prims.unrefine () Term)

; </end encoding val Prims.unrefine>


; <Start encoding val Prims.do_not_unrefine>

(declare-fun Prims.do_not_unrefine () Term)

; </end encoding val Prims.do_not_unrefine>


; <Start encoding val Prims.hasEq>

(declare-fun Prims.hasEq (Term) Term)
(declare-fun Tm_arrow_ef9cb512a25ee351fa5536d617490497 () Term)
(declare-fun Prims.hasEq@tok () Term)

; </end encoding val Prims.hasEq>


; <Start encoding let eqtype>

(declare-fun Prims.eqtype () Term)
(declare-fun Tm_refine_414d0a9f578ab0048252f8c8f552b99f () Term)

; </end encoding let eqtype>


; <Start encoding val Prims.bool>

(declare-fun Prims.bool () Term)

; </end encoding val Prims.bool>


; <Start encoding type Prims.empty>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.empty () Term)

; <start constructor Prims.empty>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.empty ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
Prims.empty)))

; </end constructor Prims.empty>


; </end encoding type Prims.empty>


; <Start encoding type Prims.trivial>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.trivial () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.T () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.T
(declare-fun Prims.T@tok () Term)

; <start constructor Prims.trivial>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.trivial ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
116)
(= __@x0
Prims.trivial)))

; </end constructor Prims.trivial>


; <start constructor Prims.T>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.T ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
Prims.T)))

; </end constructor Prims.T>


; </end encoding type Prims.trivial>


; <Start encoding val Prims.uu___is_T>

(declare-fun Prims.uu___is_T (Term) Term)
(declare-fun Tm_arrow_053f01f066524059a49c5dc621e6494a () Term)
(declare-fun Prims.uu___is_T@tok () Term)

; </end encoding val Prims.uu___is_T>


; <Start encoding val Prims.unit>

(declare-fun Prims.unit () Term)

; </end encoding val Prims.unit>


; <Start encoding let squash>

(declare-fun Prims.squash (Term) Term)

(declare-fun Prims.squash@tok () Term)
(declare-fun Tm_refine_2de20c066034c13bf76e9c0b94f4806c (Term) Term)

; </end encoding let squash>


; <Start encoding let auto_squash>

(declare-fun Prims.auto_squash (Term) Term)

(declare-fun Prims.auto_squash@tok () Term)

; </end encoding let auto_squash>


; <Start encoding let logical>

(declare-fun Prims.logical () Term)

; </end encoding let logical>


; <Start encoding val Prims.smt_theory_symbol>

(declare-fun Prims.smt_theory_symbol () Term)

; </end encoding val Prims.smt_theory_symbol>


; <Start encoding let l_True>

(declare-fun Prims.l_True () Term)

; </end encoding let l_True>


; <Start encoding let l_False>

(declare-fun Prims.l_False () Term)

; </end encoding let l_False>


; <Start encoding type Prims.equals>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.equals (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.equals@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Refl (Term Term) Term)
;;;;;;;;;;;;;;;;Constructor base
(declare-fun Prims.Refl@base () Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Refl
(declare-fun Prims.Refl@tok () Term)
(declare-fun Tm_arrow_8e00c6263684633abbc1d1a87608e391 () Term)

; <start constructor Prims.equals>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.equals ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
134)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(Prims.equals @x0
@x1
@x2))
 
;;no pats
:qid is-Prims.equals))))

; </end constructor Prims.equals>


; <start constructor Prims.Refl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Refl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.Refl @x0
@x1))
 
;;no pats
:qid is-Prims.Refl))))

; </end constructor Prims.Refl>


; </end encoding type Prims.equals>


; <Start encoding val Prims.uu___is_Refl>

(declare-fun Prims.uu___is_Refl (Term Term Term Term) Term)
(declare-fun Tm_arrow_2a4540f76c8969717ea911077d7b4d15 () Term)
(declare-fun Prims.uu___is_Refl@tok () Term)

; </end encoding val Prims.uu___is_Refl>


; <Start encoding let eq2>

(declare-fun Prims.eq2 (Term Term Term) Term)
(declare-fun Tm_arrow_1ec40cec1da281b45a559c74dd57f3b7 () Term)
(declare-fun Prims.eq2@tok () Term)

; </end encoding let eq2>


; <Start encoding let b2t>

(declare-fun Prims.b2t (Term) Term)

; </end encoding let b2t>


; <Start encoding type Prims.pair>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.pair (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.pair@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Pair (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Pair__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Pair
(declare-fun Prims.Pair@tok () Term)
(declare-fun Tm_arrow_e2b0096073073582c70f249d40f91c5d () Term)

; <start constructor Prims.pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
150)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.pair @x0
@x1))
 
;;no pats
:qid is-Prims.pair))))

; </end constructor Prims.pair>


; <start constructor Prims.Pair>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Pair ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(Prims.Pair (Prims.Pair_p __@x0)
(Prims.Pair_q __@x0)
(Prims.Pair__1 __@x0)
(Prims.Pair__2 __@x0)))))

; </end constructor Prims.Pair>


; </end encoding type Prims.pair>


; <Start encoding val Prims.uu___is_Pair>

(declare-fun Prims.uu___is_Pair (Term Term Term) Term)
(declare-fun Tm_arrow_0a519c999e1325381ee4c9b1d93a06b2 () Term)
(declare-fun Prims.uu___is_Pair@tok () Term)

; </end encoding val Prims.uu___is_Pair>


; <Start encoding val Prims.__proj__Pair__item___1>

(declare-fun Prims.__proj__Pair__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_214b45775d1504fb2699ff0d156b6857 () Term)
(declare-fun Prims.__proj__Pair__item___1@tok () Term)

; </end encoding val Prims.__proj__Pair__item___1>


; <Start encoding val Prims.__proj__Pair__item___2>

(declare-fun Prims.__proj__Pair__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_1b97dbe8f5eb289f51cc2556690371e3 () Term)
(declare-fun Prims.__proj__Pair__item___2@tok () Term)

; </end encoding val Prims.__proj__Pair__item___2>


; <Start encoding let l_and>

(declare-fun Prims.l_and (Term Term) Term)
(declare-fun Tm_arrow_289ee2cc5874944bf725b9e3db8c0fd6 () Term)
(declare-fun Prims.l_and@tok () Term)

; </end encoding let l_and>


; <Start encoding type Prims.sum>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.sum (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.sum@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Left_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Left
(declare-fun Prims.Left@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_p (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_q (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Right_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Right
(declare-fun Prims.Right@tok () Term)
(declare-fun Tm_arrow_4ef073c03ed003774fe6ccb4064aeebd () Term)
(declare-fun Tm_arrow_c537ccd7fef2183d55f1a6960ee793b0 () Term)

; <start constructor Prims.sum>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.sum ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
169)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.sum @x0
@x1))
 
;;no pats
:qid is-Prims.sum))))

; </end constructor Prims.sum>


; <start constructor Prims.Left>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Left ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
(Prims.Left (Prims.Left_p __@x0)
(Prims.Left_q __@x0)
(Prims.Left_v __@x0)))))

; </end constructor Prims.Left>


; <start constructor Prims.Right>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Right ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
181)
(= __@x0
(Prims.Right (Prims.Right_p __@x0)
(Prims.Right_q __@x0)
(Prims.Right_v __@x0)))))

; </end constructor Prims.Right>


; </end encoding type Prims.sum>


; <Start encoding val Prims.uu___is_Left>

(declare-fun Prims.uu___is_Left (Term Term Term) Term)
(declare-fun Tm_arrow_3c254c463840bdea2ca63f23cf7c2f0c () Term)
(declare-fun Prims.uu___is_Left@tok () Term)

; </end encoding val Prims.uu___is_Left>


; <Start encoding val Prims.__proj__Left__item__v>

(declare-fun Tm_refine_6140be01a70b18051829f178aaf0270b (Term Term) Term)
(declare-fun Prims.__proj__Left__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_aaf070885513892396497eef726adce1 () Term)
(declare-fun Prims.__proj__Left__item__v@tok () Term)

; </end encoding val Prims.__proj__Left__item__v>


; <Start encoding val Prims.uu___is_Right>

(declare-fun Prims.uu___is_Right (Term Term Term) Term)

(declare-fun Prims.uu___is_Right@tok () Term)

; </end encoding val Prims.uu___is_Right>


; <Start encoding val Prims.__proj__Right__item__v>

(declare-fun Tm_refine_43ea5cf89e866ce271f97bd6ce102588 (Term Term) Term)
(declare-fun Prims.__proj__Right__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_4ae0e7dd85e55aec7e8190dea6e3997f () Term)
(declare-fun Prims.__proj__Right__item__v@tok () Term)

; </end encoding val Prims.__proj__Right__item__v>


; <Start encoding let l_or>

(declare-fun Prims.l_or (Term Term) Term)

(declare-fun Prims.l_or@tok () Term)

; </end encoding let l_or>


; <Start encoding let l_imp>

(declare-fun Prims.l_imp (Term Term) Term)

(declare-fun Prims.l_imp@tok () Term)
(declare-fun Tm_ghost_arrow_0283b8a2a36bbec52abac4e3d837674a (Term Term) Term)

; </end encoding let l_imp>


; <Start encoding let l_iff>

(declare-fun Prims.l_iff (Term Term) Term)

(declare-fun Prims.l_iff@tok () Term)

; </end encoding let l_iff>


; <Start encoding let l_not>

(declare-fun Prims.l_not (Term) Term)
(declare-fun Tm_arrow_8178e3b6934aa50ea45bb0ccea2d9711 () Term)
(declare-fun Prims.l_not@tok () Term)

; </end encoding let l_not>


; <Skipped let l_ITE/>


; <Skipped val Prims.precedes/>


; <Start encoding val Prims.string>

(declare-fun Prims.string () Term)

; </end encoding val Prims.string>


; <Start encoding val Prims.warn_on_use>

(declare-fun Prims.warn_on_use (Term) Term)
(declare-fun Tm_arrow_2863eb88d7490a9c3cf347c16ca04740 () Term)
(declare-fun Prims.warn_on_use@tok () Term)

; </end encoding val Prims.warn_on_use>


; <Start encoding val Prims.deprecated>

(declare-fun Prims.deprecated (Term) Term)

(declare-fun Prims.deprecated@tok () Term)

; </end encoding val Prims.deprecated>


; <Start encoding val Prims.has_type>

(declare-fun Prims.has_type (Term Term Term) Term)
(declare-fun Tm_arrow_b5d8ed0243b8c7c893f2b329de57c62b () Term)
(declare-fun Prims.has_type@tok () Term)

; </end encoding val Prims.has_type>


; <Start encoding let l_Forall>

(declare-fun Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da (Term) Term)
(declare-fun Prims.l_Forall (Term Term) Term)

(declare-fun Tm_arrow_977ec6901669a051ac66211b8e72666a () Term)
(declare-fun Prims.l_Forall@tok () Term)

(declare-fun Tm_ghost_arrow_3aa447697277bb40c9738c9125c3e80f (Term Term) Term)

; </end encoding let l_Forall>


; <Skipped #push-options "--warn_error -288"/>


; <Start encoding let subtype_of>

(declare-fun Prims.subtype_of (Term Term) Term)
(declare-fun Tm_arrow_28becc0427b69ebf63ea956148504d97 () Term)
(declare-fun Prims.subtype_of@tok () Term)

; </end encoding let subtype_of>


; <Skipped #pop-options/>


; <Start encoding let prop>

(declare-fun Prims.prop () Term)
(declare-fun Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf () Term)

; </end encoding let prop>


; <Start encoding let pure_pre>

(declare-fun Prims.pure_pre () Term)

; </end encoding let pure_pre>


; <Start encoding let pure_post'>

(declare-fun Prims.pure_post_ (Term Term) Term)
(declare-fun Tm_arrow_e4cf09589736facd1137944a1f5a00a6 () Term)
(declare-fun Prims.pure_post_@tok () Term)
(declare-fun Tm_refine_8d65e998a07dd53ec478e27017d9dba5 (Term Term) Term)
(declare-fun Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 (Term Term) Term)

; </end encoding let pure_post'>


; <Start encoding let pure_post>

(declare-fun Prims.pure_post (Term) Term)

(declare-fun Prims.pure_post@tok () Term)

; </end encoding let pure_post>


; <Start encoding let pure_wp'>

(declare-fun Prims.pure_wp_ (Term) Term)

(declare-fun Prims.pure_wp_@tok () Term)
(declare-fun Tm_arrow_e5c03abbf8b0946a9aa7ee31bb7999a4 (Term) Term)

; </end encoding let pure_wp'>


; <Start encoding let pure_wp_monotonic0>

(declare-fun Prims.pure_wp_monotonic0 (Term Term) Term)
(declare-fun Tm_arrow_85436e2c1c64a4dd0159a737ef5b212e () Term)
(declare-fun Prims.pure_wp_monotonic0@tok () Term)

; </end encoding let pure_wp_monotonic0>


; <Start encoding let pure_wp_monotonic>

(declare-fun Prims.pure_wp_monotonic (Term Term) Term)

(declare-fun Prims.pure_wp_monotonic@tok () Term)

; </end encoding let pure_wp_monotonic>


; <Start encoding let pure_wp>

(declare-fun Prims.pure_wp (Term) Term)

(declare-fun Prims.pure_wp@tok () Term)
(declare-fun Tm_refine_15e0beb75f7033bad5fae236999feebe (Term) Term)

; </end encoding let pure_wp>


; <Start encoding val Prims.guard_free>

(declare-fun Prims.guard_free (Term) Term)

(declare-fun Prims.guard_free@tok () Term)

; </end encoding val Prims.guard_free>


; <Skipped let pure_return0/>


; <Skipped let pure_bind_wp0/>


; <Skipped let pure_if_then_else0/>


; <Skipped let pure_ite_wp0/>


; <Skipped let pure_stronger/>


; <Skipped let pure_close_wp0/>


; <Skipped let pure_trivial/>


; <Skipped new_effect { PURE ... }/>


; <Skipped effect Pure a pre post = Prims.PURE a/>


; <Skipped effect Admit a = Prims.PURE a/>


; <Skipped let pure_null_wp0/>


; <Skipped effect Tot a = Prims.PURE a/>


; <Start encoding let pure_assert_wp0>

(declare-fun Prims.pure_assert_wp0 (Term) Term)
(declare-fun Tm_arrow_14bcf5e7fc38d91827ecd9d25d3b3a67 () Term)
(declare-fun Prims.pure_assert_wp0@tok () Term)

; </end encoding let pure_assert_wp0>


; <Start encoding let pure_assume_wp0>

(declare-fun Prims.pure_assume_wp0 (Term) Term)

(declare-fun Prims.pure_assume_wp0@tok () Term)

; </end encoding let pure_assume_wp0>


; <Skipped new_effect { GHOST ... }/>


; <Skipped let purewp_id/>


; <Skipped sub_effect PURE ~> GHOST/>


; <Skipped effect Ghost a pre post = Prims.GHOST a/>


; <Skipped effect GTot a = Prims.GHOST a/>


; <Start encoding let op_Equals_Equals_Equals>

(declare-fun Prims.op_Equals_Equals_Equals (Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcb145b23c2ac843afd9b126c4f71a9 () Term)
(declare-fun Prims.op_Equals_Equals_Equals@tok () Term)

; </end encoding let op_Equals_Equals_Equals>


; <Start encoding type Prims.dtuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.dtuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.dtuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Mkdtuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Mkdtuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Mkdtuple2
(declare-fun Prims.Mkdtuple2@tok () Term)



(declare-fun Tm_arrow_22a50f5c5c9bb74bac4384fb8999be8b () Term)

; <start constructor Prims.dtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.dtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
258)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(Prims.dtuple2 @x0
@x1))
 
;;no pats
:qid is-Prims.dtuple2))))

; </end constructor Prims.dtuple2>


; <start constructor Prims.Mkdtuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Mkdtuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
267)
(= __@x0
(Prims.Mkdtuple2 (Prims.Mkdtuple2_a __@x0)
(Prims.Mkdtuple2_b __@x0)
(Prims.Mkdtuple2__1 __@x0)
(Prims.Mkdtuple2__2 __@x0)))))

; </end constructor Prims.Mkdtuple2>


; </end encoding type Prims.dtuple2>


; <Start encoding assume Prims.dtuple2__uu___haseq>



; </end encoding assume Prims.dtuple2__uu___haseq>


; <Start encoding val Prims.uu___is_Mkdtuple2>


(declare-fun Prims.uu___is_Mkdtuple2 (Term Term Term) Term)

(declare-fun Tm_arrow_e6f9f7cb1936ec43b52469e706dcadcc () Term)
(declare-fun Prims.uu___is_Mkdtuple2@tok () Term)

; </end encoding val Prims.uu___is_Mkdtuple2>


; <Skipped let uu___is_Mkdtuple2/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___1>


(declare-fun Prims.__proj__Mkdtuple2__item___1 (Term Term Term) Term)

(declare-fun Tm_arrow_26c013ffba39d4f7eeb4bcc80d2d4e22 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___1@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___1>


; <Skipped let __proj__Mkdtuple2__item___1/>


; <Start encoding val Prims.__proj__Mkdtuple2__item___2>


(declare-fun Prims.__proj__Mkdtuple2__item___2 (Term Term Term) Term)

(declare-fun Tm_arrow_870cc7701a0d9a8a2d6fb92427a97d66 () Term)
(declare-fun Prims.__proj__Mkdtuple2__item___2@tok () Term)

; </end encoding val Prims.__proj__Mkdtuple2__item___2>


; <Skipped let __proj__Mkdtuple2__item___2/>


; <Start encoding let l_Exists>


(declare-fun Prims.l_Exists (Term Term) Term)


(declare-fun Prims.l_Exists@tok () Term)


(declare-fun Tm_abs_6ba36691ee58dee85cd144324b083848 (Term Term) Term)

; </end encoding let l_Exists>


; <Start encoding val Prims.int>

(declare-fun Prims.int () Term)

; </end encoding val Prims.int>


; <Start encoding val Prims.op_AmpAmp>

(declare-fun Prims.op_AmpAmp (Term Term) Term)
(declare-fun Prims.op_AmpAmp@tok () Term)

; </end encoding val Prims.op_AmpAmp>


; <Start encoding val Prims.op_BarBar>

(declare-fun Prims.op_BarBar (Term Term) Term)
(declare-fun Prims.op_BarBar@tok () Term)

; </end encoding val Prims.op_BarBar>


; <Start encoding val Prims.op_Negation>

(declare-fun Prims.op_Negation (Term) Term)
(declare-fun Prims.op_Negation@tok () Term)

; </end encoding val Prims.op_Negation>


; <Start encoding val Prims.op_Multiply>

(declare-fun Prims.op_Multiply (Term Term) Term)
(declare-fun Prims.op_Multiply@tok () Term)

; </end encoding val Prims.op_Multiply>


; <Start encoding val Prims.op_Subtraction>

(declare-fun Prims.op_Subtraction (Term Term) Term)
(declare-fun Prims.op_Subtraction@tok () Term)

; </end encoding val Prims.op_Subtraction>


; <Start encoding val Prims.op_Addition>

(declare-fun Prims.op_Addition (Term Term) Term)
(declare-fun Prims.op_Addition@tok () Term)

; </end encoding val Prims.op_Addition>


; <Start encoding val Prims.op_Minus>

(declare-fun Prims.op_Minus (Term) Term)
(declare-fun Prims.op_Minus@tok () Term)

; </end encoding val Prims.op_Minus>


; <Start encoding val Prims.op_LessThanOrEqual>

(declare-fun Prims.op_LessThanOrEqual (Term Term) Term)
(declare-fun Prims.op_LessThanOrEqual@tok () Term)

; </end encoding val Prims.op_LessThanOrEqual>


; <Start encoding val Prims.op_GreaterThan>

(declare-fun Prims.op_GreaterThan (Term Term) Term)
(declare-fun Prims.op_GreaterThan@tok () Term)

; </end encoding val Prims.op_GreaterThan>


; <Start encoding val Prims.op_GreaterThanOrEqual>

(declare-fun Prims.op_GreaterThanOrEqual (Term Term) Term)
(declare-fun Prims.op_GreaterThanOrEqual@tok () Term)

; </end encoding val Prims.op_GreaterThanOrEqual>


; <Start encoding val Prims.op_LessThan>

(declare-fun Prims.op_LessThan (Term Term) Term)
(declare-fun Prims.op_LessThan@tok () Term)

; </end encoding val Prims.op_LessThan>


; <Start encoding val Prims.op_Equality>

(declare-fun Prims.op_Equality (Term Term Term) Term)
(declare-fun Prims.op_Equality@tok () Term)

; </end encoding val Prims.op_Equality>


; <Start encoding val Prims.op_disEquality>

(declare-fun Prims.op_disEquality (Term Term Term) Term)
(declare-fun Prims.op_disEquality@tok () Term)

; </end encoding val Prims.op_disEquality>


; <Start encoding val Prims.exn>

(declare-fun Prims.exn () Term)

; </end encoding val Prims.exn>


; <Start encoding val Prims.array>

(declare-fun Prims.array (Term) Term)

(declare-fun Prims.array@tok () Term)

; </end encoding val Prims.array>


; <Start encoding val Prims.strcat>

(declare-fun Prims.strcat (Term Term) Term)
(declare-fun Tm_arrow_b66cecec1d56111347abe61e89557dd1 () Term)
(declare-fun Prims.strcat@tok () Term)

; </end encoding val Prims.strcat>


; <Skipped let op_Hat/>


; <Start encoding type Prims.list>

;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.list (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun Prims.list@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Nil (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Nil_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Nil
(declare-fun Prims.Nil@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun Prims.Cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_hd (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun Prims.Cons_tl (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: Prims.Cons
(declare-fun Prims.Cons@tok () Term)
(declare-fun Tm_arrow_3864bd5fbb999b4fe4487408df9b3401 () Term)
(declare-fun Tm_arrow_02c072760cbad0f5a4706f6cffab6c94 () Term)

; <start constructor Prims.list>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.list ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
318)
(exists ((@x0 Term))
 (! (= __@x0
(Prims.list @x0))
 
;;no pats
:qid is-Prims.list))))

; </end constructor Prims.list>


; <start constructor Prims.Nil>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Nil ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
325)
(= __@x0
(Prims.Nil (Prims.Nil_a __@x0)))))

; </end constructor Prims.Nil>


; <start constructor Prims.Cons>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-Prims.Cons ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
330)
(= __@x0
(Prims.Cons (Prims.Cons_a __@x0)
(Prims.Cons_hd __@x0)
(Prims.Cons_tl __@x0)))))

; </end constructor Prims.Cons>


; </end encoding type Prims.list>


; <Start encoding assume Prims.list__uu___haseq>


; </end encoding assume Prims.list__uu___haseq>


; <Start encoding val Prims.uu___is_Nil>

(declare-fun Prims.uu___is_Nil (Term Term) Term)
(declare-fun Tm_arrow_606904b0fa72729a20285beb231f9f2e () Term)
(declare-fun Prims.uu___is_Nil@tok () Term)

; </end encoding val Prims.uu___is_Nil>


; <Skipped let uu___is_Nil/>


; <Start encoding val Prims.uu___is_Cons>

(declare-fun Prims.uu___is_Cons (Term Term) Term)

(declare-fun Prims.uu___is_Cons@tok () Term)

; </end encoding val Prims.uu___is_Cons>


; <Skipped let uu___is_Cons/>


; <Start encoding val Prims.__proj__Cons__item__hd>

(declare-fun Tm_refine_7aac12c24449a22c34d98a0ea8ed4a32 (Term) Term)
(declare-fun Prims.__proj__Cons__item__hd (Term Term) Term)

(declare-fun Tm_arrow_27c3547831737e5a63950f3d18bf3d22 () Term)
(declare-fun Prims.__proj__Cons__item__hd@tok () Term)

; </end encoding val Prims.__proj__Cons__item__hd>


; <Skipped let __proj__Cons__item__hd/>


; <Start encoding val Prims.__proj__Cons__item__tl>


(declare-fun Prims.__proj__Cons__item__tl (Term Term) Term)

(declare-fun Tm_arrow_4e740085106d54d8b48ffe3c6c20ef21 () Term)
(declare-fun Prims.__proj__Cons__item__tl@tok () Term)

; </end encoding val Prims.__proj__Cons__item__tl>


; <Skipped let __proj__Cons__item__tl/>


; <Skipped effect M a = a/>


; <Start encoding let returnM>

(declare-fun Prims.returnM (Term Term) Term)
(declare-fun Tm_arrow_99724436653747ac6f5a6a00c64ff8bc () Term)
(declare-fun Prims.returnM@tok () Term)

; </end encoding let returnM>


; <Skipped let as_requires/>


; <Skipped let as_ensures/>


; <Start encoding val Prims._assume>

(declare-fun Prims._assume (Term) Term)
(declare-fun Non_total_Tm_arrow_724d0dab46b8b51a1bb19d329f7fc4b2 () Term)
(declare-fun Prims._assume@tok () Term)

; </end encoding val Prims._assume>


; <Start encoding val Prims.admit>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun Prims.admit (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun Prims.admit@tok () Term)

; </end encoding val Prims.admit>


; <Start encoding val Prims.magic>

(declare-fun Prims.magic (Term Term) Term)
(declare-fun Tm_arrow_f5df98ce82fbcebbbdb844c958bee4fb () Term)
(declare-fun Prims.magic@tok () Term)

; </end encoding val Prims.magic>


; <Start encoding let unsafe_coerce>

(declare-fun Prims.unsafe_coerce (Term Term Term) Term)
(declare-fun Tm_arrow_443ab41008720460b7a09e280558a60f () Term)
(declare-fun Prims.unsafe_coerce@tok () Term)

; </end encoding let unsafe_coerce>


; <Start encoding val Prims.admitP>

(declare-fun Prims.admitP (Term) Term)

(declare-fun Prims.admitP@tok () Term)

; </end encoding val Prims.admitP>


; <Skipped val Prims._assert/>


; <Start encoding let _assert>

(declare-fun Prims._assert (Term) Term)
(declare-fun Non_total_Tm_arrow_bb2d1b4bdb07c87bf5990ad3e5fd8642 () Term)
(declare-fun Prims._assert@tok () Term)

; </end encoding let _assert>


; <Skipped val Prims.cut/>


; <Start encoding let cut>

(declare-fun Prims.cut (Term) Term)

(declare-fun Prims.cut@tok () Term)

; </end encoding let cut>


; <Start encoding let nat>

(declare-fun Prims.nat () Term)
(declare-fun Tm_refine_542f9d4f129664613f2483a6c88bc7c2 () Term)

; </end encoding let nat>


; <Start encoding let pos>

(declare-fun Prims.pos () Term)
(declare-fun Tm_refine_774ba3f728d91ead8ef40be66c9802e5 () Term)

; </end encoding let pos>


; <Start encoding let nonzero>

(declare-fun Prims.nonzero () Term)
(declare-fun Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f () Term)

; </end encoding let nonzero>


; <Start encoding val Prims.op_Modulus>

(declare-fun Prims.op_Modulus (Term Term) Term)
(declare-fun Prims.op_Modulus@tok () Term)

; </end encoding val Prims.op_Modulus>


; <Start encoding val Prims.op_Division>

(declare-fun Prims.op_Division (Term Term) Term)
(declare-fun Prims.op_Division@tok () Term)

; </end encoding val Prims.op_Division>


; <Start encoding let rec pow2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun Prims.pow2.fuel_instrumented (Fuel Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun Prims.pow2.fuel_instrumented_token () Term)
(declare-fun Prims.pow2 (Term) Term)
(declare-fun Prims.pow2@tok () Term)
(declare-fun Tm_arrow_c331a0e032e021e1eaa359b3983de4f2 () Term)

; </end encoding let rec pow2>


; <Start encoding let min>

(declare-fun Prims.min (Term Term) Term)
(declare-fun Tm_arrow_47fc285d7b44e13bcb7e420cbfc55623 () Term)
(declare-fun Prims.min@tok () Term)

; </end encoding let min>


; <Start encoding let abs>

(declare-fun Prims.abs (Term) Term)
(declare-fun Tm_arrow_35447810753695c4fe25c93af1251992 () Term)
(declare-fun Prims.abs@tok () Term)

; </end encoding let abs>


; <Start encoding val Prims.string_of_bool>

(declare-fun Prims.string_of_bool (Term) Term)
(declare-fun Tm_arrow_e86b54405c2a58719f5e8112efd48c09 () Term)
(declare-fun Prims.string_of_bool@tok () Term)

; </end encoding val Prims.string_of_bool>


; <Start encoding val Prims.string_of_int>

(declare-fun Prims.string_of_int (Term) Term)
(declare-fun Tm_arrow_2bc066ec63734c94a3c008e1e72cae2b () Term)
(declare-fun Prims.string_of_int@tok () Term)

; </end encoding val Prims.string_of_int>


; <Start encoding let __cache_version_number__>

(declare-fun Prims.__cache_version_number__ () Term)

; </end encoding let __cache_version_number__>


; End Externals for module Prims


; Externals for module FStar.Pervasives.Native


; <Start encoding type FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.option (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.option@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.None (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.None_a (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.None
(declare-fun FStar.Pervasives.Native.None@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Some (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Some_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Some
(declare-fun FStar.Pervasives.Native.Some@tok () Term)
(declare-fun Tm_arrow_48b914114ec9f2f1caadf0f6848a9741 () Term)
(declare-fun Tm_arrow_b93a364b5144c2a5f3e9d1ea7b881752 () Term)

; <start constructor FStar.Pervasives.Native.option>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.option ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.Native.option @x0))
 
;;no pats
:qid is-FStar.Pervasives.Native.option))))

; </end constructor FStar.Pervasives.Native.option>


; <start constructor FStar.Pervasives.Native.None>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.None ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
108)
(= __@x0
(FStar.Pervasives.Native.None (FStar.Pervasives.Native.None_a __@x0)))))

; </end constructor FStar.Pervasives.Native.None>


; <start constructor FStar.Pervasives.Native.Some>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Some ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
(FStar.Pervasives.Native.Some (FStar.Pervasives.Native.Some_a __@x0)
(FStar.Pervasives.Native.Some_v __@x0)))))

; </end constructor FStar.Pervasives.Native.Some>


; </end encoding type FStar.Pervasives.Native.option>


; <Start encoding assume FStar.Pervasives.Native.option__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.option__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_None>

(declare-fun FStar.Pervasives.Native.uu___is_None (Term Term) Term)
(declare-fun Tm_arrow_f1a97bcd6ba9b40d22609b756f183afa () Term)
(declare-fun FStar.Pervasives.Native.uu___is_None@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_None>


; <Skipped let uu___is_None/>


; <Start encoding val FStar.Pervasives.Native.uu___is_Some>

(declare-fun FStar.Pervasives.Native.uu___is_Some (Term Term) Term)

(declare-fun FStar.Pervasives.Native.uu___is_Some@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Some>


; <Skipped let uu___is_Some/>


; <Start encoding val FStar.Pervasives.Native.__proj__Some__item__v>

(declare-fun Tm_refine_4d5241eb6fe198666a8101195bbd4a2a (Term) Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v (Term Term) Term)

(declare-fun Tm_arrow_1b1398c011ff53e4194fc2ec00c7b411 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Some__item__v@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Some__item__v>


; <Skipped let __proj__Some__item__v/>


; <Start encoding type FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple2 (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple2@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple2__2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple2
(declare-fun FStar.Pervasives.Native.Mktuple2@tok () Term)
(declare-fun Tm_arrow_4054cc0a51327db54c2ed9ba3376a093 () Term)

; <start constructor FStar.Pervasives.Native.tuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple2))))

; </end constructor FStar.Pervasives.Native.tuple2>


; <start constructor FStar.Pervasives.Native.Mktuple2>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple2 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(FStar.Pervasives.Native.Mktuple2 (FStar.Pervasives.Native.Mktuple2__a __@x0)
(FStar.Pervasives.Native.Mktuple2__b __@x0)
(FStar.Pervasives.Native.Mktuple2__1 __@x0)
(FStar.Pervasives.Native.Mktuple2__2 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple2>


; </end encoding type FStar.Pervasives.Native.tuple2>


; <Start encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple2__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple2>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2 (Term Term Term) Term)
(declare-fun Tm_arrow_eff71eeee4474e017e02350f86f54756 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple2@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple2>


; <Skipped let uu___is_Mktuple2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1 (Term Term Term) Term)
(declare-fun Tm_arrow_b8cce376a4a678a51298a0f3945f25ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___1>


; <Skipped let __proj__Mktuple2__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2 (Term Term Term) Term)
(declare-fun Tm_arrow_d952d001575ecb20c572af535c88dd2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple2__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple2__item___2>


; <Skipped let __proj__Mktuple2__item___2/>


; <Start encoding let fst>

(declare-fun FStar.Pervasives.Native.fst (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.fst@tok () Term)

; </end encoding let fst>


; <Start encoding let snd>

(declare-fun FStar.Pervasives.Native.snd (Term Term Term) Term)

(declare-fun FStar.Pervasives.Native.snd@tok () Term)

; </end encoding let snd>


; <Start encoding type FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple3
(declare-fun FStar.Pervasives.Native.Mktuple3@tok () Term)
(declare-fun Tm_arrow_1bedda193f13e939931cf5d46ad84216 () Term)

; <start constructor FStar.Pervasives.Native.tuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
146)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple3))))

; </end constructor FStar.Pervasives.Native.tuple3>


; <start constructor FStar.Pervasives.Native.Mktuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
153)
(= __@x0
(FStar.Pervasives.Native.Mktuple3 (FStar.Pervasives.Native.Mktuple3__a __@x0)
(FStar.Pervasives.Native.Mktuple3__b __@x0)
(FStar.Pervasives.Native.Mktuple3__c __@x0)
(FStar.Pervasives.Native.Mktuple3__1 __@x0)
(FStar.Pervasives.Native.Mktuple3__2 __@x0)
(FStar.Pervasives.Native.Mktuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple3>


; </end encoding type FStar.Pervasives.Native.tuple3>


; <Start encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple3>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_f03c6dc5b30146aaca49ed4bf6f332a7 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple3@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple3>


; <Skipped let uu___is_Mktuple3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1 (Term Term Term Term) Term)
(declare-fun Tm_arrow_592c45439d32a71e1933eacb9776c9ed () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___1>


; <Skipped let __proj__Mktuple3__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2 (Term Term Term Term) Term)
(declare-fun Tm_arrow_9c9b0c5ac9b0fbfc367f406af296ecab () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___2>


; <Skipped let __proj__Mktuple3__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3 (Term Term Term Term) Term)
(declare-fun Tm_arrow_08246a62c9aeca08c44c602ad80e95a4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple3__item___3>


; <Skipped let __proj__Mktuple3__item___3/>


; <Start encoding type FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple4
(declare-fun FStar.Pervasives.Native.Mktuple4@tok () Term)
(declare-fun Tm_arrow_cbe72a10167439fe1ecfaf4fec8fd23f () Term)

; <start constructor FStar.Pervasives.Native.tuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
165)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple4))))

; </end constructor FStar.Pervasives.Native.tuple4>


; <start constructor FStar.Pervasives.Native.Mktuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
172)
(= __@x0
(FStar.Pervasives.Native.Mktuple4 (FStar.Pervasives.Native.Mktuple4__a __@x0)
(FStar.Pervasives.Native.Mktuple4__b __@x0)
(FStar.Pervasives.Native.Mktuple4__c __@x0)
(FStar.Pervasives.Native.Mktuple4__d __@x0)
(FStar.Pervasives.Native.Mktuple4__1 __@x0)
(FStar.Pervasives.Native.Mktuple4__2 __@x0)
(FStar.Pervasives.Native.Mktuple4__3 __@x0)
(FStar.Pervasives.Native.Mktuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple4>


; </end encoding type FStar.Pervasives.Native.tuple4>


; <Start encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple4>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_4319694c225efa92ce9fad6e9d81f761 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple4@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple4>


; <Skipped let uu___is_Mktuple4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_382d1e9129053162252ec57e86d46f82 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___1>


; <Skipped let __proj__Mktuple4__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_fffd25e5325d259efa0675ef649c6864 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___2>


; <Skipped let __proj__Mktuple4__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_57b4005e0833f7b396e349ed7cdd1bb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___3>


; <Skipped let __proj__Mktuple4__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4 (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9e6c1a63d63f8735645b9898955a2dca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple4__item___4>


; <Skipped let __proj__Mktuple4__item___4/>


; <Start encoding type FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple5
(declare-fun FStar.Pervasives.Native.Mktuple5@tok () Term)
(declare-fun Tm_arrow_dd8a078a1b97a81b5089dc3637cc2887 () Term)

; <start constructor FStar.Pervasives.Native.tuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
186)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple5))))

; </end constructor FStar.Pervasives.Native.tuple5>


; <start constructor FStar.Pervasives.Native.Mktuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
193)
(= __@x0
(FStar.Pervasives.Native.Mktuple5 (FStar.Pervasives.Native.Mktuple5__a __@x0)
(FStar.Pervasives.Native.Mktuple5__b __@x0)
(FStar.Pervasives.Native.Mktuple5__c __@x0)
(FStar.Pervasives.Native.Mktuple5__d __@x0)
(FStar.Pervasives.Native.Mktuple5__e __@x0)
(FStar.Pervasives.Native.Mktuple5__1 __@x0)
(FStar.Pervasives.Native.Mktuple5__2 __@x0)
(FStar.Pervasives.Native.Mktuple5__3 __@x0)
(FStar.Pervasives.Native.Mktuple5__4 __@x0)
(FStar.Pervasives.Native.Mktuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple5>


; </end encoding type FStar.Pervasives.Native.tuple5>


; <Start encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple5>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_cfa2e2c8b8b41312889ff659c4faa5f9 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple5@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple5>


; <Skipped let uu___is_Mktuple5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7519f72fe101267af170e00c6ce694af () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___1>


; <Skipped let __proj__Mktuple5__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3e46329f224aa70981a337f98afbaa87 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___2>


; <Skipped let __proj__Mktuple5__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_55e6dc1b736536de45fedf844003f847 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___3>


; <Skipped let __proj__Mktuple5__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3a4e86c6aee1a39b4811bdbc12405398 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___4>


; <Skipped let __proj__Mktuple5__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1a78355922fdaba3f3848932dfc0a089 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple5__item___5>


; <Skipped let __proj__Mktuple5__item___5/>


; <Start encoding type FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple6 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple6@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple6__6 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple6
(declare-fun FStar.Pervasives.Native.Mktuple6@tok () Term)
(declare-fun Tm_arrow_f277ffaa7e891207f9c6bff5b88ffd67 () Term)

; <start constructor FStar.Pervasives.Native.tuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
209)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple6 @x0
@x1
@x2
@x3
@x4
@x5))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple6))))

; </end constructor FStar.Pervasives.Native.tuple6>


; <start constructor FStar.Pervasives.Native.Mktuple6>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple6 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
216)
(= __@x0
(FStar.Pervasives.Native.Mktuple6 (FStar.Pervasives.Native.Mktuple6__a __@x0)
(FStar.Pervasives.Native.Mktuple6__b __@x0)
(FStar.Pervasives.Native.Mktuple6__c __@x0)
(FStar.Pervasives.Native.Mktuple6__d __@x0)
(FStar.Pervasives.Native.Mktuple6__e __@x0)
(FStar.Pervasives.Native.Mktuple6__f __@x0)
(FStar.Pervasives.Native.Mktuple6__1 __@x0)
(FStar.Pervasives.Native.Mktuple6__2 __@x0)
(FStar.Pervasives.Native.Mktuple6__3 __@x0)
(FStar.Pervasives.Native.Mktuple6__4 __@x0)
(FStar.Pervasives.Native.Mktuple6__5 __@x0)
(FStar.Pervasives.Native.Mktuple6__6 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple6>


; </end encoding type FStar.Pervasives.Native.tuple6>


; <Start encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple6__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple6>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_286587a1b9d299ba75a076f54a6dad5f () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple6@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple6>


; <Skipped let uu___is_Mktuple6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5b1e145eeceab869b8e427e6927dbd63 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___1>


; <Skipped let __proj__Mktuple6__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3207475e225d584881d3e0a297482887 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___2>


; <Skipped let __proj__Mktuple6__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_43e491b3b537a523a4f10de18b1915f5 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___3>


; <Skipped let __proj__Mktuple6__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f5747d5b721642d7ecb757b043f20880 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___4>


; <Skipped let __proj__Mktuple6__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d6501381a0206e157ecc43950bb31fea () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___5>


; <Skipped let __proj__Mktuple6__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6 (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9c342f41120d0c7aea115b09b58cefb2 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple6__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple6__item___6>


; <Skipped let __proj__Mktuple6__item___6/>


; <Start encoding type FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple7 (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple7@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple7__7 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple7
(declare-fun FStar.Pervasives.Native.Mktuple7@tok () Term)
(declare-fun Tm_arrow_37ee9ec407a0f7bb69bf1b308f74a230 () Term)

; <start constructor FStar.Pervasives.Native.tuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
234)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple7 @x0
@x1
@x2
@x3
@x4
@x5
@x6))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple7))))

; </end constructor FStar.Pervasives.Native.tuple7>


; <start constructor FStar.Pervasives.Native.Mktuple7>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple7 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(FStar.Pervasives.Native.Mktuple7 (FStar.Pervasives.Native.Mktuple7__a __@x0)
(FStar.Pervasives.Native.Mktuple7__b __@x0)
(FStar.Pervasives.Native.Mktuple7__c __@x0)
(FStar.Pervasives.Native.Mktuple7__d __@x0)
(FStar.Pervasives.Native.Mktuple7__e __@x0)
(FStar.Pervasives.Native.Mktuple7__f __@x0)
(FStar.Pervasives.Native.Mktuple7__g __@x0)
(FStar.Pervasives.Native.Mktuple7__1 __@x0)
(FStar.Pervasives.Native.Mktuple7__2 __@x0)
(FStar.Pervasives.Native.Mktuple7__3 __@x0)
(FStar.Pervasives.Native.Mktuple7__4 __@x0)
(FStar.Pervasives.Native.Mktuple7__5 __@x0)
(FStar.Pervasives.Native.Mktuple7__6 __@x0)
(FStar.Pervasives.Native.Mktuple7__7 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple7>


; </end encoding type FStar.Pervasives.Native.tuple7>


; <Start encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple7__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple7>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_612dde2fedb1440c5d790ba7f5015319 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple7@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple7>


; <Skipped let uu___is_Mktuple7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_01c4488a68699f466c59799f5c1173ff () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___1>


; <Skipped let __proj__Mktuple7__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f317591858699585c67fe4ba8664e34c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___2>


; <Skipped let __proj__Mktuple7__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_44afce9d86f095aacc82b3ea2e0e223c () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___3>


; <Skipped let __proj__Mktuple7__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e857539d4cc5be0510cbcfb97cb64b35 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___4>


; <Skipped let __proj__Mktuple7__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a249d3d5ba06026b12d41e289bb88061 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___5>


; <Skipped let __proj__Mktuple7__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bf614c740d11cac9b5f8eb20b24c7d00 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___6>


; <Skipped let __proj__Mktuple7__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7 (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e775fbf03b08091e48143165286522f7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple7__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple7__item___7>


; <Skipped let __proj__Mktuple7__item___7/>


; <Start encoding type FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple8 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple8__8 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple8
(declare-fun FStar.Pervasives.Native.Mktuple8@tok () Term)
(declare-fun Tm_arrow_e922a339a0aa0f375ed7113049811583 () Term)

; <start constructor FStar.Pervasives.Native.tuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
261)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple8 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple8))))

; </end constructor FStar.Pervasives.Native.tuple8>


; <start constructor FStar.Pervasives.Native.Mktuple8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(= __@x0
(FStar.Pervasives.Native.Mktuple8 (FStar.Pervasives.Native.Mktuple8__a __@x0)
(FStar.Pervasives.Native.Mktuple8__b __@x0)
(FStar.Pervasives.Native.Mktuple8__c __@x0)
(FStar.Pervasives.Native.Mktuple8__d __@x0)
(FStar.Pervasives.Native.Mktuple8__e __@x0)
(FStar.Pervasives.Native.Mktuple8__f __@x0)
(FStar.Pervasives.Native.Mktuple8__g __@x0)
(FStar.Pervasives.Native.Mktuple8__h __@x0)
(FStar.Pervasives.Native.Mktuple8__1 __@x0)
(FStar.Pervasives.Native.Mktuple8__2 __@x0)
(FStar.Pervasives.Native.Mktuple8__3 __@x0)
(FStar.Pervasives.Native.Mktuple8__4 __@x0)
(FStar.Pervasives.Native.Mktuple8__5 __@x0)
(FStar.Pervasives.Native.Mktuple8__6 __@x0)
(FStar.Pervasives.Native.Mktuple8__7 __@x0)
(FStar.Pervasives.Native.Mktuple8__8 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple8>


; </end encoding type FStar.Pervasives.Native.tuple8>


; <Start encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple8__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple8>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ee31533e24c78558f4566668a6ec027c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple8@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple8>


; <Skipped let uu___is_Mktuple8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c971649e117e4941e7317eff508d5ea7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___1>


; <Skipped let __proj__Mktuple8__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97dd51e3888c1c543d8f6c73d1808548 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___2>


; <Skipped let __proj__Mktuple8__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3931d1873633dc65fed4e022ee3df3ca () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___3>


; <Skipped let __proj__Mktuple8__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c791e62f9472e4c351c2befb2b7a3d8 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___4>


; <Skipped let __proj__Mktuple8__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ef7cac898ca0ef25893959e91d8c6ce () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___5>


; <Skipped let __proj__Mktuple8__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b0ae5f58a7fa002e0313b58bf5fc74cb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___6>


; <Skipped let __proj__Mktuple8__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7fcd94f7549ca8acfadc26bc5b82f590 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___7>


; <Skipped let __proj__Mktuple8__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8 (Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_feaaf61fa62fef18c5ee7c39e9f86573 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple8__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple8__item___8>


; <Skipped let __proj__Mktuple8__item___8/>


; <Start encoding type FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple9 (Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple9__9 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple9
(declare-fun FStar.Pervasives.Native.Mktuple9@tok () Term)
(declare-fun Tm_arrow_0c6bc368a301d7de6e1939ebea91ee60 () Term)

; <start constructor FStar.Pervasives.Native.tuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple9 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple9))))

; </end constructor FStar.Pervasives.Native.tuple9>


; <start constructor FStar.Pervasives.Native.Mktuple9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(FStar.Pervasives.Native.Mktuple9 (FStar.Pervasives.Native.Mktuple9__a __@x0)
(FStar.Pervasives.Native.Mktuple9__b __@x0)
(FStar.Pervasives.Native.Mktuple9__c __@x0)
(FStar.Pervasives.Native.Mktuple9__d __@x0)
(FStar.Pervasives.Native.Mktuple9__e __@x0)
(FStar.Pervasives.Native.Mktuple9__f __@x0)
(FStar.Pervasives.Native.Mktuple9__g __@x0)
(FStar.Pervasives.Native.Mktuple9__h __@x0)
(FStar.Pervasives.Native.Mktuple9__i __@x0)
(FStar.Pervasives.Native.Mktuple9__1 __@x0)
(FStar.Pervasives.Native.Mktuple9__2 __@x0)
(FStar.Pervasives.Native.Mktuple9__3 __@x0)
(FStar.Pervasives.Native.Mktuple9__4 __@x0)
(FStar.Pervasives.Native.Mktuple9__5 __@x0)
(FStar.Pervasives.Native.Mktuple9__6 __@x0)
(FStar.Pervasives.Native.Mktuple9__7 __@x0)
(FStar.Pervasives.Native.Mktuple9__8 __@x0)
(FStar.Pervasives.Native.Mktuple9__9 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple9>


; </end encoding type FStar.Pervasives.Native.tuple9>


; <Start encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple9__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple9>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9ac8f39c7b1df1e87db7c9bf5bc37a38 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple9@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple9>


; <Skipped let uu___is_Mktuple9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_270119cc1f13c9afeb25322d78efc328 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___1>


; <Skipped let __proj__Mktuple9__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3c368dee2c86a1af7bd7ea91baab7613 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___2>


; <Skipped let __proj__Mktuple9__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e9c745e2da3dec50930b0a7e01a11cc3 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___3>


; <Skipped let __proj__Mktuple9__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a82ff41c5c66cd37481c83584c94a54d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___4>


; <Skipped let __proj__Mktuple9__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1b3b4c5e68fdf7277f64bde93e6534de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___5>


; <Skipped let __proj__Mktuple9__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_837f1324f6fa51bb8a0e45ee48e4e058 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___6>


; <Skipped let __proj__Mktuple9__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a7562220963e3431d35de76c3c9c87b9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___7>


; <Skipped let __proj__Mktuple9__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_861b810bc1c20bbd221cecbce824b695 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___8>


; <Skipped let __proj__Mktuple9__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9 (Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a54b18d8e08fdf0e20244b3f960c9dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple9__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple9__item___9>


; <Skipped let __proj__Mktuple9__item___9/>


; <Start encoding type FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple10 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple10__10 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple10
(declare-fun FStar.Pervasives.Native.Mktuple10@tok () Term)
(declare-fun Tm_arrow_61d31241317018093b2245d256adbcb5 () Term)

; <start constructor FStar.Pervasives.Native.tuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
321)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple10 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple10))))

; </end constructor FStar.Pervasives.Native.tuple10>


; <start constructor FStar.Pervasives.Native.Mktuple10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
328)
(= __@x0
(FStar.Pervasives.Native.Mktuple10 (FStar.Pervasives.Native.Mktuple10__a __@x0)
(FStar.Pervasives.Native.Mktuple10__b __@x0)
(FStar.Pervasives.Native.Mktuple10__c __@x0)
(FStar.Pervasives.Native.Mktuple10__d __@x0)
(FStar.Pervasives.Native.Mktuple10__e __@x0)
(FStar.Pervasives.Native.Mktuple10__f __@x0)
(FStar.Pervasives.Native.Mktuple10__g __@x0)
(FStar.Pervasives.Native.Mktuple10__h __@x0)
(FStar.Pervasives.Native.Mktuple10__i __@x0)
(FStar.Pervasives.Native.Mktuple10__j __@x0)
(FStar.Pervasives.Native.Mktuple10__1 __@x0)
(FStar.Pervasives.Native.Mktuple10__2 __@x0)
(FStar.Pervasives.Native.Mktuple10__3 __@x0)
(FStar.Pervasives.Native.Mktuple10__4 __@x0)
(FStar.Pervasives.Native.Mktuple10__5 __@x0)
(FStar.Pervasives.Native.Mktuple10__6 __@x0)
(FStar.Pervasives.Native.Mktuple10__7 __@x0)
(FStar.Pervasives.Native.Mktuple10__8 __@x0)
(FStar.Pervasives.Native.Mktuple10__9 __@x0)
(FStar.Pervasives.Native.Mktuple10__10 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple10>


; </end encoding type FStar.Pervasives.Native.tuple10>


; <Start encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple10__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple10>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f27282a056f525d8710bf32204d252ec () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple10@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple10>


; <Skipped let uu___is_Mktuple10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c581e9177cd071a1b6e057fca49ea75b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___1>


; <Skipped let __proj__Mktuple10__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4b2db87d7c69a8380f4d5ae20f2149 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___2>


; <Skipped let __proj__Mktuple10__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_a21274cb112dc6619b2bde244e6a0f9a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___3>


; <Skipped let __proj__Mktuple10__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9a051d5cacf4367d170d590ba8bb720d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___4>


; <Skipped let __proj__Mktuple10__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_bbd73769b626202d4de52d4d60cd3b75 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___5>


; <Skipped let __proj__Mktuple10__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7ceeded5a3852448c1a5406becbd990e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___6>


; <Skipped let __proj__Mktuple10__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c68947c71d484ad43cd50646c4e1daf4 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___7>


; <Skipped let __proj__Mktuple10__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e7b9ff90289491020fe84c6ab3bc60c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___8>


; <Skipped let __proj__Mktuple10__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6dbb3170f112f78092d1caee0b341678 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___9>


; <Skipped let __proj__Mktuple10__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10 (Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_45598a99c0a7fcc1bf2258b9ad4256cf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple10__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple10__item___10>


; <Skipped let __proj__Mktuple10__item___10/>


; <Start encoding type FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple11 (Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple11__11 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple11
(declare-fun FStar.Pervasives.Native.Mktuple11@tok () Term)
(declare-fun Tm_arrow_bf9783a1a3bf19ab918f42acff1daa32 () Term)

; <start constructor FStar.Pervasives.Native.tuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
354)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple11 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple11))))

; </end constructor FStar.Pervasives.Native.tuple11>


; <start constructor FStar.Pervasives.Native.Mktuple11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
361)
(= __@x0
(FStar.Pervasives.Native.Mktuple11 (FStar.Pervasives.Native.Mktuple11__a __@x0)
(FStar.Pervasives.Native.Mktuple11__b __@x0)
(FStar.Pervasives.Native.Mktuple11__c __@x0)
(FStar.Pervasives.Native.Mktuple11__d __@x0)
(FStar.Pervasives.Native.Mktuple11__e __@x0)
(FStar.Pervasives.Native.Mktuple11__f __@x0)
(FStar.Pervasives.Native.Mktuple11__g __@x0)
(FStar.Pervasives.Native.Mktuple11__h __@x0)
(FStar.Pervasives.Native.Mktuple11__i __@x0)
(FStar.Pervasives.Native.Mktuple11__j __@x0)
(FStar.Pervasives.Native.Mktuple11__k __@x0)
(FStar.Pervasives.Native.Mktuple11__1 __@x0)
(FStar.Pervasives.Native.Mktuple11__2 __@x0)
(FStar.Pervasives.Native.Mktuple11__3 __@x0)
(FStar.Pervasives.Native.Mktuple11__4 __@x0)
(FStar.Pervasives.Native.Mktuple11__5 __@x0)
(FStar.Pervasives.Native.Mktuple11__6 __@x0)
(FStar.Pervasives.Native.Mktuple11__7 __@x0)
(FStar.Pervasives.Native.Mktuple11__8 __@x0)
(FStar.Pervasives.Native.Mktuple11__9 __@x0)
(FStar.Pervasives.Native.Mktuple11__10 __@x0)
(FStar.Pervasives.Native.Mktuple11__11 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple11>


; </end encoding type FStar.Pervasives.Native.tuple11>


; <Start encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple11__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple11>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_005819ee7a23a5c47189bae72b85d85c () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple11@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple11>


; <Skipped let uu___is_Mktuple11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_31968e334e9582d95281307f534992a9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___1>


; <Skipped let __proj__Mktuple11__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6252dd9f4473dc54a3482810e8556404 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___2>


; <Skipped let __proj__Mktuple11__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ec3ce6b7406c091cd7d0961922bb5a02 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___3>


; <Skipped let __proj__Mktuple11__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_be7571e73b0e7fc24d03efe0e003c054 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___4>


; <Skipped let __proj__Mktuple11__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_97ae7d913e508c46c48c3b51553d4459 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___5>


; <Skipped let __proj__Mktuple11__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1dca311798936510e0ead61e14cf32a6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___6>


; <Skipped let __proj__Mktuple11__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eec431ea31093a646681ef2ceb2e2986 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___7>


; <Skipped let __proj__Mktuple11__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_689b2f06e9fd83f7a84ce80a13d338c6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___8>


; <Skipped let __proj__Mktuple11__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20210a3d9498f929cb7aa68d9e8b5ebf () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___9>


; <Skipped let __proj__Mktuple11__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_96812f2124d88760b2002bbe1502c3c9 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___10>


; <Skipped let __proj__Mktuple11__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_abcfa2582f68905d460c5ef4a7642f2d () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple11__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple11__item___11>


; <Skipped let __proj__Mktuple11__item___11/>


; <Start encoding type FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple12 (Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple12__12 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple12
(declare-fun FStar.Pervasives.Native.Mktuple12@tok () Term)
(declare-fun Tm_arrow_4d5cd995d6f44a2ec39d0f193be0be65 () Term)

; <start constructor FStar.Pervasives.Native.tuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
389)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple12 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple12))))

; </end constructor FStar.Pervasives.Native.tuple12>


; <start constructor FStar.Pervasives.Native.Mktuple12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
396)
(= __@x0
(FStar.Pervasives.Native.Mktuple12 (FStar.Pervasives.Native.Mktuple12__a __@x0)
(FStar.Pervasives.Native.Mktuple12__b __@x0)
(FStar.Pervasives.Native.Mktuple12__c __@x0)
(FStar.Pervasives.Native.Mktuple12__d __@x0)
(FStar.Pervasives.Native.Mktuple12__e __@x0)
(FStar.Pervasives.Native.Mktuple12__f __@x0)
(FStar.Pervasives.Native.Mktuple12__g __@x0)
(FStar.Pervasives.Native.Mktuple12__h __@x0)
(FStar.Pervasives.Native.Mktuple12__i __@x0)
(FStar.Pervasives.Native.Mktuple12__j __@x0)
(FStar.Pervasives.Native.Mktuple12__k __@x0)
(FStar.Pervasives.Native.Mktuple12__l __@x0)
(FStar.Pervasives.Native.Mktuple12__1 __@x0)
(FStar.Pervasives.Native.Mktuple12__2 __@x0)
(FStar.Pervasives.Native.Mktuple12__3 __@x0)
(FStar.Pervasives.Native.Mktuple12__4 __@x0)
(FStar.Pervasives.Native.Mktuple12__5 __@x0)
(FStar.Pervasives.Native.Mktuple12__6 __@x0)
(FStar.Pervasives.Native.Mktuple12__7 __@x0)
(FStar.Pervasives.Native.Mktuple12__8 __@x0)
(FStar.Pervasives.Native.Mktuple12__9 __@x0)
(FStar.Pervasives.Native.Mktuple12__10 __@x0)
(FStar.Pervasives.Native.Mktuple12__11 __@x0)
(FStar.Pervasives.Native.Mktuple12__12 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple12>


; </end encoding type FStar.Pervasives.Native.tuple12>


; <Start encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple12__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple12>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_5c9f47d9090f554c9826d2f65e388f20 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple12@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple12>


; <Skipped let uu___is_Mktuple12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_618941d7cf5ddbaabe15df8579b4a387 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___1>


; <Skipped let __proj__Mktuple12__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_84e9e2280e9bcb3233e4f33f86d66ea6 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___2>


; <Skipped let __proj__Mktuple12__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1fa79c5abf9f18607bd2e46a1a6967fa () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___3>


; <Skipped let __proj__Mktuple12__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_0f49c582489d782b08195e81221181dc () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___4>


; <Skipped let __proj__Mktuple12__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_29b7181ebb44f9e4a45f95c4f8478c6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___5>


; <Skipped let __proj__Mktuple12__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3cc2863a7d7f23e3916fa1e43483cb90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___6>


; <Skipped let __proj__Mktuple12__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_c7deea49701ab64a73985bf522e46359 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___7>


; <Skipped let __proj__Mktuple12__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_380615e7761919086537a14273a02d22 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___8>


; <Skipped let __proj__Mktuple12__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_245250918a4432b31aea8152d056489a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___9>


; <Skipped let __proj__Mktuple12__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2a967c8402c441e6d8a9336a7568e4de () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___10>


; <Skipped let __proj__Mktuple12__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_543c3feac0cd9e04ecb6cfd74ced8964 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___11>


; <Skipped let __proj__Mktuple12__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_e91029e2320896c60e94f554727a0c41 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple12__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple12__item___12>


; <Skipped let __proj__Mktuple12__item___12/>


; <Start encoding type FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple13__13 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple13
(declare-fun FStar.Pervasives.Native.Mktuple13@tok () Term)
(declare-fun Tm_arrow_6462785e86ca440ee74ed32e1053eae3 () Term)

; <start constructor FStar.Pervasives.Native.tuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
426)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple13 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple13))))

; </end constructor FStar.Pervasives.Native.tuple13>


; <start constructor FStar.Pervasives.Native.Mktuple13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
433)
(= __@x0
(FStar.Pervasives.Native.Mktuple13 (FStar.Pervasives.Native.Mktuple13__a __@x0)
(FStar.Pervasives.Native.Mktuple13__b __@x0)
(FStar.Pervasives.Native.Mktuple13__c __@x0)
(FStar.Pervasives.Native.Mktuple13__d __@x0)
(FStar.Pervasives.Native.Mktuple13__e __@x0)
(FStar.Pervasives.Native.Mktuple13__f __@x0)
(FStar.Pervasives.Native.Mktuple13__g __@x0)
(FStar.Pervasives.Native.Mktuple13__h __@x0)
(FStar.Pervasives.Native.Mktuple13__i __@x0)
(FStar.Pervasives.Native.Mktuple13__j __@x0)
(FStar.Pervasives.Native.Mktuple13__k __@x0)
(FStar.Pervasives.Native.Mktuple13__l __@x0)
(FStar.Pervasives.Native.Mktuple13__m __@x0)
(FStar.Pervasives.Native.Mktuple13__1 __@x0)
(FStar.Pervasives.Native.Mktuple13__2 __@x0)
(FStar.Pervasives.Native.Mktuple13__3 __@x0)
(FStar.Pervasives.Native.Mktuple13__4 __@x0)
(FStar.Pervasives.Native.Mktuple13__5 __@x0)
(FStar.Pervasives.Native.Mktuple13__6 __@x0)
(FStar.Pervasives.Native.Mktuple13__7 __@x0)
(FStar.Pervasives.Native.Mktuple13__8 __@x0)
(FStar.Pervasives.Native.Mktuple13__9 __@x0)
(FStar.Pervasives.Native.Mktuple13__10 __@x0)
(FStar.Pervasives.Native.Mktuple13__11 __@x0)
(FStar.Pervasives.Native.Mktuple13__12 __@x0)
(FStar.Pervasives.Native.Mktuple13__13 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple13>


; </end encoding type FStar.Pervasives.Native.tuple13>


; <Start encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple13__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple13>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_68c092e8b387730b412c4dcf592b12d3 () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple13@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple13>


; <Skipped let uu___is_Mktuple13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_82a3dc3a5dbad615d8d4a31db238e43f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___1>


; <Skipped let __proj__Mktuple13__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1da976aaa65f1c6b8b256dfc45c41306 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___2>


; <Skipped let __proj__Mktuple13__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_ca5cf529c415deee29e0a34c0c5d1c9f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___3>


; <Skipped let __proj__Mktuple13__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_94f6c578541b6cb528ca9e7dd1dacc3b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___4>


; <Skipped let __proj__Mktuple13__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_211e172b7220adc186d8a02ff17e8780 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___5>


; <Skipped let __proj__Mktuple13__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9276a4f669d8497205e8d59f12da53ba () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___6>


; <Skipped let __proj__Mktuple13__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8aa8f381a5ed57cbbae9dcd2405ce80f () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___7>


; <Skipped let __proj__Mktuple13__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_51814106613688cf259d7cdba9c24d93 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___8>


; <Skipped let __proj__Mktuple13__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_05fec25e6f03f974bb2933a910642d7e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___9>


; <Skipped let __proj__Mktuple13__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3280ee04611a7985c9d107bb1a8a330a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___10>


; <Skipped let __proj__Mktuple13__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_86c868d5d5058e8e5ec1f4d0285c7e90 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___11>


; <Skipped let __proj__Mktuple13__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7263c1a3c4475bb4e4b41a1be4bf22da () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___12>


; <Skipped let __proj__Mktuple13__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_338c65ae58844787891c6f47cf01c068 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple13__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple13__item___13>


; <Skipped let __proj__Mktuple13__item___13/>


; <Start encoding type FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.tuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.Native.tuple14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Native.Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__f (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__g (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__h (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__i (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__j (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__k (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__l (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__m (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__n (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__5 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__6 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__7 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__8 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__9 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__10 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__11 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__12 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__13 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Native.Mktuple14__14 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Native.Mktuple14
(declare-fun FStar.Pervasives.Native.Mktuple14@tok () Term)
(declare-fun Tm_arrow_484e3bf88a886900f7e695d7333615e9 () Term)

; <start constructor FStar.Pervasives.Native.tuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.tuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
465)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term) (@x10 Term) (@x11 Term) (@x12 Term) (@x13 Term))
 (! (= __@x0
(FStar.Pervasives.Native.tuple14 @x0
@x1
@x2
@x3
@x4
@x5
@x6
@x7
@x8
@x9
@x10
@x11
@x12
@x13))
 
;;no pats
:qid is-FStar.Pervasives.Native.tuple14))))

; </end constructor FStar.Pervasives.Native.tuple14>


; <start constructor FStar.Pervasives.Native.Mktuple14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Native.Mktuple14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
472)
(= __@x0
(FStar.Pervasives.Native.Mktuple14 (FStar.Pervasives.Native.Mktuple14__a __@x0)
(FStar.Pervasives.Native.Mktuple14__b __@x0)
(FStar.Pervasives.Native.Mktuple14__c __@x0)
(FStar.Pervasives.Native.Mktuple14__d __@x0)
(FStar.Pervasives.Native.Mktuple14__e __@x0)
(FStar.Pervasives.Native.Mktuple14__f __@x0)
(FStar.Pervasives.Native.Mktuple14__g __@x0)
(FStar.Pervasives.Native.Mktuple14__h __@x0)
(FStar.Pervasives.Native.Mktuple14__i __@x0)
(FStar.Pervasives.Native.Mktuple14__j __@x0)
(FStar.Pervasives.Native.Mktuple14__k __@x0)
(FStar.Pervasives.Native.Mktuple14__l __@x0)
(FStar.Pervasives.Native.Mktuple14__m __@x0)
(FStar.Pervasives.Native.Mktuple14__n __@x0)
(FStar.Pervasives.Native.Mktuple14__1 __@x0)
(FStar.Pervasives.Native.Mktuple14__2 __@x0)
(FStar.Pervasives.Native.Mktuple14__3 __@x0)
(FStar.Pervasives.Native.Mktuple14__4 __@x0)
(FStar.Pervasives.Native.Mktuple14__5 __@x0)
(FStar.Pervasives.Native.Mktuple14__6 __@x0)
(FStar.Pervasives.Native.Mktuple14__7 __@x0)
(FStar.Pervasives.Native.Mktuple14__8 __@x0)
(FStar.Pervasives.Native.Mktuple14__9 __@x0)
(FStar.Pervasives.Native.Mktuple14__10 __@x0)
(FStar.Pervasives.Native.Mktuple14__11 __@x0)
(FStar.Pervasives.Native.Mktuple14__12 __@x0)
(FStar.Pervasives.Native.Mktuple14__13 __@x0)
(FStar.Pervasives.Native.Mktuple14__14 __@x0)))))

; </end constructor FStar.Pervasives.Native.Mktuple14>


; </end encoding type FStar.Pervasives.Native.tuple14>


; <Start encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; </end encoding assume FStar.Pervasives.Native.tuple14__uu___haseq>


; <Start encoding val FStar.Pervasives.Native.uu___is_Mktuple14>

(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2de133cfaca100fc23d8bf4b3421db9a () Term)
(declare-fun FStar.Pervasives.Native.uu___is_Mktuple14@tok () Term)

; </end encoding val FStar.Pervasives.Native.uu___is_Mktuple14>


; <Skipped let uu___is_Mktuple14/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2e3216cab266e138debd68d0a503c177 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___1@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___1>


; <Skipped let __proj__Mktuple14__item___1/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_958b0270e487d0bf5fe9191b9efaa127 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___2@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___2>


; <Skipped let __proj__Mktuple14__item___2/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08349f596f8c0acf60d1587bebe8c91b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___3@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___3>


; <Skipped let __proj__Mktuple14__item___3/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2b069168147ba0f67f117ad5b0ac078b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___4@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___4>


; <Skipped let __proj__Mktuple14__item___4/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_1e38bb16245a24a197c44a262fee7bf1 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___5@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___5>


; <Skipped let __proj__Mktuple14__item___5/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7a148953a3884454d8a1dffddce086bb () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___6@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___6>


; <Skipped let __proj__Mktuple14__item___6/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_812eeb3fdab56dfea8e419236740acb0 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___7@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___7>


; <Skipped let __proj__Mktuple14__item___7/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_9dc932ce7cdfd6fa57f6536787fcb65b () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___8@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___8>


; <Skipped let __proj__Mktuple14__item___8/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_2600722933f06bc55e28bb3fc2ce4a6a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___9@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___9>


; <Skipped let __proj__Mktuple14__item___9/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_f51203e57fd66f9e9293b8962c57edfe () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___10@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___10>


; <Skipped let __proj__Mktuple14__item___10/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_7c34e0c28edc5fc4ad24d0b749c0adb7 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___11@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___11>


; <Skipped let __proj__Mktuple14__item___11/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_8772cc50ea320af17b3f2371c273679a () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___12@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___12>


; <Skipped let __proj__Mktuple14__item___12/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_039da0b9a8da1a651a1c570e55456614 () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___13@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___13>


; <Skipped let __proj__Mktuple14__item___13/>


; <Start encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>

(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14 (Term Term Term Term Term Term Term Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_579ada2eb036c15c7306dac5b648153e () Term)
(declare-fun FStar.Pervasives.Native.__proj__Mktuple14__item___14@tok () Term)

; </end encoding val FStar.Pervasives.Native.__proj__Mktuple14__item___14>


; <Skipped let __proj__Mktuple14__item___14/>


; End Externals for module FStar.Pervasives.Native


; Externals for interface FStar.Pervasives


; <Start encoding val FStar.Pervasives.remove_unused_type_parameters>

(declare-fun FStar.Pervasives.remove_unused_type_parameters (Term) Term)
(declare-fun Tm_arrow_555d62757eeaf90340982fcdf25f6704 () Term)
(declare-fun FStar.Pervasives.remove_unused_type_parameters@tok () Term)

; </end encoding val FStar.Pervasives.remove_unused_type_parameters>


; <Start encoding let pattern>

(declare-fun FStar.Pervasives.pattern () Term)

; </end encoding let pattern>


; <Start encoding val FStar.Pervasives.smt_pat>

(declare-fun FStar.Pervasives.smt_pat (Term Term) Term)
(declare-fun Tm_arrow_ce7b692455ad1649f97902066cf7c9aa () Term)
(declare-fun FStar.Pervasives.smt_pat@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat>


; <Start encoding val FStar.Pervasives.smt_pat_or>

(declare-fun FStar.Pervasives.smt_pat_or (Term) Term)
(declare-fun Tm_arrow_cbfaca2770c8ef7d6393b664b7ea1a41 () Term)
(declare-fun FStar.Pervasives.smt_pat_or@tok () Term)

; </end encoding val FStar.Pervasives.smt_pat_or>


; <Start encoding let eqtype_u>

(declare-fun FStar.Pervasives.eqtype_u () Term)


; </end encoding let eqtype_u>


; <Skipped effect Lemma a pre post pats = Prims.Pure a/>


; <Start encoding val FStar.Pervasives.spinoff>

(declare-fun FStar.Pervasives.spinoff (Term) Term)

(declare-fun FStar.Pervasives.spinoff@tok () Term)

; </end encoding val FStar.Pervasives.spinoff>


; <Start encoding val FStar.Pervasives.spinoff_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_eq (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_eq@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_eq>


; <Start encoding val FStar.Pervasives.spinoff_equiv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.spinoff_equiv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.spinoff_equiv@tok () Term)

; </end encoding val FStar.Pervasives.spinoff_equiv>


; <Start encoding val FStar.Pervasives.assert_spinoff>

(declare-fun FStar.Pervasives.assert_spinoff (Term) Term)

(declare-fun Tm_arrow_071538fd1c72fb82c7bb7b280daddf84 () Term)
(declare-fun FStar.Pervasives.assert_spinoff@tok () Term)


; </end encoding val FStar.Pervasives.assert_spinoff>


; <Start encoding let id>

(declare-fun FStar.Pervasives.id (Term Term) Term)

(declare-fun FStar.Pervasives.id@tok () Term)

; </end encoding let id>


; <Start encoding let trivial_pure_post>

(declare-fun FStar.Pervasives.trivial_pure_post (Term) Term)
(declare-fun Tm_arrow_53823f439377767fbcd3e27ebcdb971b () Term)
(declare-fun FStar.Pervasives.trivial_pure_post@tok () Term)

(declare-fun Tm_abs_5e34897418ce4950a4effcc8c159cf53 (Term) Term)

; </end encoding let trivial_pure_post>


; <Start encoding val FStar.Pervasives.ambient>

(declare-fun FStar.Pervasives.ambient (Term Term) Term)
(declare-fun Tm_arrow_9e007179360e2932d75ab29019e3d7fa () Term)
(declare-fun FStar.Pervasives.ambient@tok () Term)

; </end encoding val FStar.Pervasives.ambient>


; <Start encoding val FStar.Pervasives.intro_ambient>

(declare-fun FStar.Pervasives.intro_ambient (Term Term) Term)
(declare-fun Tm_arrow_6fc6334d56387f3d408122a4bd045e7e () Term)
(declare-fun FStar.Pervasives.intro_ambient@tok () Term)

; </end encoding val FStar.Pervasives.intro_ambient>


; <Start encoding val FStar.Pervasives.normalize_term>

(declare-fun FStar.Pervasives.normalize_term (Term Term) Term)

(declare-fun FStar.Pervasives.normalize_term@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term>


; <Start encoding val FStar.Pervasives.normalize>

(declare-fun FStar.Pervasives.normalize (Term) Term)

(declare-fun FStar.Pervasives.normalize@tok () Term)

; </end encoding val FStar.Pervasives.normalize>


; <Start encoding val FStar.Pervasives.norm_step>

(declare-fun FStar.Pervasives.norm_step () Term)

; </end encoding val FStar.Pervasives.norm_step>


; <Start encoding val FStar.Pervasives.simplify>

(declare-fun FStar.Pervasives.simplify (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.simplify>


; <Start encoding val FStar.Pervasives.weak>

(declare-fun FStar.Pervasives.weak (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.weak>


; <Start encoding val FStar.Pervasives.hnf>

(declare-fun FStar.Pervasives.hnf (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.hnf>


; <Start encoding val FStar.Pervasives.primops>

(declare-fun FStar.Pervasives.primops (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primops>


; <Start encoding val FStar.Pervasives.delta>

(declare-fun FStar.Pervasives.delta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.delta>


; <Start encoding val FStar.Pervasives.norm_debug>

(declare-fun FStar.Pervasives.norm_debug (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.norm_debug>


; <Start encoding val FStar.Pervasives.zeta>

(declare-fun FStar.Pervasives.zeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta>


; <Start encoding val FStar.Pervasives.zeta_full>

(declare-fun FStar.Pervasives.zeta_full (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.zeta_full>


; <Start encoding val FStar.Pervasives.iota>

(declare-fun FStar.Pervasives.iota (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.iota>


; <Start encoding val FStar.Pervasives.nbe>

(declare-fun FStar.Pervasives.nbe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.nbe>


; <Start encoding val FStar.Pervasives.reify_>

(declare-fun FStar.Pervasives.reify_ (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.reify_>


; <Start encoding val FStar.Pervasives.delta_only>

(declare-fun FStar.Pervasives.delta_only (Term) Term)
(declare-fun Tm_arrow_f14a20345cd55ddda96b6c4cc49e05f1 () Term)
(declare-fun FStar.Pervasives.delta_only@tok () Term)

; </end encoding val FStar.Pervasives.delta_only>


; <Start encoding val FStar.Pervasives.delta_fully>

(declare-fun FStar.Pervasives.delta_fully (Term) Term)

(declare-fun FStar.Pervasives.delta_fully@tok () Term)

; </end encoding val FStar.Pervasives.delta_fully>


; <Start encoding val FStar.Pervasives.delta_attr>

(declare-fun FStar.Pervasives.delta_attr (Term) Term)

(declare-fun FStar.Pervasives.delta_attr@tok () Term)

; </end encoding val FStar.Pervasives.delta_attr>


; <Start encoding val FStar.Pervasives.delta_qualifier>

(declare-fun FStar.Pervasives.delta_qualifier (Term) Term)

(declare-fun FStar.Pervasives.delta_qualifier@tok () Term)

; </end encoding val FStar.Pervasives.delta_qualifier>


; <Start encoding val FStar.Pervasives.delta_namespace>

(declare-fun FStar.Pervasives.delta_namespace (Term) Term)

(declare-fun FStar.Pervasives.delta_namespace@tok () Term)

; </end encoding val FStar.Pervasives.delta_namespace>


; <Start encoding val FStar.Pervasives.unmeta>

(declare-fun FStar.Pervasives.unmeta (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unmeta>


; <Start encoding val FStar.Pervasives.unascribe>

(declare-fun FStar.Pervasives.unascribe (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unascribe>


; <Start encoding val FStar.Pervasives.norm>

(declare-fun FStar.Pervasives.norm (Term Term Term) Term)
(declare-fun Tm_arrow_7d92e7a4aa7eee4098b10c5f1b3d77ea () Term)
(declare-fun FStar.Pervasives.norm@tok () Term)

; </end encoding val FStar.Pervasives.norm>


; <Start encoding val FStar.Pervasives.assert_norm>

(declare-fun FStar.Pervasives.assert_norm (Term) Term)

(declare-fun Tm_arrow_ee24fcf624d074d3c637ee61e4a867fb () Term)
(declare-fun FStar.Pervasives.assert_norm@tok () Term)


; </end encoding val FStar.Pervasives.assert_norm>


; <Start encoding val FStar.Pervasives.normalize_term_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_term_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_term_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_term_spec>


; <Start encoding val FStar.Pervasives.normalize_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.normalize_spec (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.normalize_spec@tok () Term)

; </end encoding val FStar.Pervasives.normalize_spec>


; <Start encoding val FStar.Pervasives.norm_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.norm_spec (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.norm_spec@tok () Term)

; </end encoding val FStar.Pervasives.norm_spec>


; <Start encoding let reveal_opaque>

(declare-fun FStar.Pervasives.reveal_opaque (Term Term) Term)
(declare-fun Tm_refine_2be30877b98f57c6ef5847ce3a81c23c (Term Term Term) Term)
(declare-fun Tm_arrow_ba8e05da7828191e456b9d6196e5c486 (Term Term) Term)
(declare-fun Tm_arrow_a3d09fecedc35d104f95c5fde10a81ff () Term)
(declare-fun FStar.Pervasives.reveal_opaque@tok () Term)



; </end encoding let reveal_opaque>


; <Start encoding let pure_return>

(declare-fun FStar.Pervasives.pure_return (Term Term) Term)
(declare-fun Tm_arrow_0dff8d294aeaf0b1d7e9cad664c9a15f () Term)
(declare-fun FStar.Pervasives.pure_return@tok () Term)

(declare-fun Tm_abs_bc5117f6a06a581c69e04141781c86d0 (Term Term Term) Term)
(declare-fun Tm_arrow_c88a29758356586fc450d481d4b685f3 (Term) Term)
(declare-fun Tm_abs_bdac9a3f32789788b83138a3a4262d0d (Term Term) Term)

; </end encoding let pure_return>


; <Start encoding let pure_bind_wp>

(declare-fun Tm_arrow_c05bc9331677cc1a187ad7677301a601 (Term Term) Term)
(declare-fun FStar.Pervasives.pure_bind_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_f8eba41a4bcb9aca0e3c11224f695d1e () Term)
(declare-fun FStar.Pervasives.pure_bind_wp@tok () Term)


(declare-fun Tm_abs_d0f415a5361a9d7988d8e425dc193472 (Term Term Term) Term)

(declare-fun Tm_abs_72b65b71b828688dbb0ba657715a194c (Term Term Term Term) Term)

; </end encoding let pure_bind_wp>


; <Start encoding let pure_if_then_else>

(declare-fun FStar.Pervasives.pure_if_then_else (Term Term Term Term) Term)
(declare-fun Tm_arrow_5911c11ab85061b4a8acf6a6ff43aaea () Term)
(declare-fun FStar.Pervasives.pure_if_then_else@tok () Term)

(declare-fun Tm_abs_614d7ab3976dfea6b6428085a93bafcc (Term Term Term Term) Term)

; </end encoding let pure_if_then_else>


; <Start encoding let pure_ite_wp>

(declare-fun FStar.Pervasives.pure_ite_wp (Term Term) Term)
(declare-fun Tm_arrow_983cc9c1e881fffd3b37c61b327d54c8 () Term)
(declare-fun FStar.Pervasives.pure_ite_wp@tok () Term)

(declare-fun Tm_abs_ea1703a99385b474600aa7a3bdb045c5 (Term Term Term) Term)
(declare-fun Tm_arrow_b275e247a67e3e77d7c5997d864d1247 (Term) Term)
(declare-fun Tm_abs_f9993abe3e10fc5902262cf22e5f5e1c (Term Term Term) Term)

(declare-fun Tm_abs_a4d8a67e708eb0f8e41d6eefd90d8b3d (Term Term) Term)

; </end encoding let pure_ite_wp>


; <Start encoding let pure_close_wp>


(declare-fun FStar.Pervasives.pure_close_wp (Term Term Term) Term)

(declare-fun Tm_arrow_6424f17922e38fc8eb3b7ad8d9107d78 () Term)
(declare-fun FStar.Pervasives.pure_close_wp@tok () Term)




(declare-fun Tm_abs_bef01cdc202d648a37f7725a1e8579fa (Term Term Term) Term)

; </end encoding let pure_close_wp>


; <Start encoding let pure_null_wp>

(declare-fun FStar.Pervasives.pure_null_wp (Term) Term)
(declare-fun Tm_arrow_e02f472dad10492b4fdaf21971ae643f () Term)
(declare-fun FStar.Pervasives.pure_null_wp@tok () Term)



(declare-fun Tm_abs_c7a599bd05f6d553477b7b3a5a51d357 (Term) Term)

; </end encoding let pure_null_wp>


; <Start encoding let pure_assert_wp>

(declare-fun FStar.Pervasives.pure_assert_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assert_wp@tok () Term)

; </end encoding let pure_assert_wp>


; <Start encoding let pure_assume_wp>

(declare-fun FStar.Pervasives.pure_assume_wp (Term) Term)

(declare-fun FStar.Pervasives.pure_assume_wp@tok () Term)

; </end encoding let pure_assume_wp>


; <Skipped new_effect { DIV ... }/>


; <Skipped sub_effect PURE ~> DIV/>


; <Start encoding let div_hoare_to_wp>

(declare-fun FStar.Pervasives.div_hoare_to_wp (Term Term Term) Term)
(declare-fun Tm_arrow_e81e37f60b892c60a4b806bfecd6c240 () Term)
(declare-fun FStar.Pervasives.div_hoare_to_wp@tok () Term)




(declare-fun Tm_abs_69982e78bbdc9cbdfcc98c8c3ec276f1 (Term Term Term Term) Term)


(declare-fun Tm_abs_95829b03554cf2093d2bc29e28500b94 (Term Term Term) Term)

; </end encoding let div_hoare_to_wp>


; <Skipped effect Div a pre post = FStar.Pervasives.DIV a/>


; <Skipped effect Dv a = FStar.Pervasives.DIV a/>


; <Skipped effect EXT a = FStar.Pervasives.Dv a/>


; <Start encoding let st_pre_h>

(declare-fun FStar.Pervasives.st_pre_h (Term) Term)

(declare-fun FStar.Pervasives.st_pre_h@tok () Term)


; </end encoding let st_pre_h>


; <Start encoding let st_post_h'>

(declare-fun FStar.Pervasives.st_post_h_ (Term Term Term) Term)
(declare-fun Tm_arrow_659175ed40df3b798f91ffaee9e689bd () Term)
(declare-fun FStar.Pervasives.st_post_h_@tok () Term)

(declare-fun Tm_arrow_14435f7112db17792f8cd33f8f7ea859 (Term Term Term) Term)

; </end encoding let st_post_h'>


; <Start encoding let st_post_h>

(declare-fun FStar.Pervasives.st_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_post_h@tok () Term)

; </end encoding let st_post_h>


; <Start encoding let st_wp_h>

(declare-fun FStar.Pervasives.st_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.st_wp_h@tok () Term)
(declare-fun Tm_arrow_c80b139653078194d2de90941effdc68 (Term Term) Term)

; </end encoding let st_wp_h>


; <Start encoding let st_return>

(declare-fun FStar.Pervasives.st_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_6bfe4bf6faf1fb53a521d575cefc35ef () Term)
(declare-fun FStar.Pervasives.st_return@tok () Term)


; </end encoding let st_return>


; <Start encoding let st_bind_wp>

(declare-fun Tm_arrow_c6e0af8c2ccbdda79db5c09d07e87e35 (Term Term Term) Term)
(declare-fun FStar.Pervasives.st_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_0eca50df2f29485bdbf578799f16b4a6 () Term)
(declare-fun FStar.Pervasives.st_bind_wp@tok () Term)

(declare-fun Tm_arrow_eb9b1a038524b37579c152a3f169145e (Term Term) Term)
(declare-fun Tm_abs_0f3b5ee9eaa8de8cacad7d3dcacb4558 (Term Term Term Term) Term)

; </end encoding let st_bind_wp>


; <Start encoding let st_if_then_else>

(declare-fun FStar.Pervasives.st_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_6e48361e1a1c92df6ec1ff87e622ddad () Term)
(declare-fun FStar.Pervasives.st_if_then_else@tok () Term)

; </end encoding let st_if_then_else>


; <Start encoding let st_ite_wp>

(declare-fun FStar.Pervasives.st_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_eaad896c6afdcb7ade2e80b5a6a930af () Term)
(declare-fun FStar.Pervasives.st_ite_wp@tok () Term)

; </end encoding let st_ite_wp>


; <Start encoding let st_stronger>

(declare-fun FStar.Pervasives.st_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_ae4d7f489de84317e0022bf89d45dd95 () Term)
(declare-fun FStar.Pervasives.st_stronger@tok () Term)

; </end encoding let st_stronger>


; <Start encoding let st_close_wp>


(declare-fun FStar.Pervasives.st_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_de6d3045642382698e9e38d41acfd7cc () Term)
(declare-fun FStar.Pervasives.st_close_wp@tok () Term)


; </end encoding let st_close_wp>


; <Start encoding let st_trivial>

(declare-fun FStar.Pervasives.st_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_f145e04ff3c7033bdfc718f7f5bb1df0 () Term)
(declare-fun FStar.Pervasives.st_trivial@tok () Term)

(declare-fun Tm_abs_89b21c42be5bc00d63e29f63ae20d4e2 (Term Term) Term)

; </end encoding let st_trivial>


; <Skipped new_effect { STATE_h ... }/>


; <Start encoding type FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.result (Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.result@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.V (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.V_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.V
(declare-fun FStar.Pervasives.V@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.E (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.E_e (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.E
(declare-fun FStar.Pervasives.E@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Err (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Err_msg (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Err
(declare-fun FStar.Pervasives.Err@tok () Term)
(declare-fun Tm_arrow_30908143640041985b9200e2fb38a259 () Term)
(declare-fun Tm_arrow_f8bb10130fea772e0f786d78a188c381 () Term)
(declare-fun Tm_arrow_93661c87034b0b64c4714dafbe2b02e6 () Term)

; <start constructor FStar.Pervasives.result>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.result ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
263)
(exists ((@x0 Term))
 (! (= __@x0
(FStar.Pervasives.result @x0))
 
;;no pats
:qid is-FStar.Pervasives.result))))

; </end constructor FStar.Pervasives.result>


; <start constructor FStar.Pervasives.V>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.V ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
270)
(= __@x0
(FStar.Pervasives.V (FStar.Pervasives.V_a __@x0)
(FStar.Pervasives.V_v __@x0)))))

; </end constructor FStar.Pervasives.V>


; <start constructor FStar.Pervasives.E>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.E ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(FStar.Pervasives.E (FStar.Pervasives.E_a __@x0)
(FStar.Pervasives.E_e __@x0)))))

; </end constructor FStar.Pervasives.E>


; <start constructor FStar.Pervasives.Err>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Err ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(FStar.Pervasives.Err (FStar.Pervasives.Err_a __@x0)
(FStar.Pervasives.Err_msg __@x0)))))

; </end constructor FStar.Pervasives.Err>


; </end encoding type FStar.Pervasives.result>


; <Start encoding val FStar.Pervasives.uu___is_V>

(declare-fun FStar.Pervasives.uu___is_V (Term Term) Term)
(declare-fun Tm_arrow_5cd1d0722a6a986faf6f8e557186fe24 () Term)
(declare-fun FStar.Pervasives.uu___is_V@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_V>


; <Skipped let uu___is_V/>


; <Start encoding val FStar.Pervasives.__proj__V__item__v>

(declare-fun Tm_refine_9db520b26a7f39c5a01493a3f375290d (Term) Term)
(declare-fun FStar.Pervasives.__proj__V__item__v (Term Term) Term)

(declare-fun Tm_arrow_1ea119bf213c016916a7095486e28467 () Term)
(declare-fun FStar.Pervasives.__proj__V__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__V__item__v>


; <Skipped let __proj__V__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_E>

(declare-fun FStar.Pervasives.uu___is_E (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_E@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_E>


; <Skipped let uu___is_E/>


; <Start encoding val FStar.Pervasives.__proj__E__item__e>

(declare-fun Tm_refine_95e1e2ee29104754cc3740f5575fc6e5 (Term) Term)
(declare-fun FStar.Pervasives.__proj__E__item__e (Term Term) Term)

(declare-fun Tm_arrow_19e73c373dbf3f9945c6fcfce8a07661 () Term)
(declare-fun FStar.Pervasives.__proj__E__item__e@tok () Term)

; </end encoding val FStar.Pervasives.__proj__E__item__e>


; <Skipped let __proj__E__item__e/>


; <Start encoding val FStar.Pervasives.uu___is_Err>

(declare-fun FStar.Pervasives.uu___is_Err (Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Err@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Err>


; <Skipped let uu___is_Err/>


; <Start encoding val FStar.Pervasives.__proj__Err__item__msg>

(declare-fun Tm_refine_22fb403854eba07427f92e79848f9d9f (Term) Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg (Term Term) Term)

(declare-fun Tm_arrow_f7e3debb858e412c9497460c5187d5cd () Term)
(declare-fun FStar.Pervasives.__proj__Err__item__msg@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Err__item__msg>


; <Skipped let __proj__Err__item__msg/>


; <Start encoding let ex_pre>

(declare-fun FStar.Pervasives.ex_pre () Term)

; </end encoding let ex_pre>


; <Start encoding let ex_post'>

(declare-fun FStar.Pervasives.ex_post_ (Term Term) Term)

(declare-fun FStar.Pervasives.ex_post_@tok () Term)
(declare-fun Tm_refine_a4dcdeeacbcb04d05a6720f786918fd6 (Term Term) Term)
(declare-fun Tm_arrow_68b66d987e8a7bdf825af8b370553e65 (Term Term) Term)

; </end encoding let ex_post'>


; <Start encoding let ex_post>

(declare-fun FStar.Pervasives.ex_post (Term) Term)

(declare-fun FStar.Pervasives.ex_post@tok () Term)

; </end encoding let ex_post>


; <Start encoding let ex_wp>

(declare-fun FStar.Pervasives.ex_wp (Term) Term)

(declare-fun FStar.Pervasives.ex_wp@tok () Term)
(declare-fun Tm_arrow_58168e52ae0908fefec42cac825ecc69 (Term) Term)

; </end encoding let ex_wp>


; <Start encoding let ex_return>

(declare-fun FStar.Pervasives.ex_return (Term Term Term) Term)
(declare-fun Tm_arrow_375264f6f19b4e37d33ffba9f6b1c7d2 () Term)
(declare-fun FStar.Pervasives.ex_return@tok () Term)

; </end encoding let ex_return>


; <Start encoding let ex_bind_wp>

(declare-fun Tm_arrow_3eb2992a529511f5b0ff2fef4e4594ad (Term Term) Term)
(declare-fun FStar.Pervasives.ex_bind_wp (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_1da2056f1a2fe3dc8db7decf5cbd5885 () Term)
(declare-fun FStar.Pervasives.ex_bind_wp@tok () Term)

(declare-fun Tm_arrow_ca5db633696caf7e0cd44c11654eed8b (Term) Term)
(declare-fun Tm_abs_c1d9037a5cc10cc07ba9b6a7a58728db (Term Term Term Term) Term)

; </end encoding let ex_bind_wp>


; <Start encoding let ex_if_then_else>

(declare-fun FStar.Pervasives.ex_if_then_else (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_08bd7ce530cc6e8b4a3f8dadbd0806b0 () Term)
(declare-fun FStar.Pervasives.ex_if_then_else@tok () Term)

; </end encoding let ex_if_then_else>


; <Start encoding let ex_ite_wp>

(declare-fun FStar.Pervasives.ex_ite_wp (Term Term Term) Term)
(declare-fun Tm_arrow_c2a8c761b16a75376b24262cd8c50369 () Term)
(declare-fun FStar.Pervasives.ex_ite_wp@tok () Term)

; </end encoding let ex_ite_wp>


; <Start encoding let ex_stronger>

(declare-fun FStar.Pervasives.ex_stronger (Term Term Term) Term)
(declare-fun Tm_arrow_1376d97b5d43e7d77d56729e2a3e04af () Term)
(declare-fun FStar.Pervasives.ex_stronger@tok () Term)

; </end encoding let ex_stronger>


; <Start encoding let ex_close_wp>


(declare-fun FStar.Pervasives.ex_close_wp (Term Term Term Term) Term)

(declare-fun Tm_arrow_814af0adff92aa08c5b8b0951bcb1959 () Term)
(declare-fun FStar.Pervasives.ex_close_wp@tok () Term)


; </end encoding let ex_close_wp>


; <Start encoding let ex_trivial>

(declare-fun FStar.Pervasives.ex_trivial (Term Term) Term)
(declare-fun Tm_arrow_ee4a787765920b0cb4357a47a0d3ac5c () Term)
(declare-fun FStar.Pervasives.ex_trivial@tok () Term)

(declare-fun Tm_abs_5cc223716d095f4545f0dcc745acad5d (Term) Term)

; </end encoding let ex_trivial>


; <Skipped new_effect { EXN ... }/>


; <Skipped effect Exn a pre post = FStar.Pervasives.EXN a/>


; <Start encoding let lift_div_exn>

(declare-fun FStar.Pervasives.lift_div_exn (Term Term Term) Term)
(declare-fun Tm_arrow_8196682216f286f6fe3a7dffb3de7d02 () Term)
(declare-fun FStar.Pervasives.lift_div_exn@tok () Term)

(declare-fun Tm_abs_c2b605ddd5d1991642baf5762d2b1dc5 (Term Term) Term)

; </end encoding let lift_div_exn>


; <Skipped sub_effect DIV ~> EXN/>


; <Skipped effect Ex a = FStar.Pervasives.Exn a/>


; <Start encoding let all_pre_h>

(declare-fun FStar.Pervasives.all_pre_h (Term) Term)

(declare-fun FStar.Pervasives.all_pre_h@tok () Term)


; </end encoding let all_pre_h>


; <Start encoding let all_post_h'>

(declare-fun FStar.Pervasives.all_post_h_ (Term Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h_@tok () Term)

(declare-fun Tm_arrow_fc269489cb2e24a10c7710a1f7f9d269 (Term Term Term) Term)

; </end encoding let all_post_h'>


; <Start encoding let all_post_h>

(declare-fun FStar.Pervasives.all_post_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_post_h@tok () Term)

; </end encoding let all_post_h>


; <Start encoding let all_wp_h>

(declare-fun FStar.Pervasives.all_wp_h (Term Term) Term)

(declare-fun FStar.Pervasives.all_wp_h@tok () Term)
(declare-fun Tm_arrow_1cd90c71d90a216d9fb0ba0321a1d3b5 (Term Term) Term)

; </end encoding let all_wp_h>


; <Start encoding let all_return>

(declare-fun FStar.Pervasives.all_return (Term Term Term Term) Term)

(declare-fun Tm_arrow_3f61557667800fb54cc62e48a5201f9d () Term)
(declare-fun FStar.Pervasives.all_return@tok () Term)


; </end encoding let all_return>


; <Start encoding let all_bind_wp>

(declare-fun Tm_arrow_b567b509414635f00096b9b1c3e30b57 (Term Term Term) Term)
(declare-fun FStar.Pervasives.all_bind_wp (Term Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_6ac18e25eb49f55ae0ce9c14679ecc22 () Term)
(declare-fun FStar.Pervasives.all_bind_wp@tok () Term)

(declare-fun Tm_arrow_59cac8a9b1ae3aa9511b8a867f8e934e (Term Term) Term)
(declare-fun Tm_abs_35ddc99cefc0079215f6f6ab3c58856d (Term Term Term Term Term) Term)

; </end encoding let all_bind_wp>


; <Start encoding let all_if_then_else>

(declare-fun FStar.Pervasives.all_if_then_else (Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_491eee2c8dc4eab4d420326a8285d2c4 () Term)
(declare-fun FStar.Pervasives.all_if_then_else@tok () Term)

; </end encoding let all_if_then_else>


; <Start encoding let all_ite_wp>

(declare-fun FStar.Pervasives.all_ite_wp (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_20fdb4e6d0c32f949f55e39a059913a7 () Term)
(declare-fun FStar.Pervasives.all_ite_wp@tok () Term)

; </end encoding let all_ite_wp>


; <Start encoding let all_stronger>

(declare-fun FStar.Pervasives.all_stronger (Term Term Term Term) Term)
(declare-fun Tm_arrow_073b21d0ec8edf2dda32907b45ec5f68 () Term)
(declare-fun FStar.Pervasives.all_stronger@tok () Term)

; </end encoding let all_stronger>


; <Start encoding let all_close_wp>


(declare-fun FStar.Pervasives.all_close_wp (Term Term Term Term Term Term) Term)

(declare-fun Tm_arrow_803d195802308e8beadf04438d3a6508 () Term)
(declare-fun FStar.Pervasives.all_close_wp@tok () Term)


; </end encoding let all_close_wp>


; <Start encoding let all_trivial>

(declare-fun FStar.Pervasives.all_trivial (Term Term Term) Term)
(declare-fun Tm_arrow_957927b0d25001784693eee8b2182308 () Term)
(declare-fun FStar.Pervasives.all_trivial@tok () Term)

(declare-fun Tm_abs_22e463dbd987016e31d6bc67025a7cd9 (Term Term) Term)

; </end encoding let all_trivial>


; <Skipped new_effect { ALL_h ... }/>


; <Start encoding val FStar.Pervasives.inversion>

(declare-fun FStar.Pervasives.inversion (Term) Term)

(declare-fun FStar.Pervasives.inversion@tok () Term)

; </end encoding val FStar.Pervasives.inversion>


; <Start encoding val FStar.Pervasives.allow_inversion>

(declare-fun FStar.Pervasives.allow_inversion (Term) Term)
(declare-fun Tm_refine_363615bee79fae5066b7c8bd06c286d0 (Term) Term)
(declare-fun Tm_arrow_bcab9cce464ec0f76562bc48c17ba410 () Term)
(declare-fun FStar.Pervasives.allow_inversion@tok () Term)


; </end encoding val FStar.Pervasives.allow_inversion>


; <Start encoding val FStar.Pervasives.invertOption>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Pervasives.invertOption (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Pervasives.invertOption@tok () Term)

; </end encoding val FStar.Pervasives.invertOption>


; <Start encoding type FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.either (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.either@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inl_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inl
(declare-fun FStar.Pervasives.Inl@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Inr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Inr_v (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Inr
(declare-fun FStar.Pervasives.Inr@tok () Term)
(declare-fun Tm_arrow_065da0adeba0c4ae0da1476ececee84c () Term)
(declare-fun Tm_arrow_c883938642e6d97d79c975d8d94b4aac () Term)

; <start constructor FStar.Pervasives.either>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.either ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
402)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(FStar.Pervasives.either @x0
@x1))
 
;;no pats
:qid is-FStar.Pervasives.either))))

; </end constructor FStar.Pervasives.either>


; <start constructor FStar.Pervasives.Inl>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inl ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
409)
(= __@x0
(FStar.Pervasives.Inl (FStar.Pervasives.Inl_a __@x0)
(FStar.Pervasives.Inl_b __@x0)
(FStar.Pervasives.Inl_v __@x0)))))

; </end constructor FStar.Pervasives.Inl>


; <start constructor FStar.Pervasives.Inr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Inr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
414)
(= __@x0
(FStar.Pervasives.Inr (FStar.Pervasives.Inr_a __@x0)
(FStar.Pervasives.Inr_b __@x0)
(FStar.Pervasives.Inr_v __@x0)))))

; </end constructor FStar.Pervasives.Inr>


; </end encoding type FStar.Pervasives.either>


; <Start encoding assume FStar.Pervasives.either__uu___haseq>


; </end encoding assume FStar.Pervasives.either__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Inl>

(declare-fun FStar.Pervasives.uu___is_Inl (Term Term Term) Term)
(declare-fun Tm_arrow_af0c68f1e39d4d6020c0873b16730c7d () Term)
(declare-fun FStar.Pervasives.uu___is_Inl@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inl>


; <Skipped let uu___is_Inl/>


; <Start encoding val FStar.Pervasives.__proj__Inl__item__v>

(declare-fun Tm_refine_85e0cc884f8457202f90cd77f23733ba (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_a80e0750277867ba1a434ad3bba8702d () Term)
(declare-fun FStar.Pervasives.__proj__Inl__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inl__item__v>


; <Skipped let __proj__Inl__item__v/>


; <Start encoding val FStar.Pervasives.uu___is_Inr>

(declare-fun FStar.Pervasives.uu___is_Inr (Term Term Term) Term)

(declare-fun FStar.Pervasives.uu___is_Inr@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Inr>


; <Skipped let uu___is_Inr/>


; <Start encoding val FStar.Pervasives.__proj__Inr__item__v>

(declare-fun Tm_refine_8f1f5f564dae90240db429de2eb41517 (Term Term) Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v (Term Term Term) Term)

(declare-fun Tm_arrow_df618db6b42762940f198036c8a56200 () Term)
(declare-fun FStar.Pervasives.__proj__Inr__item__v@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Inr__item__v>


; <Skipped let __proj__Inr__item__v/>


; <Start encoding let dfst>


(declare-fun FStar.Pervasives.dfst (Term Term Term) Term)


(declare-fun FStar.Pervasives.dfst@tok () Term)


; </end encoding let dfst>


; <Start encoding let dsnd>


(declare-fun FStar.Pervasives.dsnd (Term Term Term) Term)


(declare-fun FStar.Pervasives.dsnd@tok () Term)


; </end encoding let dsnd>


; <Start encoding type FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple3@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple3 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple3__3 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple3
(declare-fun FStar.Pervasives.Mkdtuple3@tok () Term)

(declare-fun Tm_arrow_0b6559e6ff3addf84b0c2880affbb335 (Term Term) Term)




(declare-fun Tm_arrow_8423f67df62f9e824c55756f9e26058d () Term)

; <start constructor FStar.Pervasives.dtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
450)
(exists ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple3 @x0
@x1
@x2))
 
;;no pats
:qid is-FStar.Pervasives.dtuple3))))

; </end constructor FStar.Pervasives.dtuple3>


; <start constructor FStar.Pervasives.Mkdtuple3>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple3 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
461)
(= __@x0
(FStar.Pervasives.Mkdtuple3 (FStar.Pervasives.Mkdtuple3_a __@x0)
(FStar.Pervasives.Mkdtuple3_b __@x0)
(FStar.Pervasives.Mkdtuple3_c __@x0)
(FStar.Pervasives.Mkdtuple3__1 __@x0)
(FStar.Pervasives.Mkdtuple3__2 __@x0)
(FStar.Pervasives.Mkdtuple3__3 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple3>


; </end encoding type FStar.Pervasives.dtuple3>


; <Start encoding assume FStar.Pervasives.dtuple3__uu___haseq>




; </end encoding assume FStar.Pervasives.dtuple3__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple3>



(declare-fun FStar.Pervasives.uu___is_Mkdtuple3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_70452cb82cd0a282ca9a2dbeb54c1b04 () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple3@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple3>


; <Skipped let uu___is_Mkdtuple3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1 (Term Term Term Term) Term)


(declare-fun Tm_arrow_255f0cfe499b1d2e9836e157bce1dba3 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___1>


; <Skipped let __proj__Mkdtuple3__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2 (Term Term Term Term) Term)


(declare-fun Tm_arrow_ea1ded11f7d194a26e812f407333a011 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___2>


; <Skipped let __proj__Mkdtuple3__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>



(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3 (Term Term Term Term) Term)


(declare-fun Tm_arrow_1d7ad5cfa0fff643640e3f74466d283e () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple3__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple3__item___3>


; <Skipped let __proj__Mkdtuple3__item___3/>


; <Start encoding type FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple4 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple4@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple4 (Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple4__4 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple4
(declare-fun FStar.Pervasives.Mkdtuple4@tok () Term)


(declare-fun Tm_arrow_af8eda99ba3685403be22a88669dcb35 (Term Term Term) Term)






(declare-fun Tm_arrow_cef44a6056754f192c2446237c4c1408 () Term)

; <start constructor FStar.Pervasives.dtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
519)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple4 @x0
@x1
@x2
@x3))
 
;;no pats
:qid is-FStar.Pervasives.dtuple4))))

; </end constructor FStar.Pervasives.dtuple4>


; <start constructor FStar.Pervasives.Mkdtuple4>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple4 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
532)
(= __@x0
(FStar.Pervasives.Mkdtuple4 (FStar.Pervasives.Mkdtuple4_a __@x0)
(FStar.Pervasives.Mkdtuple4_b __@x0)
(FStar.Pervasives.Mkdtuple4_c __@x0)
(FStar.Pervasives.Mkdtuple4_d __@x0)
(FStar.Pervasives.Mkdtuple4__1 __@x0)
(FStar.Pervasives.Mkdtuple4__2 __@x0)
(FStar.Pervasives.Mkdtuple4__3 __@x0)
(FStar.Pervasives.Mkdtuple4__4 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple4>


; </end encoding type FStar.Pervasives.dtuple4>


; <Start encoding assume FStar.Pervasives.dtuple4__uu___haseq>





; </end encoding assume FStar.Pervasives.dtuple4__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple4>




(declare-fun FStar.Pervasives.uu___is_Mkdtuple4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_76a226dc2cea2ddd4e4258637fc95e5b () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple4@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple4>


; <Skipped let uu___is_Mkdtuple4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_1da4d60ab69f411b912e76cc25e77965 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___1>


; <Skipped let __proj__Mkdtuple4__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_a86867091548f3d7d3ca1cb8b0458b9f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___2>


; <Skipped let __proj__Mkdtuple4__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_ee72552fcc293405aa0e854ba26f27ac () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___3>


; <Skipped let __proj__Mkdtuple4__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>




(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4 (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_6c79def96aa5d5d9eb9555c48dd9ebb6 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple4__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple4__item___4>


; <Skipped let __proj__Mkdtuple4__item___4/>


; <Start encoding type FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.dtuple5 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun FStar.Pervasives.dtuple5@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Mkdtuple5 (Term Term Term Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_a (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_b (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_c (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_d (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5_e (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__2 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__3 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__4 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Mkdtuple5__5 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Mkdtuple5
(declare-fun FStar.Pervasives.Mkdtuple5@tok () Term)



(declare-fun Tm_arrow_e2051b23ee191036cd2c8f08b57577cc (Term Term Term Term) Term)








(declare-fun Tm_arrow_7c47a0b67fa3d6e69e51a1ade2982e74 () Term)

; <start constructor FStar.Pervasives.dtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.dtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
626)
(exists ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= __@x0
(FStar.Pervasives.dtuple5 @x0
@x1
@x2
@x3
@x4))
 
;;no pats
:qid is-FStar.Pervasives.dtuple5))))

; </end constructor FStar.Pervasives.dtuple5>


; <start constructor FStar.Pervasives.Mkdtuple5>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Mkdtuple5 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
641)
(= __@x0
(FStar.Pervasives.Mkdtuple5 (FStar.Pervasives.Mkdtuple5_a __@x0)
(FStar.Pervasives.Mkdtuple5_b __@x0)
(FStar.Pervasives.Mkdtuple5_c __@x0)
(FStar.Pervasives.Mkdtuple5_d __@x0)
(FStar.Pervasives.Mkdtuple5_e __@x0)
(FStar.Pervasives.Mkdtuple5__1 __@x0)
(FStar.Pervasives.Mkdtuple5__2 __@x0)
(FStar.Pervasives.Mkdtuple5__3 __@x0)
(FStar.Pervasives.Mkdtuple5__4 __@x0)
(FStar.Pervasives.Mkdtuple5__5 __@x0)))))

; </end constructor FStar.Pervasives.Mkdtuple5>


; </end encoding type FStar.Pervasives.dtuple5>


; <Start encoding assume FStar.Pervasives.dtuple5__uu___haseq>






; </end encoding assume FStar.Pervasives.dtuple5__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_Mkdtuple5>





(declare-fun FStar.Pervasives.uu___is_Mkdtuple5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_790317d9d2afaf2417875fd8f65cee9f () Term)
(declare-fun FStar.Pervasives.uu___is_Mkdtuple5@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Mkdtuple5>


; <Skipped let uu___is_Mkdtuple5/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_855676d3a54fc2cdf0dfa3ac2f15fdad () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___1@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___1>


; <Skipped let __proj__Mkdtuple5__item___1/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_3c181aa1af161d84af20412908ff5981 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___2@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___2>


; <Skipped let __proj__Mkdtuple5__item___2/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_cc152ea4c314cfd6854de94e70041031 () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___3@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___3>


; <Skipped let __proj__Mkdtuple5__item___3/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_6a05465acf4f8d1b8f43fd30077a772a () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___4@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___4>


; <Skipped let __proj__Mkdtuple5__item___4/>


; <Start encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>





(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5 (Term Term Term Term Term Term) Term)




(declare-fun Tm_arrow_d5d61b48d54646c5c411627b3a20c98f () Term)
(declare-fun FStar.Pervasives.__proj__Mkdtuple5__item___5@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Mkdtuple5__item___5>


; <Skipped let __proj__Mkdtuple5__item___5/>


; <Start encoding let ignore>

(declare-fun FStar.Pervasives.ignore (Term Term) Term)
(declare-fun Tm_arrow_962476a7eea46a6ffc9b658c6d8fbc71 () Term)
(declare-fun FStar.Pervasives.ignore@tok () Term)

; </end encoding let ignore>


; <Start encoding val FStar.Pervasives.false_elim>

(declare-fun Tm_refine_f1ecc6ab6882a651504f328937700647 () Term)
(declare-fun FStar.Pervasives.false_elim (Term Term) Term)

(declare-fun Tm_arrow_7636fbfab5cd88ba06f60c10ea8caef2 () Term)
(declare-fun FStar.Pervasives.false_elim@tok () Term)

; </end encoding val FStar.Pervasives.false_elim>


; <Start encoding type FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.__internal_ocaml_attributes () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShow () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShow
(declare-fun FStar.Pervasives.PpxDerivingShow@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingShowConstant (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.PpxDerivingShowConstant__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingShowConstant
(declare-fun FStar.Pervasives.PpxDerivingShowConstant@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.PpxDerivingYoJson () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.PpxDerivingYoJson
(declare-fun FStar.Pervasives.PpxDerivingYoJson@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CInline
(declare-fun FStar.Pervasives.CInline@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Substitute () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Substitute
(declare-fun FStar.Pervasives.Substitute@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Gc () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Gc
(declare-fun FStar.Pervasives.Gc@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.Comment (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.Comment__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.Comment
(declare-fun FStar.Pervasives.Comment@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CPrologue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CPrologue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CPrologue
(declare-fun FStar.Pervasives.CPrologue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CEpilogue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CEpilogue__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CEpilogue
(declare-fun FStar.Pervasives.CEpilogue@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CConst__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CConst
(declare-fun FStar.Pervasives.CConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CCConv (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun FStar.Pervasives.CCConv__0 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CCConv
(declare-fun FStar.Pervasives.CCConv@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CAbstractStruct () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CAbstractStruct
(declare-fun FStar.Pervasives.CAbstractStruct@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CIfDef () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CIfDef
(declare-fun FStar.Pervasives.CIfDef@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CMacro () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CMacro
(declare-fun FStar.Pervasives.CMacro@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun FStar.Pervasives.CNoInline () Term)
;;;;;;;;;;;;;;;;data constructor proxy: FStar.Pervasives.CNoInline
(declare-fun FStar.Pervasives.CNoInline@tok () Term)
(declare-fun Tm_arrow_a25c6dbdd7c43412e925069991c0ef48 () Term)






; <start constructor FStar.Pervasives.__internal_ocaml_attributes>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.__internal_ocaml_attributes ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
775)
(= __@x0
FStar.Pervasives.__internal_ocaml_attributes)))

; </end constructor FStar.Pervasives.__internal_ocaml_attributes>


; <start constructor FStar.Pervasives.PpxDerivingShow>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShow ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
781)
(= __@x0
FStar.Pervasives.PpxDerivingShow)))

; </end constructor FStar.Pervasives.PpxDerivingShow>


; <start constructor FStar.Pervasives.PpxDerivingShowConstant>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingShowConstant ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
783)
(= __@x0
(FStar.Pervasives.PpxDerivingShowConstant (FStar.Pervasives.PpxDerivingShowConstant__0 __@x0)))))

; </end constructor FStar.Pervasives.PpxDerivingShowConstant>


; <start constructor FStar.Pervasives.PpxDerivingYoJson>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.PpxDerivingYoJson ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
788)
(= __@x0
FStar.Pervasives.PpxDerivingYoJson)))

; </end constructor FStar.Pervasives.PpxDerivingYoJson>


; <start constructor FStar.Pervasives.CInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
790)
(= __@x0
FStar.Pervasives.CInline)))

; </end constructor FStar.Pervasives.CInline>


; <start constructor FStar.Pervasives.Substitute>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Substitute ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
792)
(= __@x0
FStar.Pervasives.Substitute)))

; </end constructor FStar.Pervasives.Substitute>


; <start constructor FStar.Pervasives.Gc>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Gc ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
794)
(= __@x0
FStar.Pervasives.Gc)))

; </end constructor FStar.Pervasives.Gc>


; <start constructor FStar.Pervasives.Comment>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.Comment ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
796)
(= __@x0
(FStar.Pervasives.Comment (FStar.Pervasives.Comment__0 __@x0)))))

; </end constructor FStar.Pervasives.Comment>


; <start constructor FStar.Pervasives.CPrologue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CPrologue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
801)
(= __@x0
(FStar.Pervasives.CPrologue (FStar.Pervasives.CPrologue__0 __@x0)))))

; </end constructor FStar.Pervasives.CPrologue>


; <start constructor FStar.Pervasives.CEpilogue>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CEpilogue ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
806)
(= __@x0
(FStar.Pervasives.CEpilogue (FStar.Pervasives.CEpilogue__0 __@x0)))))

; </end constructor FStar.Pervasives.CEpilogue>


; <start constructor FStar.Pervasives.CConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
811)
(= __@x0
(FStar.Pervasives.CConst (FStar.Pervasives.CConst__0 __@x0)))))

; </end constructor FStar.Pervasives.CConst>


; <start constructor FStar.Pervasives.CCConv>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CCConv ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
816)
(= __@x0
(FStar.Pervasives.CCConv (FStar.Pervasives.CCConv__0 __@x0)))))

; </end constructor FStar.Pervasives.CCConv>


; <start constructor FStar.Pervasives.CAbstractStruct>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CAbstractStruct ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
821)
(= __@x0
FStar.Pervasives.CAbstractStruct)))

; </end constructor FStar.Pervasives.CAbstractStruct>


; <start constructor FStar.Pervasives.CIfDef>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CIfDef ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
823)
(= __@x0
FStar.Pervasives.CIfDef)))

; </end constructor FStar.Pervasives.CIfDef>


; <start constructor FStar.Pervasives.CMacro>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CMacro ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
825)
(= __@x0
FStar.Pervasives.CMacro)))

; </end constructor FStar.Pervasives.CMacro>


; <start constructor FStar.Pervasives.CNoInline>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-FStar.Pervasives.CNoInline ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
827)
(= __@x0
FStar.Pervasives.CNoInline)))

; </end constructor FStar.Pervasives.CNoInline>


; </end encoding type FStar.Pervasives.__internal_ocaml_attributes>


; <Start encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; </end encoding assume FStar.Pervasives.__internal_ocaml_attributes__uu___haseq>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShow>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow (Term) Term)
(declare-fun Tm_arrow_89dc0c243f5e74d4fefc48cfe123db41 () Term)
(declare-fun FStar.Pervasives.uu___is_PpxDerivingShow@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShow>


; <Skipped let uu___is_PpxDerivingShow/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingShowConstant@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingShowConstant>


; <Skipped let uu___is_PpxDerivingShowConstant/>


; <Start encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>

(declare-fun Tm_refine_564db2f0aa0878b4d96c60508be3dd36 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0 (Term) Term)

(declare-fun Tm_arrow_dbb84ef8131159481071b6d6a41b7f31 () Term)
(declare-fun FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__PpxDerivingShowConstant__item___0>


; <Skipped let __proj__PpxDerivingShowConstant__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson (Term) Term)

(declare-fun FStar.Pervasives.uu___is_PpxDerivingYoJson@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_PpxDerivingYoJson>


; <Skipped let uu___is_PpxDerivingYoJson/>


; <Start encoding val FStar.Pervasives.uu___is_CInline>

(declare-fun FStar.Pervasives.uu___is_CInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CInline>


; <Skipped let uu___is_CInline/>


; <Start encoding val FStar.Pervasives.uu___is_Substitute>

(declare-fun FStar.Pervasives.uu___is_Substitute (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Substitute@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Substitute>


; <Skipped let uu___is_Substitute/>


; <Start encoding val FStar.Pervasives.uu___is_Gc>

(declare-fun FStar.Pervasives.uu___is_Gc (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Gc@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Gc>


; <Skipped let uu___is_Gc/>


; <Start encoding val FStar.Pervasives.uu___is_Comment>

(declare-fun FStar.Pervasives.uu___is_Comment (Term) Term)

(declare-fun FStar.Pervasives.uu___is_Comment@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_Comment>


; <Skipped let uu___is_Comment/>


; <Start encoding val FStar.Pervasives.__proj__Comment__item___0>

(declare-fun Tm_refine_c53089e2d20d1b0f5a267296ac8e45f0 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0 (Term) Term)

(declare-fun Tm_arrow_d4c2bbf4fb852b3f4b9961c7cbc2f3a2 () Term)
(declare-fun FStar.Pervasives.__proj__Comment__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__Comment__item___0>


; <Skipped let __proj__Comment__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CPrologue>

(declare-fun FStar.Pervasives.uu___is_CPrologue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CPrologue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CPrologue>


; <Skipped let uu___is_CPrologue/>


; <Start encoding val FStar.Pervasives.__proj__CPrologue__item___0>

(declare-fun Tm_refine_ac46c1a2a06ce46a180e0eda48004c47 () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0 (Term) Term)

(declare-fun Tm_arrow_929b9daa0a2a2e99e3571b146c52feaf () Term)
(declare-fun FStar.Pervasives.__proj__CPrologue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CPrologue__item___0>


; <Skipped let __proj__CPrologue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CEpilogue>

(declare-fun FStar.Pervasives.uu___is_CEpilogue (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CEpilogue@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CEpilogue>


; <Skipped let uu___is_CEpilogue/>


; <Start encoding val FStar.Pervasives.__proj__CEpilogue__item___0>

(declare-fun Tm_refine_47384bef739d1f0729fd782d351dc9a5 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0 (Term) Term)

(declare-fun Tm_arrow_e37361b66babb46a30183ad1ff072689 () Term)
(declare-fun FStar.Pervasives.__proj__CEpilogue__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CEpilogue__item___0>


; <Skipped let __proj__CEpilogue__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CConst>

(declare-fun FStar.Pervasives.uu___is_CConst (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CConst@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CConst>


; <Skipped let uu___is_CConst/>


; <Start encoding val FStar.Pervasives.__proj__CConst__item___0>

(declare-fun Tm_refine_5036c6b2983454bc3afeffcba3f00f50 () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0 (Term) Term)

(declare-fun Tm_arrow_2d0b7639551b88b0df758d7b36c8f77a () Term)
(declare-fun FStar.Pervasives.__proj__CConst__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CConst__item___0>


; <Skipped let __proj__CConst__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CCConv>

(declare-fun FStar.Pervasives.uu___is_CCConv (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CCConv@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CCConv>


; <Skipped let uu___is_CCConv/>


; <Start encoding val FStar.Pervasives.__proj__CCConv__item___0>

(declare-fun Tm_refine_2c4510f48649a66c3dca1fc9e3a2d320 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0 (Term) Term)

(declare-fun Tm_arrow_b7e884ec94708f2b05c42d4d8834eac6 () Term)
(declare-fun FStar.Pervasives.__proj__CCConv__item___0@tok () Term)

; </end encoding val FStar.Pervasives.__proj__CCConv__item___0>


; <Skipped let __proj__CCConv__item___0/>


; <Start encoding val FStar.Pervasives.uu___is_CAbstractStruct>

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CAbstractStruct@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CAbstractStruct>


; <Skipped let uu___is_CAbstractStruct/>


; <Start encoding val FStar.Pervasives.uu___is_CIfDef>

(declare-fun FStar.Pervasives.uu___is_CIfDef (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CIfDef@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CIfDef>


; <Skipped let uu___is_CIfDef/>


; <Start encoding val FStar.Pervasives.uu___is_CMacro>

(declare-fun FStar.Pervasives.uu___is_CMacro (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CMacro@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CMacro>


; <Skipped let uu___is_CMacro/>


; <Start encoding val FStar.Pervasives.uu___is_CNoInline>

(declare-fun FStar.Pervasives.uu___is_CNoInline (Term) Term)

(declare-fun FStar.Pervasives.uu___is_CNoInline@tok () Term)

; </end encoding val FStar.Pervasives.uu___is_CNoInline>


; <Skipped let uu___is_CNoInline/>


; <Start encoding val FStar.Pervasives.inline_let>

(declare-fun FStar.Pervasives.inline_let (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.inline_let>


; <Start encoding val FStar.Pervasives.rename_let>

(declare-fun FStar.Pervasives.rename_let (Term) Term)

(declare-fun FStar.Pervasives.rename_let@tok () Term)

; </end encoding val FStar.Pervasives.rename_let>


; <Start encoding val FStar.Pervasives.plugin>

(declare-fun FStar.Pervasives.plugin (Term) Term)
(declare-fun Tm_arrow_f12575a0ee171a8be16a63e3359708f8 () Term)
(declare-fun FStar.Pervasives.plugin@tok () Term)

; </end encoding val FStar.Pervasives.plugin>


; <Start encoding val FStar.Pervasives.tcnorm>

(declare-fun FStar.Pervasives.tcnorm (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcnorm>


; <Start encoding val FStar.Pervasives.must_erase_for_extraction>

(declare-fun FStar.Pervasives.must_erase_for_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.must_erase_for_extraction>


; <Start encoding val FStar.Pervasives.dm4f_bind_range>

(declare-fun FStar.Pervasives.dm4f_bind_range (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.dm4f_bind_range>


; <Start encoding val FStar.Pervasives.expect_failure>

(declare-fun FStar.Pervasives.expect_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_failure>


; <Start encoding val FStar.Pervasives.expect_lax_failure>

(declare-fun FStar.Pervasives.expect_lax_failure (Term) Term)

(declare-fun FStar.Pervasives.expect_lax_failure@tok () Term)

; </end encoding val FStar.Pervasives.expect_lax_failure>


; <Start encoding val FStar.Pervasives.tcdecltime>

(declare-fun FStar.Pervasives.tcdecltime (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.tcdecltime>


; <Start encoding val FStar.Pervasives.unifier_hint_injective>

(declare-fun FStar.Pervasives.unifier_hint_injective (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unifier_hint_injective>


; <Start encoding val FStar.Pervasives.strict_on_arguments>

(declare-fun FStar.Pervasives.strict_on_arguments (Term) Term)

(declare-fun FStar.Pervasives.strict_on_arguments@tok () Term)

; </end encoding val FStar.Pervasives.strict_on_arguments>


; <Start encoding val FStar.Pervasives.resolve_implicits>

(declare-fun FStar.Pervasives.resolve_implicits (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.resolve_implicits>


; <Start encoding val FStar.Pervasives.override_resolve_implicits_handler>

(declare-fun FStar.Pervasives.override_resolve_implicits_handler (Term Term Term) Term)
(declare-fun Tm_arrow_93e6548cfc250f7cc25301579d62a018 () Term)
(declare-fun FStar.Pervasives.override_resolve_implicits_handler@tok () Term)

; </end encoding val FStar.Pervasives.override_resolve_implicits_handler>


; <Start encoding val FStar.Pervasives.handle_smt_goals>

(declare-fun FStar.Pervasives.handle_smt_goals (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.handle_smt_goals>


; <Start encoding val FStar.Pervasives.erasable>

(declare-fun FStar.Pervasives.erasable (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.erasable>


; <Start encoding val FStar.Pervasives.commute_nested_matches>

(declare-fun FStar.Pervasives.commute_nested_matches (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.commute_nested_matches>


; <Start encoding val FStar.Pervasives.noextract_to>

(declare-fun FStar.Pervasives.noextract_to (Term) Term)

(declare-fun FStar.Pervasives.noextract_to@tok () Term)

; </end encoding val FStar.Pervasives.noextract_to>


; <Start encoding val FStar.Pervasives.normalize_for_extraction>

(declare-fun FStar.Pervasives.normalize_for_extraction (Term) Term)
(declare-fun Tm_arrow_5a371649389ebd695db0478470787cef () Term)
(declare-fun FStar.Pervasives.normalize_for_extraction@tok () Term)

; </end encoding val FStar.Pervasives.normalize_for_extraction>


; <Start encoding val FStar.Pervasives.ite_soundness_by>

(declare-fun FStar.Pervasives.ite_soundness_by (Term) Term)
(declare-fun Tm_arrow_0c55530a575bf8e94add46ffb548393c () Term)
(declare-fun FStar.Pervasives.ite_soundness_by@tok () Term)

; </end encoding val FStar.Pervasives.ite_soundness_by>


; <Start encoding val FStar.Pervasives.default_effect>

(declare-fun FStar.Pervasives.default_effect (Term) Term)

(declare-fun FStar.Pervasives.default_effect@tok () Term)

; </end encoding val FStar.Pervasives.default_effect>


; <Start encoding val FStar.Pervasives.top_level_effect>

(declare-fun FStar.Pervasives.top_level_effect (Term) Term)

(declare-fun FStar.Pervasives.top_level_effect@tok () Term)

; </end encoding val FStar.Pervasives.top_level_effect>


; <Start encoding val FStar.Pervasives.effect_param>

(declare-fun FStar.Pervasives.effect_param (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.effect_param>


; <Start encoding val FStar.Pervasives.bind_has_range_args>

(declare-fun FStar.Pervasives.bind_has_range_args (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.bind_has_range_args>


; <Start encoding val FStar.Pervasives.primitive_extraction>

(declare-fun FStar.Pervasives.primitive_extraction (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.primitive_extraction>


; <Start encoding val FStar.Pervasives.extract_as_impure_effect>

(declare-fun FStar.Pervasives.extract_as_impure_effect (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.extract_as_impure_effect>


; <Start encoding val FStar.Pervasives.strictly_positive>

(declare-fun FStar.Pervasives.strictly_positive (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.strictly_positive>


; <Start encoding val FStar.Pervasives.unused>

(declare-fun FStar.Pervasives.unused (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.unused>


; <Start encoding val FStar.Pervasives.no_auto_projectors>

(declare-fun FStar.Pervasives.no_auto_projectors (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors>


; <Start encoding val FStar.Pervasives.no_auto_projectors_decls>

(declare-fun FStar.Pervasives.no_auto_projectors_decls (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_auto_projectors_decls>


; <Start encoding val FStar.Pervasives.no_subtyping>

(declare-fun FStar.Pervasives.no_subtyping (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.no_subtyping>


; <Start encoding val FStar.Pervasives.admit_termination>

(declare-fun FStar.Pervasives.admit_termination (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.admit_termination>


; <Start encoding val FStar.Pervasives.singleton>

(declare-fun FStar.Pervasives.singleton (Term Term) Term)
(declare-fun Tm_refine_2fbd657fe85bcb2423f9c7e5f9b3bcb5 (Term Term) Term)
(declare-fun Tm_arrow_9cdb4ebd85da757e86217b6fb07ef9fc () Term)
(declare-fun FStar.Pervasives.singleton@tok () Term)


; </end encoding val FStar.Pervasives.singleton>


; <Start encoding let eqtype_as_type>

(declare-fun FStar.Pervasives.eqtype_as_type (Term) Term)
(declare-fun Tm_arrow_7e9afc6da5407011473323ad80ff51bf () Term)
(declare-fun FStar.Pervasives.eqtype_as_type@tok () Term)

; </end encoding let eqtype_as_type>


; <Start encoding let coerce_eq>

(declare-fun Tm_refine_0dee8cb03258a67c2f7ec66427696212 (Term Term) Term)
(declare-fun FStar.Pervasives.coerce_eq (Term Term Term Term) Term)

(declare-fun Tm_arrow_f44173fb14fa6046eedce5f32cb8aae8 () Term)
(declare-fun FStar.Pervasives.coerce_eq@tok () Term)


; </end encoding let coerce_eq>


; <Start encoding val FStar.Pervasives.coercion>

(declare-fun FStar.Pervasives.coercion (Dummy_sort) Term)

; </end encoding val FStar.Pervasives.coercion>


; <Start encoding val FStar.Pervasives.desugar_of_variant_record>

(declare-fun FStar.Pervasives.desugar_of_variant_record (Term) Term)

(declare-fun FStar.Pervasives.desugar_of_variant_record@tok () Term)

; </end encoding val FStar.Pervasives.desugar_of_variant_record>


; <Start encoding val FStar.Pervasives.defer_to>

(declare-fun FStar.Pervasives.defer_to (Term Term) Term)

(declare-fun FStar.Pervasives.defer_to@tok () Term)

; </end encoding val FStar.Pervasives.defer_to>


; End Externals for interface FStar.Pervasives


; Externals for module FStar.Mul


; <Start encoding let op_Star>

(declare-fun FStar.Mul.op_Star (Term Term) Term)

(declare-fun FStar.Mul.op_Star@tok () Term)

; </end encoding let op_Star>


; End Externals for module FStar.Mul


; Externals for interface FStar.Ghost


; <Start encoding val FStar.Ghost.erased>

(declare-fun FStar.Ghost.erased (Term) Term)

(declare-fun FStar.Ghost.erased@tok () Term)

; </end encoding val FStar.Ghost.erased>


; <Start encoding val FStar.Ghost.reveal>

(declare-fun FStar.Ghost.reveal (Term Term) Term)
(declare-fun Tm_ghost_arrow_e2f4c1991753137c5a80c115428d0cef () Term)
(declare-fun FStar.Ghost.reveal@tok () Term)

; </end encoding val FStar.Ghost.reveal>


; <Start encoding val FStar.Ghost.hide>

(declare-fun FStar.Ghost.hide (Term Term) Term)
(declare-fun Tm_arrow_643f1030585ddc96db34fbedd5533726 () Term)
(declare-fun FStar.Ghost.hide@tok () Term)

; </end encoding val FStar.Ghost.hide>


; <Start encoding val FStar.Ghost.hide_reveal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.hide_reveal (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.hide_reveal@tok () Term)

; </end encoding val FStar.Ghost.hide_reveal>


; <Start encoding val FStar.Ghost.reveal_hide>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Ghost.reveal_hide (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Ghost.reveal_hide@tok () Term)

; </end encoding val FStar.Ghost.reveal_hide>


; <Start encoding let tot_to_gtot>

(declare-fun Tm_arrow_6980332764c4493a7b0df5c02f7aefbe (Term Term) Term)
(declare-fun FStar.Ghost.tot_to_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_c9fd3b742fd348c1f0aa2b7131578f3e () Term)
(declare-fun FStar.Ghost.tot_to_gtot@tok () Term)


; </end encoding let tot_to_gtot>


; <Start encoding let return>

(declare-fun FStar.Ghost.return (Term Term) Term)

(declare-fun FStar.Ghost.return@tok () Term)

; </end encoding let return>


; <Start encoding let bind>

(declare-fun Tm_arrow_5716b68879f92aa07a25325dea2a598d (Term Term) Term)
(declare-fun FStar.Ghost.bind (Term Term Term Term) Term)

(declare-fun Tm_arrow_744e10832c82c923706888158b99b0fe () Term)
(declare-fun FStar.Ghost.bind@tok () Term)


; </end encoding let bind>


; <Start encoding let op_let_At>


(declare-fun FStar.Ghost.op_let_At (Term Term Term Term) Term)


(declare-fun FStar.Ghost.op_let_At@tok () Term)


; </end encoding let op_let_At>


; <Start encoding let elift1>


(declare-fun FStar.Ghost.elift1 (Term Term Term Term) Term)

(declare-fun Tm_refine_785b445c1ccb59eaa8c666ff5bddec28 (Term Term Term Term) Term)
(declare-fun Tm_arrow_da89250ece049a2244626f93975cd557 () Term)
(declare-fun FStar.Ghost.elift1@tok () Term)


; </end encoding let elift1>


; <Start encoding let elift2>

(declare-fun Tm_ghost_arrow_44164f5e759c8937bc211b53dca29861 (Term Term Term) Term)
(declare-fun FStar.Ghost.elift2 (Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_65079789b5ee069d4dcb71b5d5562419 (Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_3bc5977a48f4c4aa4cd3ebcf331fe3f9 () Term)
(declare-fun FStar.Ghost.elift2@tok () Term)


; </end encoding let elift2>


; <Start encoding let elift3>

(declare-fun Tm_ghost_arrow_c3cf725ad58bf27e304b88d311d2ef4d (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift3 (Term Term Term Term Term Term Term Term) Term)

(declare-fun Tm_refine_f701336f04214efabf1dc8fb653177ef (Term Term Term Term Term Term Term Term) Term)
(declare-fun Tm_arrow_d597747eb30e55a029a57bb56ae3576b () Term)
(declare-fun FStar.Ghost.elift3@tok () Term)


; </end encoding let elift3>


; <Start encoding let push_refinement>


(declare-fun Tm_refine_4861ff30b18822886452f698558931e8 (Term Term) Term)
(declare-fun FStar.Ghost.push_refinement (Term Term Term) Term)


(declare-fun Tm_refine_36af295866c873249daf08f8d623a269 (Term Term Term) Term)
(declare-fun Tm_arrow_08d120582cc4dfdc7e90cb9038e8f6b8 () Term)
(declare-fun FStar.Ghost.push_refinement@tok () Term)





; </end encoding let push_refinement>


; <Start encoding let elift1_p>


(declare-fun Tm_refine_9f8cb5a84b67f50c9d5f87a914037545 (Term Term) Term)
(declare-fun Tm_ghost_arrow_8f538917cb02d75c44bfd86ed6834262 (Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_p (Term Term Term Term Term) Term)





(declare-fun Tm_arrow_2f2f081c9c2a272e83f647cd86440766 () Term)
(declare-fun FStar.Ghost.elift1_p@tok () Term)


; </end encoding let elift1_p>


; <Start encoding let elift2_p>


(declare-fun Tm_refine_08698b4b6e166624b5bf789ac071b4cf (Term Term Term) Term)
(declare-fun Tm_ghost_arrow_4f9eac2d0622ae1c34d05baa5f6854c6 (Term Term Term Term) Term)
(declare-fun Tm_refine_50e552dc638ed7dac9f2492d99576667 (Term Term Term Term) Term)
(declare-fun FStar.Ghost.elift2_p (Term Term Term Term Term Term Term) Term)





(declare-fun Tm_arrow_4243a3f87827ef2e8c38dd30c5e8518d () Term)
(declare-fun FStar.Ghost.elift2_p@tok () Term)


; </end encoding let elift2_p>


; <Start encoding let elift1_pq>



(declare-fun Tm_arrow_b9b0980b05721a41304c20e612f3108f (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_3f0c334c27896d01c2e72f45e6fcb67c (Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift1_pq (Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b8eadba0211443ca5c59668f6aa4b6c9 () Term)
(declare-fun FStar.Ghost.elift1_pq@tok () Term)


; </end encoding let elift1_pq>


; <Start encoding let elift2_pq>



(declare-fun Tm_arrow_747965e95d1386c22f52f977256a903b (Term Term Term Term) Term)

(declare-fun Tm_refine_f9e3dab5c1ea39d2741639e0fe40e216 (Term Term Term Term) Term)
(declare-fun Tm_ghost_arrow_00838c3d276d7476d6679b97a2aa247c (Term Term Term Term Term) Term)

(declare-fun FStar.Ghost.elift2_pq (Term Term Term Term Term Term Term Term) Term)








(declare-fun Tm_arrow_b7e390954ec59dc663763c956d66957b () Term)
(declare-fun FStar.Ghost.elift2_pq@tok () Term)


; </end encoding let elift2_pq>


; End Externals for interface FStar.Ghost


; Externals for interface FStar.IndefiniteDescription


; <Start encoding val FStar.IndefiniteDescription.elim_squash>

(declare-fun FStar.IndefiniteDescription.elim_squash (Term Term) Term)
(declare-fun Tm_ghost_arrow_c6842219f247b61822e21d8f892190b3 () Term)
(declare-fun FStar.IndefiniteDescription.elim_squash@tok () Term)

; </end encoding val FStar.IndefiniteDescription.elim_squash>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_ghost>

(declare-fun Tm_arrow_81e65de2755319ee661cc1adc7d951e3 (Term) Term)
(declare-fun Tm_refine_4cc89ae73e7128e43010e5aba0ff060c (Term) Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost (Term Term) Term)



(declare-fun Tm_ghost_arrow_feddccf07264e14202821ef1d50468a8 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_ghost@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_ghost>


; <Start encoding val FStar.IndefiniteDescription.indefinite_description_tot>



(declare-fun FStar.IndefiniteDescription.indefinite_description_tot (Term Term) Term)



(declare-fun Tm_arrow_913328739865ec1d7344ba2324047e94 () Term)
(declare-fun FStar.IndefiniteDescription.indefinite_description_tot@tok () Term)


; </end encoding val FStar.IndefiniteDescription.indefinite_description_tot>


; <Start encoding val FStar.IndefiniteDescription.strong_excluded_middle>

(declare-fun FStar.IndefiniteDescription.strong_excluded_middle (Term) Term)
(declare-fun Tm_refine_2c7ecebd8a41d0890aab4251b61d6458 (Term) Term)
(declare-fun Tm_ghost_arrow_13b822d9f45311e725609e40f68f39a1 () Term)
(declare-fun FStar.IndefiniteDescription.strong_excluded_middle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.strong_excluded_middle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle>

(declare-fun Tm_ghost_arrow_eaf0e881316979a10a835f9aef894ea3 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle (Term) Term)

(declare-fun Tm_refine_ce62cc380d030e5cd8dfd1cf0ea19b01 (Term) Term)
(declare-fun Tm_ghost_arrow_0ecc4bb7783229ca7ca7edd38b0bab8d () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle>


; <Start encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>

(declare-fun Tm_arrow_1742ee5bbc9c9e74913cc041d85062b6 () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop (Term) Term)

(declare-fun Tm_refine_e76bd1e3fcd1369d7232ec3854a8c984 (Term) Term)
(declare-fun Tm_ghost_arrow_c21c60a4b8d9409191eea9e22a1b37db () Term)
(declare-fun FStar.IndefiniteDescription.stronger_markovs_principle_prop@tok () Term)


; </end encoding val FStar.IndefiniteDescription.stronger_markovs_principle_prop>


; End Externals for interface FStar.IndefiniteDescription


; Externals for module FStar.StrongExcludedMiddle


; <Start encoding let strong_excluded_middle>

(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle (Term) Term)


(declare-fun FStar.StrongExcludedMiddle.strong_excluded_middle@tok () Term)


; </end encoding let strong_excluded_middle>


; End Externals for module FStar.StrongExcludedMiddle


; Externals for interface FStar.Classical.Sugar


; <Start encoding val FStar.Classical.Sugar.forall_elim>


(declare-fun Tm_refine_eee646ed2c0261b2e37307734e5990b8 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_6fad81cdc8376c5921e448133045a0b5 () Term)
(declare-fun FStar.Classical.Sugar.forall_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.forall_elim>


; <Start encoding val FStar.Classical.Sugar.exists_elim>


(declare-fun Tm_refine_df2d65c00128265e81a98d1694fa32db (Term Term) Term)
(declare-fun Tm_arrow_757abf2ff34845ceba7272f2bf4c779d (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_8a831fa0f832c0a8df6d5207189d1bd6 () Term)
(declare-fun FStar.Classical.Sugar.exists_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.exists_elim>


; <Start encoding let implies_elim>

(declare-fun Tm_refine_913239c2cf9dc8a14e1f047e0206138d (Term Term) Term)
(declare-fun Tm_arrow_e5bf96e6b202d44baf035cb07df2da84 (Term) Term)
(declare-fun FStar.Classical.Sugar.implies_elim (Term Term Term Term) Term)


(declare-fun Tm_arrow_08b9f1333754078ddc08d25d2c8efab0 () Term)
(declare-fun FStar.Classical.Sugar.implies_elim@tok () Term)



; </end encoding let implies_elim>


; <Start encoding val FStar.Classical.Sugar.or_elim>

(declare-fun Tm_refine_953a6e4e702e848a7213bd619baaa22d (Term) Term)
(declare-fun Tm_arrow_0e4b9f46020ce2f098f1971a515a22d9 (Term) Term)
(declare-fun Tm_refine_044452ce08fa2077b813992baef379a7 (Term Term) Term)
(declare-fun Tm_arrow_9d84457d1c8d2a3cb1cecf47a390b833 (Term Term) Term)

(declare-fun Tm_arrow_3cd50b91a1a8ff7ae2a33f725c49ca25 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_elim (Term Term Term Term Term Term) Term)






(declare-fun Tm_arrow_cd3704184434b709df08ad54743b9ddc () Term)
(declare-fun FStar.Classical.Sugar.or_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.or_elim>


; <Start encoding val FStar.Classical.Sugar.and_elim>

(declare-fun Tm_arrow_e617226e5c485cfca90836a8d37dc422 (Term) Term)
(declare-fun Tm_refine_0e6764ea7cf9747bf338120e46774802 (Term Term) Term)
(declare-fun Tm_arrow_9cf3fa74bead5ce84576f320b610d107 (Term Term Term) Term)
(declare-fun FStar.Classical.Sugar.and_elim (Term Term Term Term Term) Term)



(declare-fun Tm_arrow_46e93521f3e2b84feb3b4c45d4b82427 () Term)
(declare-fun FStar.Classical.Sugar.and_elim@tok () Term)

; </end encoding val FStar.Classical.Sugar.and_elim>


; <Start encoding val FStar.Classical.Sugar.forall_intro>


(declare-fun Tm_arrow_e44b1a1960e76c65248b9976ee453bf1 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.forall_intro (Term Term Term) Term)



(declare-fun Tm_arrow_810fc5a930eab84e2e1c9bc10e65f526 () Term)
(declare-fun FStar.Classical.Sugar.forall_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.forall_intro>


; <Start encoding val FStar.Classical.Sugar.exists_intro>


(declare-fun Tm_arrow_1f559753133c819dcbab21eb87f04504 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.exists_intro (Term Term Term Term) Term)



(declare-fun Tm_arrow_98a6ce57193d862f12aa770d807de2d6 () Term)
(declare-fun FStar.Classical.Sugar.exists_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.exists_intro>


; <Start encoding val FStar.Classical.Sugar.implies_intro>


(declare-fun Tm_arrow_8cc28639983f141a2c2b513a3b9f2226 (Term Term) Term)
(declare-fun FStar.Classical.Sugar.implies_intro (Term Term Term) Term)


(declare-fun Tm_refine_210741fcd012f6981d2132fb47059ae4 (Term Term) Term)
(declare-fun Tm_arrow_16ed35ee40b45e5834d942fa129fc7a5 () Term)
(declare-fun FStar.Classical.Sugar.implies_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.implies_intro>


; <Start encoding val FStar.Classical.Sugar.or_intro_left>




(declare-fun FStar.Classical.Sugar.or_intro_left (Term Term Term) Term)




(declare-fun Tm_arrow_ba201b0aaffa8c92349bb033309546c6 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_left@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_left>


; <Start encoding val FStar.Classical.Sugar.or_intro_right>




(declare-fun Tm_arrow_c1f46761cba190a64ceda9e0b423d73a (Term Term) Term)
(declare-fun FStar.Classical.Sugar.or_intro_right (Term Term Term) Term)





(declare-fun Tm_arrow_820ce98d2bc904183444162411ef4873 () Term)
(declare-fun FStar.Classical.Sugar.or_intro_right@tok () Term)


; </end encoding val FStar.Classical.Sugar.or_intro_right>


; <Start encoding val FStar.Classical.Sugar.and_intro>




(declare-fun FStar.Classical.Sugar.and_intro (Term Term Term Term) Term)




(declare-fun Tm_arrow_74dd2a70fe5b8eefc42b899233f1e113 () Term)
(declare-fun FStar.Classical.Sugar.and_intro@tok () Term)


; </end encoding val FStar.Classical.Sugar.and_intro>


; End Externals for interface FStar.Classical.Sugar


; Externals for module FStar.List.Tot.Base


; <Skipped val FStar.List.Tot.Base.isEmpty/>


; <Start encoding let isEmpty>

(declare-fun FStar.List.Tot.Base.isEmpty (Term Term) Term)

(declare-fun FStar.List.Tot.Base.isEmpty@tok () Term)

; </end encoding let isEmpty>


; <Skipped val FStar.List.Tot.Base.hd/>


; <Start encoding let hd>


(declare-fun FStar.List.Tot.Base.hd (Term Term) Term)


(declare-fun FStar.List.Tot.Base.hd@tok () Term)


; </end encoding let hd>


; <Skipped val FStar.List.Tot.Base.tail/>


; <Start encoding let tail>


(declare-fun FStar.List.Tot.Base.tail (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tail@tok () Term)


; </end encoding let tail>


; <Skipped val FStar.List.Tot.Base.tl/>


; <Start encoding let tl>


(declare-fun FStar.List.Tot.Base.tl (Term Term) Term)


(declare-fun FStar.List.Tot.Base.tl@tok () Term)


; </end encoding let tl>


; <Skipped val FStar.List.Tot.Base.last/>


; <Start encoding let rec last>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.last.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.last (Term Term) Term)
(declare-fun FStar.List.Tot.Base.last@tok () Term)





; </end encoding let rec last>


; <Skipped val FStar.List.Tot.Base.init/>


; <Start encoding let rec init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.init (Term Term) Term)
(declare-fun FStar.List.Tot.Base.init@tok () Term)





; </end encoding let rec init>


; <Skipped val FStar.List.Tot.Base.length/>


; <Start encoding let rec length>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.length.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.length (Term Term) Term)
(declare-fun FStar.List.Tot.Base.length@tok () Term)
(declare-fun Tm_arrow_5adbd6bc13eabd8f92e79f380e1498f0 () Term)

; </end encoding let rec length>


; <Skipped val FStar.List.Tot.Base.nth/>


; <Start encoding let rec nth>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.nth.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.nth (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.nth@tok () Term)
(declare-fun Tm_arrow_c96efec76dd44fb4c1c29ca8a004927d () Term)

; </end encoding let rec nth>


; <Skipped val FStar.List.Tot.Base.index/>


; <Start encoding let rec index>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.index.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.index (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.index@tok () Term)
(declare-fun Tm_refine_c86aba5c6243e6b7f9a4b0ad41b4e9a0 (Term Term) Term)


(declare-fun Tm_arrow_87330224a075c52374b0ca2b4b909772 () Term)

; </end encoding let rec index>


; <Skipped val FStar.List.Tot.Base.count/>


; <Start encoding let rec count>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.count.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.count (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.count@tok () Term)
(declare-fun Tm_arrow_d7494a533e0c3edea69ad484d93aa0e5 () Term)

; </end encoding let rec count>


; <Skipped val FStar.List.Tot.Base.rev_acc/>


; <Start encoding let rec rev_acc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.rev_acc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.rev_acc (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.rev_acc@tok () Term)
(declare-fun Tm_arrow_54e38bdd456bab4cdb32b5d540c2274c () Term)

; </end encoding let rec rev_acc>


; <Skipped val FStar.List.Tot.Base.rev/>


; <Start encoding let rev>

(declare-fun FStar.List.Tot.Base.rev (Term Term) Term)
(declare-fun Tm_arrow_f9ba16c6212a483d195bbb8ceec3eef1 () Term)
(declare-fun FStar.List.Tot.Base.rev@tok () Term)

; </end encoding let rev>


; <Skipped val FStar.List.Tot.Base.append/>


; <Start encoding let rec append>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.append.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.append (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.append@tok () Term)


; </end encoding let rec append>


; <Start encoding let op_At>

(declare-fun FStar.List.Tot.Base.op_At (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.op_At@tok () Term)

; </end encoding let op_At>


; <Skipped val FStar.List.Tot.Base.snoc/>


; <Start encoding let snoc>

(declare-fun FStar.List.Tot.Base.snoc (Term Term) Term)
(declare-fun Tm_arrow_07ff48a1c7b541b0963ce508064e29fb () Term)
(declare-fun FStar.List.Tot.Base.snoc@tok () Term)

; </end encoding let snoc>


; <Skipped val FStar.List.Tot.Base.flatten/>


; <Start encoding let rec flatten>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.flatten.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.flatten (Term Term) Term)
(declare-fun FStar.List.Tot.Base.flatten@tok () Term)
(declare-fun Tm_arrow_7e18fd6b36805c1f1c9a77e024fdec2e () Term)

; </end encoding let rec flatten>


; <Skipped val FStar.List.Tot.Base.map/>


; <Start encoding let rec map>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.map.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.map (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.map@tok () Term)



(declare-fun Tm_arrow_28431dcf5044bcdd56dbe625f9e3df4e () Term)

; </end encoding let rec map>


; <Skipped val FStar.List.Tot.Base.mapi_init/>


; <Start encoding let rec mapi_init>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mapi_init.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mapi_init (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mapi_init@tok () Term)
(declare-fun Tm_arrow_010f318679809a99aeced42f5ba95505 (Term Term) Term)


(declare-fun Tm_arrow_9a89e146e4bb6b361bc4526b891ed1f1 () Term)

; </end encoding let rec mapi_init>


; <Skipped val FStar.List.Tot.Base.mapi/>


; <Start encoding let mapi>


(declare-fun FStar.List.Tot.Base.mapi (Term Term Term Term) Term)

(declare-fun Tm_arrow_b2a07f422fceebd0f3ee3abd5e4aeed2 () Term)
(declare-fun FStar.List.Tot.Base.mapi@tok () Term)


; </end encoding let mapi>


; <Skipped val FStar.List.Tot.Base.concatMap/>


; <Start encoding let rec concatMap>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.concatMap.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.concatMap (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.concatMap@tok () Term)
(declare-fun Tm_arrow_121fa5bc200f7b3946a5e35040f266b9 (Term Term) Term)


(declare-fun Tm_arrow_c35dd4e5f8c08f94183bf93963fac92f () Term)

; </end encoding let rec concatMap>


; <Skipped val FStar.List.Tot.Base.fold_left/>


; <Start encoding let rec fold_left>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left@tok () Term)
(declare-fun Tm_arrow_f0225aaf6b987d44876e7f498390aa39 (Term Term) Term)


(declare-fun Tm_arrow_230697841c1116c0d5f3958097856e6e () Term)

; </end encoding let rec fold_left>


; <Skipped val FStar.List.Tot.Base.fold_right/>


; <Start encoding let rec fold_right>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right@tok () Term)
(declare-fun Tm_arrow_3c1d21b8f6dcc5e202b4ff1cafbaba81 (Term Term) Term)


(declare-fun Tm_arrow_105b39eeae3a464c82e64975ac399cdb () Term)

; </end encoding let rec fold_right>


; <Start encoding let rec fold_right_gtot>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented (Fuel Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_right_gtot.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot (Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_right_gtot@tok () Term)
(declare-fun Tm_ghost_arrow_d7e9834b8fd0407a723f5f3f4b012fdd (Term Term) Term)


(declare-fun Tm_ghost_arrow_fab043b8cdd2296e8d98a06066e4b2d2 () Term)

; </end encoding let rec fold_right_gtot>


; <Start encoding let map_gtot>


(declare-fun FStar.List.Tot.Base.map_gtot (Term Term Term Term) Term)

(declare-fun Tm_ghost_arrow_d0c7be07105bf8d5ad60b7f603c725f3 () Term)
(declare-fun FStar.List.Tot.Base.map_gtot@tok () Term)

(declare-fun Tm_ghost_arrow_21583233c98863da294c5e5d657cf78a (Term Term) Term)
(declare-fun Tm_abs_469cd3853c3ff3e8cd408b5521fdbd9d (Term Term Term) Term)

; </end encoding let map_gtot>


; <Skipped val FStar.List.Tot.Base.fold_left2/>


; <Start encoding let rec fold_left2>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented (Fuel Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.fold_left2.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.fold_left2 (Term Term Term Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.fold_left2@tok () Term)
(declare-fun Tm_arrow_40dd30796dd695d143ec6ed01d322177 (Term Term Term) Term)
(declare-fun Tm_refine_c16bc1b61f58b349bf6fc1c94dcaf83b (Term) Term)



(declare-fun Tm_arrow_3f28d1abbd43ddded682cbec516ea7bb () Term)


; </end encoding let rec fold_left2>


; <Start encoding let rec memP>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.memP.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.memP (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.memP@tok () Term)
(declare-fun Tm_arrow_9a5de17321abf8ec257671c9a474c08a () Term)

; </end encoding let rec memP>


; <Skipped val FStar.List.Tot.Base.mem/>


; <Start encoding let rec mem>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.mem.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.mem (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.mem@tok () Term)
(declare-fun Tm_arrow_8b16b79a9f8fab7cb6911016a8022992 () Term)

; </end encoding let rec mem>


; <Start encoding let contains>

(declare-fun FStar.List.Tot.Base.contains (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.contains@tok () Term)

; </end encoding let contains>


; <Skipped val FStar.List.Tot.Base.existsb/>


; <Start encoding let rec existsb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.existsb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.existsb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.existsb@tok () Term)
(declare-fun Tm_arrow_84543425b818e2d10a976186b8e8c250 (Term) Term)


(declare-fun Tm_arrow_98dbecc64760e6a41f037a6881cd5df8 () Term)

; </end encoding let rec existsb>


; <Skipped val FStar.List.Tot.Base.find/>


; <Start encoding let rec find>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.find.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.find (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.find@tok () Term)

(declare-fun Tm_refine_3b1cb9ec3355fed185c658f53954b3fa (Term Term) Term)





(declare-fun Tm_arrow_286c509b12b9a2bb9bf1025c6fd97451 () Term)


; </end encoding let rec find>


; <Skipped val FStar.List.Tot.Base.filter/>


; <Start encoding let rec filter>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.filter.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.filter (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.filter@tok () Term)



(declare-fun Tm_arrow_7c3df353a3c3ca9bc0a8454788aa9ad1 () Term)

; </end encoding let rec filter>


; <Start encoding let rec mem_filter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter@tok () Term)

; </end encoding let rec mem_filter>


; <Start encoding let mem_filter_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.mem_filter_forall@tok () Term)


; </end encoding let mem_filter_forall>


; <Skipped val FStar.List.Tot.Base.for_all/>


; <Start encoding let rec for_all>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.for_all.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.for_all (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.for_all@tok () Term)





; </end encoding let rec for_all>


; <Start encoding let rec for_all_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.for_all_mem@tok () Term)

; </end encoding let rec for_all_mem>


; <Skipped val FStar.List.Tot.Base.collect/>


; <Start encoding let rec collect>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.collect.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.collect (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.collect@tok () Term)





; </end encoding let rec collect>


; <Skipped val FStar.List.Tot.Base.tryFind/>


; <Start encoding let rec tryFind>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryFind.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryFind (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryFind@tok () Term)



(declare-fun Tm_arrow_4ae6bca87a611585312b8b0d0d66fefe () Term)

; </end encoding let rec tryFind>


; <Skipped val FStar.List.Tot.Base.tryPick/>


; <Start encoding let rec tryPick>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.tryPick.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.tryPick (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.tryPick@tok () Term)
(declare-fun Tm_arrow_4b0c7cc34485afa5854ebe5c95023d4c (Term Term) Term)


(declare-fun Tm_arrow_7fbbe8a710b97b9ed9c0d2dfb00b1641 () Term)

; </end encoding let rec tryPick>


; <Skipped val FStar.List.Tot.Base.choose/>


; <Start encoding let rec choose>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.choose.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.choose (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.choose@tok () Term)



(declare-fun Tm_arrow_ee03a7411b6d8975b285ea6c772c4d89 () Term)

; </end encoding let rec choose>


; <Skipped val FStar.List.Tot.Base.partition/>


; <Start encoding let rec partition>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.partition.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.partition (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.partition@tok () Term)



(declare-fun Tm_arrow_706f575815ce8a3bbd962da035d8aa14 () Term)

; </end encoding let rec partition>


; <Skipped val FStar.List.Tot.Base.subset/>


; <Start encoding let rec subset>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.subset.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.subset (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.subset@tok () Term)
(declare-fun Tm_arrow_8d819a995fc33b4cb6aa699af88e8d32 () Term)

; </end encoding let rec subset>


; <Skipped val FStar.List.Tot.Base.noRepeats/>


; <Start encoding let rec noRepeats>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.noRepeats.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.noRepeats (Term Term) Term)
(declare-fun FStar.List.Tot.Base.noRepeats@tok () Term)
(declare-fun Tm_arrow_0dd285b24907a2f8b15dedffef61afa6 () Term)

; </end encoding let rec noRepeats>


; <Skipped val FStar.List.Tot.Base.no_repeats_p/>


; <Start encoding let rec no_repeats_p>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.no_repeats_p.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p (Term Term) Term)
(declare-fun FStar.List.Tot.Base.no_repeats_p@tok () Term)
(declare-fun Tm_arrow_79c2442eab9e49d1108d2b7a240dc76e () Term)

; </end encoding let rec no_repeats_p>


; <Skipped val FStar.List.Tot.Base.assoc/>


; <Start encoding let rec assoc>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.assoc.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.assoc (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.assoc@tok () Term)
(declare-fun Tm_arrow_d77cf796c5b72d2c2316c0fcdad1dd79 () Term)

; </end encoding let rec assoc>


; <Skipped val FStar.List.Tot.Base.split/>


; <Start encoding let rec split>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.split.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.split (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.split@tok () Term)
(declare-fun Tm_arrow_1c3cb31b4ffa47bc6454f5b8a25e2407 () Term)

; </end encoding let rec split>


; <Start encoding let unzip>

(declare-fun FStar.List.Tot.Base.unzip (Term Term Term) Term)

(declare-fun FStar.List.Tot.Base.unzip@tok () Term)

; </end encoding let unzip>


; <Skipped val FStar.List.Tot.Base.unzip3/>


; <Start encoding let rec unzip3>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.unzip3.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.unzip3 (Term Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.unzip3@tok () Term)
(declare-fun Tm_arrow_d40be6b496fedb6f7a46205c5824b732 () Term)

; </end encoding let rec unzip3>


; <Start encoding let rec splitAt>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.splitAt.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.splitAt (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.splitAt@tok () Term)
(declare-fun Tm_arrow_e36bd078e08c2ac2f1324fef6e0a4a22 () Term)

; </end encoding let rec splitAt>


; <Start encoding let rec lemma_splitAt_snd_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.lemma_splitAt_snd_length@tok () Term)

; </end encoding let rec lemma_splitAt_snd_length>


; <Skipped val FStar.List.Tot.Base.unsnoc/>


; <Start encoding let unsnoc>

(declare-fun Tm_refine_3f6b38b2852708f36615f9b4db0f9ff1 (Term) Term)
(declare-fun FStar.List.Tot.Base.unsnoc (Term Term) Term)

(declare-fun Tm_arrow_f4bc61622db0c39a751170734a140783 () Term)
(declare-fun FStar.List.Tot.Base.unsnoc@tok () Term)


; </end encoding let unsnoc>


; <Skipped val FStar.List.Tot.Base.split3/>


; <Start encoding let split3>


(declare-fun FStar.List.Tot.Base.split3 (Term Term Term) Term)

(declare-fun Tm_arrow_07dcb44faa0fb6172673970868e7ecff () Term)
(declare-fun FStar.List.Tot.Base.split3@tok () Term)


; </end encoding let split3>


; <Skipped val FStar.List.Tot.Base.partition_length/>


; <Start encoding let rec partition_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.partition_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.partition_length@tok () Term)

; </end encoding let rec partition_length>


; <Skipped val FStar.List.Tot.Base.bool_of_compare/>


; <Start encoding let bool_of_compare>

(declare-fun Tm_arrow_9877f854fbaabbcfda94f6c19b32ae3f (Term) Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare (Term Term Term Term) Term)

(declare-fun Tm_arrow_a2f219461d35e20b7bc771538ca96429 () Term)
(declare-fun FStar.List.Tot.Base.bool_of_compare@tok () Term)


; </end encoding let bool_of_compare>


; <Skipped val FStar.List.Tot.Base.compare_of_bool/>


; <Start encoding let compare_of_bool>

(declare-fun Tm_arrow_c8126b87a2c25bb477df4a7a6b0eea9e (Term) Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool (Term Term Term Term) Term)

(declare-fun Tm_arrow_8b54d4820d055c327440d0d4811d3a33 () Term)
(declare-fun FStar.List.Tot.Base.compare_of_bool@tok () Term)


; </end encoding let compare_of_bool>


; <Start encoding let compare_of_bool_of_compare>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Base.compare_of_bool_of_compare@tok () Term)

; </end encoding let compare_of_bool_of_compare>


; <Skipped val FStar.List.Tot.Base.sortWith/>


; <Start encoding let rec sortWith>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.sortWith.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.sortWith (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.sortWith@tok () Term)



(declare-fun Tm_arrow_d29fb5884447b657cb725f9be68c5ba6 () Term)

; </end encoding let rec sortWith>


; <Start encoding let rec strict_suffix_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.strict_suffix_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.strict_suffix_of@tok () Term)
(declare-fun Tm_refine_da3062322c9bea8d5b2058386775b91a () Term)

(declare-fun Tm_arrow_1d91178a138c1826d6a199b1613394f1 () Term)


; </end encoding let rec strict_suffix_of>


; <Start encoding let strict_prefix_of>

(declare-fun FStar.List.Tot.Base.strict_prefix_of (Term) Term)

(declare-fun Tm_arrow_0dd65914dd84642f7849df5d67086aa0 (Term) Term)
(declare-fun Tm_arrow_25d975ae357f14f725a8d52a81f8be72 () Term)
(declare-fun FStar.List.Tot.Base.strict_prefix_of@tok () Term)



; </end encoding let strict_prefix_of>


; <Skipped val FStar.List.Tot.Base.list_unref/>


; <Start encoding let rec list_unref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_unref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_unref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_unref@tok () Term)






(declare-fun Tm_arrow_6b3a7706fc085133138f00ee506ef176 () Term)

; </end encoding let rec list_unref>


; <Skipped val FStar.List.Tot.Base.list_refb/>


; <Start encoding let rec list_refb>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_refb.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_refb (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_refb@tok () Term)

(declare-fun Tm_refine_3dfaece5a1f8e27ecb1367ff50145048 (Term Term) Term)





(declare-fun Tm_refine_b3daba88e15ae8a9be9dd341522270b2 (Term Term Term Term) Term)

(declare-fun Tm_refine_1d1ddbacd892e41ad4ba585e87296d2e (Term Term Term) Term)










(declare-fun Tm_arrow_73c684a5823f2875fcceead4ce671ea8 () Term)







; </end encoding let rec list_refb>


; <Skipped val FStar.List.Tot.Base.list_ref/>


; <Start encoding let rec list_ref>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Base.list_ref.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Base.list_ref (Term Term Term) Term)
(declare-fun FStar.List.Tot.Base.list_ref@tok () Term)

(declare-fun Tm_refine_751cc4d3e845537c495f9d7e1deb8aa9 (Term Term) Term)





(declare-fun Tm_refine_f61b92c00df29b87346e52dcf7670926 (Term Term Term Term) Term)

(declare-fun Tm_refine_16f0c42812e28aba7e30bc8c275306fb (Term Term Term) Term)










(declare-fun Tm_arrow_73f29356f974e35d230fb85375ad3965 () Term)







; </end encoding let rec list_ref>


; End Externals for module FStar.List.Tot.Base


; Externals for interface FStar.List.Tot.Properties


; <Start encoding let llist>

(declare-fun FStar.List.Tot.Properties.llist (Term Term) Term)
(declare-fun Tm_arrow_67c7b2626869cb316f118144000415b9 () Term)
(declare-fun FStar.List.Tot.Properties.llist@tok () Term)
(declare-fun Tm_refine_fbb3412f12fd58a91571022d7c9fa36d (Term Term) Term)

; </end encoding let llist>


; <Start encoding val FStar.List.Tot.Properties.mem_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_memP>


; <Start encoding val FStar.List.Tot.Properties.lemma_index_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_index_memP@tok () Term)
(declare-fun Tm_refine_bf2fa1226f2c9a0f6671df3e80ddcb8e (Term Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_index_memP>


; <Start encoding val FStar.List.Tot.Properties.memP_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_empty>


; <Start encoding val FStar.List.Tot.Properties.memP_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_existsb>


; <Start encoding val FStar.List.Tot.Properties.memP_map_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_intro>


; <Start encoding val FStar.List.Tot.Properties.memP_map_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_map_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_map_elim>


; <Start encoding val FStar.List.Tot.Properties.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_empty@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_empty>


; <Start encoding val FStar.List.Tot.Properties.mem_existsb>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_existsb@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_existsb>


; <Start encoding val FStar.List.Tot.Properties.mem_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_count (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_count>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_length>


; <Start encoding val FStar.List.Tot.Properties.rev_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_length>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_memP>


; <Start encoding val FStar.List.Tot.Properties.rev_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_mem>


; <Start encoding val FStar.List.Tot.Properties.append_nil_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_nil_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_nil_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_nil>


; <Start encoding val FStar.List.Tot.Properties.append_cons_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_cons_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_cons_l>


; <Start encoding val FStar.List.Tot.Properties.append_l_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_l_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_l_cons>


; <Start encoding val FStar.List.Tot.Properties.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_assoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_assoc>


; <Start encoding val FStar.List.Tot.Properties.append_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length>


; <Start encoding val FStar.List.Tot.Properties.append_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem>


; <Start encoding val FStar.List.Tot.Properties.append_memP>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP>


; <Start encoding val FStar.List.Tot.Properties.append_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.append_memP_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_memP_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_memP_forall>


; <Start encoding val FStar.List.Tot.Properties.append_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count>


; <Start encoding val FStar.List.Tot.Properties.append_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_count_forall>


; <Start encoding val FStar.List.Tot.Properties.append_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.append_eq_singl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_eq_singl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_eq_singl>


; <Start encoding val FStar.List.Tot.Properties.append_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_head>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_head@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_head>


; <Start encoding val FStar.List.Tot.Properties.append_length_inv_tail>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_length_inv_tail@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_length_inv_tail>


; <Start encoding val FStar.List.Tot.Properties.append_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_injective (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_injective@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_injective>


; <Start encoding val FStar.List.Tot.Properties.lemma_append_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_append_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_append_last>


; <Start encoding let rec rev'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.rev_.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.rev_ (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.rev_@tok () Term)


; </end encoding let rec rev'>


; <Start encoding let rev'T>

(declare-fun FStar.List.Tot.Properties.rev_T (Term) Term)
(declare-fun Tm_arrow_f34ce2ad5441b4bd300fa100b397737d (Term) Term)
(declare-fun Tm_arrow_42c6b27a859866d5307ff94c9f459cb1 () Term)
(declare-fun FStar.List.Tot.Properties.rev_T@tok () Term)


; </end encoding let rev'T>


; <Start encoding val FStar.List.Tot.Properties.rev_acc_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_acc_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_acc_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev_rev'>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_ (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_rev_@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_rev'>


; <Start encoding val FStar.List.Tot.Properties.rev'_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_append>


; <Start encoding val FStar.List.Tot.Properties.rev_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_append>


; <Start encoding val FStar.List.Tot.Properties.rev'_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_involutive>


; <Start encoding val FStar.List.Tot.Properties.rev_involutive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_involutive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_involutive>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_length>


; <Start encoding val FStar.List.Tot.Properties.rev'_list_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev__list_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev'_list_ind>


; <Start encoding val FStar.List.Tot.Properties.rev_ind>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.rev_ind@tok () Term)

; </end encoding val FStar.List.Tot.Properties.rev_ind>


; <Start encoding val FStar.List.Tot.Properties.map_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_lemma@tok () Term)


; </end encoding val FStar.List.Tot.Properties.map_lemma>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_snoc@tok () Term)
(declare-fun Tm_refine_e88aba6d4c79a5625ab4330932edf7ed (Term) Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_snoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_snoc_unsnoc@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_snoc_unsnoc>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_length@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_length>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_append>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_is_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_is_last>


; <Start encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_unsnoc_index@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_unsnoc_index>


; <Start encoding let rec split_using>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.split_using.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.split_using (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.split_using@tok () Term)
(declare-fun Tm_refine_ca5b6dc4e0a851997703798a1ffc5f70 (Term Term) Term)


(declare-fun Tm_ghost_arrow_583c096a402961cd40d8b718fb07bacc () Term)

; </end encoding let rec split_using>


; <Start encoding val FStar.List.Tot.Properties.lemma_split_using>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.lemma_split_using@tok () Term)

; </end encoding val FStar.List.Tot.Properties.lemma_split_using>


; <Start encoding let rec index_of>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.index_of.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.index_of (Term Term Term) Term)
(declare-fun FStar.List.Tot.Properties.index_of@tok () Term)

(declare-fun Tm_refine_cd45ecc9daf74409c394004efbaa3338 (Term Term Term) Term)



(declare-fun Tm_ghost_arrow_d9cd5e48f458f8c211c59f9048af3929 () Term)


; </end encoding let rec index_of>


; <Start encoding val FStar.List.Tot.Properties.partition_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_mem_p_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_mem_p_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_mem_p_forall>


; <Start encoding val FStar.List.Tot.Properties.partition_count>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count>


; <Start encoding val FStar.List.Tot.Properties.partition_count_forall>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.partition_count_forall@tok () Term)

; </end encoding val FStar.List.Tot.Properties.partition_count_forall>


; <Start encoding val FStar.List.Tot.Properties.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_subset@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_subset>


; <Start encoding val FStar.List.Tot.Properties.subset_reflexive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.subset_reflexive@tok () Term)

; </end encoding val FStar.List.Tot.Properties.subset_reflexive>


; <Start encoding val FStar.List.Tot.Properties.sortWith_permutation>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_permutation@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_permutation>


; <Start encoding let rec sorted>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.List.Tot.Properties.sorted.fuel_instrumented_token () Term)
(declare-fun FStar.List.Tot.Properties.sorted (Term Term) Term)
(declare-fun FStar.List.Tot.Properties.sorted@tok () Term)

(declare-fun Tm_arrow_9cabe840930f95fd18f81c0a913ddb25 (Term) Term)
(declare-fun Tm_abs_4bfb53c1305d6fe7222f07cf49f467b6 (Term Term Fuel Term) Term)




(declare-fun Tm_arrow_af42ab660b7a2cfc6caea649532e5867 () Term)


; </end encoding let rec sorted>


; <Start encoding let total_order>


(declare-fun FStar.List.Tot.Properties.total_order (Term Term) Term)

(declare-fun Tm_arrow_92649d42e4d7df07b51f92b06355903e () Term)
(declare-fun FStar.List.Tot.Properties.total_order@tok () Term)


; </end encoding let total_order>


; <Start encoding val FStar.List.Tot.Properties.append_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_sorted@tok () Term)

(declare-fun Tm_refine_a928c26e721d07631e5f0d63f521a37e (Term Term) Term)


; </end encoding val FStar.List.Tot.Properties.append_sorted>


; <Start encoding val FStar.List.Tot.Properties.sortWith_sorted>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.sortWith_sorted@tok () Term)

; </end encoding val FStar.List.Tot.Properties.sortWith_sorted>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_nil>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_cons>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_elim>


; <Start encoding val FStar.List.Tot.Properties.noRepeats_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.noRepeats_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.noRepeats_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_nil>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_cons>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_elim@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_elim>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_intro>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_swap@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_swap>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_append_permut@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_append_permut>


; <Start encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.no_repeats_p_false_intro@tok () Term)

; </end encoding val FStar.List.Tot.Properties.no_repeats_p_false_intro>


; <Start encoding val FStar.List.Tot.Properties.assoc_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_nil>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_cons_not_eq@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_cons_not_eq>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_r>


; <Start encoding val FStar.List.Tot.Properties.assoc_append_elim_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_append_elim_l@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_append_elim_l>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_some>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_some@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_some>


; <Start encoding val FStar.List.Tot.Properties.assoc_memP_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_memP_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_memP_none>


; <Start encoding val FStar.List.Tot.Properties.assoc_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_mem@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_mem>


; <Start encoding val FStar.List.Tot.Properties.fold_left_invar>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_invar@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_invar>


; <Start encoding val FStar.List.Tot.Properties.fold_left_map>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map (Term Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_map@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_map>


; <Start encoding val FStar.List.Tot.Properties.map_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append>


; <Start encoding val FStar.List.Tot.Properties.fold_left_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_monoid>


; <Start encoding val FStar.List.Tot.Properties.fold_left_append_monoid>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.fold_left_append_monoid@tok () Term)

; </end encoding val FStar.List.Tot.Properties.fold_left_append_monoid>


; <Start encoding val FStar.List.Tot.Properties.index_extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.index_extensionality@tok () Term)

; </end encoding val FStar.List.Tot.Properties.index_extensionality>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_nil>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_cons@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_cons>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_trans@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_trans>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_correct@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_correct>


; <Start encoding val FStar.List.Tot.Properties.map_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.map_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.map_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.mem_strict_suffix_of@tok () Term)

; </end encoding val FStar.List.Tot.Properties.mem_strict_suffix_of>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_exists_append>


; <Start encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.strict_suffix_of_or_eq_exists_append>


; <Start encoding val FStar.List.Tot.Properties.precedes_tl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_tl@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_tl>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_r>


; <Start encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.precedes_append_cons_prod_r@tok () Term)

; </end encoding val FStar.List.Tot.Properties.precedes_append_cons_prod_r>


; <Start encoding val FStar.List.Tot.Properties.memP_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.memP_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.memP_precedes>


; <Start encoding val FStar.List.Tot.Properties.assoc_precedes>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.assoc_precedes@tok () Term)

; </end encoding val FStar.List.Tot.Properties.assoc_precedes>


; <Start encoding val FStar.List.Tot.Properties.find_none>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.find_none (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.find_none@tok () Term)

; </end encoding val FStar.List.Tot.Properties.find_none>


; <Start encoding val FStar.List.Tot.Properties.append_init_last>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.append_init_last@tok () Term)

; </end encoding val FStar.List.Tot.Properties.append_init_last>


; <Start encoding val FStar.List.Tot.Properties.init_last_def>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_def@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_def>


; <Start encoding val FStar.List.Tot.Properties.init_last_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.init_last_inj@tok () Term)

; </end encoding val FStar.List.Tot.Properties.init_last_inj>


; <Start encoding val FStar.List.Tot.Properties.for_all_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.List.Tot.Properties.for_all_append@tok () Term)

; </end encoding val FStar.List.Tot.Properties.for_all_append>


; End Externals for interface FStar.List.Tot.Properties


; Externals for module FStar.List.Tot


; End Externals for module FStar.List.Tot


; Externals for interface FStar.Seq.Base


; <Start encoding val FStar.Seq.Base.seq>

(declare-fun FStar.Seq.Base.seq (Term) Term)

(declare-fun FStar.Seq.Base.seq@tok () Term)

; </end encoding val FStar.Seq.Base.seq>


; <Start encoding val FStar.Seq.Base.length>

(declare-fun FStar.Seq.Base.length (Term Term) Term)
(declare-fun Tm_arrow_d2c01593e1ccf972aadc4bced72f8166 () Term)
(declare-fun FStar.Seq.Base.length@tok () Term)

; </end encoding val FStar.Seq.Base.length>


; <Start encoding val FStar.Seq.Base.seq_to_list>

(declare-fun FStar.Seq.Base.seq_to_list (Term Term) Term)
(declare-fun Tm_refine_c4e3a92f9bd1d01a07e4fb66c5de2e7e (Term Term) Term)
(declare-fun Tm_arrow_7d1aeb9cf9244f8c50e0ad901486a03b () Term)
(declare-fun FStar.Seq.Base.seq_to_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_to_list>


; <Start encoding val FStar.Seq.Base.seq_of_list>

(declare-fun FStar.Seq.Base.seq_of_list (Term Term) Term)
(declare-fun Tm_refine_d2d1ea66f2b3a92c2deb42edcbb784ce (Term Term) Term)
(declare-fun Tm_arrow_4966fa2986a35d9c0803c863a2768cbd () Term)
(declare-fun FStar.Seq.Base.seq_of_list@tok () Term)


; </end encoding val FStar.Seq.Base.seq_of_list>


; <Start encoding val FStar.Seq.Base.index>

(declare-fun Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 (Term Term) Term)
(declare-fun FStar.Seq.Base.index (Term Term Term) Term)

(declare-fun Tm_arrow_1910ef5262f2ee8e712b6609a232b1ea () Term)
(declare-fun FStar.Seq.Base.index@tok () Term)

; </end encoding val FStar.Seq.Base.index>


; <Start encoding val FStar.Seq.Base.create>

(declare-fun FStar.Seq.Base.create (Term Term Term) Term)
(declare-fun Tm_arrow_b5b3d4fcc48eb666a8878550e50df9fb () Term)
(declare-fun FStar.Seq.Base.create@tok () Term)

; </end encoding val FStar.Seq.Base.create>


; <Start encoding val FStar.Seq.Base.init_aux>

(declare-fun Tm_refine_c1424615841f28cac7fc34e92b7ff33c (Term) Term)

(declare-fun Tm_arrow_44bb45ed5c2534b346e0f58ea5033251 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux (Term Term Term Term) Term)



(declare-fun Tm_arrow_da6bbab10714c064205223f9990745bd () Term)
(declare-fun FStar.Seq.Base.init_aux@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux>


; <Start encoding val FStar.Seq.Base.init>



(declare-fun FStar.Seq.Base.init (Term Term Term) Term)


(declare-fun Tm_arrow_d638d84259a58eff38c91944355ac313 () Term)
(declare-fun FStar.Seq.Base.init@tok () Term)

; </end encoding val FStar.Seq.Base.init>


; <Start encoding val FStar.Seq.Base.init_aux_ghost>



(declare-fun Tm_ghost_arrow_b7c239afcc620812134a759b53cafcc7 (Term Term) Term)
(declare-fun FStar.Seq.Base.init_aux_ghost (Term Term Term Term) Term)



(declare-fun Tm_ghost_arrow_90c084cce85ad5fa9b6789a83ba7b9d5 () Term)
(declare-fun FStar.Seq.Base.init_aux_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_aux_ghost>


; <Start encoding val FStar.Seq.Base.init_ghost>



(declare-fun FStar.Seq.Base.init_ghost (Term Term Term) Term)


(declare-fun Tm_ghost_arrow_dc3e2497ae3914facc1bb3cecddbafe4 () Term)
(declare-fun FStar.Seq.Base.init_ghost@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost>


; <Start encoding val FStar.Seq.Base.empty>

(declare-fun FStar.Seq.Base.empty (Term) Term)
(declare-fun Tm_refine_b913a3f691ca99086652e0a655e72f17 (Term) Term)
(declare-fun Tm_arrow_c39fb4e3e203a822394c714f70ec2d2c () Term)
(declare-fun FStar.Seq.Base.empty@tok () Term)


; </end encoding val FStar.Seq.Base.empty>


; <Start encoding let createEmpty>

(declare-fun FStar.Seq.Base.createEmpty (Term) Term)


(declare-fun FStar.Seq.Base.createEmpty@tok () Term)


; </end encoding let createEmpty>


; <Start encoding val FStar.Seq.Base.lemma_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_empty@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_empty>


; <Start encoding val FStar.Seq.Base.upd>


(declare-fun FStar.Seq.Base.upd (Term Term Term Term) Term)

(declare-fun Tm_arrow_12766e98f50c8b91e296bbc369061265 () Term)
(declare-fun FStar.Seq.Base.upd@tok () Term)

; </end encoding val FStar.Seq.Base.upd>


; <Start encoding val FStar.Seq.Base.append>

(declare-fun FStar.Seq.Base.append (Term Term Term) Term)
(declare-fun Tm_arrow_22c1b165cc91e8aafbceb8b36244be8e () Term)
(declare-fun FStar.Seq.Base.append@tok () Term)

; </end encoding val FStar.Seq.Base.append>


; <Start encoding let cons>

(declare-fun FStar.Seq.Base.cons (Term Term Term) Term)
(declare-fun Tm_arrow_62ad6018b578ef7ed3c0e74bdebff729 () Term)
(declare-fun FStar.Seq.Base.cons@tok () Term)

; </end encoding let cons>


; <Start encoding let op_At_Bar>

(declare-fun FStar.Seq.Base.op_At_Bar (Term Term Term) Term)

(declare-fun FStar.Seq.Base.op_At_Bar@tok () Term)

; </end encoding let op_At_Bar>


; <Start encoding val FStar.Seq.Base.slice>

(declare-fun Tm_refine_81407705a0828c2c1b1976675443f647 (Term Term Term) Term)
(declare-fun FStar.Seq.Base.slice (Term Term Term Term) Term)

(declare-fun Tm_arrow_f59809c98fadf275c00ce819f5868628 () Term)
(declare-fun FStar.Seq.Base.slice@tok () Term)

; </end encoding val FStar.Seq.Base.slice>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_seq_to_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_seq_to_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_seq_of_list@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_seq_of_list>


; <Start encoding val FStar.Seq.Base.lemma_seq_of_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_of_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_of_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_seq_to_list_cons>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_seq_to_list_cons@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_seq_to_list_cons>


; <Start encoding val FStar.Seq.Base.lemma_create_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_create_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_create_len@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_create_len>


; <Start encoding val FStar.Seq.Base.lemma_init_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_len>


; <Start encoding val FStar.Seq.Base.lemma_init_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_len@tok () Term)



; </end encoding val FStar.Seq.Base.lemma_init_ghost_len>


; <Start encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_init_ghost_aux_len@tok () Term)




; </end encoding val FStar.Seq.Base.lemma_init_ghost_aux_len>


; <Start encoding val FStar.Seq.Base.lemma_len_upd>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_upd@tok () Term)
(declare-fun Tm_refine_2ca062977a42c36634b89c1c4f193f79 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_len_upd>


; <Start encoding val FStar.Seq.Base.lemma_len_append>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_append (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_append@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_len_append>


; <Start encoding val FStar.Seq.Base.lemma_len_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_len_slice@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_len_slice>


; <Start encoding val FStar.Seq.Base.lemma_index_create>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_create (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_create@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_create>


; <Start encoding val FStar.Seq.Base.lemma_index_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_upd1>


; <Start encoding val FStar.Seq.Base.lemma_index_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_upd2@tok () Term)

(declare-fun Tm_refine_df81b3f17797c6f405c1dbb191651292 (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_upd2>


; <Start encoding val FStar.Seq.Base.lemma_index_app1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app1@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_index_app1>


; <Start encoding val FStar.Seq.Base.lemma_index_app2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_app2@tok () Term)
(declare-fun Tm_refine_ac201cf927190d39c033967b63cb957b (Term Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_app2>


; <Start encoding val FStar.Seq.Base.lemma_index_slice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_index_slice@tok () Term)
(declare-fun Tm_refine_d3d07693cd71377864ef84dc97d10ec1 (Term Term Term) Term)
(declare-fun Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 (Term Term) Term)

; </end encoding val FStar.Seq.Base.lemma_index_slice>


; <Start encoding val FStar.Seq.Base.hasEq_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.hasEq_lemma@tok () Term)

; </end encoding val FStar.Seq.Base.hasEq_lemma>


; <Start encoding val FStar.Seq.Base.equal>

(declare-fun FStar.Seq.Base.equal (Term Term Term) Term)
(declare-fun Tm_arrow_c2c0a5f39eee7a5a92db8bac6fe4fb3b () Term)
(declare-fun FStar.Seq.Base.equal@tok () Term)

; </end encoding val FStar.Seq.Base.equal>


; <Start encoding val FStar.Seq.Base.eq_i>

(declare-fun Tm_refine_4639d389381bee5cf8cf77b7a6585074 (Term Term) Term)
(declare-fun Tm_refine_b361ba8089a6e963921008d537e799a1 (Term Term) Term)
(declare-fun FStar.Seq.Base.eq_i (Term Term Term Term) Term)


(declare-fun Tm_refine_331c14d442c5ee89a4fce6ea305c920f (Term Term Term) Term)
(declare-fun Tm_refine_51f956555266662f5f0ed4aac81d10bc (Term Term Term Term) Term)
(declare-fun Tm_arrow_e5286e13b5c071949ebc5146fbef7d7f () Term)
(declare-fun FStar.Seq.Base.eq_i@tok () Term)



; </end encoding val FStar.Seq.Base.eq_i>


; <Start encoding val FStar.Seq.Base.eq>

(declare-fun FStar.Seq.Base.eq (Term Term Term) Term)
(declare-fun Tm_refine_1c0effbdef48f9b00a1efb7b571fbb69 (Term Term Term) Term)
(declare-fun Tm_arrow_70ef1e4b9388d8aa6e0d17c5aeed02a7 () Term)
(declare-fun FStar.Seq.Base.eq@tok () Term)


; </end encoding val FStar.Seq.Base.eq>


; <Start encoding val FStar.Seq.Base.lemma_eq_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_intro@tok () Term)


; </end encoding val FStar.Seq.Base.lemma_eq_intro>


; <Start encoding val FStar.Seq.Base.lemma_eq_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_refl@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_refl>


; <Start encoding val FStar.Seq.Base.lemma_eq_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_eq_elim@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_eq_elim>


; <Start encoding val FStar.Seq.Base.append_assoc>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_assoc (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_assoc@tok () Term)

; </end encoding val FStar.Seq.Base.append_assoc>


; <Start encoding val FStar.Seq.Base.append_empty_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_l (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_l@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_l>


; <Start encoding val FStar.Seq.Base.append_empty_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.append_empty_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.append_empty_r@tok () Term)

; </end encoding val FStar.Seq.Base.append_empty_r>


; <Start encoding val FStar.Seq.Base.init_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_index>


; <Start encoding val FStar.Seq.Base.init_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_index_>


; <Start encoding val FStar.Seq.Base.init_ghost_index>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index@tok () Term)

; </end encoding val FStar.Seq.Base.init_ghost_index>


; <Start encoding val FStar.Seq.Base.init_ghost_index_>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.init_ghost_index_@tok () Term)



; </end encoding val FStar.Seq.Base.init_ghost_index_>


; <Start encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Seq.Base.lemma_equal_instances_implies_equal_types@tok () Term)

; </end encoding val FStar.Seq.Base.lemma_equal_instances_implies_equal_types>


; End Externals for interface FStar.Seq.Base


; Externals for interface FStar.Math.Lemmas


; <Start encoding val FStar.Math.Lemmas.euclidean_div_axiom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_div_axiom@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_div_axiom>


; <Start encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_eucl_div_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_eucl_div_bound>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_le_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_le_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_le_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_left>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_right>


; <Start encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mult_lt_sqr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mult_lt_sqr>


; <Start encoding val FStar.Math.Lemmas.swap_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_cancel_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_cancel_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_cancel_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_add_right>


; <Start encoding val FStar.Math.Lemmas.paren_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_left>


; <Start encoding val FStar.Math.Lemmas.paren_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_mul_right>


; <Start encoding val FStar.Math.Lemmas.paren_add_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_left>


; <Start encoding val FStar.Math.Lemmas.paren_add_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.paren_add_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.paren_add_right>


; <Start encoding val FStar.Math.Lemmas.addition_is_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.addition_is_associative@tok () Term)

; </end encoding val FStar.Math.Lemmas.addition_is_associative>


; <Start encoding val FStar.Math.Lemmas.subtraction_is_distributive>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.subtraction_is_distributive@tok () Term)

; </end encoding val FStar.Math.Lemmas.subtraction_is_distributive>


; <Start encoding val FStar.Math.Lemmas.swap_add_plus_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_add_plus_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_add_plus_minus>


; <Start encoding val FStar.Math.Lemmas.neg_mul_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_left>


; <Start encoding val FStar.Math.Lemmas.neg_mul_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.neg_mul_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.neg_mul_right>


; <Start encoding val FStar.Math.Lemmas.swap_neg_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.swap_neg_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.swap_neg_mul>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_left>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_left@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_left>


; <Start encoding val FStar.Math.Lemmas.distributivity_sub_right>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.distributivity_sub_right@tok () Term)

; </end encoding val FStar.Math.Lemmas.distributivity_sub_right>


; <Start encoding val FStar.Math.Lemmas.mul_binds_tighter>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_binds_tighter@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_binds_tighter>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_mul>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_mul@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_mul>


; <Start encoding val FStar.Math.Lemmas.lemma_abs_bound>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_abs_bound@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_abs_bound>


; <Start encoding val FStar.Math.Lemmas.mul_ineq1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_ineq1@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_ineq1>


; <Start encoding val FStar.Math.Lemmas.add_zero_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_left_is_same>


; <Start encoding val FStar.Math.Lemmas.add_zero_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_zero_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_zero_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_left_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_left_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_left_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_one_right_is_same>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_one_right_is_same@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_one_right_is_same>


; <Start encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_left_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_left_is_zero>


; <Start encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mul_zero_right_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.mul_zero_right_is_zero>


; <Start encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_times_nat_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_times_nat_is_nat>


; <Start encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pos_times_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.pos_times_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_over_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_over_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.nat_plus_nat_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.int_times_int_equal_zero_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.int_times_int_equal_zero_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_double_sum>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_sum@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_sum>


; <Start encoding val FStar.Math.Lemmas.pow2_double_mult>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_double_mult@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_double_mult>


; <Start encoding val FStar.Math.Lemmas.pow2_lt_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_lt_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_lt_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_le_compat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_le_compat@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_le_compat>


; <Start encoding val FStar.Math.Lemmas.pow2_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_plus>


; <Start encoding val FStar.Math.Lemmas.pow2_minus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_minus@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_minus>


; <Start encoding val FStar.Math.Lemmas.multiply_fractions>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiply_fractions@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiply_fractions>


; <Start encoding val FStar.Math.Lemmas.modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_lt>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt_nat>


; <Start encoding val FStar.Math.Lemmas.lemma_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_lt@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_lt>


; <Start encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.bounded_multiple_is_zero@tok () Term)

; </end encoding val FStar.Math.Lemmas.bounded_multiple_is_zero>


; <Start encoding val FStar.Math.Lemmas.small_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_div>


; <Start encoding val FStar.Math.Lemmas.small_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_mod>


; <Start encoding val FStar.Math.Lemmas.lt_multiple_is_equal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lt_multiple_is_equal@tok () Term)

; </end encoding val FStar.Math.Lemmas.lt_multiple_is_equal>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_plus>


; <Start encoding val FStar.Math.Lemmas.lemma_div_mod_plus>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_mod_plus@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_mod_plus>


; <Start encoding val FStar.Math.Lemmas.add_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.add_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.add_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.sub_div_mod_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.sub_div_mod_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.sub_div_mod_1>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_div>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_div@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_div>


; <Start encoding val FStar.Math.Lemmas.cancel_mul_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.cancel_mul_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.cancel_mul_mod>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_add_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_add_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_add_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_0>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_0@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_0>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub_1>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mul_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mul_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_injective>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_sub_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_sub_distr>


; <Start encoding val FStar.Math.Lemmas.lemma_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_exact>


; <Start encoding val FStar.Math.Lemmas.div_exact_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.div_exact_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.div_exact_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_spec2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_spec2@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_spec2>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_l@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_l>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_distr_r@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_distr_r>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_mod@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_mod>


; <Start encoding val FStar.Math.Lemmas.euclidean_division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.euclidean_division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.euclidean_division_definition>


; <Start encoding val FStar.Math.Lemmas.modulo_range_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_range_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_range_lemma>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.small_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.small_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.small_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.multiplication_order_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiplication_order_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiplication_order_lemma>


; <Start encoding val FStar.Math.Lemmas.division_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_propriety (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_propriety@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_propriety>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_1>


; <Start encoding val FStar.Math.Lemmas.division_definition_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition_lemma_2>


; <Start encoding val FStar.Math.Lemmas.division_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_definition@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_definition>


; <Start encoding val FStar.Math.Lemmas.multiple_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_division_lemma>


; <Start encoding val FStar.Math.Lemmas.multiple_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.multiple_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.multiple_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.division_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_distributivity>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_distributivity@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_distributivity>


; <Start encoding val FStar.Math.Lemmas.lemma_div_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_div_le@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_div_le>


; <Start encoding val FStar.Math.Lemmas.division_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_sub_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_mul_distr@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_mul_distr>


; <Start encoding val FStar.Math.Lemmas.modulo_addition_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_addition_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_addition_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_sub>


; <Start encoding val FStar.Math.Lemmas.mod_mult_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mult_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mult_exact>


; <Start encoding val FStar.Math.Lemmas.mod_mul_div_exact>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_mul_div_exact@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_mul_div_exact>


; <Start encoding val FStar.Math.Lemmas.mod_pow2_div2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_pow2_div2@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_pow2_div2>


; <Start encoding val FStar.Math.Lemmas.division_multiplication_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.division_multiplication_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.division_multiplication_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_scale_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_scale_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_scale_lemma>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_pos_pos_is_pos>


; <Start encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mul_nat_pos_is_nat>


; <Start encoding val FStar.Math.Lemmas.modulo_division_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_division_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_division_lemma>


; <Start encoding val FStar.Math.Lemmas.modulo_modulo_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_modulo_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_modulo_lemma>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_multiplication_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_division_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_division_lemma_2>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_1>


; <Start encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2@tok () Term)

; </end encoding val FStar.Math.Lemmas.pow2_modulo_modulo_lemma_2>


; <Start encoding val FStar.Math.Lemmas.modulo_add>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_add (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_add@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_add>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_twice>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_twice@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_twice>


; <Start encoding val FStar.Math.Lemmas.modulo_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub>


; <Start encoding val FStar.Math.Lemmas.mod_add_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.mod_add_both@tok () Term)

; </end encoding val FStar.Math.Lemmas.mod_add_both>


; <Start encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.lemma_mod_plus_injective@tok () Term)

; </end encoding val FStar.Math.Lemmas.lemma_mod_plus_injective>


; <Start encoding val FStar.Math.Lemmas.modulo_sub_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Math.Lemmas.modulo_sub_lemma@tok () Term)

; </end encoding val FStar.Math.Lemmas.modulo_sub_lemma>


; End Externals for interface FStar.Math.Lemmas


; Externals for interface FStar.BitVector


; <Start encoding let bv_t>

(declare-fun FStar.BitVector.bv_t (Term) Term)
(declare-fun Tm_arrow_9974df5c311cfcfa7100bc7bef095e1e () Term)
(declare-fun FStar.BitVector.bv_t@tok () Term)
(declare-fun Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e (Term) Term)

; </end encoding let bv_t>


; <Start encoding let zero_vec>

(declare-fun FStar.BitVector.zero_vec (Term) Term)
(declare-fun Tm_arrow_b6d52a9c4babaef5c45b062eb8723782 () Term)
(declare-fun FStar.BitVector.zero_vec@tok () Term)

; </end encoding let zero_vec>


; <Start encoding let elem_vec>


(declare-fun FStar.BitVector.elem_vec (Term Term) Term)

(declare-fun Tm_arrow_6880b3a4da9e8c38f1dbaa400eb50d7d () Term)
(declare-fun FStar.BitVector.elem_vec@tok () Term)


; </end encoding let elem_vec>


; <Start encoding let ones_vec>

(declare-fun FStar.BitVector.ones_vec (Term) Term)

(declare-fun FStar.BitVector.ones_vec@tok () Term)

; </end encoding let ones_vec>


; <Start encoding let rec logand_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logand_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logand_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logand_vec@tok () Term)
(declare-fun Tm_arrow_d5001f682a0789c7aa8e67d06058b034 () Term)

; </end encoding let rec logand_vec>


; <Start encoding val FStar.BitVector.logand_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logand_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logand_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logand_vec_definition>


; <Start encoding let rec logxor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logxor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logxor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logxor_vec@tok () Term)


; </end encoding let rec logxor_vec>


; <Start encoding val FStar.BitVector.logxor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logxor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logxor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logxor_vec_definition>


; <Start encoding let rec logor_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.logor_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.logor_vec (Term Term Term) Term)
(declare-fun FStar.BitVector.logor_vec@tok () Term)


; </end encoding let rec logor_vec>


; <Start encoding val FStar.BitVector.logor_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.logor_vec_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.logor_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.logor_vec_definition>


; <Start encoding let rec lognot_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.BitVector.lognot_vec.fuel_instrumented_token () Term)
(declare-fun FStar.BitVector.lognot_vec (Term Term) Term)
(declare-fun FStar.BitVector.lognot_vec@tok () Term)
(declare-fun Tm_arrow_190e27813ba14c0d36577dc3d47778da () Term)

; </end encoding let rec lognot_vec>


; <Start encoding val FStar.BitVector.lognot_vec_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lognot_vec_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lognot_vec_definition@tok () Term)


; </end encoding val FStar.BitVector.lognot_vec_definition>


; <Start encoding val FStar.BitVector.lemma_xor_bounded>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_xor_bounded@tok () Term)

; </end encoding val FStar.BitVector.lemma_xor_bounded>


; <Start encoding let is_subset_vec>

(declare-fun FStar.BitVector.is_subset_vec (Term Term Term) Term)
(declare-fun Tm_arrow_b51a0c80adeae3f31b1215853bb34fe1 () Term)
(declare-fun FStar.BitVector.is_subset_vec@tok () Term)

; </end encoding let is_subset_vec>


; <Start encoding let is_superset_vec>

(declare-fun FStar.BitVector.is_superset_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.is_superset_vec@tok () Term)

; </end encoding let is_superset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_subset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_subset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_subset_vec>


; <Start encoding val FStar.BitVector.lemma_slice_superset_vec>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.lemma_slice_superset_vec@tok () Term)

; </end encoding val FStar.BitVector.lemma_slice_superset_vec>


; <Start encoding let shift_left_vec>

(declare-fun FStar.BitVector.shift_left_vec (Term Term Term) Term)
(declare-fun Tm_arrow_ccbebd343bd3a7caba5f263c2ba5f3be () Term)
(declare-fun FStar.BitVector.shift_left_vec@tok () Term)

; </end encoding let shift_left_vec>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_6ccf0869e6825997ab860bb25791c11f (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_left_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_left_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_left_vec_lemma_2>


; <Start encoding let shift_right_vec>

(declare-fun FStar.BitVector.shift_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_right_vec@tok () Term)

; </end encoding let shift_right_vec>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_1@tok () Term)
(declare-fun Tm_refine_34425c23b534b8a294f8f063dd9faa4b (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_right_vec_lemma_2@tok () Term)
(declare-fun Tm_refine_c0ec47abc53a2509e744dad22ccf8191 (Term Term) Term)

; </end encoding val FStar.BitVector.shift_right_vec_lemma_2>


; <Start encoding let shift_arithmetic_right_vec>

(declare-fun FStar.BitVector.shift_arithmetic_right_vec (Term Term Term) Term)

(declare-fun FStar.BitVector.shift_arithmetic_right_vec@tok () Term)

; </end encoding let shift_arithmetic_right_vec>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_1@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_1>


; <Start encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.BitVector.shift_arithmetic_right_vec_lemma_2@tok () Term)


; </end encoding val FStar.BitVector.shift_arithmetic_right_vec_lemma_2>


; End Externals for interface FStar.BitVector


; Externals for interface FStar.UInt


; <Start encoding val FStar.UInt.pow2_values>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_values (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_values@tok () Term)

; </end encoding val FStar.UInt.pow2_values>


; <Start encoding let max_int>

(declare-fun FStar.UInt.max_int (Term) Term)
(declare-fun Tm_arrow_fc34ca66de2f262c06145b17fb7ed6cb () Term)
(declare-fun FStar.UInt.max_int@tok () Term)

; </end encoding let max_int>


; <Start encoding let min_int>

(declare-fun FStar.UInt.min_int (Term) Term)

(declare-fun FStar.UInt.min_int@tok () Term)

; </end encoding let min_int>


; <Start encoding let fits>

(declare-fun FStar.UInt.fits (Term Term) Term)
(declare-fun Tm_arrow_dea48782e508c14fa98dcf9716548804 () Term)
(declare-fun FStar.UInt.fits@tok () Term)

; </end encoding let fits>


; <Start encoding let size>

(declare-fun FStar.UInt.size (Term Term) Term)
(declare-fun Tm_arrow_f4ec8f8bfe492e31741a15356024bbaa () Term)
(declare-fun FStar.UInt.size@tok () Term)

; </end encoding let size>


; <Start encoding let uint_t>

(declare-fun FStar.UInt.uint_t (Term) Term)

(declare-fun FStar.UInt.uint_t@tok () Term)
(declare-fun Tm_refine_f13070840248fced9d9d60d77bdae3ec (Term) Term)

; </end encoding let uint_t>


; <Start encoding let zero>

(declare-fun FStar.UInt.zero (Term) Term)
(declare-fun Tm_arrow_f1dd811328ea3b27fc410fa0f52880f7 () Term)
(declare-fun FStar.UInt.zero@tok () Term)

; </end encoding let zero>


; <Start encoding let pow2_n>


(declare-fun FStar.UInt.pow2_n (Term Term) Term)

(declare-fun Tm_arrow_8d41edd1e7b665db26512e6c6d9ece64 () Term)
(declare-fun FStar.UInt.pow2_n@tok () Term)


; </end encoding let pow2_n>


; <Start encoding let one>

(declare-fun FStar.UInt.one (Term) Term)
(declare-fun Tm_arrow_89d370fa478cfd1f85a8759662ce0390 () Term)
(declare-fun FStar.UInt.one@tok () Term)

; </end encoding let one>


; <Start encoding let ones>

(declare-fun FStar.UInt.ones (Term) Term)

(declare-fun FStar.UInt.ones@tok () Term)

; </end encoding let ones>


; <Start encoding let incr>

(declare-fun FStar.UInt.incr (Term Term) Term)
(declare-fun Tm_refine_22e8629663f0cb1c9de86e57e73778e3 (Term) Term)
(declare-fun Tm_arrow_e8e04e4a1022a7343e76760b76915c9e () Term)
(declare-fun FStar.UInt.incr@tok () Term)


; </end encoding let incr>


; <Start encoding let decr>

(declare-fun FStar.UInt.decr (Term Term) Term)

(declare-fun Tm_arrow_2a167fb2d2f3f00bff7b73f048db0e83 () Term)
(declare-fun FStar.UInt.decr@tok () Term)


; </end encoding let decr>


; <Start encoding val FStar.UInt.incr_underspec>

(declare-fun FStar.UInt.incr_underspec (Term Term) Term)
(declare-fun Tm_refine_6a367e92d5b1ca10009a43bd430dd796 (Term Term) Term)
(declare-fun Tm_arrow_fb114bd2e9239af1296268eb30490ff7 () Term)
(declare-fun FStar.UInt.incr_underspec@tok () Term)


; </end encoding val FStar.UInt.incr_underspec>


; <Start encoding val FStar.UInt.decr_underspec>

(declare-fun FStar.UInt.decr_underspec (Term Term) Term)
(declare-fun Tm_refine_fa3c796c533e86dc9f3e3ffc647718f6 (Term Term) Term)
(declare-fun Tm_arrow_f1853f30408c6d0beb7795897a3ab5bc () Term)
(declare-fun FStar.UInt.decr_underspec@tok () Term)


; </end encoding val FStar.UInt.decr_underspec>


; <Start encoding let incr_mod>

(declare-fun FStar.UInt.incr_mod (Term Term) Term)
(declare-fun Tm_arrow_a565732dbe0b43ae2274b1f24341f11b () Term)
(declare-fun FStar.UInt.incr_mod@tok () Term)

; </end encoding let incr_mod>


; <Start encoding let decr_mod>

(declare-fun FStar.UInt.decr_mod (Term Term) Term)

(declare-fun FStar.UInt.decr_mod@tok () Term)

; </end encoding let decr_mod>


; <Start encoding let add>

(declare-fun FStar.UInt.add (Term Term Term) Term)

(declare-fun Tm_arrow_ea9f73d61c207ec4508af75e87c5ca13 () Term)
(declare-fun FStar.UInt.add@tok () Term)


; </end encoding let add>


; <Start encoding val FStar.UInt.add_underspec>

(declare-fun FStar.UInt.add_underspec (Term Term Term) Term)
(declare-fun Tm_refine_c7a9b50c1b5983f8171c03368a208e31 (Term Term Term) Term)
(declare-fun Tm_arrow_880847ba34dd402fb6567384684864a6 () Term)
(declare-fun FStar.UInt.add_underspec@tok () Term)


; </end encoding val FStar.UInt.add_underspec>


; <Start encoding let add_mod>

(declare-fun FStar.UInt.add_mod (Term Term Term) Term)
(declare-fun Tm_arrow_2f3c6a962eb1cbbfd959311c0f20b277 () Term)
(declare-fun FStar.UInt.add_mod@tok () Term)

; </end encoding let add_mod>


; <Start encoding let sub>

(declare-fun FStar.UInt.sub (Term Term Term) Term)

(declare-fun Tm_arrow_974b47e4388c1a4055fe210bb6a11687 () Term)
(declare-fun FStar.UInt.sub@tok () Term)


; </end encoding let sub>


; <Start encoding val FStar.UInt.sub_underspec>

(declare-fun FStar.UInt.sub_underspec (Term Term Term) Term)
(declare-fun Tm_refine_109ae46bb20ad559af297346ec64ae4e (Term Term Term) Term)
(declare-fun Tm_arrow_1479a03f646b965be1bfedb2ee360f95 () Term)
(declare-fun FStar.UInt.sub_underspec@tok () Term)


; </end encoding val FStar.UInt.sub_underspec>


; <Start encoding let sub_mod>

(declare-fun FStar.UInt.sub_mod (Term Term Term) Term)

(declare-fun FStar.UInt.sub_mod@tok () Term)

; </end encoding let sub_mod>


; <Start encoding let mul>

(declare-fun FStar.UInt.mul (Term Term Term) Term)

(declare-fun Tm_arrow_45e02637bbbba15e6760300e4a62b58d () Term)
(declare-fun FStar.UInt.mul@tok () Term)


; </end encoding let mul>


; <Start encoding val FStar.UInt.mul_underspec>

(declare-fun FStar.UInt.mul_underspec (Term Term Term) Term)
(declare-fun Tm_refine_ea207e5cce50229e615af011837e59a5 (Term Term Term) Term)
(declare-fun Tm_arrow_1f5fca1fff06689d84a49261819dc580 () Term)
(declare-fun FStar.UInt.mul_underspec@tok () Term)


; </end encoding val FStar.UInt.mul_underspec>


; <Start encoding let mul_mod>

(declare-fun FStar.UInt.mul_mod (Term Term Term) Term)

(declare-fun FStar.UInt.mul_mod@tok () Term)

; </end encoding let mul_mod>


; <Start encoding val FStar.UInt.lt_square_div_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lt_square_div_lt (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lt_square_div_lt@tok () Term)

; </end encoding val FStar.UInt.lt_square_div_lt>


; <Skipped #push-options "--fuel 0 --ifuel 0"/>


; <Start encoding let mul_div>

(declare-fun FStar.UInt.mul_div (Term Term Term) Term)

(declare-fun FStar.UInt.mul_div@tok () Term)

; </end encoding let mul_div>


; <Skipped #pop-options/>


; <Start encoding let div>

(declare-fun Tm_refine_0722e9115d2a1be8d90527397d01011c (Term) Term)
(declare-fun FStar.UInt.div (Term Term Term) Term)

(declare-fun Tm_refine_e49d79feeb1e96b29b0f01b06f8dac23 (Term Term Term) Term)
(declare-fun Tm_arrow_6ebc7a9e6ff34015952a4168421980bf () Term)
(declare-fun FStar.UInt.div@tok () Term)



; </end encoding let div>


; <Start encoding val FStar.UInt.div_underspec>


(declare-fun FStar.UInt.div_underspec (Term Term Term) Term)

(declare-fun Tm_refine_fafbb762e9b0100ba27aa174122ddaa3 (Term Term Term) Term)
(declare-fun Tm_arrow_ed1485a952a27dc4770fb0182ab26e79 () Term)
(declare-fun FStar.UInt.div_underspec@tok () Term)


; </end encoding val FStar.UInt.div_underspec>


; <Start encoding val FStar.UInt.div_size>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.div_size (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.div_size@tok () Term)

; </end encoding val FStar.UInt.div_size>


; <Start encoding let udiv>


(declare-fun FStar.UInt.udiv (Term Term Term) Term)


(declare-fun Tm_arrow_2b6a409bd2eeb88753b2b6fe89b0d0a9 () Term)
(declare-fun FStar.UInt.udiv@tok () Term)



; </end encoding let udiv>


; <Start encoding let mod>


(declare-fun FStar.UInt.mod (Term Term Term) Term)

(declare-fun Tm_arrow_6ae50616ce0b08fd950ce0be5e711193 () Term)
(declare-fun FStar.UInt.mod@tok () Term)


; </end encoding let mod>


; <Start encoding let eq>

(declare-fun FStar.UInt.eq (Term Term Term) Term)
(declare-fun Tm_arrow_ed25d9271888f66e143c5c59e11fb3a9 () Term)
(declare-fun FStar.UInt.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt.gt (Term Term Term) Term)

(declare-fun FStar.UInt.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt.gte (Term Term Term) Term)

(declare-fun FStar.UInt.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt.lt (Term Term Term) Term)

(declare-fun FStar.UInt.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt.lte (Term Term Term) Term)

(declare-fun FStar.UInt.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let to_uint_t>

(declare-fun FStar.UInt.to_uint_t (Term Term) Term)
(declare-fun Tm_arrow_d5257ef463a03617bca88873b50f4e96 () Term)
(declare-fun FStar.UInt.to_uint_t@tok () Term)

; </end encoding let to_uint_t>


; <Start encoding let rec to_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.to_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.to_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.to_vec (Term Term) Term)
(declare-fun FStar.UInt.to_vec@tok () Term)
(declare-fun Tm_arrow_50c9ac04c4da2f9a3a1512bf3cfd180e () Term)

; </end encoding let rec to_vec>


; <Start encoding let rec from_vec>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.UInt.from_vec.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.UInt.from_vec.fuel_instrumented_token () Term)
(declare-fun FStar.UInt.from_vec (Term Term) Term)
(declare-fun FStar.UInt.from_vec@tok () Term)
(declare-fun Tm_arrow_3a21f80bb386ebae30b30ec5363d47ef () Term)

; </end encoding let rec from_vec>


; <Start encoding val FStar.UInt.to_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_1>


; <Start encoding val FStar.UInt.to_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.to_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.to_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.to_vec_lemma_2>


; <Start encoding val FStar.UInt.inverse_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_aux (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_aux@tok () Term)


; </end encoding val FStar.UInt.inverse_aux>


; <Start encoding val FStar.UInt.inverse_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_vec_lemma>


; <Start encoding val FStar.UInt.inverse_num_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.inverse_num_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.inverse_num_lemma@tok () Term)

; </end encoding val FStar.UInt.inverse_num_lemma>


; <Start encoding val FStar.UInt.from_vec_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_1@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_1>


; <Start encoding val FStar.UInt.from_vec_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_lemma_2 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_lemma_2@tok () Term)

; </end encoding val FStar.UInt.from_vec_lemma_2>


; <Start encoding val FStar.UInt.from_vec_aux>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_aux (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_aux@tok () Term)

; </end encoding val FStar.UInt.from_vec_aux>


; <Start encoding val FStar.UInt.seq_slice_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.seq_slice_lemma (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.seq_slice_lemma@tok () Term)

; </end encoding val FStar.UInt.seq_slice_lemma>


; <Start encoding val FStar.UInt.from_vec_propriety>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.from_vec_propriety (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.from_vec_propriety@tok () Term)

; </end encoding val FStar.UInt.from_vec_propriety>


; <Start encoding val FStar.UInt.append_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.append_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.append_lemma@tok () Term)

; </end encoding val FStar.UInt.append_lemma>


; <Start encoding val FStar.UInt.slice_left_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_left_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_left_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_left_lemma>


; <Start encoding val FStar.UInt.slice_right_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.slice_right_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.slice_right_lemma@tok () Term)

; </end encoding val FStar.UInt.slice_right_lemma>


; <Start encoding val FStar.UInt.zero_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_to_vec_lemma>


; <Start encoding val FStar.UInt.zero_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.zero_from_vec_lemma>


; <Start encoding val FStar.UInt.one_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.one_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_to_vec_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_to_vec_lemma>


; <Start encoding val FStar.UInt.pow2_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_from_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.pow2_from_vec_lemma>


; <Start encoding val FStar.UInt.ones_to_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_to_vec_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_to_vec_lemma>


; <Start encoding val FStar.UInt.ones_from_vec_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_from_vec_lemma@tok () Term)

; </end encoding val FStar.UInt.ones_from_vec_lemma>


; <Start encoding let nth>


(declare-fun FStar.UInt.nth (Term Term Term) Term)

(declare-fun Tm_arrow_3fc70c4ae2acbd923fa94b8473fca72c () Term)
(declare-fun FStar.UInt.nth@tok () Term)


; </end encoding let nth>


; <Start encoding val FStar.UInt.nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.nth_lemma@tok () Term)

; </end encoding val FStar.UInt.nth_lemma>


; <Start encoding val FStar.UInt.zero_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.zero_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.zero_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.zero_nth_lemma>


; <Start encoding val FStar.UInt.pow2_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.pow2_nth_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.pow2_nth_lemma@tok () Term)



; </end encoding val FStar.UInt.pow2_nth_lemma>


; <Start encoding val FStar.UInt.one_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.one_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.one_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.one_nth_lemma>


; <Start encoding val FStar.UInt.ones_nth_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.ones_nth_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.ones_nth_lemma@tok () Term)


; </end encoding val FStar.UInt.ones_nth_lemma>


; <Start encoding let logand>

(declare-fun FStar.UInt.logand (Term Term Term) Term)
(declare-fun Tm_arrow_f4d897275479f32ec94ab14cea117895 () Term)
(declare-fun FStar.UInt.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logxor>

(declare-fun FStar.UInt.logxor (Term Term Term) Term)

(declare-fun FStar.UInt.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logor>

(declare-fun FStar.UInt.logor (Term Term Term) Term)

(declare-fun FStar.UInt.logor@tok () Term)

; </end encoding let logor>


; <Start encoding let lognot>

(declare-fun FStar.UInt.lognot (Term Term) Term)
(declare-fun Tm_arrow_7e93208f7d6c7796851172614443345f () Term)
(declare-fun FStar.UInt.lognot@tok () Term)

; </end encoding let lognot>


; <Start encoding val FStar.UInt.logand_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_definition@tok () Term)


; </end encoding val FStar.UInt.logand_definition>


; <Start encoding val FStar.UInt.logxor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_definition@tok () Term)


; </end encoding val FStar.UInt.logxor_definition>


; <Start encoding val FStar.UInt.logor_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_definition (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_definition@tok () Term)


; </end encoding val FStar.UInt.logor_definition>


; <Start encoding val FStar.UInt.lognot_definition>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_definition (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_definition@tok () Term)


; </end encoding val FStar.UInt.lognot_definition>


; <Start encoding let minus>

(declare-fun FStar.UInt.minus (Term Term) Term)

(declare-fun FStar.UInt.minus@tok () Term)

; </end encoding let minus>


; <Start encoding val FStar.UInt.logand_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_commutative@tok () Term)

; </end encoding val FStar.UInt.logand_commutative>


; <Start encoding val FStar.UInt.logand_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_associative@tok () Term)

; </end encoding val FStar.UInt.logand_associative>


; <Start encoding val FStar.UInt.logand_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_self@tok () Term)

; </end encoding val FStar.UInt.logand_self>


; <Start encoding val FStar.UInt.logand_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_1>


; <Start encoding val FStar.UInt.logand_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logand_lemma_2>


; <Start encoding val FStar.UInt.subset_vec_le_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.subset_vec_le_lemma@tok () Term)

; </end encoding val FStar.UInt.subset_vec_le_lemma>


; <Start encoding val FStar.UInt.logand_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_le@tok () Term)

; </end encoding val FStar.UInt.logand_le>


; <Start encoding val FStar.UInt.logxor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_commutative@tok () Term)

; </end encoding val FStar.UInt.logxor_commutative>


; <Start encoding val FStar.UInt.logxor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_associative@tok () Term)

; </end encoding val FStar.UInt.logxor_associative>


; <Start encoding val FStar.UInt.logxor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_self@tok () Term)

; </end encoding val FStar.UInt.logxor_self>


; <Start encoding val FStar.UInt.logxor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_1>


; <Start encoding val FStar.UInt.logxor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logxor_lemma_2>


; <Start encoding let xor>

(declare-fun FStar.UInt.xor (Term Term) Term)
(declare-fun Tm_arrow_a41b9b98d4288401e09e5c3b51ccc4f5 () Term)
(declare-fun FStar.UInt.xor@tok () Term)

; </end encoding let xor>


; <Start encoding val FStar.UInt.xor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.xor_lemma (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.xor_lemma@tok () Term)

; </end encoding val FStar.UInt.xor_lemma>


; <Start encoding val FStar.UInt.logxor_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_inv (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_inv@tok () Term)

; </end encoding val FStar.UInt.logxor_inv>


; <Start encoding val FStar.UInt.logxor_neq_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logxor_neq_nonzero@tok () Term)

; </end encoding val FStar.UInt.logxor_neq_nonzero>


; <Start encoding val FStar.UInt.logor_commutative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_commutative (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_commutative@tok () Term)

; </end encoding val FStar.UInt.logor_commutative>


; <Start encoding val FStar.UInt.logor_associative>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_associative (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_associative@tok () Term)

; </end encoding val FStar.UInt.logor_associative>


; <Start encoding val FStar.UInt.logor_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_self@tok () Term)

; </end encoding val FStar.UInt.logor_self>


; <Start encoding val FStar.UInt.logor_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_1 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_1@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_1>


; <Start encoding val FStar.UInt.logor_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_lemma_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_lemma_2@tok () Term)

; </end encoding val FStar.UInt.logor_lemma_2>


; <Start encoding val FStar.UInt.superset_vec_ge_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.superset_vec_ge_lemma@tok () Term)

; </end encoding val FStar.UInt.superset_vec_ge_lemma>


; <Start encoding val FStar.UInt.logor_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_ge@tok () Term)

; </end encoding val FStar.UInt.logor_ge>


; <Start encoding val FStar.UInt.lognot_self>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_self (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_self@tok () Term)

; </end encoding val FStar.UInt.lognot_self>


; <Start encoding val FStar.UInt.lognot_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lognot_lemma_1 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lognot_lemma_1@tok () Term)

; </end encoding val FStar.UInt.lognot_lemma_1>


; <Start encoding val FStar.UInt.index_to_vec_ones>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.index_to_vec_ones (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.index_to_vec_ones@tok () Term)
(declare-fun Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d (Term) Term)


; </end encoding val FStar.UInt.index_to_vec_ones>


; <Start encoding val FStar.UInt.logor_disjoint>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logor_disjoint (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logor_disjoint@tok () Term)

; </end encoding val FStar.UInt.logor_disjoint>


; <Start encoding val FStar.UInt.logand_mask>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.logand_mask (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.logand_mask@tok () Term)

; </end encoding val FStar.UInt.logand_mask>


; <Start encoding let shift_left>

(declare-fun FStar.UInt.shift_left (Term Term Term) Term)
(declare-fun Tm_arrow_88bed77db23726a0c4c74cf2019c096b () Term)
(declare-fun FStar.UInt.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_right>

(declare-fun FStar.UInt.shift_right (Term Term Term) Term)

(declare-fun FStar.UInt.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding val FStar.UInt.shift_left_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_1>


; <Start encoding val FStar.UInt.shift_left_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_left_lemma_2>


; <Start encoding val FStar.UInt.shift_right_lemma_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_1 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_1@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_1>


; <Start encoding val FStar.UInt.shift_right_lemma_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_lemma_2 (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_lemma_2@tok () Term)


; </end encoding val FStar.UInt.shift_right_lemma_2>


; <Start encoding val FStar.UInt.shift_left_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logand_lemma>


; <Start encoding val FStar.UInt.shift_right_logand_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logand_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logand_lemma>


; <Start encoding val FStar.UInt.shift_left_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logxor_lemma>


; <Start encoding val FStar.UInt.shift_right_logxor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logxor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logxor_lemma>


; <Start encoding val FStar.UInt.shift_left_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_logor_lemma>


; <Start encoding val FStar.UInt.shift_right_logor_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_logor_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_logor_lemma>


; <Start encoding val FStar.UInt.shift_left_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_1>


; <Start encoding val FStar.UInt.shift_left_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_2>


; <Start encoding val FStar.UInt.shift_left_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_aux_3>


; <Start encoding val FStar.UInt.shift_left_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_left_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_left_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_left_value_lemma>


; <Start encoding val FStar.UInt.shift_right_value_aux_1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_1@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_1>


; <Start encoding val FStar.UInt.shift_right_value_aux_2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_2@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_2>


; <Start encoding val FStar.UInt.shift_right_value_aux_3>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_aux_3@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_aux_3>


; <Start encoding val FStar.UInt.shift_right_value_lemma>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.shift_right_value_lemma (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.shift_right_value_lemma@tok () Term)

; </end encoding val FStar.UInt.shift_right_value_lemma>


; <Start encoding let msb>

(declare-fun FStar.UInt.msb (Term Term) Term)
(declare-fun Tm_arrow_d4ac65fa6e48f26152e66f6f5f032db4 () Term)
(declare-fun FStar.UInt.msb@tok () Term)

; </end encoding let msb>


; <Start encoding val FStar.UInt.lemma_msb_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_pow2 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_pow2>


; <Start encoding val FStar.UInt.lemma_minus_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_zero>


; <Start encoding val FStar.UInt.lemma_msb_gte>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_msb_gte (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_msb_gte@tok () Term)

; </end encoding val FStar.UInt.lemma_msb_gte>


; <Start encoding val FStar.UInt.lemma_uint_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_uint_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_uint_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_uint_mod>


; <Start encoding val FStar.UInt.lemma_add_sub_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_add_sub_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_add_sub_cancel>


; <Start encoding val FStar.UInt.lemma_mod_sub_distr_l>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_mod_sub_distr_l@tok () Term)

; </end encoding val FStar.UInt.lemma_mod_sub_distr_l>


; <Start encoding val FStar.UInt.lemma_sub_add_cancel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_sub_add_cancel@tok () Term)

; </end encoding val FStar.UInt.lemma_sub_add_cancel>


; <Start encoding let zero_extend_vec>

(declare-fun FStar.UInt.zero_extend_vec (Term Term) Term)
(declare-fun Tm_arrow_dcb1e97275faab10b7eb1bdfcfbde371 () Term)
(declare-fun FStar.UInt.zero_extend_vec@tok () Term)

; </end encoding let zero_extend_vec>


; <Start encoding let one_extend_vec>

(declare-fun FStar.UInt.one_extend_vec (Term Term) Term)

(declare-fun FStar.UInt.one_extend_vec@tok () Term)

; </end encoding let one_extend_vec>


; <Start encoding let zero_extend>

(declare-fun FStar.UInt.zero_extend (Term Term) Term)
(declare-fun Tm_arrow_8a55f1e2e0fc60c6f44b88ae88621b5f () Term)
(declare-fun FStar.UInt.zero_extend@tok () Term)

; </end encoding let zero_extend>


; <Start encoding let one_extend>

(declare-fun FStar.UInt.one_extend (Term Term) Term)

(declare-fun FStar.UInt.one_extend@tok () Term)

; </end encoding let one_extend>


; <Start encoding val FStar.UInt.lemma_zero_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_zero_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_zero_extend@tok () Term)
(declare-fun Tm_refine_a2362280d81dbd526f1fa3f771e8faad (Term) Term)

; </end encoding val FStar.UInt.lemma_zero_extend>


; <Start encoding val FStar.UInt.lemma_one_extend>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_extend (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_extend@tok () Term)

; </end encoding val FStar.UInt.lemma_one_extend>


; <Start encoding val FStar.UInt.lemma_lognot_zero_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_zero_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_zero_ext>


; <Start encoding val FStar.UInt.lemma_lognot_one_ext>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_one_ext@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_one_ext>


; <Start encoding val FStar.UInt.lemma_lognot_value_mod>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_mod@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_mod>


; <Start encoding val FStar.UInt.lemma_lognot_value_zero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_zero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_zero>


; <Start encoding val FStar.UInt.lemma_one_mod_pow2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2 (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_one_mod_pow2@tok () Term)

; </end encoding val FStar.UInt.lemma_one_mod_pow2>


; <Start encoding val FStar.UInt.lemma_lognot_value_nonzero>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value_nonzero@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value_nonzero>


; <Start encoding val FStar.UInt.lemma_lognot_value>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_lognot_value (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_lognot_value@tok () Term)

; </end encoding val FStar.UInt.lemma_lognot_value>


; <Start encoding val FStar.UInt.lemma_minus_eq_zero_sub>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt.lemma_minus_eq_zero_sub@tok () Term)

; </end encoding val FStar.UInt.lemma_minus_eq_zero_sub>


; End Externals for interface FStar.UInt


; Externals for interface FStar.Set


; <Skipped #set-options "--initial_fuel 0 --max_fuel 0 --initial_ifuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.Set.set>

(declare-fun FStar.Set.set (Term) Term)

(declare-fun FStar.Set.set@tok () Term)

; </end encoding val FStar.Set.set>


; <Start encoding val FStar.Set.equal>

(declare-fun FStar.Set.equal (Term Term Term) Term)
(declare-fun Tm_arrow_3c4f6e4cf547bd34ec8e06fa6c99957f () Term)
(declare-fun FStar.Set.equal@tok () Term)

; </end encoding val FStar.Set.equal>


; <Start encoding val FStar.Set.mem>

(declare-fun FStar.Set.mem (Term Term Term) Term)
(declare-fun Tm_arrow_3622740f6f31d7fd022d9da9e7023a5e () Term)
(declare-fun FStar.Set.mem@tok () Term)

; </end encoding val FStar.Set.mem>


; <Start encoding val FStar.Set.empty>

(declare-fun FStar.Set.empty (Term) Term)
(declare-fun Tm_arrow_8126140804a823c0abf765b538511539 () Term)
(declare-fun FStar.Set.empty@tok () Term)

; </end encoding val FStar.Set.empty>


; <Start encoding val FStar.Set.singleton>

(declare-fun FStar.Set.singleton (Term Term) Term)
(declare-fun Tm_arrow_764304f899737575fb0645eff5d55885 () Term)
(declare-fun FStar.Set.singleton@tok () Term)

; </end encoding val FStar.Set.singleton>


; <Start encoding val FStar.Set.union>

(declare-fun FStar.Set.union (Term Term Term) Term)
(declare-fun Tm_arrow_7571f855c31e3c10cb35bbdc0f3ae878 () Term)
(declare-fun FStar.Set.union@tok () Term)

; </end encoding val FStar.Set.union>


; <Start encoding val FStar.Set.intersect>

(declare-fun FStar.Set.intersect (Term Term Term) Term)

(declare-fun FStar.Set.intersect@tok () Term)

; </end encoding val FStar.Set.intersect>


; <Start encoding val FStar.Set.complement>

(declare-fun FStar.Set.complement (Term Term) Term)
(declare-fun Tm_arrow_4a14af1f2d9ff62069ebb44d0d1980f6 () Term)
(declare-fun FStar.Set.complement@tok () Term)

; </end encoding val FStar.Set.complement>


; <Start encoding val FStar.Set.intension>


(declare-fun FStar.Set.intension (Term Term) Term)

(declare-fun Tm_ghost_arrow_04e42a5c0c55c36964ab6333a076e29e () Term)
(declare-fun FStar.Set.intension@tok () Term)

; </end encoding val FStar.Set.intension>


; <Start encoding let disjoint>

(declare-fun FStar.Set.disjoint (Term Term Term) Term)

(declare-fun FStar.Set.disjoint@tok () Term)

; </end encoding let disjoint>


; <Start encoding let subset>

(declare-fun FStar.Set.subset (Term Term Term) Term)
(declare-fun Tm_arrow_9a1bfd7a415bf0250a3dd161144f27fa () Term)
(declare-fun FStar.Set.subset@tok () Term)

; </end encoding let subset>


; <Start encoding let add>

(declare-fun FStar.Set.add (Term Term Term) Term)
(declare-fun Tm_arrow_3e561cbcf9b0a4b95f6e5d77760b40db () Term)
(declare-fun FStar.Set.add@tok () Term)

; </end encoding let add>


; <Start encoding let remove>

(declare-fun FStar.Set.remove (Term Term Term) Term)

(declare-fun FStar.Set.remove@tok () Term)

; </end encoding let remove>


; <Start encoding val FStar.Set.mem_empty>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_empty (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_empty@tok () Term)

; </end encoding val FStar.Set.mem_empty>


; <Start encoding val FStar.Set.mem_singleton>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_singleton (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_singleton@tok () Term)

; </end encoding val FStar.Set.mem_singleton>


; <Start encoding val FStar.Set.mem_union>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_union (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_union@tok () Term)

; </end encoding val FStar.Set.mem_union>


; <Start encoding val FStar.Set.mem_intersect>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intersect (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intersect@tok () Term)

; </end encoding val FStar.Set.mem_intersect>


; <Start encoding val FStar.Set.mem_complement>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_complement (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_complement@tok () Term)

; </end encoding val FStar.Set.mem_complement>


; <Start encoding val FStar.Set.mem_intension>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_intension (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_intension@tok () Term)

; </end encoding val FStar.Set.mem_intension>


; <Start encoding val FStar.Set.mem_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.mem_subset (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.mem_subset@tok () Term)

; </end encoding val FStar.Set.mem_subset>


; <Start encoding val FStar.Set.subset_mem>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.subset_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.subset_mem@tok () Term)

; </end encoding val FStar.Set.subset_mem>


; <Start encoding val FStar.Set.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_intro (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Set.lemma_equal_intro>


; <Start encoding val FStar.Set.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_elim (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Set.lemma_equal_elim>


; <Start encoding val FStar.Set.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_equal_refl (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Set.lemma_equal_refl>


; <Start encoding val FStar.Set.disjoint_not_in_both>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.disjoint_not_in_both (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.disjoint_not_in_both@tok () Term)

; </end encoding val FStar.Set.disjoint_not_in_both>


; <Skipped #reset-options/>


; <Start encoding let rec as_set'>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun FStar.Set.as_set_.fuel_instrumented (Fuel Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun FStar.Set.as_set_.fuel_instrumented_token () Term)
(declare-fun FStar.Set.as_set_ (Term Term) Term)
(declare-fun FStar.Set.as_set_@tok () Term)
(declare-fun Tm_arrow_37c32948884378803a50151abdb3cb09 () Term)

; </end encoding let rec as_set'>


; <Start encoding let as_set>

(declare-fun FStar.Set.as_set (Term Term) Term)

(declare-fun FStar.Set.as_set@tok () Term)

; </end encoding let as_set>


; <Start encoding let lemma_disjoint_subset>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Set.lemma_disjoint_subset (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Set.lemma_disjoint_subset@tok () Term)

; </end encoding let lemma_disjoint_subset>


; End Externals for interface FStar.Set


; Externals for interface FStar.Map


; <Start encoding val FStar.Map.t>

(declare-fun FStar.Map.t (Term Term) Term)
(declare-fun Tm_arrow_2b8b9bde9fdc9f797e5827d0c154aeeb () Term)
(declare-fun FStar.Map.t@tok () Term)

; </end encoding val FStar.Map.t>


; <Start encoding val FStar.Map.sel>

(declare-fun FStar.Map.sel (Term Term Term Term) Term)
(declare-fun Tm_arrow_28a168f8d4c6d78564a214862be72b08 () Term)
(declare-fun FStar.Map.sel@tok () Term)

; </end encoding val FStar.Map.sel>


; <Start encoding val FStar.Map.upd>

(declare-fun FStar.Map.upd (Term Term Term Term Term) Term)
(declare-fun Tm_arrow_b19283e90b47034162373413c6a19933 () Term)
(declare-fun FStar.Map.upd@tok () Term)

; </end encoding val FStar.Map.upd>


; <Start encoding val FStar.Map.const>

(declare-fun FStar.Map.const (Term Term Term) Term)
(declare-fun Tm_arrow_867ad7c8cdd01bd87f415b1f9e0b39ac () Term)
(declare-fun FStar.Map.const@tok () Term)

; </end encoding val FStar.Map.const>


; <Start encoding val FStar.Map.domain>

(declare-fun FStar.Map.domain (Term Term Term) Term)
(declare-fun Tm_arrow_6e8371e4f424600b54c69f2eb03b48d8 () Term)
(declare-fun FStar.Map.domain@tok () Term)

; </end encoding val FStar.Map.domain>


; <Start encoding val FStar.Map.contains>

(declare-fun FStar.Map.contains (Term Term Term Term) Term)
(declare-fun Tm_arrow_32b461b2324f01c7a6bc6b577725566d () Term)
(declare-fun FStar.Map.contains@tok () Term)

; </end encoding val FStar.Map.contains>


; <Start encoding val FStar.Map.concat>

(declare-fun FStar.Map.concat (Term Term Term Term) Term)
(declare-fun Tm_arrow_b137090ab92fa6ffe958df8f30b9f54e () Term)
(declare-fun FStar.Map.concat@tok () Term)

; </end encoding val FStar.Map.concat>


; <Start encoding val FStar.Map.map_val>


(declare-fun FStar.Map.map_val (Term Term Term Term Term) Term)

(declare-fun Tm_arrow_9123217b92d7c89a4449fe44590b9f47 () Term)
(declare-fun FStar.Map.map_val@tok () Term)

; </end encoding val FStar.Map.map_val>


; <Start encoding val FStar.Map.restrict>

(declare-fun FStar.Map.restrict (Term Term Term Term) Term)
(declare-fun Tm_arrow_e8f96ed4bf330326d457be2f8416d734 () Term)
(declare-fun FStar.Map.restrict@tok () Term)

; </end encoding val FStar.Map.restrict>


; <Start encoding let const_on>

(declare-fun FStar.Map.const_on (Term Term Term Term) Term)
(declare-fun Tm_arrow_f99b4e662f3e4a97cdb11f6ede73601e () Term)
(declare-fun FStar.Map.const_on@tok () Term)

; </end encoding let const_on>


; <Start encoding val FStar.Map.map_literal>


(declare-fun FStar.Map.map_literal (Term Term Term) Term)

(declare-fun Tm_arrow_fb1dd96195814b8107d05d25a2bbb566 () Term)
(declare-fun FStar.Map.map_literal@tok () Term)

; </end encoding val FStar.Map.map_literal>


; <Start encoding let disjoint_dom>

(declare-fun FStar.Map.disjoint_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_556fc2b76256aeb4c51415a912920e4f () Term)
(declare-fun FStar.Map.disjoint_dom@tok () Term)

; </end encoding let disjoint_dom>


; <Start encoding let has_dom>

(declare-fun FStar.Map.has_dom (Term Term Term Term) Term)
(declare-fun Tm_arrow_978eafbacd55316f8accb3c830570c46 () Term)
(declare-fun FStar.Map.has_dom@tok () Term)

; </end encoding let has_dom>


; <Start encoding val FStar.Map.lemma_SelUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd1@tok () Term)

; </end encoding val FStar.Map.lemma_SelUpd1>


; <Start encoding val FStar.Map.lemma_SelUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelUpd2@tok () Term)

; </end encoding val FStar.Map.lemma_SelUpd2>


; <Start encoding val FStar.Map.lemma_SelConst>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConst (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConst@tok () Term)

; </end encoding val FStar.Map.lemma_SelConst>


; <Start encoding val FStar.Map.lemma_SelRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelRestrict@tok () Term)

; </end encoding val FStar.Map.lemma_SelRestrict>


; <Start encoding val FStar.Map.lemma_SelConcat1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat1@tok () Term)

; </end encoding val FStar.Map.lemma_SelConcat1>


; <Start encoding val FStar.Map.lemma_SelConcat2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelConcat2 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelConcat2@tok () Term)

; </end encoding val FStar.Map.lemma_SelConcat2>


; <Start encoding val FStar.Map.lemma_SelMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_SelMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_SelMapVal@tok () Term)


; </end encoding val FStar.Map.lemma_SelMapVal>


; <Start encoding val FStar.Map.lemma_InDomUpd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd1 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd1@tok () Term)

; </end encoding val FStar.Map.lemma_InDomUpd1>


; <Start encoding val FStar.Map.lemma_InDomUpd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomUpd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomUpd2@tok () Term)

; </end encoding val FStar.Map.lemma_InDomUpd2>


; <Start encoding val FStar.Map.lemma_InDomConstMap>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConstMap (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConstMap@tok () Term)

; </end encoding val FStar.Map.lemma_InDomConstMap>


; <Start encoding val FStar.Map.lemma_InDomConcat>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomConcat (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomConcat@tok () Term)

; </end encoding val FStar.Map.lemma_InDomConcat>


; <Start encoding val FStar.Map.lemma_InMapVal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InMapVal (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InMapVal@tok () Term)


; </end encoding val FStar.Map.lemma_InMapVal>


; <Start encoding val FStar.Map.lemma_InDomRestrict>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_InDomRestrict (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_InDomRestrict@tok () Term)

; </end encoding val FStar.Map.lemma_InDomRestrict>


; <Start encoding val FStar.Map.lemma_ContainsDom>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_ContainsDom (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_ContainsDom@tok () Term)

; </end encoding val FStar.Map.lemma_ContainsDom>


; <Start encoding val FStar.Map.lemma_UpdDomain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_UpdDomain (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_UpdDomain@tok () Term)

; </end encoding val FStar.Map.lemma_UpdDomain>


; <Start encoding val FStar.Map.lemma_map_literal>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_map_literal (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_map_literal@tok () Term)


; </end encoding val FStar.Map.lemma_map_literal>


; <Start encoding val FStar.Map.equal>

(declare-fun FStar.Map.equal (Term Term Term Term) Term)
(declare-fun Tm_arrow_8d5e09121919a406639e2201d1f5d3dd () Term)
(declare-fun FStar.Map.equal@tok () Term)

; </end encoding val FStar.Map.equal>


; <Start encoding val FStar.Map.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_intro@tok () Term)

; </end encoding val FStar.Map.lemma_equal_intro>


; <Start encoding val FStar.Map.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_elim (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_elim@tok () Term)

; </end encoding val FStar.Map.lemma_equal_elim>


; <Start encoding val FStar.Map.lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.Map.lemma_equal_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.Map.lemma_equal_refl@tok () Term)

; </end encoding val FStar.Map.lemma_equal_refl>


; End Externals for interface FStar.Map


; Externals for interface FStar.UInt32


; <Start encoding let n>

(declare-fun FStar.UInt32.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt32.t>

(declare-fun FStar.UInt32.t (Dummy_sort) Term)

; </end encoding val FStar.UInt32.t>


; <Start encoding val FStar.UInt32.v>

(declare-fun FStar.UInt32.v (Term) Term)
(declare-fun Tm_arrow_33a06d9a3ec1c77524ab958d37ae1453 () Term)
(declare-fun FStar.UInt32.v@tok () Term)

; </end encoding val FStar.UInt32.v>


; <Start encoding val FStar.UInt32.uint_to_t>

(declare-fun FStar.UInt32.uint_to_t (Term) Term)
(declare-fun Tm_refine_0ea1fba779ad5718e28476faeef94d56 (Term) Term)
(declare-fun Tm_arrow_3d414099f2a2b7ef3e11b1fc75a28674 () Term)
(declare-fun FStar.UInt32.uint_to_t@tok () Term)


; </end encoding val FStar.UInt32.uint_to_t>


; <Start encoding val FStar.UInt32.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.uv_inv@tok () Term)

; </end encoding val FStar.UInt32.uv_inv>


; <Start encoding val FStar.UInt32.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.vu_inv@tok () Term)

; </end encoding val FStar.UInt32.vu_inv>


; <Start encoding val FStar.UInt32.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.v_inj@tok () Term)

; </end encoding val FStar.UInt32.v_inj>


; <Start encoding val FStar.UInt32.zero>

(declare-fun FStar.UInt32.zero (Dummy_sort) Term)
(declare-fun Tm_refine_7cfa0141116db910fdee890408ebbaf1 () Term)


; </end encoding val FStar.UInt32.zero>


; <Start encoding val FStar.UInt32.one>

(declare-fun FStar.UInt32.one (Dummy_sort) Term)
(declare-fun Tm_refine_d94e5152d1c8429ac781cc5558c9a3e2 () Term)


; </end encoding val FStar.UInt32.one>


; <Start encoding val FStar.UInt32.add>

(declare-fun FStar.UInt32.add (Term Term) Term)
(declare-fun Tm_refine_709aff84c75b0fff77dcbf3b529649dd (Term Term) Term)
(declare-fun Tm_arrow_5558b72197031b1efc1a0f8298859a47 () Term)
(declare-fun FStar.UInt32.add@tok () Term)


; </end encoding val FStar.UInt32.add>


; <Start encoding val FStar.UInt32.add_underspec>

(declare-fun FStar.UInt32.add_underspec (Term Term) Term)
(declare-fun Tm_refine_57eacb083aaa8f3c6200eef2872d40a9 (Term Term) Term)
(declare-fun Tm_arrow_2aa4a786718187783c350fff98c0276d () Term)
(declare-fun FStar.UInt32.add_underspec@tok () Term)


; </end encoding val FStar.UInt32.add_underspec>


; <Start encoding val FStar.UInt32.add_mod>

(declare-fun FStar.UInt32.add_mod (Term Term) Term)
(declare-fun Tm_refine_edc8fb7e909853d860d4ab445ef31337 (Term Term) Term)
(declare-fun Tm_arrow_edbd649f4b12a343efa6ef46e7961890 () Term)
(declare-fun FStar.UInt32.add_mod@tok () Term)


; </end encoding val FStar.UInt32.add_mod>


; <Start encoding val FStar.UInt32.sub>

(declare-fun FStar.UInt32.sub (Term Term) Term)
(declare-fun Tm_refine_aa4b3d268075d84252df525db1f85524 (Term Term) Term)
(declare-fun Tm_arrow_ac932fe6124478fcfd5be99d334122e8 () Term)
(declare-fun FStar.UInt32.sub@tok () Term)


; </end encoding val FStar.UInt32.sub>


; <Start encoding val FStar.UInt32.sub_underspec>

(declare-fun FStar.UInt32.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_01926286fa04b785df0ea0da544f2001 (Term Term) Term)
(declare-fun Tm_arrow_a0c271942b2fe7be43f6ae297698cd0b () Term)
(declare-fun FStar.UInt32.sub_underspec@tok () Term)


; </end encoding val FStar.UInt32.sub_underspec>


; <Start encoding val FStar.UInt32.sub_mod>

(declare-fun FStar.UInt32.sub_mod (Term Term) Term)
(declare-fun Tm_refine_ace23c600fbe87b65e5fc333816f74de (Term Term) Term)
(declare-fun Tm_arrow_4a8c4b67b5977a746f1eeda7c310346f () Term)
(declare-fun FStar.UInt32.sub_mod@tok () Term)


; </end encoding val FStar.UInt32.sub_mod>


; <Start encoding val FStar.UInt32.mul>

(declare-fun FStar.UInt32.mul (Term Term) Term)
(declare-fun Tm_refine_1ccfb21903aa30ace8832f7a4d067d9b (Term Term) Term)
(declare-fun Tm_arrow_f261941925861d12451675f7409141e5 () Term)
(declare-fun FStar.UInt32.mul@tok () Term)


; </end encoding val FStar.UInt32.mul>


; <Start encoding val FStar.UInt32.mul_underspec>

(declare-fun FStar.UInt32.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_cb4ffd3222952e9ac95fc72e8f9913c6 (Term Term) Term)
(declare-fun Tm_arrow_54623a1c9ed03c94751f7d25d259da67 () Term)
(declare-fun FStar.UInt32.mul_underspec@tok () Term)


; </end encoding val FStar.UInt32.mul_underspec>


; <Start encoding val FStar.UInt32.mul_mod>

(declare-fun FStar.UInt32.mul_mod (Term Term) Term)
(declare-fun Tm_refine_8618df86656cf4c2bc98614452120307 (Term Term) Term)
(declare-fun Tm_arrow_b9ba4f3f3f0a1ea3202a99cc97238a0d () Term)
(declare-fun FStar.UInt32.mul_mod@tok () Term)


; </end encoding val FStar.UInt32.mul_mod>


; <Start encoding val FStar.UInt32.div>

(declare-fun Tm_refine_0941c9ff95557f2d53bc8f8179ab793e () Term)
(declare-fun FStar.UInt32.div (Term Term) Term)

(declare-fun Tm_refine_74d1ae07763cf2ce5f26906c9df0d2cc (Term Term) Term)
(declare-fun Tm_arrow_61dc5944349c0fd1e6ccd916a51fdfe8 () Term)
(declare-fun FStar.UInt32.div@tok () Term)


; </end encoding val FStar.UInt32.div>


; <Start encoding val FStar.UInt32.rem>


(declare-fun FStar.UInt32.rem (Term Term) Term)

(declare-fun Tm_refine_19ac6a052799e5086e9c3eb3a21d54a5 (Term Term) Term)
(declare-fun Tm_arrow_a00bbce6d7d4a1d495177d4f11116643 () Term)
(declare-fun FStar.UInt32.rem@tok () Term)


; </end encoding val FStar.UInt32.rem>


; <Start encoding val FStar.UInt32.logand>

(declare-fun FStar.UInt32.logand (Term Term) Term)
(declare-fun Tm_refine_7afd5b0ca8e77c7f6870883658e19d63 (Term Term) Term)
(declare-fun Tm_arrow_eff0426e7af51f8d330de4f569da9534 () Term)
(declare-fun FStar.UInt32.logand@tok () Term)


; </end encoding val FStar.UInt32.logand>


; <Start encoding val FStar.UInt32.logxor>

(declare-fun FStar.UInt32.logxor (Term Term) Term)
(declare-fun Tm_refine_2b25e5c3b25bc06167200cbfa5d36b3e (Term Term) Term)
(declare-fun Tm_arrow_07d2eb0ad8dc47fa48b862c24603f207 () Term)
(declare-fun FStar.UInt32.logxor@tok () Term)


; </end encoding val FStar.UInt32.logxor>


; <Start encoding val FStar.UInt32.logor>

(declare-fun FStar.UInt32.logor (Term Term) Term)
(declare-fun Tm_refine_39cb18a1d289e559096741772432b24f (Term Term) Term)
(declare-fun Tm_arrow_f4c0c09b0ba22212b54bc6a7fb947fac () Term)
(declare-fun FStar.UInt32.logor@tok () Term)


; </end encoding val FStar.UInt32.logor>


; <Start encoding val FStar.UInt32.lognot>

(declare-fun FStar.UInt32.lognot (Term) Term)
(declare-fun Tm_refine_d5743ca0a8d5f3ceec748bdcb132b14f (Term) Term)
(declare-fun Tm_arrow_b6548dae703a0f26a4185c51dee5464b () Term)
(declare-fun FStar.UInt32.lognot@tok () Term)


; </end encoding val FStar.UInt32.lognot>


; <Start encoding val FStar.UInt32.shift_right>

(declare-fun FStar.UInt32.shift_right (Term Term) Term)
(declare-fun Tm_refine_59202c8b625f4b04caf2081d6778d9e7 (Term Term) Term)
(declare-fun Tm_arrow_13c7acc70a3dd34a798f691f2cee4104 () Term)
(declare-fun FStar.UInt32.shift_right@tok () Term)


; </end encoding val FStar.UInt32.shift_right>


; <Start encoding val FStar.UInt32.shift_left>

(declare-fun FStar.UInt32.shift_left (Term Term) Term)
(declare-fun Tm_refine_c642c4de19ebed0b1a9b5f85d40989c0 (Term Term) Term)
(declare-fun Tm_arrow_0709d575329517627fac117b134f4462 () Term)
(declare-fun FStar.UInt32.shift_left@tok () Term)


; </end encoding val FStar.UInt32.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt32.eq (Term Term) Term)
(declare-fun Tm_arrow_6de09abf9de7977da03ee416904d3039 () Term)
(declare-fun FStar.UInt32.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt32.gt (Term Term) Term)

(declare-fun FStar.UInt32.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt32.gte (Term Term) Term)

(declare-fun FStar.UInt32.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt32.lt (Term Term) Term)

(declare-fun FStar.UInt32.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt32.lte (Term Term) Term)

(declare-fun FStar.UInt32.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt32.minus (Term) Term)
(declare-fun Tm_arrow_c4b70260248a2080020c883b42aa875d () Term)
(declare-fun FStar.UInt32.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt32.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt32.eq_mask (Term Term) Term)
(declare-fun Tm_refine_09d9a189c8c7a3bf3fc28db14e6689cd (Term Term) Term)
(declare-fun Tm_arrow_472ed8b8700983a2f5b417531368b430 () Term)
(declare-fun FStar.UInt32.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt32.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt32.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt32.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt32.gte_mask (Term Term) Term)
(declare-fun Tm_refine_83df857506788e94d25c8be97271668a (Term Term) Term)
(declare-fun Tm_arrow_a9de8133430dc71a337d9373e485c8b4 () Term)
(declare-fun FStar.UInt32.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt32.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt32.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt32.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt32.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt32.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt32.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt32.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt32.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt32.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt32.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt32.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt32.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt32.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt32.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt32.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt32.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt32.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt32.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt32.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt32.to_string>

(declare-fun FStar.UInt32.to_string (Term) Term)
(declare-fun Tm_arrow_bde0326394a5877aafa8a9dfb4adb318 () Term)
(declare-fun FStar.UInt32.to_string@tok () Term)

; </end encoding val FStar.UInt32.to_string>


; <Start encoding val FStar.UInt32.to_string_hex>

(declare-fun FStar.UInt32.to_string_hex (Term) Term)

(declare-fun FStar.UInt32.to_string_hex@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex>


; <Start encoding val FStar.UInt32.to_string_hex_pad>

(declare-fun FStar.UInt32.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt32.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt32.to_string_hex_pad>


; <Start encoding val FStar.UInt32.of_string>

(declare-fun FStar.UInt32.of_string (Term) Term)
(declare-fun Tm_arrow_564534749090ea8f842e229c3182e762 () Term)
(declare-fun FStar.UInt32.of_string@tok () Term)

; </end encoding val FStar.UInt32.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt32.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_67ad727682511dd92ce30d8d55620a8e () Term)
(declare-fun FStar.UInt32.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt32


; Externals for interface FStar.UInt64


; <Start encoding let n>

(declare-fun FStar.UInt64.n (Dummy_sort) Term)

; </end encoding let n>


; <Skipped #set-options "--max_fuel 0 --max_ifuel 0"/>


; <Start encoding val FStar.UInt64.t>

(declare-fun FStar.UInt64.t (Dummy_sort) Term)

; </end encoding val FStar.UInt64.t>


; <Start encoding val FStar.UInt64.v>

(declare-fun FStar.UInt64.v (Term) Term)
(declare-fun Tm_arrow_b1dc77edd47f50a79ef19c45877be87f () Term)
(declare-fun FStar.UInt64.v@tok () Term)

; </end encoding val FStar.UInt64.v>


; <Start encoding val FStar.UInt64.uint_to_t>

(declare-fun FStar.UInt64.uint_to_t (Term) Term)
(declare-fun Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 (Term) Term)
(declare-fun Tm_arrow_0a7b550d26d1f7783c7c5e1990842388 () Term)
(declare-fun FStar.UInt64.uint_to_t@tok () Term)


; </end encoding val FStar.UInt64.uint_to_t>


; <Start encoding val FStar.UInt64.uv_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.uv_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.uv_inv@tok () Term)

; </end encoding val FStar.UInt64.uv_inv>


; <Start encoding val FStar.UInt64.vu_inv>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.vu_inv (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.vu_inv@tok () Term)

; </end encoding val FStar.UInt64.vu_inv>


; <Start encoding val FStar.UInt64.v_inj>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.v_inj (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.v_inj@tok () Term)

; </end encoding val FStar.UInt64.v_inj>


; <Start encoding val FStar.UInt64.zero>

(declare-fun FStar.UInt64.zero (Dummy_sort) Term)
(declare-fun Tm_refine_89584a9c9cf094f470969adafcc43f12 () Term)


; </end encoding val FStar.UInt64.zero>


; <Start encoding val FStar.UInt64.one>

(declare-fun FStar.UInt64.one (Dummy_sort) Term)
(declare-fun Tm_refine_248426d47c73436882d5ff4a2d4f3cf0 () Term)


; </end encoding val FStar.UInt64.one>


; <Start encoding val FStar.UInt64.add>

(declare-fun FStar.UInt64.add (Term Term) Term)
(declare-fun Tm_refine_bc552b2c624e2add758b3ac761c0c563 (Term Term) Term)
(declare-fun Tm_arrow_be2b56e86970b1435b564896876df5af () Term)
(declare-fun FStar.UInt64.add@tok () Term)


; </end encoding val FStar.UInt64.add>


; <Start encoding val FStar.UInt64.add_underspec>

(declare-fun FStar.UInt64.add_underspec (Term Term) Term)
(declare-fun Tm_refine_453fa410c3a31a8a972a89b516aee90f (Term Term) Term)
(declare-fun Tm_arrow_7f1e1876505bc4561e28a0354c79be94 () Term)
(declare-fun FStar.UInt64.add_underspec@tok () Term)


; </end encoding val FStar.UInt64.add_underspec>


; <Start encoding val FStar.UInt64.add_mod>

(declare-fun FStar.UInt64.add_mod (Term Term) Term)
(declare-fun Tm_refine_2d98f2f5de361516da3dbd9f556509e2 (Term Term) Term)
(declare-fun Tm_arrow_05395bb977e74723e0c89b35f3db81b1 () Term)
(declare-fun FStar.UInt64.add_mod@tok () Term)


; </end encoding val FStar.UInt64.add_mod>


; <Start encoding val FStar.UInt64.sub>

(declare-fun FStar.UInt64.sub (Term Term) Term)
(declare-fun Tm_refine_4db8ba22c4504a66577a2159dcc603cd (Term Term) Term)
(declare-fun Tm_arrow_a3c2957810330952c9cd0dc2ef7e5dc1 () Term)
(declare-fun FStar.UInt64.sub@tok () Term)


; </end encoding val FStar.UInt64.sub>


; <Start encoding val FStar.UInt64.sub_underspec>

(declare-fun FStar.UInt64.sub_underspec (Term Term) Term)
(declare-fun Tm_refine_dd3e2dd01aa446ac6616a71fc757406a (Term Term) Term)
(declare-fun Tm_arrow_87b0e65776a09c1fe9734c4195b4bf84 () Term)
(declare-fun FStar.UInt64.sub_underspec@tok () Term)


; </end encoding val FStar.UInt64.sub_underspec>


; <Start encoding val FStar.UInt64.sub_mod>

(declare-fun FStar.UInt64.sub_mod (Term Term) Term)
(declare-fun Tm_refine_cb95789552ffa46c14f21af13ceaad6b (Term Term) Term)
(declare-fun Tm_arrow_7f617113bda01094490f58e39564f398 () Term)
(declare-fun FStar.UInt64.sub_mod@tok () Term)


; </end encoding val FStar.UInt64.sub_mod>


; <Start encoding val FStar.UInt64.mul>

(declare-fun FStar.UInt64.mul (Term Term) Term)
(declare-fun Tm_refine_2ac8bed7a6398f84bccb91bd4fed7136 (Term Term) Term)
(declare-fun Tm_arrow_ea17845c6f4791bda61fffc74c40da51 () Term)
(declare-fun FStar.UInt64.mul@tok () Term)


; </end encoding val FStar.UInt64.mul>


; <Start encoding val FStar.UInt64.mul_underspec>

(declare-fun FStar.UInt64.mul_underspec (Term Term) Term)
(declare-fun Tm_refine_b936d941ba7bf51db4d781f9af09acd3 (Term Term) Term)
(declare-fun Tm_arrow_596709ad66a9eee3dc6ef040a813e08e () Term)
(declare-fun FStar.UInt64.mul_underspec@tok () Term)


; </end encoding val FStar.UInt64.mul_underspec>


; <Start encoding val FStar.UInt64.mul_mod>

(declare-fun FStar.UInt64.mul_mod (Term Term) Term)
(declare-fun Tm_refine_fce3a2e2e29645212301d89fcebc4e29 (Term Term) Term)
(declare-fun Tm_arrow_a58b92e22a54f064a91938f5890f3d26 () Term)
(declare-fun FStar.UInt64.mul_mod@tok () Term)


; </end encoding val FStar.UInt64.mul_mod>


; <Start encoding val FStar.UInt64.div>

(declare-fun Tm_refine_94d25b6e0041d543efd58300424ecc37 () Term)
(declare-fun FStar.UInt64.div (Term Term) Term)

(declare-fun Tm_refine_2905e4cd1a81244ae97dc5c62563e060 (Term Term) Term)
(declare-fun Tm_arrow_362fd430a2a36692a10db610ce347491 () Term)
(declare-fun FStar.UInt64.div@tok () Term)


; </end encoding val FStar.UInt64.div>


; <Start encoding val FStar.UInt64.rem>


(declare-fun FStar.UInt64.rem (Term Term) Term)

(declare-fun Tm_refine_06f2bf4950bb76094f7b7f43daea2409 (Term Term) Term)
(declare-fun Tm_arrow_53bf9c10f719f234f584267623ec2e33 () Term)
(declare-fun FStar.UInt64.rem@tok () Term)


; </end encoding val FStar.UInt64.rem>


; <Start encoding val FStar.UInt64.logand>

(declare-fun FStar.UInt64.logand (Term Term) Term)
(declare-fun Tm_refine_4a73301fbc41c8e432f23b6aef69a5eb (Term Term) Term)
(declare-fun Tm_arrow_cbca1d1a87f201e6ff2f61643983b2f3 () Term)
(declare-fun FStar.UInt64.logand@tok () Term)


; </end encoding val FStar.UInt64.logand>


; <Start encoding val FStar.UInt64.logxor>

(declare-fun FStar.UInt64.logxor (Term Term) Term)
(declare-fun Tm_refine_b87f471e80e3c2bc077d38b7026cfcf6 (Term Term) Term)
(declare-fun Tm_arrow_7a0892a26110d0c3bb8d5540c3f9134f () Term)
(declare-fun FStar.UInt64.logxor@tok () Term)


; </end encoding val FStar.UInt64.logxor>


; <Start encoding val FStar.UInt64.logor>

(declare-fun FStar.UInt64.logor (Term Term) Term)
(declare-fun Tm_refine_6913af387cf2f30da0961ac60666f00f (Term Term) Term)
(declare-fun Tm_arrow_88959be20cb195d8ed8c043810621aa5 () Term)
(declare-fun FStar.UInt64.logor@tok () Term)


; </end encoding val FStar.UInt64.logor>


; <Start encoding val FStar.UInt64.lognot>

(declare-fun FStar.UInt64.lognot (Term) Term)
(declare-fun Tm_refine_d294ad5c8783c9adf54e87f8b3d910d1 (Term) Term)
(declare-fun Tm_arrow_5830582bc087a4c4cac6e2d02503540d () Term)
(declare-fun FStar.UInt64.lognot@tok () Term)


; </end encoding val FStar.UInt64.lognot>


; <Start encoding val FStar.UInt64.shift_right>

(declare-fun FStar.UInt64.shift_right (Term Term) Term)
(declare-fun Tm_refine_0556f625b89f1ac99fd21e82e26fe9e0 (Term Term) Term)
(declare-fun Tm_arrow_54172cd4c03b90333401dcf08f131f18 () Term)
(declare-fun FStar.UInt64.shift_right@tok () Term)


; </end encoding val FStar.UInt64.shift_right>


; <Start encoding val FStar.UInt64.shift_left>

(declare-fun FStar.UInt64.shift_left (Term Term) Term)
(declare-fun Tm_refine_ebf0af240d826e12ec6c1570ad81631c (Term Term) Term)
(declare-fun Tm_arrow_f0e726dc2efef2bba1cad7b7437673ab () Term)
(declare-fun FStar.UInt64.shift_left@tok () Term)


; </end encoding val FStar.UInt64.shift_left>


; <Start encoding let eq>

(declare-fun FStar.UInt64.eq (Term Term) Term)
(declare-fun Tm_arrow_598288f3403164a95ff09472c7ec0bb4 () Term)
(declare-fun FStar.UInt64.eq@tok () Term)

; </end encoding let eq>


; <Start encoding let gt>

(declare-fun FStar.UInt64.gt (Term Term) Term)

(declare-fun FStar.UInt64.gt@tok () Term)

; </end encoding let gt>


; <Start encoding let gte>

(declare-fun FStar.UInt64.gte (Term Term) Term)

(declare-fun FStar.UInt64.gte@tok () Term)

; </end encoding let gte>


; <Start encoding let lt>

(declare-fun FStar.UInt64.lt (Term Term) Term)

(declare-fun FStar.UInt64.lt@tok () Term)

; </end encoding let lt>


; <Start encoding let lte>

(declare-fun FStar.UInt64.lte (Term Term) Term)

(declare-fun FStar.UInt64.lte@tok () Term)

; </end encoding let lte>


; <Start encoding let minus>

(declare-fun FStar.UInt64.minus (Term) Term)
(declare-fun Tm_arrow_1b7783661e16e9c2a9894c974bc97032 () Term)
(declare-fun FStar.UInt64.minus@tok () Term)

; </end encoding let minus>


; <Start encoding let n_minus_one>

(declare-fun FStar.UInt64.n_minus_one (Dummy_sort) Term)

; </end encoding let n_minus_one>


; <Skipped #set-options "--z3rlimit 80 --initial_fuel 1 --max_fuel 1"/>


; <Start encoding let eq_mask>

(declare-fun FStar.UInt64.eq_mask (Term Term) Term)
(declare-fun Tm_refine_30c561286d2c8600e271922aaab003cf (Term Term) Term)
(declare-fun Tm_arrow_dc89781bb433a3a499ce3ed25df276ee () Term)
(declare-fun FStar.UInt64.eq_mask@tok () Term)


; </end encoding let eq_mask>


; <Start encoding val FStar.UInt64.lemma_sub_msbs>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.UInt64.lemma_sub_msbs@tok () Term)

; </end encoding val FStar.UInt64.lemma_sub_msbs>


; <Start encoding let gte_mask>

(declare-fun FStar.UInt64.gte_mask (Term Term) Term)
(declare-fun Tm_refine_1b1f0e3b5d9ef76ddc765c8d9e623234 (Term Term) Term)
(declare-fun Tm_arrow_7b13171caed18c0d7cf0b1d9315655c1 () Term)
(declare-fun FStar.UInt64.gte_mask@tok () Term)


; </end encoding let gte_mask>


; <Skipped #reset-options/>


; <Start encoding let op_Plus_Hat>

(declare-fun FStar.UInt64.op_Plus_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Hat@tok () Term)


; </end encoding let op_Plus_Hat>


; <Start encoding let op_Plus_Question_Hat>

(declare-fun FStar.UInt64.op_Plus_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Question_Hat@tok () Term)


; </end encoding let op_Plus_Question_Hat>


; <Start encoding let op_Plus_Percent_Hat>

(declare-fun FStar.UInt64.op_Plus_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Plus_Percent_Hat@tok () Term)


; </end encoding let op_Plus_Percent_Hat>


; <Start encoding let op_Subtraction_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Hat@tok () Term)


; </end encoding let op_Subtraction_Hat>


; <Start encoding let op_Subtraction_Question_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Question_Hat@tok () Term)


; </end encoding let op_Subtraction_Question_Hat>


; <Start encoding let op_Subtraction_Percent_Hat>

(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Subtraction_Percent_Hat@tok () Term)


; </end encoding let op_Subtraction_Percent_Hat>


; <Start encoding let op_Star_Hat>

(declare-fun FStar.UInt64.op_Star_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Hat@tok () Term)


; </end encoding let op_Star_Hat>


; <Start encoding let op_Star_Question_Hat>

(declare-fun FStar.UInt64.op_Star_Question_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Question_Hat@tok () Term)


; </end encoding let op_Star_Question_Hat>


; <Start encoding let op_Star_Percent_Hat>

(declare-fun FStar.UInt64.op_Star_Percent_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Star_Percent_Hat@tok () Term)


; </end encoding let op_Star_Percent_Hat>


; <Start encoding let op_Slash_Hat>


(declare-fun FStar.UInt64.op_Slash_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Slash_Hat@tok () Term)



; </end encoding let op_Slash_Hat>


; <Start encoding let op_Percent_Hat>


(declare-fun FStar.UInt64.op_Percent_Hat (Term Term) Term)



(declare-fun FStar.UInt64.op_Percent_Hat@tok () Term)



; </end encoding let op_Percent_Hat>


; <Start encoding let op_Hat_Hat>

(declare-fun FStar.UInt64.op_Hat_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Hat_Hat@tok () Term)


; </end encoding let op_Hat_Hat>


; <Start encoding let op_Amp_Hat>

(declare-fun FStar.UInt64.op_Amp_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Amp_Hat@tok () Term)


; </end encoding let op_Amp_Hat>


; <Start encoding let op_Bar_Hat>

(declare-fun FStar.UInt64.op_Bar_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Bar_Hat@tok () Term)


; </end encoding let op_Bar_Hat>


; <Start encoding let op_Less_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Less_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Less_Less_Hat@tok () Term)


; </end encoding let op_Less_Less_Hat>


; <Start encoding let op_Greater_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Greater_Hat (Term Term) Term)


(declare-fun FStar.UInt64.op_Greater_Greater_Hat@tok () Term)


; </end encoding let op_Greater_Greater_Hat>


; <Start encoding let op_Equals_Hat>

(declare-fun FStar.UInt64.op_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Equals_Hat@tok () Term)

; </end encoding let op_Equals_Hat>


; <Start encoding let op_Greater_Hat>

(declare-fun FStar.UInt64.op_Greater_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Hat@tok () Term)

; </end encoding let op_Greater_Hat>


; <Start encoding let op_Greater_Equals_Hat>

(declare-fun FStar.UInt64.op_Greater_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Greater_Equals_Hat@tok () Term)

; </end encoding let op_Greater_Equals_Hat>


; <Start encoding let op_Less_Hat>

(declare-fun FStar.UInt64.op_Less_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Hat@tok () Term)

; </end encoding let op_Less_Hat>


; <Start encoding let op_Less_Equals_Hat>

(declare-fun FStar.UInt64.op_Less_Equals_Hat (Term Term) Term)

(declare-fun FStar.UInt64.op_Less_Equals_Hat@tok () Term)

; </end encoding let op_Less_Equals_Hat>


; <Start encoding val FStar.UInt64.to_string>

(declare-fun FStar.UInt64.to_string (Term) Term)
(declare-fun Tm_arrow_9181e066d5f5e8abb661df26378ed002 () Term)
(declare-fun FStar.UInt64.to_string@tok () Term)

; </end encoding val FStar.UInt64.to_string>


; <Start encoding val FStar.UInt64.to_string_hex>

(declare-fun FStar.UInt64.to_string_hex (Term) Term)

(declare-fun FStar.UInt64.to_string_hex@tok () Term)

; </end encoding val FStar.UInt64.to_string_hex>


; <Start encoding val FStar.UInt64.to_string_hex_pad>

(declare-fun FStar.UInt64.to_string_hex_pad (Term) Term)

(declare-fun FStar.UInt64.to_string_hex_pad@tok () Term)

; </end encoding val FStar.UInt64.to_string_hex_pad>


; <Start encoding val FStar.UInt64.of_string>

(declare-fun FStar.UInt64.of_string (Term) Term)
(declare-fun Tm_arrow_d8ed8461d1bddbfa79f5d5b77e608759 () Term)
(declare-fun FStar.UInt64.of_string@tok () Term)

; </end encoding val FStar.UInt64.of_string>


; <Skipped #set-options "--admit_smt_queries true"/>


; <Start encoding let __uint_to_t>

(declare-fun FStar.UInt64.__uint_to_t (Term) Term)
(declare-fun Tm_arrow_583103ad9bf405c63f576183363ae2d9 () Term)
(declare-fun FStar.UInt64.__uint_to_t@tok () Term)

; </end encoding let __uint_to_t>


; <Skipped #reset-options/>


; End Externals for interface FStar.UInt64


; Externals for interface FStar.FunctionalExtensionality


; <Start encoding let arrow>


(declare-fun FStar.FunctionalExtensionality.arrow (Term Term) Term)

(declare-fun Tm_arrow_28022b1931e0c9114f09925e8271570a () Term)
(declare-fun FStar.FunctionalExtensionality.arrow@tok () Term)

(declare-fun Tm_arrow_a7d5cc170be69663c495e8582d2bc62a (Term Term) Term)

; </end encoding let arrow>


; <Start encoding let efun>


(declare-fun FStar.FunctionalExtensionality.efun (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun@tok () Term)



; </end encoding let efun>


; <Start encoding let feq>




(declare-fun FStar.FunctionalExtensionality.feq (Term Term Term Term) Term)



(declare-fun Tm_arrow_a26edf208afb0682b12235c66ccbd71c () Term)
(declare-fun FStar.FunctionalExtensionality.feq@tok () Term)




; </end encoding let feq>


; <Start encoding val FStar.FunctionalExtensionality.on_domain>



(declare-fun FStar.FunctionalExtensionality.on_domain (Term Term Term) Term)



(declare-fun Tm_arrow_4644eedc14c2df3e417da1b7c07108e6 () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain@tok () Term)


; </end encoding val FStar.FunctionalExtensionality.on_domain>


; <Start encoding val FStar.FunctionalExtensionality.feq_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.feq_on_domain>


; <Start encoding val FStar.FunctionalExtensionality.idempotence_on_domain>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.idempotence_on_domain>


; <Start encoding let is_restricted>



(declare-fun FStar.FunctionalExtensionality.is_restricted (Term Term Term) Term)


(declare-fun Tm_arrow_b9e5e589ff6008bf9dc6c8ac06a76d9b () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted@tok () Term)



; </end encoding let is_restricted>


; <Start encoding let restricted_t>


(declare-fun FStar.FunctionalExtensionality.restricted_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_t@tok () Term)


(declare-fun Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e (Term Term) Term)

; </end encoding let restricted_t>


; <Start encoding let op_Hat_Subtraction_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater@tok () Term)

(declare-fun Tm_abs_134069e179ddf4705519081c391c4e10 (Term Term) Term)

; </end encoding let op_Hat_Subtraction_Greater>


; <Start encoding let on_dom>



(declare-fun FStar.FunctionalExtensionality.on_dom (Term Term Term) Term)


(declare-fun Tm_arrow_2c8a39c5d1179d9b2dbff37a928311ac () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom@tok () Term)



; </end encoding let on_dom>


; <Start encoding let on>


(declare-fun FStar.FunctionalExtensionality.on (Term Term Term) Term)



(declare-fun Tm_arrow_eab9bf17eb33be7efca62de21f27985c () Term)
(declare-fun FStar.FunctionalExtensionality.on@tok () Term)






; </end encoding let on>


; <Start encoding val FStar.FunctionalExtensionality.extensionality>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality@tok () Term)




; </end encoding val FStar.FunctionalExtensionality.extensionality>


; <Start encoding let arrow_g>


(declare-fun FStar.FunctionalExtensionality.arrow_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.arrow_g@tok () Term)



; </end encoding let arrow_g>


; <Start encoding let efun_g>


(declare-fun FStar.FunctionalExtensionality.efun_g (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.efun_g@tok () Term)



; </end encoding let efun_g>


; <Start encoding let feq_g>




(declare-fun FStar.FunctionalExtensionality.feq_g (Term Term Term Term) Term)



(declare-fun Tm_arrow_361ba84e60d273d78a5743d30c9dc908 () Term)
(declare-fun FStar.FunctionalExtensionality.feq_g@tok () Term)




; </end encoding let feq_g>


; <Start encoding val FStar.FunctionalExtensionality.on_domain_g>



(declare-fun FStar.FunctionalExtensionality.on_domain_g (Term Term Term) Term)



(declare-fun Tm_arrow_bf6371335aea4d90f7963f85ebad8f0d () Term)
(declare-fun FStar.FunctionalExtensionality.on_domain_g@tok () Term)


; </end encoding val FStar.FunctionalExtensionality.on_domain_g>


; <Start encoding val FStar.FunctionalExtensionality.feq_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.feq_on_domain_g@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.feq_on_domain_g>


; <Start encoding val FStar.FunctionalExtensionality.idempotence_on_domain_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.idempotence_on_domain_g@tok () Term)



; </end encoding val FStar.FunctionalExtensionality.idempotence_on_domain_g>


; <Start encoding let is_restricted_g>



(declare-fun FStar.FunctionalExtensionality.is_restricted_g (Term Term Term) Term)


(declare-fun Tm_arrow_eadb252d9886eeba4938e11c03ce9b79 () Term)
(declare-fun FStar.FunctionalExtensionality.is_restricted_g@tok () Term)



; </end encoding let is_restricted_g>


; <Start encoding let restricted_g_t>


(declare-fun FStar.FunctionalExtensionality.restricted_g_t (Term Term) Term)


(declare-fun FStar.FunctionalExtensionality.restricted_g_t@tok () Term)


(declare-fun Tm_refine_9185da06fca917c5514ae63042657873 (Term Term) Term)

; </end encoding let restricted_g_t>


; <Start encoding let op_Hat_Subtraction_Greater_Greater>

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater (Term Term) Term)

(declare-fun FStar.FunctionalExtensionality.op_Hat_Subtraction_Greater_Greater@tok () Term)



; </end encoding let op_Hat_Subtraction_Greater_Greater>


; <Start encoding let on_dom_g>



(declare-fun FStar.FunctionalExtensionality.on_dom_g (Term Term Term) Term)


(declare-fun Tm_arrow_2e3db44d1263cf9452aaa6907eac66cc () Term)
(declare-fun FStar.FunctionalExtensionality.on_dom_g@tok () Term)



; </end encoding let on_dom_g>


; <Start encoding let on_g>


(declare-fun FStar.FunctionalExtensionality.on_g (Term Term Term) Term)



(declare-fun Tm_arrow_93a363f6461271c3e18b18593d7d03bf () Term)
(declare-fun FStar.FunctionalExtensionality.on_g@tok () Term)






; </end encoding let on_g>


; <Start encoding val FStar.FunctionalExtensionality.extensionality_g>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun FStar.FunctionalExtensionality.extensionality_g@tok () Term)




; </end encoding val FStar.FunctionalExtensionality.extensionality_g>


; End Externals for interface FStar.FunctionalExtensionality


; Externals for module X64.Machine_s


; <Start encoding let nat32_max>

(declare-fun X64.Machine_s.nat32_max (Dummy_sort) Term)

; </end encoding let nat32_max>


; <Start encoding let nat64_max>

(declare-fun X64.Machine_s.nat64_max (Dummy_sort) Term)

; </end encoding let nat64_max>


; <Start encoding let nat128_max>

(declare-fun X64.Machine_s.nat128_max (Dummy_sort) Term)

; </end encoding let nat128_max>


; <Start encoding let uu___0>

(declare-fun X64.Machine_s.uu___0 (Dummy_sort) Term)

; </end encoding let uu___0>


; <Start encoding let uu___1>

(declare-fun X64.Machine_s.uu___1 (Dummy_sort) Term)

; </end encoding let uu___1>


; <Start encoding let uu___2>

(declare-fun X64.Machine_s.uu___2 (Dummy_sort) Term)

; </end encoding let uu___2>


; <Start encoding let nat64>

(declare-fun X64.Machine_s.nat64 () Term)
(declare-fun Tm_refine_a608a89bbc0a207d5920d37d906f7f40 () Term)

; </end encoding let nat64>


; <Start encoding val X64.Machine_s.int_to_nat64>

(declare-fun X64.Machine_s.int_to_nat64 (Term) Term)
(declare-fun Tm_refine_33c23e946048d3d79f362ad9f81ccafe (Term) Term)
;;;;;;;;;;;;;;;;i: Prims.int -> n: nat64{0 <= i && i < 0x10000000000000000 ==> i == n}
(declare-fun Tm_arrow_1aa3e2460ba68d51e3c61e72d27102af () Term)
(declare-fun X64.Machine_s.int_to_nat64@tok () Term)


; </end encoding val X64.Machine_s.int_to_nat64>


; <Start encoding let nat128>

(declare-fun X64.Machine_s.nat128 () Term)
(declare-fun Tm_refine_758ff42440a58a30c095e911b9c96f61 () Term)

; </end encoding let nat128>


; <Start encoding type X64.Machine_s.reg>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.reg () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rax () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rax
(declare-fun X64.Machine_s.Rax@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rbx () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rbx
(declare-fun X64.Machine_s.Rbx@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rcx () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rcx
(declare-fun X64.Machine_s.Rcx@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rdx () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rdx
(declare-fun X64.Machine_s.Rdx@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rsi () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rsi
(declare-fun X64.Machine_s.Rsi@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rdi () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rdi
(declare-fun X64.Machine_s.Rdi@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rbp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rbp
(declare-fun X64.Machine_s.Rbp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Rsp () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Rsp
(declare-fun X64.Machine_s.Rsp@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R8 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R8
(declare-fun X64.Machine_s.R8@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R9 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R9
(declare-fun X64.Machine_s.R9@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R10 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R10
(declare-fun X64.Machine_s.R10@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R11 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R11
(declare-fun X64.Machine_s.R11@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R12 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R12
(declare-fun X64.Machine_s.R12@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R13 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R13
(declare-fun X64.Machine_s.R13@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R14 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R14
(declare-fun X64.Machine_s.R14@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.R15 () Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.R15
(declare-fun X64.Machine_s.R15@tok () Term)

; <start constructor X64.Machine_s.reg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.reg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
X64.Machine_s.reg)))

; </end constructor X64.Machine_s.reg>


; <start constructor X64.Machine_s.Rax>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rax ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
113)
(= __@x0
X64.Machine_s.Rax)))

; </end constructor X64.Machine_s.Rax>


; <start constructor X64.Machine_s.Rbx>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rbx ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
115)
(= __@x0
X64.Machine_s.Rbx)))

; </end constructor X64.Machine_s.Rbx>


; <start constructor X64.Machine_s.Rcx>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rcx ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
X64.Machine_s.Rcx)))

; </end constructor X64.Machine_s.Rcx>


; <start constructor X64.Machine_s.Rdx>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rdx ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
119)
(= __@x0
X64.Machine_s.Rdx)))

; </end constructor X64.Machine_s.Rdx>


; <start constructor X64.Machine_s.Rsi>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rsi ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
121)
(= __@x0
X64.Machine_s.Rsi)))

; </end constructor X64.Machine_s.Rsi>


; <start constructor X64.Machine_s.Rdi>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rdi ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
123)
(= __@x0
X64.Machine_s.Rdi)))

; </end constructor X64.Machine_s.Rdi>


; <start constructor X64.Machine_s.Rbp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rbp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
125)
(= __@x0
X64.Machine_s.Rbp)))

; </end constructor X64.Machine_s.Rbp>


; <start constructor X64.Machine_s.Rsp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Rsp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
X64.Machine_s.Rsp)))

; </end constructor X64.Machine_s.Rsp>


; <start constructor X64.Machine_s.R8>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R8 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
129)
(= __@x0
X64.Machine_s.R8)))

; </end constructor X64.Machine_s.R8>


; <start constructor X64.Machine_s.R9>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R9 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
131)
(= __@x0
X64.Machine_s.R9)))

; </end constructor X64.Machine_s.R9>


; <start constructor X64.Machine_s.R10>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R10 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
133)
(= __@x0
X64.Machine_s.R10)))

; </end constructor X64.Machine_s.R10>


; <start constructor X64.Machine_s.R11>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R11 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
135)
(= __@x0
X64.Machine_s.R11)))

; </end constructor X64.Machine_s.R11>


; <start constructor X64.Machine_s.R12>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R12 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
X64.Machine_s.R12)))

; </end constructor X64.Machine_s.R12>


; <start constructor X64.Machine_s.R13>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R13 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
139)
(= __@x0
X64.Machine_s.R13)))

; </end constructor X64.Machine_s.R13>


; <start constructor X64.Machine_s.R14>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R14 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
141)
(= __@x0
X64.Machine_s.R14)))

; </end constructor X64.Machine_s.R14>


; <start constructor X64.Machine_s.R15>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.R15 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
143)
(= __@x0
X64.Machine_s.R15)))

; </end constructor X64.Machine_s.R15>


; </end encoding type X64.Machine_s.reg>


; <Start encoding assume X64.Machine_s.reg__uu___haseq>


; </end encoding assume X64.Machine_s.reg__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_Rax>

(declare-fun X64.Machine_s.uu___is_Rax (Term) Term)
;;;;;;;;;;;;;;;;projectee: reg -> Prims.bool
(declare-fun Tm_arrow_c7f0e9f7c9673b5fa7751bb905ce0362 () Term)
(declare-fun X64.Machine_s.uu___is_Rax@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rax>


; <Skipped let uu___is_Rax/>


; <Start encoding val X64.Machine_s.uu___is_Rbx>

(declare-fun X64.Machine_s.uu___is_Rbx (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rbx@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rbx>


; <Skipped let uu___is_Rbx/>


; <Start encoding val X64.Machine_s.uu___is_Rcx>

(declare-fun X64.Machine_s.uu___is_Rcx (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rcx@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rcx>


; <Skipped let uu___is_Rcx/>


; <Start encoding val X64.Machine_s.uu___is_Rdx>

(declare-fun X64.Machine_s.uu___is_Rdx (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rdx@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rdx>


; <Skipped let uu___is_Rdx/>


; <Start encoding val X64.Machine_s.uu___is_Rsi>

(declare-fun X64.Machine_s.uu___is_Rsi (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rsi@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rsi>


; <Skipped let uu___is_Rsi/>


; <Start encoding val X64.Machine_s.uu___is_Rdi>

(declare-fun X64.Machine_s.uu___is_Rdi (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rdi@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rdi>


; <Skipped let uu___is_Rdi/>


; <Start encoding val X64.Machine_s.uu___is_Rbp>

(declare-fun X64.Machine_s.uu___is_Rbp (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rbp@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rbp>


; <Skipped let uu___is_Rbp/>


; <Start encoding val X64.Machine_s.uu___is_Rsp>

(declare-fun X64.Machine_s.uu___is_Rsp (Term) Term)

(declare-fun X64.Machine_s.uu___is_Rsp@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Rsp>


; <Skipped let uu___is_Rsp/>


; <Start encoding val X64.Machine_s.uu___is_R8>

(declare-fun X64.Machine_s.uu___is_R8 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R8@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R8>


; <Skipped let uu___is_R8/>


; <Start encoding val X64.Machine_s.uu___is_R9>

(declare-fun X64.Machine_s.uu___is_R9 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R9@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R9>


; <Skipped let uu___is_R9/>


; <Start encoding val X64.Machine_s.uu___is_R10>

(declare-fun X64.Machine_s.uu___is_R10 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R10@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R10>


; <Skipped let uu___is_R10/>


; <Start encoding val X64.Machine_s.uu___is_R11>

(declare-fun X64.Machine_s.uu___is_R11 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R11@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R11>


; <Skipped let uu___is_R11/>


; <Start encoding val X64.Machine_s.uu___is_R12>

(declare-fun X64.Machine_s.uu___is_R12 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R12@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R12>


; <Skipped let uu___is_R12/>


; <Start encoding val X64.Machine_s.uu___is_R13>

(declare-fun X64.Machine_s.uu___is_R13 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R13@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R13>


; <Skipped let uu___is_R13/>


; <Start encoding val X64.Machine_s.uu___is_R14>

(declare-fun X64.Machine_s.uu___is_R14 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R14@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R14>


; <Skipped let uu___is_R14/>


; <Start encoding val X64.Machine_s.uu___is_R15>

(declare-fun X64.Machine_s.uu___is_R15 (Term) Term)

(declare-fun X64.Machine_s.uu___is_R15@tok () Term)

; </end encoding val X64.Machine_s.uu___is_R15>


; <Skipped let uu___is_R15/>


; <Start encoding type X64.Machine_s.maddr>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.maddr () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.MConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MConst_n (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.MConst
(declare-fun X64.Machine_s.MConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.MReg (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MReg_r (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MReg_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.MReg
(declare-fun X64.Machine_s.MReg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.MIndex (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_base (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_scale (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_index (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.MIndex_offset (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.MIndex
(declare-fun X64.Machine_s.MIndex@tok () Term)
;;;;;;;;;;;;;;;;n: Prims.int -> maddr
(declare-fun Tm_arrow_9414af839812526c8a04e362fb1cb22b () Term)
;;;;;;;;;;;;;;;;r: reg -> offset: Prims.int -> maddr
(declare-fun Tm_arrow_f3c2bcfda38ef61cb04cf914bbf7384e () Term)
;;;;;;;;;;;;;;;;base: reg -> scale: Prims.int -> index: reg -> offset: Prims.int -> maddr
(declare-fun Tm_arrow_bee6d14f905101e2f5bf160729816207 () Term)

; <start constructor X64.Machine_s.maddr>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.maddr ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
176)
(= __@x0
X64.Machine_s.maddr)))

; </end constructor X64.Machine_s.maddr>


; <start constructor X64.Machine_s.MConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.MConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
182)
(= __@x0
(X64.Machine_s.MConst (X64.Machine_s.MConst_n __@x0)))))

; </end constructor X64.Machine_s.MConst>


; <start constructor X64.Machine_s.MReg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.MReg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
187)
(= __@x0
(X64.Machine_s.MReg (X64.Machine_s.MReg_r __@x0)
(X64.Machine_s.MReg_offset __@x0)))))

; </end constructor X64.Machine_s.MReg>


; <start constructor X64.Machine_s.MIndex>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.MIndex ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
192)
(= __@x0
(X64.Machine_s.MIndex (X64.Machine_s.MIndex_base __@x0)
(X64.Machine_s.MIndex_scale __@x0)
(X64.Machine_s.MIndex_index __@x0)
(X64.Machine_s.MIndex_offset __@x0)))))

; </end constructor X64.Machine_s.MIndex>


; </end encoding type X64.Machine_s.maddr>


; <Start encoding assume X64.Machine_s.maddr__uu___haseq>


; </end encoding assume X64.Machine_s.maddr__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_MConst>

(declare-fun X64.Machine_s.uu___is_MConst (Term) Term)
;;;;;;;;;;;;;;;;projectee: maddr -> Prims.bool
(declare-fun Tm_arrow_ff927c11f46c62b4136fa0dbb46448d2 () Term)
(declare-fun X64.Machine_s.uu___is_MConst@tok () Term)

; </end encoding val X64.Machine_s.uu___is_MConst>


; <Skipped let uu___is_MConst/>


; <Start encoding val X64.Machine_s.__proj__MConst__item__n>

(declare-fun Tm_refine_ad649c559db000bf1dd08bb4e261413e () Term)
(declare-fun X64.Machine_s.__proj__MConst__item__n (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MConst? _} -> Prims.int
(declare-fun Tm_arrow_de03ee0e28d8cb42ea4684ab629083bb () Term)
(declare-fun X64.Machine_s.__proj__MConst__item__n@tok () Term)

; </end encoding val X64.Machine_s.__proj__MConst__item__n>


; <Skipped let __proj__MConst__item__n/>


; <Start encoding val X64.Machine_s.uu___is_MReg>

(declare-fun X64.Machine_s.uu___is_MReg (Term) Term)

(declare-fun X64.Machine_s.uu___is_MReg@tok () Term)

; </end encoding val X64.Machine_s.uu___is_MReg>


; <Skipped let uu___is_MReg/>


; <Start encoding val X64.Machine_s.__proj__MReg__item__r>

(declare-fun Tm_refine_49b6b7afc081bac09ce40febdab68891 () Term)
(declare-fun X64.Machine_s.__proj__MReg__item__r (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MReg? _} -> reg
(declare-fun Tm_arrow_e06612d97fbadc6befb17ec3b5955951 () Term)
(declare-fun X64.Machine_s.__proj__MReg__item__r@tok () Term)

; </end encoding val X64.Machine_s.__proj__MReg__item__r>


; <Skipped let __proj__MReg__item__r/>


; <Start encoding val X64.Machine_s.__proj__MReg__item__offset>


(declare-fun X64.Machine_s.__proj__MReg__item__offset (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MReg? _} -> Prims.int
(declare-fun Tm_arrow_c1ca35fec6314553caa7a9f1ab113b95 () Term)
(declare-fun X64.Machine_s.__proj__MReg__item__offset@tok () Term)

; </end encoding val X64.Machine_s.__proj__MReg__item__offset>


; <Skipped let __proj__MReg__item__offset/>


; <Start encoding val X64.Machine_s.uu___is_MIndex>

(declare-fun X64.Machine_s.uu___is_MIndex (Term) Term)

(declare-fun X64.Machine_s.uu___is_MIndex@tok () Term)

; </end encoding val X64.Machine_s.uu___is_MIndex>


; <Skipped let uu___is_MIndex/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__base>

(declare-fun Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125 () Term)
(declare-fun X64.Machine_s.__proj__MIndex__item__base (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MIndex? _} -> reg
(declare-fun Tm_arrow_5ce8d0ce0f3554237501631bb2423766 () Term)
(declare-fun X64.Machine_s.__proj__MIndex__item__base@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__base>


; <Skipped let __proj__MIndex__item__base/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__scale>


(declare-fun X64.Machine_s.__proj__MIndex__item__scale (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: maddr{MIndex? _} -> Prims.int
(declare-fun Tm_arrow_1c6dd63b73c30ae1c6642380dd180a24 () Term)
(declare-fun X64.Machine_s.__proj__MIndex__item__scale@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__scale>


; <Skipped let __proj__MIndex__item__scale/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__index>


(declare-fun X64.Machine_s.__proj__MIndex__item__index (Term) Term)


(declare-fun X64.Machine_s.__proj__MIndex__item__index@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__index>


; <Skipped let __proj__MIndex__item__index/>


; <Start encoding val X64.Machine_s.__proj__MIndex__item__offset>


(declare-fun X64.Machine_s.__proj__MIndex__item__offset (Term) Term)


(declare-fun X64.Machine_s.__proj__MIndex__item__offset@tok () Term)

; </end encoding val X64.Machine_s.__proj__MIndex__item__offset>


; <Skipped let __proj__MIndex__item__offset/>


; <Start encoding type X64.Machine_s.operand>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.operand () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.OConst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.OConst_n (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.OConst
(declare-fun X64.Machine_s.OConst@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.OReg (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.OReg_r (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.OReg
(declare-fun X64.Machine_s.OReg@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.OMem (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.OMem_m (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.OMem
(declare-fun X64.Machine_s.OMem@tok () Term)
;;;;;;;;;;;;;;;;n: Prims.int -> operand
(declare-fun Tm_arrow_b6d7f68e716a1e4fa718b096c4229d4c () Term)
;;;;;;;;;;;;;;;;r: reg -> operand
(declare-fun Tm_arrow_ed53777d74168b76de878051abd0d595 () Term)
;;;;;;;;;;;;;;;;m: maddr -> operand
(declare-fun Tm_arrow_bdd01546fc6f3c47560e779c36085b13 () Term)

; <start constructor X64.Machine_s.operand>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.operand ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
230)
(= __@x0
X64.Machine_s.operand)))

; </end constructor X64.Machine_s.operand>


; <start constructor X64.Machine_s.OConst>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.OConst ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
236)
(= __@x0
(X64.Machine_s.OConst (X64.Machine_s.OConst_n __@x0)))))

; </end constructor X64.Machine_s.OConst>


; <start constructor X64.Machine_s.OReg>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.OReg ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
241)
(= __@x0
(X64.Machine_s.OReg (X64.Machine_s.OReg_r __@x0)))))

; </end constructor X64.Machine_s.OReg>


; <start constructor X64.Machine_s.OMem>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.OMem ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
246)
(= __@x0
(X64.Machine_s.OMem (X64.Machine_s.OMem_m __@x0)))))

; </end constructor X64.Machine_s.OMem>


; </end encoding type X64.Machine_s.operand>


; <Start encoding assume X64.Machine_s.operand__uu___haseq>


; </end encoding assume X64.Machine_s.operand__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_OConst>

(declare-fun X64.Machine_s.uu___is_OConst (Term) Term)
;;;;;;;;;;;;;;;;projectee: operand -> Prims.bool
(declare-fun Tm_arrow_4c3cbca00af6e73051f04a1e4e4895f8 () Term)
(declare-fun X64.Machine_s.uu___is_OConst@tok () Term)

; </end encoding val X64.Machine_s.uu___is_OConst>


; <Skipped let uu___is_OConst/>


; <Start encoding val X64.Machine_s.__proj__OConst__item__n>

(declare-fun Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8 () Term)
(declare-fun X64.Machine_s.__proj__OConst__item__n (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: operand{OConst? _} -> Prims.int
(declare-fun Tm_arrow_e21ff7d2f895bc4d2ac0da255a240e50 () Term)
(declare-fun X64.Machine_s.__proj__OConst__item__n@tok () Term)

; </end encoding val X64.Machine_s.__proj__OConst__item__n>


; <Skipped let __proj__OConst__item__n/>


; <Start encoding val X64.Machine_s.uu___is_OReg>

(declare-fun X64.Machine_s.uu___is_OReg (Term) Term)

(declare-fun X64.Machine_s.uu___is_OReg@tok () Term)

; </end encoding val X64.Machine_s.uu___is_OReg>


; <Skipped let uu___is_OReg/>


; <Start encoding val X64.Machine_s.__proj__OReg__item__r>

(declare-fun Tm_refine_7c9e5bdb9582a858897946d48f9f4d58 () Term)
(declare-fun X64.Machine_s.__proj__OReg__item__r (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: operand{OReg? _} -> reg
(declare-fun Tm_arrow_4f28a4c90c6477e0d36845d97551ee54 () Term)
(declare-fun X64.Machine_s.__proj__OReg__item__r@tok () Term)

; </end encoding val X64.Machine_s.__proj__OReg__item__r>


; <Skipped let __proj__OReg__item__r/>


; <Start encoding val X64.Machine_s.uu___is_OMem>

(declare-fun X64.Machine_s.uu___is_OMem (Term) Term)

(declare-fun X64.Machine_s.uu___is_OMem@tok () Term)

; </end encoding val X64.Machine_s.uu___is_OMem>


; <Skipped let uu___is_OMem/>


; <Start encoding val X64.Machine_s.__proj__OMem__item__m>

(declare-fun Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6 () Term)
(declare-fun X64.Machine_s.__proj__OMem__item__m (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: operand{OMem? _} -> maddr
(declare-fun Tm_arrow_ce53f81782c867cbe295bf95855c832b () Term)
(declare-fun X64.Machine_s.__proj__OMem__item__m@tok () Term)

; </end encoding val X64.Machine_s.__proj__OMem__item__m>


; <Skipped let __proj__OMem__item__m/>


; <Start encoding type X64.Machine_s.precode>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.precode (Term Term) Term)
;;;;;;;;;;;;;;;;token
(declare-fun X64.Machine_s.precode@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Ins (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Ins_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Ins_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Ins_ins (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Ins
(declare-fun X64.Machine_s.Ins@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.Block (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Block_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Block_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.Block_block (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.Block
(declare-fun X64.Machine_s.Block@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.IfElse (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_ifCond (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_ifTrue (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.IfElse_ifFalse (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.IfElse
(declare-fun X64.Machine_s.IfElse@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Machine_s.While (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_t_ins (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_t_ocmp (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_whileCond (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Machine_s.While_whileBody (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Machine_s.While
(declare-fun X64.Machine_s.While@tok () Term)
;;;;;;;;;;;;;;;;ins: t_ins -> precode t_ins t_ocmp
(declare-fun Tm_arrow_8c2521134ec700b5462dee903e585327 () Term)
;;;;;;;;;;;;;;;;block: Prims.list (precode t_ins t_ocmp) -> precode t_ins t_ocmp
(declare-fun Tm_arrow_c8bb83bcb803188d7a2f598a8bd1f0a4 () Term)
;;;;;;;;;;;;;;;;ifCond: t_ocmp -> ifTrue: precode t_ins t_ocmp -> ifFalse: precode t_ins t_ocmp   -> precode t_ins t_ocmp
(declare-fun Tm_arrow_1ba522780cb69fa2f47cdbc62ca91419 () Term)
;;;;;;;;;;;;;;;;whileCond: t_ocmp -> whileBody: precode t_ins t_ocmp -> precode t_ins t_ocmp
(declare-fun Tm_arrow_1bcd23eed2c00c81fe04dc802553da1a () Term)

; <start constructor X64.Machine_s.precode>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.precode ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
268)
(exists ((@x0 Term) (@x1 Term))
 (! (= __@x0
(X64.Machine_s.precode @x0
@x1))
 
;;no pats
:qid is-X64.Machine_s.precode))))

; </end constructor X64.Machine_s.precode>


; <start constructor X64.Machine_s.Ins>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Ins ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
275)
(= __@x0
(X64.Machine_s.Ins (X64.Machine_s.Ins_t_ins __@x0)
(X64.Machine_s.Ins_t_ocmp __@x0)
(X64.Machine_s.Ins_ins __@x0)))))

; </end constructor X64.Machine_s.Ins>


; <start constructor X64.Machine_s.Block>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.Block ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
280)
(= __@x0
(X64.Machine_s.Block (X64.Machine_s.Block_t_ins __@x0)
(X64.Machine_s.Block_t_ocmp __@x0)
(X64.Machine_s.Block_block __@x0)))))

; </end constructor X64.Machine_s.Block>


; <start constructor X64.Machine_s.IfElse>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.IfElse ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
285)
(= __@x0
(X64.Machine_s.IfElse (X64.Machine_s.IfElse_t_ins __@x0)
(X64.Machine_s.IfElse_t_ocmp __@x0)
(X64.Machine_s.IfElse_ifCond __@x0)
(X64.Machine_s.IfElse_ifTrue __@x0)
(X64.Machine_s.IfElse_ifFalse __@x0)))))

; </end constructor X64.Machine_s.IfElse>


; <start constructor X64.Machine_s.While>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Machine_s.While ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
290)
(= __@x0
(X64.Machine_s.While (X64.Machine_s.While_t_ins __@x0)
(X64.Machine_s.While_t_ocmp __@x0)
(X64.Machine_s.While_whileCond __@x0)
(X64.Machine_s.While_whileBody __@x0)))))

; </end constructor X64.Machine_s.While>


; </end encoding type X64.Machine_s.precode>


; <Start encoding assume X64.Machine_s.precode__uu___haseq>


; </end encoding assume X64.Machine_s.precode__uu___haseq>


; <Start encoding val X64.Machine_s.uu___is_Ins>

(declare-fun X64.Machine_s.uu___is_Ins (Term Term Term) Term)
;;;;;;;;;;;;;;;;projectee: precode t_ins t_ocmp -> Prims.bool
(declare-fun Tm_arrow_8daf6690694745e3b2d4c7c748899c1d () Term)
(declare-fun X64.Machine_s.uu___is_Ins@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Ins>


; <Skipped let uu___is_Ins/>


; <Start encoding val X64.Machine_s.__proj__Ins__item__ins>

(declare-fun Tm_refine_8d23bd498b85d9ef871e961295abeefa (Term Term) Term)
(declare-fun X64.Machine_s.__proj__Ins__item__ins (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {Ins? _} -> t_ins
(declare-fun Tm_arrow_1ff3260e391a92b117b162ed7e8440a6 () Term)
(declare-fun X64.Machine_s.__proj__Ins__item__ins@tok () Term)

; </end encoding val X64.Machine_s.__proj__Ins__item__ins>


; <Skipped let __proj__Ins__item__ins/>


; <Start encoding val X64.Machine_s.uu___is_Block>

(declare-fun X64.Machine_s.uu___is_Block (Term Term Term) Term)

(declare-fun X64.Machine_s.uu___is_Block@tok () Term)

; </end encoding val X64.Machine_s.uu___is_Block>


; <Skipped let uu___is_Block/>


; <Start encoding val X64.Machine_s.__proj__Block__item__block>

(declare-fun Tm_refine_7931b24c4e7900a01f262ca0e3574c0e (Term Term) Term)
(declare-fun X64.Machine_s.__proj__Block__item__block (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {Block? _} -> Prims.list (precode t_ins t_ocmp)
(declare-fun Tm_arrow_a1d21575b2f23f80b4d2af9d71edb82e () Term)
(declare-fun X64.Machine_s.__proj__Block__item__block@tok () Term)

; </end encoding val X64.Machine_s.__proj__Block__item__block>


; <Skipped let __proj__Block__item__block/>


; <Start encoding val X64.Machine_s.uu___is_IfElse>

(declare-fun X64.Machine_s.uu___is_IfElse (Term Term Term) Term)

(declare-fun X64.Machine_s.uu___is_IfElse@tok () Term)

; </end encoding val X64.Machine_s.uu___is_IfElse>


; <Skipped let uu___is_IfElse/>


; <Start encoding val X64.Machine_s.__proj__IfElse__item__ifCond>

(declare-fun Tm_refine_4377826c4723fe1b7a6258fac9438e3d (Term Term) Term)
(declare-fun X64.Machine_s.__proj__IfElse__item__ifCond (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {IfElse? _} -> t_ocmp
(declare-fun Tm_arrow_e6b0c3d7c431b2a19ad8cabd3c849bb8 () Term)
(declare-fun X64.Machine_s.__proj__IfElse__item__ifCond@tok () Term)

; </end encoding val X64.Machine_s.__proj__IfElse__item__ifCond>


; <Skipped let __proj__IfElse__item__ifCond/>


; <Start encoding val X64.Machine_s.__proj__IfElse__item__ifTrue>


(declare-fun X64.Machine_s.__proj__IfElse__item__ifTrue (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {IfElse? _} -> precode t_ins t_ocmp
(declare-fun Tm_arrow_05c38c81ca8e5d074417a95300ffa5d4 () Term)
(declare-fun X64.Machine_s.__proj__IfElse__item__ifTrue@tok () Term)

; </end encoding val X64.Machine_s.__proj__IfElse__item__ifTrue>


; <Skipped let __proj__IfElse__item__ifTrue/>


; <Start encoding val X64.Machine_s.__proj__IfElse__item__ifFalse>


(declare-fun X64.Machine_s.__proj__IfElse__item__ifFalse (Term Term Term) Term)


(declare-fun X64.Machine_s.__proj__IfElse__item__ifFalse@tok () Term)

; </end encoding val X64.Machine_s.__proj__IfElse__item__ifFalse>


; <Skipped let __proj__IfElse__item__ifFalse/>


; <Start encoding val X64.Machine_s.uu___is_While>

(declare-fun X64.Machine_s.uu___is_While (Term Term Term) Term)

(declare-fun X64.Machine_s.uu___is_While@tok () Term)

; </end encoding val X64.Machine_s.uu___is_While>


; <Skipped let uu___is_While/>


; <Start encoding val X64.Machine_s.__proj__While__item__whileCond>

(declare-fun Tm_refine_45c3c142e427e91690ff415ec1656ffb (Term Term) Term)
(declare-fun X64.Machine_s.__proj__While__item__whileCond (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {While? _} -> t_ocmp
(declare-fun Tm_arrow_e2fb64671092bfded6c2990ab57154aa () Term)
(declare-fun X64.Machine_s.__proj__While__item__whileCond@tok () Term)

; </end encoding val X64.Machine_s.__proj__While__item__whileCond>


; <Skipped let __proj__While__item__whileCond/>


; <Start encoding val X64.Machine_s.__proj__While__item__whileBody>


(declare-fun X64.Machine_s.__proj__While__item__whileBody (Term Term Term) Term)

;;;;;;;;;;;;;;;;projectee: _: precode t_ins t_ocmp {While? _} -> precode t_ins t_ocmp
(declare-fun Tm_arrow_fff72ee73f15cca4c5756f235dbd9964 () Term)
(declare-fun X64.Machine_s.__proj__While__item__whileBody@tok () Term)

; </end encoding val X64.Machine_s.__proj__While__item__whileBody>


; <Skipped let __proj__While__item__whileBody/>


; <Start encoding let valid_dst>

(declare-fun X64.Machine_s.valid_dst (Term) Term)

(declare-fun X64.Machine_s.valid_dst@tok () Term)

; </end encoding let valid_dst>


; <Start encoding let dst_op>

(declare-fun X64.Machine_s.dst_op () Term)
(declare-fun Tm_refine_e85c4468bd6fa895770a44e5ae1526dc () Term)

; </end encoding let dst_op>


; End Externals for module X64.Machine_s


; Externals for module X64.Semantics_s


; <Skipped #set-options "--warn_error -350"/>


; <Start encoding let uint64>

(declare-fun X64.Semantics_s.uint64 (Dummy_sort) Term)

; </end encoding let uint64>


; <Start encoding let map>

(declare-fun X64.Semantics_s.map (Term Term) Term)

(declare-fun X64.Semantics_s.map@tok () Term)

; </end encoding let map>


; <Start encoding let op_String_Access>

(declare-fun X64.Semantics_s.op_String_Access (Term Term Term Term) Term)

(declare-fun X64.Semantics_s.op_String_Access@tok () Term)

; </end encoding let op_String_Access>


; <Start encoding let op_String_Assignment>

(declare-fun X64.Semantics_s.op_String_Assignment (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Map.t _ _ -> _: _ -> _: _ -> FStar.Map.t _ _
(declare-fun Tm_arrow_e76ad7ea1b49a51ebc304bcd6e344d98 (Term Term) Term)
;;;;;;;;;;;;;;;;_: FStar.Map.t _ _ -> _: _ -> _: _ -> FStar.Map.t _ _
(declare-fun Tm_arrow_ecbe25e460c8c11eb9fd7d4047b093d0 () Term)
(declare-fun X64.Semantics_s.op_String_Assignment@tok () Term)


; </end encoding let op_String_Assignment>


; <Start encoding type X64.Semantics_s.ins>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.ins () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Mov64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mov64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mov64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Mov64
(declare-fun X64.Semantics_s.Mov64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Add64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Add64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Add64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Add64
(declare-fun X64.Semantics_s.Add64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.AddLea64 (Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.AddLea64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.AddLea64_src1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.AddLea64_src2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.AddLea64
(declare-fun X64.Semantics_s.AddLea64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.AddCarry64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.AddCarry64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.AddCarry64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.AddCarry64
(declare-fun X64.Semantics_s.AddCarry64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Sub64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Sub64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Sub64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Sub64
(declare-fun X64.Semantics_s.Sub64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Mul64 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mul64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Mul64
(declare-fun X64.Semantics_s.Mul64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.IMul64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.IMul64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.IMul64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.IMul64
(declare-fun X64.Semantics_s.IMul64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Xor64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Xor64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Xor64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Xor64
(declare-fun X64.Semantics_s.Xor64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.And64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.And64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.And64_src (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.And64
(declare-fun X64.Semantics_s.And64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Shr64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Shr64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Shr64_amt (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Shr64
(declare-fun X64.Semantics_s.Shr64@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Shl64 (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Shl64_dst (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Shl64_amt (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Shl64
(declare-fun X64.Semantics_s.Shl64@tok () Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> src: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_7d09ea6761f591164821f0420e55d20e () Term)

;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> src1: X64.Machine_s.operand -> src2: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_d8804abb697e8efb0a8e70db4b3d0082 () Term)


;;;;;;;;;;;;;;;;src: X64.Machine_s.operand -> ins
(declare-fun Tm_arrow_f7cd6ae08a2c40fa4a393b74a1122569 () Term)






; <start constructor X64.Semantics_s.ins>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.ins ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
111)
(= __@x0
X64.Semantics_s.ins)))

; </end constructor X64.Semantics_s.ins>


; <start constructor X64.Semantics_s.Mov64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Mov64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
117)
(= __@x0
(X64.Semantics_s.Mov64 (X64.Semantics_s.Mov64_dst __@x0)
(X64.Semantics_s.Mov64_src __@x0)))))

; </end constructor X64.Semantics_s.Mov64>


; <start constructor X64.Semantics_s.Add64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Add64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
122)
(= __@x0
(X64.Semantics_s.Add64 (X64.Semantics_s.Add64_dst __@x0)
(X64.Semantics_s.Add64_src __@x0)))))

; </end constructor X64.Semantics_s.Add64>


; <start constructor X64.Semantics_s.AddLea64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.AddLea64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
127)
(= __@x0
(X64.Semantics_s.AddLea64 (X64.Semantics_s.AddLea64_dst __@x0)
(X64.Semantics_s.AddLea64_src1 __@x0)
(X64.Semantics_s.AddLea64_src2 __@x0)))))

; </end constructor X64.Semantics_s.AddLea64>


; <start constructor X64.Semantics_s.AddCarry64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.AddCarry64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
132)
(= __@x0
(X64.Semantics_s.AddCarry64 (X64.Semantics_s.AddCarry64_dst __@x0)
(X64.Semantics_s.AddCarry64_src __@x0)))))

; </end constructor X64.Semantics_s.AddCarry64>


; <start constructor X64.Semantics_s.Sub64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Sub64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
137)
(= __@x0
(X64.Semantics_s.Sub64 (X64.Semantics_s.Sub64_dst __@x0)
(X64.Semantics_s.Sub64_src __@x0)))))

; </end constructor X64.Semantics_s.Sub64>


; <start constructor X64.Semantics_s.Mul64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Mul64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
142)
(= __@x0
(X64.Semantics_s.Mul64 (X64.Semantics_s.Mul64_src __@x0)))))

; </end constructor X64.Semantics_s.Mul64>


; <start constructor X64.Semantics_s.IMul64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.IMul64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
147)
(= __@x0
(X64.Semantics_s.IMul64 (X64.Semantics_s.IMul64_dst __@x0)
(X64.Semantics_s.IMul64_src __@x0)))))

; </end constructor X64.Semantics_s.IMul64>


; <start constructor X64.Semantics_s.Xor64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Xor64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
152)
(= __@x0
(X64.Semantics_s.Xor64 (X64.Semantics_s.Xor64_dst __@x0)
(X64.Semantics_s.Xor64_src __@x0)))))

; </end constructor X64.Semantics_s.Xor64>


; <start constructor X64.Semantics_s.And64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.And64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
157)
(= __@x0
(X64.Semantics_s.And64 (X64.Semantics_s.And64_dst __@x0)
(X64.Semantics_s.And64_src __@x0)))))

; </end constructor X64.Semantics_s.And64>


; <start constructor X64.Semantics_s.Shr64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Shr64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
162)
(= __@x0
(X64.Semantics_s.Shr64 (X64.Semantics_s.Shr64_dst __@x0)
(X64.Semantics_s.Shr64_amt __@x0)))))

; </end constructor X64.Semantics_s.Shr64>


; <start constructor X64.Semantics_s.Shl64>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Shl64 ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
167)
(= __@x0
(X64.Semantics_s.Shl64 (X64.Semantics_s.Shl64_dst __@x0)
(X64.Semantics_s.Shl64_amt __@x0)))))

; </end constructor X64.Semantics_s.Shl64>


; </end encoding type X64.Semantics_s.ins>


; <Start encoding assume X64.Semantics_s.ins__uu___haseq>


; </end encoding assume X64.Semantics_s.ins__uu___haseq>


; <Start encoding val X64.Semantics_s.uu___is_Mov64>

(declare-fun X64.Semantics_s.uu___is_Mov64 (Term) Term)
;;;;;;;;;;;;;;;;projectee: ins -> Prims.bool
(declare-fun Tm_arrow_b24754724c12341f4c78eaa5e55663ca () Term)
(declare-fun X64.Semantics_s.uu___is_Mov64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Mov64>


; <Skipped let uu___is_Mov64/>


; <Start encoding val X64.Semantics_s.__proj__Mov64__item__dst>

(declare-fun Tm_refine_e8de62b85869f7c1a1780736ed143295 () Term)
(declare-fun X64.Semantics_s.__proj__Mov64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Mov64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_dce0c0216e1c68ca98bf41ab4af3b592 () Term)
(declare-fun X64.Semantics_s.__proj__Mov64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Mov64__item__dst>


; <Skipped let __proj__Mov64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__Mov64__item__src>


(declare-fun X64.Semantics_s.__proj__Mov64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Mov64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_b8771cbd3e717b7ecc8c91ef6865ef74 () Term)
(declare-fun X64.Semantics_s.__proj__Mov64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Mov64__item__src>


; <Skipped let __proj__Mov64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_Add64>

(declare-fun X64.Semantics_s.uu___is_Add64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_Add64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Add64>


; <Skipped let uu___is_Add64/>


; <Start encoding val X64.Semantics_s.__proj__Add64__item__dst>

(declare-fun Tm_refine_6fab9340d0ab4fd98129eb512f268790 () Term)
(declare-fun X64.Semantics_s.__proj__Add64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Add64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_415e9c482470a002ccbc685c36feb633 () Term)
(declare-fun X64.Semantics_s.__proj__Add64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Add64__item__dst>


; <Skipped let __proj__Add64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__Add64__item__src>


(declare-fun X64.Semantics_s.__proj__Add64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Add64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_920f3bb0b6f3134788910e3aa904262a () Term)
(declare-fun X64.Semantics_s.__proj__Add64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Add64__item__src>


; <Skipped let __proj__Add64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_AddLea64>

(declare-fun X64.Semantics_s.uu___is_AddLea64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_AddLea64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_AddLea64>


; <Skipped let uu___is_AddLea64/>


; <Start encoding val X64.Semantics_s.__proj__AddLea64__item__dst>

(declare-fun Tm_refine_e04f937679d9c74a6caf8aa7b9f98189 () Term)
(declare-fun X64.Semantics_s.__proj__AddLea64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{AddLea64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_fb5ccab15162fcd9dc5302440e3b49ac () Term)
(declare-fun X64.Semantics_s.__proj__AddLea64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__AddLea64__item__dst>


; <Skipped let __proj__AddLea64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__AddLea64__item__src1>


(declare-fun X64.Semantics_s.__proj__AddLea64__item__src1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{AddLea64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_b5efd52585cd5ef59db151052fbd131d () Term)
(declare-fun X64.Semantics_s.__proj__AddLea64__item__src1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__AddLea64__item__src1>


; <Skipped let __proj__AddLea64__item__src1/>


; <Start encoding val X64.Semantics_s.__proj__AddLea64__item__src2>


(declare-fun X64.Semantics_s.__proj__AddLea64__item__src2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__AddLea64__item__src2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__AddLea64__item__src2>


; <Skipped let __proj__AddLea64__item__src2/>


; <Start encoding val X64.Semantics_s.uu___is_AddCarry64>

(declare-fun X64.Semantics_s.uu___is_AddCarry64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_AddCarry64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_AddCarry64>


; <Skipped let uu___is_AddCarry64/>


; <Start encoding val X64.Semantics_s.__proj__AddCarry64__item__dst>

(declare-fun Tm_refine_16a53ffd1bab892d408baed6f0393a33 () Term)
(declare-fun X64.Semantics_s.__proj__AddCarry64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{AddCarry64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_83ef28a509a8506b1f6ce2ba9b0c18f7 () Term)
(declare-fun X64.Semantics_s.__proj__AddCarry64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__AddCarry64__item__dst>


; <Skipped let __proj__AddCarry64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__AddCarry64__item__src>


(declare-fun X64.Semantics_s.__proj__AddCarry64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{AddCarry64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_821ed355b5d5c7702e224f22f655b5aa () Term)
(declare-fun X64.Semantics_s.__proj__AddCarry64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__AddCarry64__item__src>


; <Skipped let __proj__AddCarry64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_Sub64>

(declare-fun X64.Semantics_s.uu___is_Sub64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_Sub64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Sub64>


; <Skipped let uu___is_Sub64/>


; <Start encoding val X64.Semantics_s.__proj__Sub64__item__dst>

(declare-fun Tm_refine_569023f890bbff681c285b9f9a216ade () Term)
(declare-fun X64.Semantics_s.__proj__Sub64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Sub64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_4db8a0046aba47b840ce0bacba21e7ea () Term)
(declare-fun X64.Semantics_s.__proj__Sub64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Sub64__item__dst>


; <Skipped let __proj__Sub64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__Sub64__item__src>


(declare-fun X64.Semantics_s.__proj__Sub64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Sub64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_00d33969141605800c30ea669782f6c6 () Term)
(declare-fun X64.Semantics_s.__proj__Sub64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Sub64__item__src>


; <Skipped let __proj__Sub64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_Mul64>

(declare-fun X64.Semantics_s.uu___is_Mul64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_Mul64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Mul64>


; <Skipped let uu___is_Mul64/>


; <Start encoding val X64.Semantics_s.__proj__Mul64__item__src>

(declare-fun Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b () Term)
(declare-fun X64.Semantics_s.__proj__Mul64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Mul64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_1b7338387c93fcd70d52fb82eeb46cd5 () Term)
(declare-fun X64.Semantics_s.__proj__Mul64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Mul64__item__src>


; <Skipped let __proj__Mul64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_IMul64>

(declare-fun X64.Semantics_s.uu___is_IMul64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_IMul64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_IMul64>


; <Skipped let uu___is_IMul64/>


; <Start encoding val X64.Semantics_s.__proj__IMul64__item__dst>

(declare-fun Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e () Term)
(declare-fun X64.Semantics_s.__proj__IMul64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{IMul64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_1a41efc2303d48ded56e34bbc56bd963 () Term)
(declare-fun X64.Semantics_s.__proj__IMul64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__IMul64__item__dst>


; <Skipped let __proj__IMul64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__IMul64__item__src>


(declare-fun X64.Semantics_s.__proj__IMul64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{IMul64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_825a5d41c9ccfcbb4f28c6a581f1d150 () Term)
(declare-fun X64.Semantics_s.__proj__IMul64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__IMul64__item__src>


; <Skipped let __proj__IMul64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_Xor64>

(declare-fun X64.Semantics_s.uu___is_Xor64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_Xor64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Xor64>


; <Skipped let uu___is_Xor64/>


; <Start encoding val X64.Semantics_s.__proj__Xor64__item__dst>

(declare-fun Tm_refine_1957040814f569aff4b252943fe77fdd () Term)
(declare-fun X64.Semantics_s.__proj__Xor64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Xor64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_b22c6da47d894a71bdeeb52c16ae7073 () Term)
(declare-fun X64.Semantics_s.__proj__Xor64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Xor64__item__dst>


; <Skipped let __proj__Xor64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__Xor64__item__src>


(declare-fun X64.Semantics_s.__proj__Xor64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Xor64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_7c16cf92b3151c26cdd9f19e5b5a1fc8 () Term)
(declare-fun X64.Semantics_s.__proj__Xor64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Xor64__item__src>


; <Skipped let __proj__Xor64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_And64>

(declare-fun X64.Semantics_s.uu___is_And64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_And64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_And64>


; <Skipped let uu___is_And64/>


; <Start encoding val X64.Semantics_s.__proj__And64__item__dst>

(declare-fun Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2 () Term)
(declare-fun X64.Semantics_s.__proj__And64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{And64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_9d55ceb83ef05c2ec852a74cca020166 () Term)
(declare-fun X64.Semantics_s.__proj__And64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__And64__item__dst>


; <Skipped let __proj__And64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__And64__item__src>


(declare-fun X64.Semantics_s.__proj__And64__item__src (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{And64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_68f6bd45cc439ed4fe8ba0ef38bcba45 () Term)
(declare-fun X64.Semantics_s.__proj__And64__item__src@tok () Term)

; </end encoding val X64.Semantics_s.__proj__And64__item__src>


; <Skipped let __proj__And64__item__src/>


; <Start encoding val X64.Semantics_s.uu___is_Shr64>

(declare-fun X64.Semantics_s.uu___is_Shr64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_Shr64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Shr64>


; <Skipped let uu___is_Shr64/>


; <Start encoding val X64.Semantics_s.__proj__Shr64__item__dst>

(declare-fun Tm_refine_e31d0af1473307c26c9e917a73600ad0 () Term)
(declare-fun X64.Semantics_s.__proj__Shr64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Shr64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_7276133325e2ad1a2fd4e74180840da9 () Term)
(declare-fun X64.Semantics_s.__proj__Shr64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Shr64__item__dst>


; <Skipped let __proj__Shr64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__Shr64__item__amt>


(declare-fun X64.Semantics_s.__proj__Shr64__item__amt (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Shr64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_117f3939cbb95b7238346582888f2170 () Term)
(declare-fun X64.Semantics_s.__proj__Shr64__item__amt@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Shr64__item__amt>


; <Skipped let __proj__Shr64__item__amt/>


; <Start encoding val X64.Semantics_s.uu___is_Shl64>

(declare-fun X64.Semantics_s.uu___is_Shl64 (Term) Term)

(declare-fun X64.Semantics_s.uu___is_Shl64@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_Shl64>


; <Skipped let uu___is_Shl64/>


; <Start encoding val X64.Semantics_s.__proj__Shl64__item__dst>

(declare-fun Tm_refine_b4ab27333df03bce36b56906586a3225 () Term)
(declare-fun X64.Semantics_s.__proj__Shl64__item__dst (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Shl64? _} -> X64.Machine_s.dst_op
(declare-fun Tm_arrow_2ee168e402e1889215d73b9f8abad805 () Term)
(declare-fun X64.Semantics_s.__proj__Shl64__item__dst@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Shl64__item__dst>


; <Skipped let __proj__Shl64__item__dst/>


; <Start encoding val X64.Semantics_s.__proj__Shl64__item__amt>


(declare-fun X64.Semantics_s.__proj__Shl64__item__amt (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ins{Shl64? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_b66464593fa49f1f4ef0fdffbc350c18 () Term)
(declare-fun X64.Semantics_s.__proj__Shl64__item__amt@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Shl64__item__amt>


; <Skipped let __proj__Shl64__item__amt/>


; <Start encoding type X64.Semantics_s.ocmp>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.ocmp () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.OEq (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OEq_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OEq_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.OEq
(declare-fun X64.Semantics_s.OEq@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.ONe (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.ONe_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.ONe_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.ONe
(declare-fun X64.Semantics_s.ONe@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.OLe (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OLe_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OLe_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.OLe
(declare-fun X64.Semantics_s.OLe@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.OGe (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OGe_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OGe_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.OGe
(declare-fun X64.Semantics_s.OGe@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.OLt (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OLt_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OLt_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.OLt
(declare-fun X64.Semantics_s.OLt@tok () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.OGt (Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OGt_o1 (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.OGt_o2 (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.OGt
(declare-fun X64.Semantics_s.OGt@tok () Term)
;;;;;;;;;;;;;;;;o1: X64.Machine_s.operand -> o2: X64.Machine_s.operand -> ocmp
(declare-fun Tm_arrow_644b7bc00b7392f41480b0e470aa09c1 () Term)






; <start constructor X64.Semantics_s.ocmp>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.ocmp ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
281)
(= __@x0
X64.Semantics_s.ocmp)))

; </end constructor X64.Semantics_s.ocmp>


; <start constructor X64.Semantics_s.OEq>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.OEq ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
287)
(= __@x0
(X64.Semantics_s.OEq (X64.Semantics_s.OEq_o1 __@x0)
(X64.Semantics_s.OEq_o2 __@x0)))))

; </end constructor X64.Semantics_s.OEq>


; <start constructor X64.Semantics_s.ONe>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.ONe ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
292)
(= __@x0
(X64.Semantics_s.ONe (X64.Semantics_s.ONe_o1 __@x0)
(X64.Semantics_s.ONe_o2 __@x0)))))

; </end constructor X64.Semantics_s.ONe>


; <start constructor X64.Semantics_s.OLe>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.OLe ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
297)
(= __@x0
(X64.Semantics_s.OLe (X64.Semantics_s.OLe_o1 __@x0)
(X64.Semantics_s.OLe_o2 __@x0)))))

; </end constructor X64.Semantics_s.OLe>


; <start constructor X64.Semantics_s.OGe>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.OGe ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
302)
(= __@x0
(X64.Semantics_s.OGe (X64.Semantics_s.OGe_o1 __@x0)
(X64.Semantics_s.OGe_o2 __@x0)))))

; </end constructor X64.Semantics_s.OGe>


; <start constructor X64.Semantics_s.OLt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.OLt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
307)
(= __@x0
(X64.Semantics_s.OLt (X64.Semantics_s.OLt_o1 __@x0)
(X64.Semantics_s.OLt_o2 __@x0)))))

; </end constructor X64.Semantics_s.OLt>


; <start constructor X64.Semantics_s.OGt>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.OGt ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
312)
(= __@x0
(X64.Semantics_s.OGt (X64.Semantics_s.OGt_o1 __@x0)
(X64.Semantics_s.OGt_o2 __@x0)))))

; </end constructor X64.Semantics_s.OGt>


; </end encoding type X64.Semantics_s.ocmp>


; <Start encoding assume X64.Semantics_s.ocmp__uu___haseq>


; </end encoding assume X64.Semantics_s.ocmp__uu___haseq>


; <Start encoding val X64.Semantics_s.uu___is_OEq>

(declare-fun X64.Semantics_s.uu___is_OEq (Term) Term)
;;;;;;;;;;;;;;;;projectee: ocmp -> Prims.bool
(declare-fun Tm_arrow_b7fceb06ee22d1aacd62867883b0f37b () Term)
(declare-fun X64.Semantics_s.uu___is_OEq@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_OEq>


; <Skipped let uu___is_OEq/>


; <Start encoding val X64.Semantics_s.__proj__OEq__item__o1>

(declare-fun Tm_refine_495233c1b3965f79901632003c360db5 () Term)
(declare-fun X64.Semantics_s.__proj__OEq__item__o1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ocmp{OEq? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_9c1ec535632d8c54a5b44c4a90cce42d () Term)
(declare-fun X64.Semantics_s.__proj__OEq__item__o1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OEq__item__o1>


; <Skipped let __proj__OEq__item__o1/>


; <Start encoding val X64.Semantics_s.__proj__OEq__item__o2>


(declare-fun X64.Semantics_s.__proj__OEq__item__o2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__OEq__item__o2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OEq__item__o2>


; <Skipped let __proj__OEq__item__o2/>


; <Start encoding val X64.Semantics_s.uu___is_ONe>

(declare-fun X64.Semantics_s.uu___is_ONe (Term) Term)

(declare-fun X64.Semantics_s.uu___is_ONe@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_ONe>


; <Skipped let uu___is_ONe/>


; <Start encoding val X64.Semantics_s.__proj__ONe__item__o1>

(declare-fun Tm_refine_48e1a980bff417eb8ecda8fd755a7052 () Term)
(declare-fun X64.Semantics_s.__proj__ONe__item__o1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ocmp{ONe? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_aefd2e951d82b82f7d5a7cde33e10b1d () Term)
(declare-fun X64.Semantics_s.__proj__ONe__item__o1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__ONe__item__o1>


; <Skipped let __proj__ONe__item__o1/>


; <Start encoding val X64.Semantics_s.__proj__ONe__item__o2>


(declare-fun X64.Semantics_s.__proj__ONe__item__o2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__ONe__item__o2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__ONe__item__o2>


; <Skipped let __proj__ONe__item__o2/>


; <Start encoding val X64.Semantics_s.uu___is_OLe>

(declare-fun X64.Semantics_s.uu___is_OLe (Term) Term)

(declare-fun X64.Semantics_s.uu___is_OLe@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_OLe>


; <Skipped let uu___is_OLe/>


; <Start encoding val X64.Semantics_s.__proj__OLe__item__o1>

(declare-fun Tm_refine_57f9b3587a37875d37de2b8ee309c52c () Term)
(declare-fun X64.Semantics_s.__proj__OLe__item__o1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ocmp{OLe? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_634c935d93a8506b69cf02587c71a3e3 () Term)
(declare-fun X64.Semantics_s.__proj__OLe__item__o1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OLe__item__o1>


; <Skipped let __proj__OLe__item__o1/>


; <Start encoding val X64.Semantics_s.__proj__OLe__item__o2>


(declare-fun X64.Semantics_s.__proj__OLe__item__o2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__OLe__item__o2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OLe__item__o2>


; <Skipped let __proj__OLe__item__o2/>


; <Start encoding val X64.Semantics_s.uu___is_OGe>

(declare-fun X64.Semantics_s.uu___is_OGe (Term) Term)

(declare-fun X64.Semantics_s.uu___is_OGe@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_OGe>


; <Skipped let uu___is_OGe/>


; <Start encoding val X64.Semantics_s.__proj__OGe__item__o1>

(declare-fun Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e () Term)
(declare-fun X64.Semantics_s.__proj__OGe__item__o1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ocmp{OGe? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_bf38e13eaa1ae2d584977c7f67b000f5 () Term)
(declare-fun X64.Semantics_s.__proj__OGe__item__o1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OGe__item__o1>


; <Skipped let __proj__OGe__item__o1/>


; <Start encoding val X64.Semantics_s.__proj__OGe__item__o2>


(declare-fun X64.Semantics_s.__proj__OGe__item__o2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__OGe__item__o2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OGe__item__o2>


; <Skipped let __proj__OGe__item__o2/>


; <Start encoding val X64.Semantics_s.uu___is_OLt>

(declare-fun X64.Semantics_s.uu___is_OLt (Term) Term)

(declare-fun X64.Semantics_s.uu___is_OLt@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_OLt>


; <Skipped let uu___is_OLt/>


; <Start encoding val X64.Semantics_s.__proj__OLt__item__o1>

(declare-fun Tm_refine_e3f7ed102fdc0dee07045511829455f8 () Term)
(declare-fun X64.Semantics_s.__proj__OLt__item__o1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ocmp{OLt? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_9a05b270c59cf866aab796ad564c7f8f () Term)
(declare-fun X64.Semantics_s.__proj__OLt__item__o1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OLt__item__o1>


; <Skipped let __proj__OLt__item__o1/>


; <Start encoding val X64.Semantics_s.__proj__OLt__item__o2>


(declare-fun X64.Semantics_s.__proj__OLt__item__o2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__OLt__item__o2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OLt__item__o2>


; <Skipped let __proj__OLt__item__o2/>


; <Start encoding val X64.Semantics_s.uu___is_OGt>

(declare-fun X64.Semantics_s.uu___is_OGt (Term) Term)

(declare-fun X64.Semantics_s.uu___is_OGt@tok () Term)

; </end encoding val X64.Semantics_s.uu___is_OGt>


; <Skipped let uu___is_OGt/>


; <Start encoding val X64.Semantics_s.__proj__OGt__item__o1>

(declare-fun Tm_refine_078a14331436c956e0be06364feefcd5 () Term)
(declare-fun X64.Semantics_s.__proj__OGt__item__o1 (Term) Term)

;;;;;;;;;;;;;;;;projectee: _: ocmp{OGt? _} -> X64.Machine_s.operand
(declare-fun Tm_arrow_da595d4440caae22680b4a81b07753b2 () Term)
(declare-fun X64.Semantics_s.__proj__OGt__item__o1@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OGt__item__o1>


; <Skipped let __proj__OGt__item__o1/>


; <Start encoding val X64.Semantics_s.__proj__OGt__item__o2>


(declare-fun X64.Semantics_s.__proj__OGt__item__o2 (Term) Term)


(declare-fun X64.Semantics_s.__proj__OGt__item__o2@tok () Term)

; </end encoding val X64.Semantics_s.__proj__OGt__item__o2>


; <Skipped let __proj__OGt__item__o2/>


; <Start encoding let code>

(declare-fun X64.Semantics_s.code () Term)

; </end encoding let code>


; <Start encoding let codes>

(declare-fun X64.Semantics_s.codes () Term)

; </end encoding let codes>


; <Start encoding let mem>

(declare-fun X64.Semantics_s.mem () Term)

; </end encoding let mem>


; <Start encoding val X64.Semantics_s.mem_make>

;;;;;;;;;;;;;;;;_: Prims.int -> v
(declare-fun Tm_arrow_8928427c3e013c0cd8946aaaf1c65a29 (Term) Term)
(declare-fun X64.Semantics_s.mem_make (Term Term Term) Term)

(declare-fun Tm_refine_c644247a73759f086aca82c4165d2bf4 (Term Term Term) Term)
;;;;;;;;;;;;;;;;mappings: (_: Prims.int -> v) -> domain: FStar.Set.set Prims.int   -> m:     map Prims.int v       { FStar.Set.equal (FStar.Map.domain m) domain /\         (forall (i: Prims.int). {:pattern FStar.Map.sel m i} FStar.Map.sel m i == mappings i) }
(declare-fun Tm_arrow_a213b30021e54b7a2c9ed42509eec657 () Term)
(declare-fun X64.Semantics_s.mem_make@tok () Term)


; </end encoding val X64.Semantics_s.mem_make>


; <Start encoding type X64.Semantics_s.state>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.state () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Semantics_s.Mkstate (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mkstate_ok (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mkstate_regs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mkstate_flags (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Semantics_s.Mkstate_mem (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Semantics_s.Mkstate
(declare-fun X64.Semantics_s.Mkstate@tok () Term)
;;;;;;;;;;;;;;;;_: X64.Machine_s.reg -> Type
(declare-fun Tm_arrow_73862e447730cb7be03c891c89cb5703 () Term)
(declare-fun Tm_abs_2da3d120bd5ce08465191535a1915477 () Term)


;;;;;;;;;;;;;;;;ok: Prims.bool ->     regs: FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg (fun _ -> uint64) ->     flags: uint64 ->     mem: mem   -> state
(declare-fun Tm_arrow_a0936d9f16d1767fa0d69715fe066403 () Term)

; <start constructor X64.Semantics_s.state>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.state ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
384)
(= __@x0
X64.Semantics_s.state)))

; </end constructor X64.Semantics_s.state>


; <start constructor X64.Semantics_s.Mkstate>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Semantics_s.Mkstate ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
392)
(= __@x0
(X64.Semantics_s.Mkstate (X64.Semantics_s.Mkstate_ok __@x0)
(X64.Semantics_s.Mkstate_regs __@x0)
(X64.Semantics_s.Mkstate_flags __@x0)
(X64.Semantics_s.Mkstate_mem __@x0)))))

; </end constructor X64.Semantics_s.Mkstate>


; </end encoding type X64.Semantics_s.state>


; <Start encoding val X64.Semantics_s.__proj__Mkstate__item__ok>

(declare-fun X64.Semantics_s.__proj__Mkstate__item__ok (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> Prims.bool
(declare-fun Tm_arrow_07de4ab51a9872907b4c4f360d028b9c () Term)
(declare-fun X64.Semantics_s.__proj__Mkstate__item__ok@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Mkstate__item__ok>


; <Skipped let __proj__Mkstate__item__ok/>


; <Start encoding val X64.Semantics_s.__proj__Mkstate__item__regs>

(declare-fun X64.Semantics_s.__proj__Mkstate__item__regs (Term) Term)


;;;;;;;;;;;;;;;;projectee: state -> FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg (fun _ -> uint64)
(declare-fun Tm_arrow_193bd525e26cb6146836f2ec97504c13 () Term)
(declare-fun X64.Semantics_s.__proj__Mkstate__item__regs@tok () Term)



; </end encoding val X64.Semantics_s.__proj__Mkstate__item__regs>


; <Skipped let __proj__Mkstate__item__regs/>


; <Start encoding val X64.Semantics_s.__proj__Mkstate__item__flags>

(declare-fun X64.Semantics_s.__proj__Mkstate__item__flags (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> uint64
(declare-fun Tm_arrow_6f4c9386f1dee25485b476db0d507e31 () Term)
(declare-fun X64.Semantics_s.__proj__Mkstate__item__flags@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Mkstate__item__flags>


; <Skipped let __proj__Mkstate__item__flags/>


; <Start encoding val X64.Semantics_s.__proj__Mkstate__item__mem>

(declare-fun X64.Semantics_s.__proj__Mkstate__item__mem (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> mem
(declare-fun Tm_arrow_4380e06cbc738210f08e966ff153a603 () Term)
(declare-fun X64.Semantics_s.__proj__Mkstate__item__mem@tok () Term)

; </end encoding val X64.Semantics_s.__proj__Mkstate__item__mem>


; <Skipped let __proj__Mkstate__item__mem/>


; <Start encoding let u>

(declare-fun Tm_refine_4a56532dbb80b238f6b7d86890fac538 () Term)
(declare-fun X64.Semantics_s.u (Term) Term)

;;;;;;;;;;;;;;;;i: Prims.int{FStar.UInt.fits i 64} -> uint64
(declare-fun Tm_arrow_30a1747eb30b7cd0a445ff6b4e586b5d () Term)
(declare-fun X64.Semantics_s.u@tok () Term)


; </end encoding let u>


; <Start encoding val X64.Semantics_s.havoc>

(declare-fun X64.Semantics_s.havoc (Term Term) Term)
;;;;;;;;;;;;;;;;_: state -> _: ins -> uint64
(declare-fun Tm_arrow_736730c751df501ddbdd99ff93e3ea1f () Term)
(declare-fun X64.Semantics_s.havoc@tok () Term)

; </end encoding val X64.Semantics_s.havoc>


; <Start encoding let eval_reg>

(declare-fun X64.Semantics_s.eval_reg (Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> s: state -> uint64
(declare-fun Tm_arrow_1a9ea2324a7f331b78f24d32bc298d74 () Term)
(declare-fun X64.Semantics_s.eval_reg@tok () Term)

; </end encoding let eval_reg>


; <Start encoding let eval_mem>

(declare-fun X64.Semantics_s.eval_mem (Term Term) Term)
;;;;;;;;;;;;;;;;ptr: Prims.int -> s: state -> uint64
(declare-fun Tm_arrow_49930f872a1b4f0c4a21e87c8bc6f697 () Term)
(declare-fun X64.Semantics_s.eval_mem@tok () Term)

; </end encoding let eval_mem>


; <Start encoding let eval_maddr>

(declare-fun X64.Semantics_s.eval_maddr (Term Term) Term)
;;;;;;;;;;;;;;;;m: X64.Machine_s.maddr -> s: state -> Prims.int
(declare-fun Tm_arrow_fd3b684681156cb51e250f195e54bd31 () Term)
(declare-fun X64.Semantics_s.eval_maddr@tok () Term)




; </end encoding let eval_maddr>


; <Start encoding let eval_operand>

(declare-fun X64.Semantics_s.eval_operand (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: state -> uint64
(declare-fun Tm_arrow_d010e301e4f9437d7808de18cb3c0276 () Term)
(declare-fun X64.Semantics_s.eval_operand@tok () Term)


; </end encoding let eval_operand>


; <Start encoding let update_reg'>

(declare-fun X64.Semantics_s.update_reg_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> v: uint64 -> s: state -> state
(declare-fun Tm_arrow_beacf58e68754869b7f6912f804d53db () Term)
(declare-fun X64.Semantics_s.update_reg_@tok () Term)



;;;;;;;;;;;;;;;;r': X64.Machine_s.reg -> uint64
(declare-fun Tm_arrow_645426269fc615b2b182027e55cc5771 () Term)
(declare-fun Tm_abs_ea7cecc32baf46388a93622b2a6ebd75 (Term Term Term) Term)

; </end encoding let update_reg'>


; <Start encoding let update_mem>

(declare-fun X64.Semantics_s.update_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;ptr: Prims.int -> v: uint64 -> s: state -> state
(declare-fun Tm_arrow_464cef0f670d75f2eb11a711f92a8cd4 () Term)
(declare-fun X64.Semantics_s.update_mem@tok () Term)

; </end encoding let update_mem>


; <Start encoding let valid_maddr>

(declare-fun X64.Semantics_s.valid_maddr (Term Term) Term)
;;;;;;;;;;;;;;;;m: X64.Machine_s.maddr -> s: state -> Prims.bool
(declare-fun Tm_arrow_25e865d496d6acc6c9cbcf36c0743c2a () Term)
(declare-fun X64.Semantics_s.valid_maddr@tok () Term)

; </end encoding let valid_maddr>


; <Start encoding let valid_operand>

(declare-fun X64.Semantics_s.valid_operand (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: state -> Prims.bool
(declare-fun Tm_arrow_29bd83258fce538537677ec712c07468 () Term)
(declare-fun X64.Semantics_s.valid_operand@tok () Term)

; </end encoding let valid_operand>


; <Start encoding let update_operand_preserve_flags'>

(declare-fun X64.Semantics_s.update_operand_preserve_flags_ (Term Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.dst_op -> v: uint64 -> s: state -> state
(declare-fun Tm_arrow_31f1eea6e9bc7f841fbd38b216ad426a () Term)
(declare-fun X64.Semantics_s.update_operand_preserve_flags_@tok () Term)

; </end encoding let update_operand_preserve_flags'>


; <Start encoding let update_operand'>

(declare-fun X64.Semantics_s.update_operand_ (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.dst_op -> ins: ins -> v: uint64 -> s: state -> state
(declare-fun Tm_arrow_752a7c682b883722b45e82f8d8fa4580 () Term)
(declare-fun X64.Semantics_s.update_operand_@tok () Term)

; </end encoding let update_operand'>


; <Start encoding let cf>

(declare-fun X64.Semantics_s.cf (Term) Term)
;;;;;;;;;;;;;;;;flags: uint64 -> Prims.bool
(declare-fun Tm_arrow_89e1d5413bf33e2cb65d8b4b2b8481c8 () Term)
(declare-fun X64.Semantics_s.cf@tok () Term)

; </end encoding let cf>


; <Start encoding let update_cf>

(declare-fun X64.Semantics_s.update_cf (Term Term) Term)
(declare-fun Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 (Term) Term)
;;;;;;;;;;;;;;;;flags: uint64 -> new_cf: Prims.bool -> new_flags: uint64{cf new_flags == new_cf}
(declare-fun Tm_arrow_6c744c8229cce2fff0d5e51bd1964a74 () Term)
(declare-fun X64.Semantics_s.update_cf@tok () Term)


; </end encoding let update_cf>


; <Start encoding let st>

(declare-fun X64.Semantics_s.st (Term) Term)

(declare-fun X64.Semantics_s.st@tok () Term)
;;;;;;;;;;;;;;;;_: state -> a & state
(declare-fun Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 (Term) Term)

; </end encoding let st>


; <Start encoding let return>

(declare-fun X64.Semantics_s.return (Term Term) Term)
;;;;;;;;;;;;;;;;x: a -> st a
(declare-fun Tm_arrow_86d064662bcf85b9eb1464580bdc216b () Term)
(declare-fun X64.Semantics_s.return@tok () Term)

(declare-fun Tm_abs_ca9ce7c040ca62129548600eb9451f97 (Term Term) Term)

; </end encoding let return>


; <Start encoding let bind>

;;;;;;;;;;;;;;;;_: a -> st b
(declare-fun Tm_arrow_1d09dabe58a73d85b47e6a30e452f8c5 (Term Term) Term)
(declare-fun X64.Semantics_s.bind (Term Term Term Term) Term)

;;;;;;;;;;;;;;;;m: st a -> f: (_: a -> st b) -> st b
(declare-fun Tm_arrow_98681b11ebb4a3beb37d5cc02918ccc9 () Term)
(declare-fun X64.Semantics_s.bind@tok () Term)


(declare-fun Tm_abs_705ca510c4d3ac6fb27d1b743c80ce54 (Term Term Term) Term)

; </end encoding let bind>


; <Start encoding let get>

(declare-fun X64.Semantics_s.get (Dummy_sort) Term)

; </end encoding let get>


; <Start encoding let set>

(declare-fun X64.Semantics_s.set (Term) Term)
;;;;;;;;;;;;;;;;s: state -> st Prims.unit
(declare-fun Tm_arrow_0bce0521ab9e4af8ed830c07754bb01a () Term)
(declare-fun X64.Semantics_s.set@tok () Term)
;;;;;;;;;;;;;;;;_: state -> Prims.unit & state
(declare-fun Tm_arrow_025dbaceb4b862aa04a44e930c7828ea () Term)
(declare-fun Tm_abs_7388af26d889d13d76f214161e20afe9 (Term) Term)

; </end encoding let set>


; <Start encoding let fail>

(declare-fun X64.Semantics_s.fail (Dummy_sort) Term)

; </end encoding let fail>


; <Start encoding let check>


(declare-fun X64.Semantics_s.check (Term) Term)

;;;;;;;;;;;;;;;;valid: (_: state -> Prims.bool) -> st Prims.unit
(declare-fun Tm_arrow_11c5a607d68b869ede186f0aea9c94be () Term)
(declare-fun X64.Semantics_s.check@tok () Term)


(declare-fun Tm_abs_f0959d9e8c38aa2643c83552fbc44802 () Term)

(declare-fun Tm_abs_081baac0dab8f4468ac989ea2ddf99a3 () Term)

(declare-fun Tm_abs_60abe48c0a7e2ce27b03455669d2bcc1 (Term) Term)

; </end encoding let check>


; <Start encoding let run>

(declare-fun X64.Semantics_s.run (Term Term) Term)
;;;;;;;;;;;;;;;;f: st Prims.unit -> s: state -> state
(declare-fun Tm_arrow_56e8bf7a49c3f67ad067d888c2f028ad () Term)
(declare-fun X64.Semantics_s.run@tok () Term)

; </end encoding let run>


; <Start encoding let update_operand_preserve_flags>

(declare-fun X64.Semantics_s.update_operand_preserve_flags (Term Term) Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> v: uint64 -> st Prims.unit
(declare-fun Tm_arrow_d2c23435aeb72ca097dd64864396df6c () Term)
(declare-fun X64.Semantics_s.update_operand_preserve_flags@tok () Term)





(declare-fun Tm_abs_48b30fb9771ec355f67c7d3774818ccd (Term Term) Term)

; </end encoding let update_operand_preserve_flags>


; <Start encoding let update_operand>

(declare-fun X64.Semantics_s.update_operand (Term Term Term) Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> ins: ins -> v: uint64 -> st Prims.unit
(declare-fun Tm_arrow_42c36ab8cb4e71093ab035534c131592 () Term)
(declare-fun X64.Semantics_s.update_operand@tok () Term)





(declare-fun Tm_abs_7e07efd9b30556d81e07106a395f40cd (Term Term Term) Term)

; </end encoding let update_operand>


; <Start encoding let update_reg>

(declare-fun X64.Semantics_s.update_reg (Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> v: uint64 -> st Prims.unit
(declare-fun Tm_arrow_86a2ece66c8a4690fde39fd480d1a750 () Term)
(declare-fun X64.Semantics_s.update_reg@tok () Term)

(declare-fun Tm_abs_9308350a750cd3e48424d434c40f4e9f (Term Term) Term)

; </end encoding let update_reg>


; <Start encoding let update_flags>

(declare-fun X64.Semantics_s.update_flags (Term) Term)
;;;;;;;;;;;;;;;;new_flags: uint64 -> st Prims.unit
(declare-fun Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd () Term)
(declare-fun X64.Semantics_s.update_flags@tok () Term)

(declare-fun Tm_abs_2c81f4a4818392ccafc16cff9167306e (Term) Term)

; </end encoding let update_flags>


; <Start encoding let example>

(declare-fun X64.Semantics_s.example (Term Term) Term)
;;;;;;;;;;;;;;;;dst: X64.Machine_s.dst_op -> src: X64.Machine_s.operand -> st Prims.unit
(declare-fun Tm_arrow_4a4ab03f283a5c6ec72a0a99e0f86d78 () Term)
(declare-fun X64.Semantics_s.example@tok () Term)













(declare-fun Tm_abs_3eddfac935ebb5b544189785ac56d995 (Term Term) Term)

; </end encoding let example>


; <Start encoding let logxor>

(declare-fun X64.Semantics_s.logxor (Term Term) Term)
;;;;;;;;;;;;;;;;x: Prims.int -> y: Prims.int -> X64.Machine_s.nat64
(declare-fun Tm_arrow_95cc84be19c7dbf3373bc85bd42c7e06 () Term)
(declare-fun X64.Semantics_s.logxor@tok () Term)

; </end encoding let logxor>


; <Start encoding let logxor_uint64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Semantics_s.logxor_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Semantics_s.logxor_uint64@tok () Term)
(declare-fun Tm_refine_9e523552080158c04fafd9dbbcf2e767 () Term)

; </end encoding let logxor_uint64>


; <Start encoding let logand>

(declare-fun X64.Semantics_s.logand (Term Term) Term)

(declare-fun X64.Semantics_s.logand@tok () Term)

; </end encoding let logand>


; <Start encoding let logand_uint64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Semantics_s.logand_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Semantics_s.logand_uint64@tok () Term)


; </end encoding let logand_uint64>


; <Start encoding let shift_right>

(declare-fun X64.Semantics_s.shift_right (Term Term) Term)

(declare-fun X64.Semantics_s.shift_right@tok () Term)

; </end encoding let shift_right>


; <Start encoding let shift_right_uint64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Semantics_s.shift_right_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Semantics_s.shift_right_uint64@tok () Term)


; </end encoding let shift_right_uint64>


; <Start encoding let shift_left>

(declare-fun X64.Semantics_s.shift_left (Term Term) Term)

(declare-fun X64.Semantics_s.shift_left@tok () Term)

; </end encoding let shift_left>


; <Start encoding let shift_left_uint64>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Semantics_s.shift_left_uint64 (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Semantics_s.shift_left_uint64@tok () Term)


; </end encoding let shift_left_uint64>


; <Start encoding let eval_ocmp>

(declare-fun X64.Semantics_s.eval_ocmp (Term Term) Term)
;;;;;;;;;;;;;;;;s: state -> c: ocmp -> Prims.bool
(declare-fun Tm_arrow_fc110cf3b76cd3f78b83b52b0130c9fc () Term)
(declare-fun X64.Semantics_s.eval_ocmp@tok () Term)

; </end encoding let eval_ocmp>


; <Skipped val X64.Semantics_s.add_mod64/>


; <Start encoding let add_mod64>

(declare-fun X64.Semantics_s.add_mod64 (Term Term) Term)
(declare-fun Tm_refine_541d8b5bedd79f842c043b0167c0294d (Term Term) Term)
;;;;;;;;;;;;;;;;a: uint64 -> b: uint64 -> Prims.Pure uint64
(declare-fun Tm_arrow_138cc3596db49ce3d1db89e8fede3c3c () Term)
(declare-fun X64.Semantics_s.add_mod64@tok () Term)


; </end encoding let add_mod64>


; <Skipped val X64.Semantics_s.sub_mod64/>


; <Start encoding let sub_mod64>

(declare-fun X64.Semantics_s.sub_mod64 (Term Term) Term)
(declare-fun Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f (Term Term) Term)
;;;;;;;;;;;;;;;;a: uint64 -> b: uint64 -> Prims.Pure uint64
(declare-fun Tm_arrow_7b358dd252041e123df4a27027abcfe5 () Term)
(declare-fun X64.Semantics_s.sub_mod64@tok () Term)


; </end encoding let sub_mod64>


; <Skipped val X64.Semantics_s.mul_mod64/>


; <Start encoding let mul_mod64>

(declare-fun X64.Semantics_s.mul_mod64 (Term Term) Term)
(declare-fun Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 (Term Term) Term)
;;;;;;;;;;;;;;;;a: uint64 -> b: uint64 -> Prims.Pure uint64
(declare-fun Tm_arrow_71329c19d1678051dfa1cb6b8458f4e9 () Term)
(declare-fun X64.Semantics_s.mul_mod64@tok () Term)


; </end encoding let mul_mod64>


; <Skipped val X64.Semantics_s.mul_div64/>


; <Start encoding let mul_div64>

(declare-fun X64.Semantics_s.mul_div64 (Term Term) Term)
(declare-fun Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 (Term Term) Term)
;;;;;;;;;;;;;;;;a: uint64 -> b: uint64 -> Prims.Pure uint64
(declare-fun Tm_arrow_98cf46f64bdd73e5fdac64cc62963f1e () Term)
(declare-fun X64.Semantics_s.mul_div64@tok () Term)


; </end encoding let mul_div64>


; <Start encoding let eval_ins>

(declare-fun X64.Semantics_s.eval_ins (Term) Term)
;;;;;;;;;;;;;;;;ins: ins -> st Prims.unit
(declare-fun Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff () Term)
(declare-fun X64.Semantics_s.eval_ins@tok () Term)







(declare-fun Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c (Term Term Term) Term)





(declare-fun Tm_abs_06436ba00a5bd9a8083ce074f3a147a1 (Term Term Term) Term)









(declare-fun Tm_abs_e79b8a999a7f57f0040921f533b269ce (Term Term Term) Term)









(declare-fun Tm_abs_724242e80027e2a267145da56a098c8b (Term Term Term) Term)









(declare-fun Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0 (Term Term Term) Term)








(declare-fun Tm_abs_e208dc70abce4505afd7c75d2e94a8a4 (Term Term Term) Term)









(declare-fun Tm_abs_bb6aff5b98a517373530d9e388c5f89b (Term Term Term) Term)










(declare-fun Tm_abs_613dc199a18050b65a16a60fdb912f4f (Term Term Term) Term)













(declare-fun Tm_abs_da887bd33a5a6c5a992d65f196996f0a (Term Term) Term)










(declare-fun Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b (Term Term Term) Term)









(declare-fun Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5 (Term Term) Term)

(declare-fun Tm_abs_10261c42e10a9394c7f8c711bf81e6e4 (Term) Term)

; </end encoding let eval_ins>


; <Skipped val X64.Semantics_s.eval_code/>


; <Skipped val X64.Semantics_s.eval_codes/>


; <Skipped val X64.Semantics_s.eval_while/>


; <Start encoding let rec eval_code and eval_codes and eval_while>

;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun X64.Semantics_s.eval_while.fuel_instrumented (Fuel Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun X64.Semantics_s.eval_while.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun X64.Semantics_s.eval_codes.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun X64.Semantics_s.eval_codes.fuel_instrumented_token () Term)
;;;;;;;;;;;;;;;;Fuel-instrumented function name
(declare-fun X64.Semantics_s.eval_code.fuel_instrumented (Fuel Term Term Term) Term)
;;;;;;;;;;;;;;;;Token for fuel-instrumented partial applications
(declare-fun X64.Semantics_s.eval_code.fuel_instrumented_token () Term)
(declare-fun X64.Semantics_s.eval_code (Term Term Term) Term)
(declare-fun X64.Semantics_s.eval_code@tok () Term)
(declare-fun X64.Semantics_s.eval_codes (Term Term Term) Term)
(declare-fun X64.Semantics_s.eval_codes@tok () Term)
(declare-fun X64.Semantics_s.eval_while (Term Term Term Term) Term)
(declare-fun X64.Semantics_s.eval_while@tok () Term)
;;;;;;;;;;;;;;;;c: code -> fuel: Prims.nat -> s: state -> Prims.Tot (FStar.Pervasives.Native.option state)
(declare-fun Tm_arrow_059320c4dc9350b320fac216233deddf () Term)
;;;;;;;;;;;;;;;;l: codes -> fuel: Prims.nat -> s: state -> Prims.Tot (FStar.Pervasives.Native.option state)
(declare-fun Tm_arrow_9845a7d7cfcd92ffb9261217008654df () Term)
;;;;;;;;;;;;;;;;b: ocmp -> c: code -> fuel: Prims.nat -> s: state   -> Prims.Tot (FStar.Pervasives.Native.option state)
(declare-fun Tm_arrow_71fc45e62ba7cfd66865f0f696c29c0a () Term)

; </end encoding let rec eval_code and eval_codes and eval_while>


; End Externals for module X64.Semantics_s


; Externals for interface X64.Vale.Regs_i


; <Start encoding let t>

(declare-fun X64.Vale.Regs_i.t () Term)

(declare-fun Tm_abs_bde726dfeb2837d96e43a155f7c873f5 () Term)

; </end encoding let t>


; <Start encoding val X64.Vale.Regs_i.equal>

(declare-fun X64.Vale.Regs_i.equal (Term Term) Term)
;;;;;;;;;;;;;;;;regs1: t -> regs2: t -> Type
(declare-fun Tm_arrow_09ce3637a0bad3dcc1b6043f68d63f8f () Term)
(declare-fun X64.Vale.Regs_i.equal@tok () Term)

; </end encoding val X64.Vale.Regs_i.equal>


; <Start encoding val X64.Vale.Regs_i.lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_intro (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_intro@tok () Term)

; </end encoding val X64.Vale.Regs_i.lemma_equal_intro>


; <Start encoding val X64.Vale.Regs_i.lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_elim (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Regs_i.lemma_equal_elim@tok () Term)

; </end encoding val X64.Vale.Regs_i.lemma_equal_elim>


; End Externals for interface X64.Vale.Regs_i


; Externals for interface X64.Vale.State_i


; <Start encoding let mem>

(declare-fun X64.Vale.State_i.mem () Term)

; </end encoding let mem>


; <Start encoding type X64.Vale.State_i.state>

;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.State_i.state () Term)
;;;;;;;;;;;;;;;;Constructor
(declare-fun X64.Vale.State_i.Mkstate (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_ok (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_regs (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_flags (Term) Term)
;;;;;;;;;;;;;;;;Projector
(declare-fun X64.Vale.State_i.Mkstate_mem (Term) Term)
;;;;;;;;;;;;;;;;data constructor proxy: X64.Vale.State_i.Mkstate
(declare-fun X64.Vale.State_i.Mkstate@tok () Term)
;;;;;;;;;;;;;;;;ok: Prims.bool ->     regs: X64.Vale.Regs_i.t ->     flags: X64.Machine_s.nat64 ->     mem: FStar.Map.t Prims.int X64.Machine_s.nat64   -> state
(declare-fun Tm_arrow_bf3c56506b8f5eb79926980cc656f10f () Term)

; <start constructor X64.Vale.State_i.state>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.State_i.state ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
101)
(= __@x0
X64.Vale.State_i.state)))

; </end constructor X64.Vale.State_i.state>


; <start constructor X64.Vale.State_i.Mkstate>

;;;;;;;;;;;;;;;;Discriminator definition
(define-fun is-X64.Vale.State_i.Mkstate ((__@x0 Term)) Bool
 (and (= (Term_constr_id __@x0)
107)
(= __@x0
(X64.Vale.State_i.Mkstate (X64.Vale.State_i.Mkstate_ok __@x0)
(X64.Vale.State_i.Mkstate_regs __@x0)
(X64.Vale.State_i.Mkstate_flags __@x0)
(X64.Vale.State_i.Mkstate_mem __@x0)))))

; </end constructor X64.Vale.State_i.Mkstate>


; </end encoding type X64.Vale.State_i.state>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__ok>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__ok (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> Prims.bool
(declare-fun Tm_arrow_5c5fed4129bbf9b3e7583d154e69c21e () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__ok@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__ok>


; <Skipped let __proj__Mkstate__item__ok/>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__regs>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__regs (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> X64.Vale.Regs_i.t
(declare-fun Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__regs@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__regs>


; <Skipped let __proj__Mkstate__item__regs/>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__flags>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__flags (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_01c6bddba2d6959bf2984d5bb35626d1 () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__flags@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__flags>


; <Skipped let __proj__Mkstate__item__flags/>


; <Start encoding val X64.Vale.State_i.__proj__Mkstate__item__mem>

(declare-fun X64.Vale.State_i.__proj__Mkstate__item__mem (Term) Term)
;;;;;;;;;;;;;;;;projectee: state -> FStar.Map.t Prims.int X64.Machine_s.nat64
(declare-fun Tm_arrow_91f4557325018bd0b2143a809bc61a2b () Term)
(declare-fun X64.Vale.State_i.__proj__Mkstate__item__mem@tok () Term)

; </end encoding val X64.Vale.State_i.__proj__Mkstate__item__mem>


; <Skipped let __proj__Mkstate__item__mem/>


; <Start encoding let reg_to_int>

(declare-fun X64.Vale.State_i.reg_to_int (Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> Prims.int
(declare-fun Tm_arrow_fa17d9caaadf5f567f6aea6dba96f000 () Term)
(declare-fun X64.Vale.State_i.reg_to_int@tok () Term)

; </end encoding let reg_to_int>


; <Start encoding let eval_reg>

(declare-fun X64.Vale.State_i.eval_reg (Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> s: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_9574d1338dc0d43578d8515dff1c58e1 () Term)
(declare-fun X64.Vale.State_i.eval_reg@tok () Term)

; </end encoding let eval_reg>


; <Start encoding let eval_mem>

(declare-fun X64.Vale.State_i.eval_mem (Term Term) Term)
;;;;;;;;;;;;;;;;ptr: Prims.int -> s: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_0784e42cf7e01da169e63a3999455727 () Term)
(declare-fun X64.Vale.State_i.eval_mem@tok () Term)

; </end encoding let eval_mem>


; <Start encoding let eval_maddr>

(declare-fun X64.Vale.State_i.eval_maddr (Term Term) Term)
;;;;;;;;;;;;;;;;m: X64.Machine_s.maddr -> s: state -> Prims.int
(declare-fun Tm_arrow_2d5a81cb81806c2a7a6cc9eb180f8c6c () Term)
(declare-fun X64.Vale.State_i.eval_maddr@tok () Term)




; </end encoding let eval_maddr>


; <Start encoding let eval_operand>

(declare-fun X64.Vale.State_i.eval_operand (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: state -> X64.Machine_s.nat64
(declare-fun Tm_arrow_e6e156fd62f2c5ec5ac072a8caacf3ef () Term)
(declare-fun X64.Vale.State_i.eval_operand@tok () Term)


; </end encoding let eval_operand>


; <Start encoding let update_reg>

(declare-fun X64.Vale.State_i.update_reg (Term Term Term) Term)
;;;;;;;;;;;;;;;;r: X64.Machine_s.reg -> v: X64.Machine_s.nat64 -> s: state -> state
(declare-fun Tm_arrow_1a371b6f5cc469875cee38e0de08dd87 () Term)
(declare-fun X64.Vale.State_i.update_reg@tok () Term)



;;;;;;;;;;;;;;;;r': X64.Machine_s.reg -> X64.Machine_s.nat64
(declare-fun Tm_arrow_1093f8e31085b67d2aaada502a6d45cd () Term)
(declare-fun Tm_abs_53c55973f12c5cd6dba65c1cc5016627 (Term Term Term) Term)

; </end encoding let update_reg>


; <Start encoding let update_mem>

(declare-fun X64.Vale.State_i.update_mem (Term Term Term) Term)
;;;;;;;;;;;;;;;;ptr: Prims.int -> v: X64.Machine_s.nat64 -> s: state -> state
(declare-fun Tm_arrow_b7f5df9f909755c0217c731e463eb8d9 () Term)
(declare-fun X64.Vale.State_i.update_mem@tok () Term)

; </end encoding let update_mem>


; <Start encoding let valid_maddr>

(declare-fun X64.Vale.State_i.valid_maddr (Term Term) Term)
;;;;;;;;;;;;;;;;m: X64.Machine_s.maddr -> s: state -> Type
(declare-fun Tm_arrow_ea1f1fcdcc5e42130d314013afa41640 () Term)
(declare-fun X64.Vale.State_i.valid_maddr@tok () Term)

; </end encoding let valid_maddr>


; <Start encoding let valid_operand>

(declare-fun X64.Vale.State_i.valid_operand (Term Term) Term)
;;;;;;;;;;;;;;;;o: X64.Machine_s.operand -> s: state -> Type
(declare-fun Tm_arrow_bf8a51e61f47e3e72fdc2e0e9f99e5f4 () Term)
(declare-fun X64.Vale.State_i.valid_operand@tok () Term)

; </end encoding let valid_operand>


; <Start encoding let state_eq>

(declare-fun X64.Vale.State_i.state_eq (Term Term) Term)
;;;;;;;;;;;;;;;;s0: state -> s1: state -> Type
(declare-fun Tm_arrow_ee5a24814994841774b9f7427f3ef695 () Term)
(declare-fun X64.Vale.State_i.state_eq@tok () Term)

; </end encoding let state_eq>


; <Start encoding let add_wrap>

(declare-fun X64.Vale.State_i.add_wrap (Term Term) Term)

(declare-fun X64.Vale.State_i.add_wrap@tok () Term)

; </end encoding let add_wrap>


; <Start encoding let eq_int>

(declare-fun X64.Vale.State_i.eq_int (Term Term) Term)
;;;;;;;;;;;;;;;;i1: Prims.int -> i2: Prims.int -> Prims.logical
(declare-fun Tm_arrow_7418b65d64c02ff38a120101f758e12a () Term)
(declare-fun X64.Vale.State_i.eq_int@tok () Term)

; </end encoding let eq_int>


; End Externals for interface X64.Vale.State_i


; Externals for module TransparentMap


; <Start encoding let map>

(declare-fun TransparentMap.map (Term Term) Term)

(declare-fun TransparentMap.map@tok () Term)



; </end encoding let map>


; <Start encoding let sel>

(declare-fun TransparentMap.sel (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;m: map k v -> key: k -> v
(declare-fun Tm_arrow_b924d6b1ea097e2422c6e94739f4239a () Term)
(declare-fun TransparentMap.sel@tok () Term)

; </end encoding let sel>


; <Start encoding let upd>

(declare-fun TransparentMap.upd (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;m: map k v -> key: k -> value: v -> map k v
(declare-fun Tm_arrow_3242d51f11275ab7564d18b86520c533 () Term)
(declare-fun TransparentMap.upd@tok () Term)



(declare-fun Tm_abs_331bcae1afb9bcb02e34122de03c3f66 (Term Term Term Term Term) Term)

; </end encoding let upd>


; <Start encoding let sel_upd1>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun TransparentMap.sel_upd1 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun TransparentMap.sel_upd1@tok () Term)

; </end encoding let sel_upd1>


; <Start encoding let sel_upd2>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun TransparentMap.sel_upd2 (Term Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun TransparentMap.sel_upd2@tok () Term)

; </end encoding let sel_upd2>


; <Start encoding let equal>

(declare-fun TransparentMap.equal (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;m1: map key value -> m2: map key value -> Prims.logical
(declare-fun Tm_arrow_cd07bfb70969d51cec6bc1e4db8603e6 () Term)
(declare-fun TransparentMap.equal@tok () Term)





; </end encoding let equal>


; <Skipped val TransparentMap.lemma_equal_intro/>


; <Skipped val TransparentMap.lemma_equal_elim/>


; <Skipped val TransparentMap.lemma_equal_refl/>


; <Start encoding let lemma_equal_intro>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun TransparentMap.lemma_equal_intro (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun TransparentMap.lemma_equal_intro@tok () Term)

; </end encoding let lemma_equal_intro>


; <Start encoding let lemma_equal_elim>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun TransparentMap.lemma_equal_elim (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun TransparentMap.lemma_equal_elim@tok () Term)

; </end encoding let lemma_equal_elim>


; <Start encoding let lemma_equal_refl>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun TransparentMap.lemma_equal_refl (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun TransparentMap.lemma_equal_refl@tok () Term)

; </end encoding let lemma_equal_refl>


; End Externals for module TransparentMap


; Externals for interface X64.Vale.StateLemmas_i


; <Start encoding let ok'>

(declare-fun X64.Vale.StateLemmas_i.ok_ (Term) Term)

(declare-fun X64.Vale.StateLemmas_i.ok_@tok () Term)

; </end encoding let ok'>


; <Start encoding let regs'>

(declare-fun X64.Vale.StateLemmas_i.regs_ (Term) Term)



(declare-fun X64.Vale.StateLemmas_i.regs_@tok () Term)



; </end encoding let regs'>


; <Start encoding let flags'>

(declare-fun X64.Vale.StateLemmas_i.flags_ (Term) Term)

(declare-fun X64.Vale.StateLemmas_i.flags_@tok () Term)

; </end encoding let flags'>


; <Start encoding let mem'>

(declare-fun X64.Vale.StateLemmas_i.mem_ (Term) Term)

(declare-fun X64.Vale.StateLemmas_i.mem_@tok () Term)

; </end encoding let mem'>


; <Start encoding val X64.Vale.StateLemmas_i.state_to_S>

(declare-fun X64.Vale.StateLemmas_i.state_to_S (Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> X64.Semantics_s.state
(declare-fun Tm_arrow_fed75580a3b4a5e0a8ecea05886461c1 () Term)
(declare-fun X64.Vale.StateLemmas_i.state_to_S@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.state_to_S>


; <Start encoding val X64.Vale.StateLemmas_i.state_of_S>

(declare-fun X64.Vale.StateLemmas_i.state_of_S (Term) Term)
;;;;;;;;;;;;;;;;s: X64.Semantics_s.state -> X64.Vale.State_i.state
(declare-fun Tm_arrow_a3f5e6e5e7ac70d74d7868ff19ceff91 () Term)
(declare-fun X64.Vale.StateLemmas_i.state_of_S@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.state_of_S>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_ok>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_ok (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_ok@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_ok>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_flags>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_flags (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_flags@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_flags>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_mem_contains>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_mem_contains (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_mem_contains@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_mem_contains>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_mem_sel>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_mem_sel (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_mem_sel@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_mem_sel>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_reg>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_reg (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_reg@tok () Term)




; </end encoding val X64.Vale.StateLemmas_i.lemma_to_reg>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_eval_operand>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_eval_operand (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_eval_operand@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_eval_operand>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_valid_operand>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_valid_operand (Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_valid_operand@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_valid_operand>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_of_to>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_of_to (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_of_to@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_of_to>


; <Start encoding val X64.Vale.StateLemmas_i.lemma_to_of>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_of (Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.StateLemmas_i.lemma_to_of@tok () Term)

; </end encoding val X64.Vale.StateLemmas_i.lemma_to_of>


; End Externals for interface X64.Vale.StateLemmas_i

(push) ;; push{1

; Internals for X64.Vale.Lemmas_i


; encoding sigelt let code


; <Start encoding let code>

(declare-fun X64.Vale.Lemmas_i.code () Term)

; </end encoding let code>


; encoding sigelt let codes


; <Start encoding let codes>

(declare-fun X64.Vale.Lemmas_i.codes () Term)

; </end encoding let codes>

;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.__cache_version_number__; Namespace Prims
(assert (! (HasType Prims.__cache_version_number__
Prims.int)
:named function_token_typing_Prims.__cache_version_number__))
;;;;;;;;;;;;;;;;unit typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Tm_unit
Prims.unit)
:named unit_typing))
;;;;;;;;;;;;;;;;unit inversion
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.unit)
(= @x1
Tm_unit))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.unit))
:qid unit_inversion))
:named unit_inversion))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.nat64
Tm_type)
:named typing_X64.Machine_s.nat64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,11-28,23); use=X64.Machine_s.fst(28,11-28,23)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.int)
(HasType (X64.Machine_s.int_to_nat64 @x0)
(Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)))
 

:pattern ((X64.Machine_s.int_to_nat64 @x0))
:qid typing_X64.Machine_s.int_to_nat64))

:named typing_X64.Machine_s.int_to_nat64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named typing_Prims.unit))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.subtype_of @x0
@x1)
Prims.logical))
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid typing_Prims.subtype_of))

:named typing_Prims.subtype_of))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (Prims.pow2 @x0)
Prims.pos))
 

:pattern ((Prims.pow2 @x0))
:qid typing_Prims.pow2))

:named typing_Prims.pow2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named typing_Prims.pos))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named typing_Prims.nat))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named typing_Prims.logical))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named typing_Prims.int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.hasEq; Namespace Prims
(assert (! 
;; def=Prims.fst(69,5-69,10); use=Prims.fst(69,5-69,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.hasEq @x0)
Tm_type))
 

:pattern ((Prims.hasEq @x0))
:qid typing_Prims.hasEq))

:named typing_Prims.hasEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named typing_Prims.eqtype))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named typing_Prims.bool))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.size @x0
@x1)
Tm_type))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid typing_FStar.UInt.size))

:named typing_FStar.UInt.size))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.min_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.min_int @x0))
:qid typing_FStar.UInt.min_int))

:named typing_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.max_int @x0)
Prims.int))
 

:pattern ((FStar.UInt.max_int @x0))
:qid typing_FStar.UInt.max_int))

:named typing_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.nat))
(HasType (FStar.UInt.fits @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid typing_FStar.UInt.fits))

:named typing_FStar.UInt.fits))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(HasType (Prims.pow2.fuel_instrumented @u0
@x1)
Prims.pos))
 

:pattern ((Prims.pow2.fuel_instrumented @u0
@x1))
:qid token_correspondence_Prims.pow2.fuel_instrumented))

:named token_correspondence_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (HasType Tm_refine_f1ecc6ab6882a651504f328937700647
Tm_type)
:named refinement_kinding_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (HasType Tm_refine_da3062322c9bea8d5b2058386775b91a
Tm_type)
:named refinement_kinding_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_a608a89bbc0a207d5920d37d906f7f40
Tm_type)
:named refinement_kinding_Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.logxor_uint64; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_9e523552080158c04fafd9dbbcf2e767
Tm_type)
:named refinement_kinding_Tm_refine_9e523552080158c04fafd9dbbcf2e767))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Tm_refine_774ba3f728d91ead8ef40be66c9802e5
Tm_type)
:named refinement_kinding_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.nat128; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_758ff42440a58a30c095e911b9c96f61
Tm_type)
:named refinement_kinding_Tm_refine_758ff42440a58a30c095e911b9c96f61))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
Tm_type)
:named refinement_kinding_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Tm_refine_542f9d4f129664613f2483a6c88bc7c2
Tm_type)
:named refinement_kinding_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.u; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_4a56532dbb80b238f6b7d86890fac538
Tm_type)
:named refinement_kinding_Tm_refine_4a56532dbb80b238f6b7d86890fac538))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Tm_refine_414d0a9f578ab0048252f8c8f552b99f
Tm_type)
:named refinement_kinding_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,35-28,78); use=X64.Machine_s.fst(28,35-28,78)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))

:named refinement_kinding_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (HasType Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
Tm_type)
:named refinement_kinding_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! 
;; def=FStar.Pervasives.fsti(772,26-772,42); use=FStar.Pervasives.fsti(772,26-772,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647)
false)
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f1ecc6ab6882a651504f328937700647))
:qid refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))

:named refinement_interpretation_Tm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! 
;; def=FStar.List.Tot.Base.fst(533,7-533,12); use=FStar.List.Tot.Base.fst(533,7-533,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a)
(HasTypeFuel @u0
@x1
Tm_type))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_da3062322c9bea8d5b2058386775b91a))
:qid refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))

:named refinement_interpretation_Tm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(27,13-27,33); use=X64.Machine_s.fst(27,13-27,33)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_a608a89bbc0a207d5920d37d906f7f40)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Machine_s.fst(27,19-27,32)
(< (BoxInt_proj_0 @x1)
18446744073709551616)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
:qid refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40))

:named refinement_interpretation_Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.logxor_uint64; Namespace X64.Semantics_s
(assert (! 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_9e523552080158c04fafd9dbbcf2e767)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(or 
;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Semantics_s.fst(221,20-221,26)
(and 
;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
0)


;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Semantics_s.fst(221,20-221,26)
(< (BoxInt_proj_0 @x1)
18446744073709551616)
)


;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(FStar.UInt.size @x1
(BoxInt 64))
)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_9e523552080158c04fafd9dbbcf2e767))
:qid refinement_interpretation_Tm_refine_9e523552080158c04fafd9dbbcf2e767))

:named refinement_interpretation_Tm_refine_9e523552080158c04fafd9dbbcf2e767))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! 
;; def=Prims.fst(683,11-683,24); use=Prims.fst(683,11-683,24)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(683,18-683,23); use=Prims.fst(683,18-683,23)
(> (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
:qid refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))

:named refinement_interpretation_Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.nat128; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(29,14-29,35); use=X64.Machine_s.fst(29,14-29,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_758ff42440a58a30c095e911b9c96f61)
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=X64.Machine_s.fst(29,20-29,34); use=X64.Machine_s.fst(29,20-29,34)
(< (BoxInt_proj_0 @x1)
340282366920938463463374607431768211456)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_758ff42440a58a30c095e911b9c96f61))
:qid refinement_interpretation_Tm_refine_758ff42440a58a30c095e911b9c96f61))

:named refinement_interpretation_Tm_refine_758ff42440a58a30c095e911b9c96f61))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! 
;; def=Prims.fst(304,12-304,41); use=Prims.fst(304,12-304,41)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Valid 
;; def=Prims.fst(304,21-304,40); use=Prims.fst(304,21-304,40)
(Prims.subtype_of @x1
Prims.unit)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
:qid refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))

:named refinement_interpretation_Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! 
;; def=Prims.fst(680,11-680,25); use=Prims.fst(680,11-680,25)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(680,18-680,24); use=Prims.fst(680,18-680,24)
(>= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
:qid refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))

:named refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.u; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(73,6-73,35); use=X64.Semantics_s.fst(73,6-73,35)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4a56532dbb80b238f6b7d86890fac538)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=X64.Semantics_s.fst(73,13-73,33); use=X64.Semantics_s.fst(73,13-73,33)
(BoxBool_proj_0 (FStar.UInt.fits @x1
(BoxInt 64)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4a56532dbb80b238f6b7d86890fac538))
:qid refinement_interpretation_Tm_refine_4a56532dbb80b238f6b7d86890fac538))

:named refinement_interpretation_Tm_refine_4a56532dbb80b238f6b7d86890fac538))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! 
;; def=Prims.fst(73,14-73,31); use=Prims.fst(73,14-73,31)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
(and (HasTypeFuel @u0
@x1
Tm_type)

;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Valid 
;; def=Prims.fst(73,23-73,30); use=Prims.fst(73,23-73,30)
(Prims.hasEq @x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
:qid refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))

:named refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,35-28,78); use=X64.Machine_s.fst(28,35-28,78)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x2))
(and (HasTypeFuel @u0
@x1
X64.Machine_s.nat64)

;; def=X64.Machine_s.fst(28,43-28,77); use=X64.Machine_s.fst(28,43-28,77)
(implies 
;; def=X64.Machine_s.fst(28,43-28,66); use=X64.Machine_s.fst(28,43-28,66)
(and (BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x2))
(BoxBool_proj_0 (Prims.op_LessThan @x2
(BoxInt 18446744073709551616))))


;; def=X64.Machine_s.fst(28,71-28,77); use=X64.Machine_s.fst(28,71-28,77)
(= @x2
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x2)))
:qid refinement_interpretation_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))

:named refinement_interpretation_Tm_refine_33c23e946048d3d79f362ad9f81ccafe))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! 
;; def=Prims.fst(686,15-686,29); use=Prims.fst(686,15-686,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f)
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=Prims.fst(686,22-686,28); use=Prims.fst(686,22-686,28)
(not (= @x1
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
:qid refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))

:named refinement_interpretation_Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;; Fact-ids: Name Prims.op_Subtraction; Namespace Prims
(assert (! 
;; def=Prims.fst(546,4-546,18); use=Prims.fst(546,4-546,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Subtraction @x0
@x1)
(BoxInt (- (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Subtraction @x0
@x1))
:qid primitive_Prims.op_Subtraction))

:named primitive_Prims.op_Subtraction))
;;; Fact-ids: Name Prims.op_Multiply; Namespace Prims
(assert (! 
;; def=Prims.fst(540,4-540,15); use=Prims.fst(540,4-540,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Multiply @x0
@x1)
(BoxInt (* (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Multiply @x0
@x1))
:qid primitive_Prims.op_Multiply))

:named primitive_Prims.op_Multiply))
;;; Fact-ids: Name Prims.op_LessThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(564,4-564,22); use=Prims.fst(564,4-564,22)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThanOrEqual @x0
@x1)
(BoxBool (<= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThanOrEqual @x0
@x1))
:qid primitive_Prims.op_LessThanOrEqual))

:named primitive_Prims.op_LessThanOrEqual))
;;; Fact-ids: Name Prims.op_LessThan; Namespace Prims
(assert (! 
;; def=Prims.fst(582,4-582,15); use=Prims.fst(582,4-582,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_LessThan @x0
@x1)
(BoxBool (< (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_LessThan @x0
@x1))
:qid primitive_Prims.op_LessThan))

:named primitive_Prims.op_LessThan))
;;; Fact-ids: Name Prims.op_AmpAmp; Namespace Prims
(assert (! 
;; def=Prims.fst(522,4-522,13); use=Prims.fst(522,4-522,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_AmpAmp @x0
@x1)
(BoxBool (and (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_AmpAmp @x0
@x1))
:qid primitive_Prims.op_AmpAmp))

:named primitive_Prims.op_AmpAmp))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.pow2_values
;;; Fact-ids: Name FStar.UInt.pow2_values; Namespace FStar.UInt
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(let ((@lb1 @x0))
(ite (= @lb1
(BoxInt 0))

;; def=FStar.UInt.fsti(28,11-28,14); use=FStar.UInt.fsti(28,11-28,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 1))

(ite (= @lb1
(BoxInt 1))

;; def=FStar.UInt.fsti(29,11-29,14); use=FStar.UInt.fsti(29,11-29,14)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2))

(ite (= @lb1
(BoxInt 8))

;; def=FStar.UInt.fsti(30,11-30,16); use=FStar.UInt.fsti(30,11-30,16)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 256))

(ite (= @lb1
(BoxInt 16))

;; def=FStar.UInt.fsti(31,11-31,18); use=FStar.UInt.fsti(31,11-31,18)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 65536))

(ite (= @lb1
(BoxInt 31))

;; def=FStar.UInt.fsti(32,11-32,23); use=FStar.UInt.fsti(32,11-32,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 2147483648))

(ite (= @lb1
(BoxInt 32))

;; def=FStar.UInt.fsti(33,11-33,23); use=FStar.UInt.fsti(33,11-33,23)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 4294967296))

(ite (= @lb1
(BoxInt 63))

;; def=FStar.UInt.fsti(34,11-34,32); use=FStar.UInt.fsti(34,11-34,32)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 9223372036854775808))

(ite (= @lb1
(BoxInt 64))

;; def=FStar.UInt.fsti(35,11-35,33); use=FStar.UInt.fsti(35,11-35,33)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 18446744073709551616))

(implies (= @lb1
(BoxInt 128))

;; def=FStar.UInt.fsti(36,12-36,49); use=FStar.UInt.fsti(36,12-36,49)
(= (Prims.pow2.fuel_instrumented ZFuel
@x0)
(BoxInt 340282366920938463463374607431768211456))
)))))))))))
 

:pattern ((Prims.pow2.fuel_instrumented ZFuel
@x0))
:qid lemma_FStar.UInt.pow2_values))
:named lemma_FStar.UInt.pow2_values))
;;;;;;;;;;;;;;;;int typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Int))
 (! (HasType (BoxInt @u0)
Prims.int)
 

:pattern ((BoxInt @u0))
:qid int_typing))
:named int_typing))
;;;;;;;;;;;;;;;;int inversion
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(is-BoxInt @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int))
:qid int_inversion))
:named int_inversion))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f1ecc6ab6882a651504f328937700647
;;; Fact-ids: Name FStar.Pervasives.false_elim; Namespace FStar.Pervasives
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f1ecc6ab6882a651504f328937700647))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_f1ecc6ab6882a651504f328937700647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_da3062322c9bea8d5b2058386775b91a
;;; Fact-ids: Name FStar.List.Tot.Base.strict_suffix_of; Namespace FStar.List.Tot.Base
(assert (! (iff (Valid (Prims.hasEq Tm_refine_da3062322c9bea8d5b2058386775b91a))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_da3062322c9bea8d5b2058386775b91a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_a608a89bbc0a207d5920d37d906f7f40
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_a608a89bbc0a207d5920d37d906f7f40))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_a608a89bbc0a207d5920d37d906f7f40))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9e523552080158c04fafd9dbbcf2e767
;;; Fact-ids: Name X64.Semantics_s.logxor_uint64; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_9e523552080158c04fafd9dbbcf2e767))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_9e523552080158c04fafd9dbbcf2e767))
;;;;;;;;;;;;;;;;haseq for Tm_refine_774ba3f728d91ead8ef40be66c9802e5
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_774ba3f728d91ead8ef40be66c9802e5))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_774ba3f728d91ead8ef40be66c9802e5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_758ff42440a58a30c095e911b9c96f61
;;; Fact-ids: Name X64.Machine_s.nat128; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_758ff42440a58a30c095e911b9c96f61))
(Valid (Prims.hasEq Prims.nat)))
:named haseqTm_refine_758ff42440a58a30c095e911b9c96f61))
;;;;;;;;;;;;;;;;haseq for Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_73f210ca6e0061ed4a3150f69b8f33bf))
;;;;;;;;;;;;;;;;haseq for Tm_refine_542f9d4f129664613f2483a6c88bc7c2
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_542f9d4f129664613f2483a6c88bc7c2))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4a56532dbb80b238f6b7d86890fac538
;;; Fact-ids: Name X64.Semantics_s.u; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4a56532dbb80b238f6b7d86890fac538))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_4a56532dbb80b238f6b7d86890fac538))
;;;;;;;;;;;;;;;;haseq for Tm_refine_414d0a9f578ab0048252f8c8f552b99f
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_414d0a9f578ab0048252f8c8f552b99f))
(Valid (Prims.hasEq Tm_type)))
:named haseqTm_refine_414d0a9f578ab0048252f8c8f552b99f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_33c23e946048d3d79f362ad9f81ccafe
;;; Fact-ids: Name X64.Machine_s.int_to_nat64; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(28,35-28,78); use=X64.Machine_s.fst(28,35-28,78)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0)))
(Valid (Prims.hasEq X64.Machine_s.nat64)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_33c23e946048d3d79f362ad9f81ccafe @x0))))
:qid haseqTm_refine_33c23e946048d3d79f362ad9f81ccafe))

:named haseqTm_refine_33c23e946048d3d79f362ad9f81ccafe))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f
;;; Fact-ids: Name Prims.nonzero; Namespace Prims
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
(Valid (Prims.hasEq Prims.int)))
:named haseqTm_refine_0766302b68bb44ab7aff8c4d8be0b46f))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.nat64
Tm_type)
:named function_token_typing_X64.Machine_s.nat64))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (HasType Prims.unit
Prims.eqtype)
:named function_token_typing_Prims.unit))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (HasType Prims.pos
Tm_type)
:named function_token_typing_Prims.pos))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (HasType Prims.nat
Tm_type)
:named function_token_typing_Prims.nat))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (HasType Prims.logical
Tm_type)
:named function_token_typing_Prims.logical))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (HasType Prims.int
Prims.eqtype)
:named function_token_typing_Prims.int))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (HasType Prims.eqtype
Tm_type)
:named function_token_typing_Prims.eqtype))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (HasType Prims.bool
Prims.eqtype)
:named function_token_typing_Prims.bool))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: Prims.pow2
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasType @x1
Prims.nat)
(= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(let ((@lb2 @x1))
(ite (= @lb2
(BoxInt 0))
(BoxInt 1)
(Prims.op_Multiply (BoxInt 2)
(Prims.pow2.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))))))))
 :weight 0


:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid equation_with_fuel_Prims.pow2.fuel_instrumented))

:named equation_with_fuel_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.nat64
;;; Fact-ids: Name X64.Machine_s.nat64; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.nat64
Tm_refine_a608a89bbc0a207d5920d37d906f7f40)
:named equation_X64.Machine_s.nat64))
;;;;;;;;;;;;;;;;Equation for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Valid (Prims.subtype_of @x0
@x1))

;; def=Prims.fst(291,31-291,60); use=Prims.fst(291,31-291,60)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x0)
(HasType @x2
@x1))
 
;;no pats
:qid equation_Prims.subtype_of.1))
)
 

:pattern ((Prims.subtype_of @x0
@x1))
:qid equation_Prims.subtype_of))

:named equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Equation for Prims.pos
;;; Fact-ids: Name Prims.pos; Namespace Prims
(assert (! (= Prims.pos
Tm_refine_774ba3f728d91ead8ef40be66c9802e5)
:named equation_Prims.pos))
;;;;;;;;;;;;;;;;Equation for Prims.nat
;;; Fact-ids: Name Prims.nat; Namespace Prims
(assert (! (= Prims.nat
Tm_refine_542f9d4f129664613f2483a6c88bc7c2)
:named equation_Prims.nat))
;;;;;;;;;;;;;;;;Equation for Prims.logical
;;; Fact-ids: Name Prims.logical; Namespace Prims
(assert (! (= Prims.logical
Tm_type)
:named equation_Prims.logical))
;;;;;;;;;;;;;;;;Equation for Prims.eqtype
;;; Fact-ids: Name Prims.eqtype; Namespace Prims
(assert (! (= Prims.eqtype
Tm_refine_414d0a9f578ab0048252f8c8f552b99f)
:named equation_Prims.eqtype))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.size
;;; Fact-ids: Name FStar.UInt.size; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(50,4-50,8); use=FStar.UInt.fsti(50,4-50,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.size @x0
@x1)
(Prims.b2t (FStar.UInt.fits @x0
@x1)))
 

:pattern ((FStar.UInt.size @x0
@x1))
:qid equation_FStar.UInt.size))

:named equation_FStar.UInt.size))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.min_int
;;; Fact-ids: Name FStar.UInt.min_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(47,4-47,11); use=FStar.UInt.fsti(47,4-47,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.min_int @x0)
(BoxInt 0))
 

:pattern ((FStar.UInt.min_int @x0))
:qid equation_FStar.UInt.min_int))

:named equation_FStar.UInt.min_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.max_int
;;; Fact-ids: Name FStar.UInt.max_int; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(46,4-46,11); use=FStar.UInt.fsti(46,4-46,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.max_int @x0)
(Prims.op_Subtraction (Prims.pow2 @x0)
(BoxInt 1)))
 

:pattern ((FStar.UInt.max_int @x0))
:qid equation_FStar.UInt.max_int))

:named equation_FStar.UInt.max_int))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.fits
;;; Fact-ids: Name FStar.UInt.fits; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(49,4-49,8); use=FStar.UInt.fsti(49,4-49,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.fits @x0
@x1)
(Prims.op_AmpAmp (Prims.op_LessThanOrEqual (FStar.UInt.min_int @x1)
@x0)
(Prims.op_LessThanOrEqual @x0
(FStar.UInt.max_int @x1))))
 

:pattern ((FStar.UInt.fits @x0
@x1))
:qid equation_FStar.UInt.fits))

:named equation_FStar.UInt.fits))
;;;;;;;;;;;;;;;;Prop-typing for Prims.subtype_of
;;; Fact-ids: Name Prims.subtype_of; Namespace Prims
(assert (! 
;; def=Prims.fst(291,4-291,14); use=Prims.fst(291,4-291,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(Valid (Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit)))
 

:pattern ((Prims.subtype_of (Prims.subtype_of @x0
@x1)
Prims.unit))
:qid defn_equation_Prims.subtype_of))

:named defn_equation_Prims.subtype_of))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! (= 125
(Term_constr_id Prims.unit))
:named constructor_distinct_Prims.unit))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (= 303
(Term_constr_id Prims.int))
:named constructor_distinct_Prims.int))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (= 107
(Term_constr_id Prims.bool))
:named constructor_distinct_Prims.bool))
;;;;;;;;;;;;;;;;bool typing
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Bool))
 (! (HasType (BoxBool @u0)
Prims.bool)
 

:pattern ((BoxBool @u0))
:qid bool_typing))
:named bool_typing))
;;;;;;;;;;;;;;;;bool inversion
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.bool)
(is-BoxBool @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.bool))
:qid bool_inversion))
:named bool_inversion))
;;;;;;;;;;;;;;;;b2t typing
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.bool)
(HasType (Prims.b2t @x0)
Tm_type))
 

:pattern ((Prims.b2t @x0))
:qid b2t_typing))

:named b2t_typing))
;;;;;;;;;;;;;;;;b2t def
;;; Fact-ids: Name Prims.b2t; Namespace Prims
(assert (! 
;; def=Prims.fst(180,5-180,8); use=Prims.fst(180,5-180,8)
(forall ((@x0 Term))
 (! (= (Valid (Prims.b2t @x0))
(BoxBool_proj_0 @x0))
 

:pattern ((Prims.b2t @x0))
:qid b2t_def))

:named b2t_def))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.unit; Namespace Prims
(assert (! 
;; def=Prims.fst(96,5-96,9); use=Prims.fst(96,5-96,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.unit)
(= Prims.unit
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.unit))
:qid Prims_pretyping_f8666440faa91836cc5a13998af863fc))

:named Prims_pretyping_f8666440faa91836cc5a13998af863fc))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.bool; Namespace Prims
(assert (! 
;; def=Prims.fst(80,5-80,9); use=Prims.fst(80,5-80,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.bool)
(= Prims.bool
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.bool))
:qid Prims_pretyping_f537159ed795b314b4e58c260361ae86))

:named Prims_pretyping_f537159ed795b314b4e58c260361ae86))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! 
;; def=Prims.fst(514,5-514,8); use=Prims.fst(514,5-514,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.int)
(= Prims.int
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.int))
:qid Prims_pretyping_ae567c2fb75be05905677af440075565))

:named Prims_pretyping_ae567c2fb75be05905677af440075565))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (= (Prims.pow2.fuel_instrumented (SFuel @u0)
@x1)
(Prims.pow2.fuel_instrumented ZFuel
@x1))
 

:pattern ((Prims.pow2.fuel_instrumented (SFuel @u0)
@x1))
:qid @fuel_irrelevance_Prims.pow2.fuel_instrumented))

:named @fuel_irrelevance_Prims.pow2.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name Prims.pow2; Namespace Prims
(assert (! 
;; def=Prims.fst(708,8-708,12); use=Prims.fst(708,8-708,12)
(forall ((@x0 Term))
 (! (= (Prims.pow2 @x0)
(Prims.pow2.fuel_instrumented MaxFuel
@x0))
 

:pattern ((Prims.pow2 @x0))
:qid @fuel_correspondence_Prims.pow2.fuel_instrumented))

:named @fuel_correspondence_Prims.pow2.fuel_instrumented))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fsti(26,28-26,59)

(declare-fun label_1 () Bool)

; Encoding query formula : forall (flags: Prims.int).
;   (*  - Could not prove post-condition
; *)
;   X64.Machine_s.int_to_nat64 flags >= 0 /\ X64.Machine_s.int_to_nat64 flags < 0x10000000000000000 /\
;   (0 <= flags && flags < 0x10000000000000000 ==> flags == X64.Machine_s.int_to_nat64 flags) ==>
;   FStar.UInt.fits (X64.Machine_s.int_to_nat64 flags) 64


; Context: While encoding a query
; While typechecking the top-level declaration `let cf`

(push) ;; push{0

; <fuel='1' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel ZFuel))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Prims.int)

;; def=Prims.fst(680,18-680,24); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(>= (BoxInt_proj_0 (X64.Machine_s.int_to_nat64 @x0))
0)


;; def=X64.Machine_s.fst(27,19-27,32); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(< (BoxInt_proj_0 (X64.Machine_s.int_to_nat64 @x0))
18446744073709551616)


;; def=X64.Machine_s.fst(28,43-28,77); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(implies 
;; def=X64.Machine_s.fst(28,43-28,66); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(and (BoxBool_proj_0 (Prims.op_LessThanOrEqual (BoxInt 0)
@x0))
(BoxBool_proj_0 (Prims.op_LessThan @x0
(BoxInt 18446744073709551616))))


;; def=X64.Machine_s.fst(28,71-28,77); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(= @x0
(X64.Machine_s.int_to_nat64 @x0))
)
)

;; def=X64.Semantics_s.fst(73,13-73,33); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(or label_1

;; def=X64.Semantics_s.fst(73,13-73,33); use=X64.Vale.Lemmas_i.fsti(26,38-26,58)
(BoxBool_proj_0 (FStar.UInt.fits (X64.Machine_s.int_to_nat64 @x0)
(BoxInt 64)))
)
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.cf, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_Prims.pow2.fuel_instrumented, @fuel_irrelevance_Prims.pow2.fuel_instrumented, @query, equation_FStar.UInt.fits, equation_FStar.UInt.max_int, equation_FStar.UInt.min_int, equation_Prims.nat, int_typing, lemma_FStar.UInt.pow2_values, primitive_Prims.op_AmpAmp, primitive_Prims.op_LessThanOrEqual, primitive_Prims.op_Subtraction, projection_inverse_BoxBool_proj_0, projection_inverse_BoxInt_proj_0, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let cf


; <Start encoding let cf>

(declare-fun X64.Vale.Lemmas_i.cf (Term) Term)
;;;;;;;;;;;;;;;;flags: Prims.int -> Prims.bool
(declare-fun Tm_arrow_2b00b574e3c859da902fc1b8ce85c0f1 () Term)
(declare-fun X64.Vale.Lemmas_i.cf@tok () Term)

; </end encoding let cf>


; encoding sigelt let eval_code


; <Start encoding let eval_code>

(declare-fun X64.Vale.Lemmas_i.eval_code (Term Term Term) Term)
;;;;;;;;;;;;;;;;c: X64.Semantics_s.code -> s0: X64.Vale.State_i.state -> s1: X64.Vale.State_i.state -> Type
(declare-fun Tm_arrow_e820f79973835121231df3b8e7b31210 () Term)
(declare-fun X64.Vale.Lemmas_i.eval_code@tok () Term)

; </end encoding let eval_code>


; encoding sigelt #reset-options "--initial_fuel 2 --max_fuel 2"


; <Skipped #reset-options "--initial_fuel 2 --max_fuel 2"/>


; encoding sigelt val X64.Vale.Lemmas_i.eval_while


; <Skipped val X64.Vale.Lemmas_i.eval_while/>


; encoding sigelt let eval_while


; <Start encoding let eval_while>

(declare-fun X64.Vale.Lemmas_i.eval_while (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: X64.Semantics_s.ocmp ->     c: X64.Semantics_s.code ->     n: Prims.nat ->     s0: X64.Vale.State_i.state ->     s1: X64.Vale.State_i.state   -> Type
(declare-fun Tm_arrow_32b2688a9c04e52666c89873d1b3817d () Term)
(declare-fun X64.Vale.Lemmas_i.eval_while@tok () Term)

; </end encoding let eval_while>


; encoding sigelt let eval_ocmp


; <Start encoding let eval_ocmp>

(declare-fun X64.Vale.Lemmas_i.eval_ocmp (Term Term) Term)
;;;;;;;;;;;;;;;;s: X64.Vale.State_i.state -> c: X64.Semantics_s.ocmp -> Prims.bool
(declare-fun Tm_arrow_e0edbb32836459d608ce3053670bb3b9 () Term)
(declare-fun X64.Vale.Lemmas_i.eval_ocmp@tok () Term)

; </end encoding let eval_ocmp>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_cmp_eq


; <Skipped val X64.Vale.Lemmas_i.lemma_cmp_eq/>

;;;;;;;;;;;;;;;;well-founded ordering on nat (alt)
;;; Fact-ids: Name Prims.int; Namespace Prims
(assert (! (forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
@x2
Prims.int)
(> (BoxInt_proj_0 @x1)
0)
(>= (BoxInt_proj_0 @x2)
0)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.int) (HasTypeFuel @u0
@x2
Prims.int) (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
@x1)))
:qid well-founded-ordering-on-nat))
:named well-founded-ordering-on-nat))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rsp@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rsi@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rdx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rdi@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rcx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rbx@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rbp@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.Rax@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R9@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R8@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R15@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R14@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R13@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R12@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R11@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.R10@tok
X64.Machine_s.reg)
:named typing_tok_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;typing for data constructor proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.T@tok
Prims.trivial)
:named typing_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.eval_operand; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(62,4-62,16); use=X64.Vale.State_i.fsti(62,4-62,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.eval_operand @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Vale.State_i.eval_operand @x0
@x1))
:qid typing_X64.Vale.State_i.eval_operand))

:named typing_X64.Vale.State_i.eval_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.eval_maddr; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(55,4-55,14); use=X64.Vale.State_i.fsti(55,4-55,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.maddr)
(HasType @x1
X64.Vale.State_i.state))
(HasType (X64.Vale.State_i.eval_maddr @x0
@x1)
Prims.int))
 

:pattern ((X64.Vale.State_i.eval_maddr @x0
@x1))
:qid typing_X64.Vale.State_i.eval_maddr))

:named typing_X64.Vale.State_i.eval_maddr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__regs @x0)
X64.Vale.Regs_i.t))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__regs @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__regs))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__mem; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(30,2-30,5); use=X64.Vale.State_i.fsti(30,2-30,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
(FStar.Map.t Prims.int
X64.Machine_s.nat64)))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__mem @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__mem))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.StateLemmas_i.state_to_S; Namespace X64.Vale.StateLemmas_i
(assert (! 
;; def=X64.Vale.StateLemmas_i.fsti(29,4-29,14); use=X64.Vale.StateLemmas_i.fsti(29,4-29,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.StateLemmas_i.state_to_S @x0)
X64.Semantics_s.state))
 

:pattern ((X64.Vale.StateLemmas_i.state_to_S @x0))
:qid typing_X64.Vale.StateLemmas_i.state_to_S))

:named typing_X64.Vale.StateLemmas_i.state_to_S))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType X64.Vale.Regs_i.t
Tm_type)
:named typing_X64.Vale.Regs_i.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_ocmp; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fsti(34,4-34,13); use=X64.Vale.Lemmas_i.fsti(34,4-34,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Semantics_s.ocmp))
(HasType (X64.Vale.Lemmas_i.eval_ocmp @x0
@x1)
Prims.bool))
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
@x1))
:qid typing_X64.Vale.Lemmas_i.eval_ocmp))

:named typing_X64.Vale.Lemmas_i.eval_ocmp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_ONe; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ocmp)
(HasType (X64.Semantics_s.uu___is_ONe @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_ONe @x0))
:qid typing_X64.Semantics_s.uu___is_ONe))

:named typing_X64.Semantics_s.uu___is_ONe))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_OLt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ocmp)
(HasType (X64.Semantics_s.uu___is_OLt @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_OLt @x0))
:qid typing_X64.Semantics_s.uu___is_OLt))

:named typing_X64.Semantics_s.uu___is_OLt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_OLe; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ocmp)
(HasType (X64.Semantics_s.uu___is_OLe @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_OLe @x0))
:qid typing_X64.Semantics_s.uu___is_OLe))

:named typing_X64.Semantics_s.uu___is_OLe))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ocmp)
(HasType (X64.Semantics_s.uu___is_OGt @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_OGt @x0))
:qid typing_X64.Semantics_s.uu___is_OGt))

:named typing_X64.Semantics_s.uu___is_OGt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_OGe; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ocmp)
(HasType (X64.Semantics_s.uu___is_OGe @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_OGe @x0))
:qid typing_X64.Semantics_s.uu___is_OGe))

:named typing_X64.Semantics_s.uu___is_OGe))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_OEq; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ocmp)
(HasType (X64.Semantics_s.uu___is_OEq @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_OEq @x0))
:qid typing_X64.Semantics_s.uu___is_OEq))

:named typing_X64.Semantics_s.uu___is_OEq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uint64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(25,5-25,11); use=X64.Semantics_s.fst(25,5-25,11)
(forall ((@u0 Dummy_sort))
 (! (HasType (X64.Semantics_s.uint64 @u0)
Prims.eqtype)
 

:pattern ((X64.Semantics_s.uint64 @u0))
:qid typing_X64.Semantics_s.uint64))

:named typing_X64.Semantics_s.uint64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.u; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(73,4-73,5); use=X64.Semantics_s.fst(73,4-73,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_4a56532dbb80b238f6b7d86890fac538)
(HasType (X64.Semantics_s.u @x0)
(X64.Semantics_s.uint64 Dummy_value)))
 

:pattern ((X64.Semantics_s.u @x0))
:qid typing_X64.Semantics_s.u))

:named typing_X64.Semantics_s.u))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.mem; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.mem
Tm_type)
:named typing_X64.Semantics_s.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.map; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(27,4-27,7); use=X64.Semantics_s.fst(27,4-27,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type))
(HasType (X64.Semantics_s.map @x0
@x1)
Tm_type))
 

:pattern ((X64.Semantics_s.map @x0
@x1))
:qid typing_X64.Semantics_s.map))

:named typing_X64.Semantics_s.map))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.eval_operand; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(87,4-87,16); use=X64.Semantics_s.fst(87,4-87,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Semantics_s.state))
(HasType (X64.Semantics_s.eval_operand @x0
@x1)
(X64.Semantics_s.uint64 Dummy_value)))
 

:pattern ((X64.Semantics_s.eval_operand @x0
@x1))
:qid typing_X64.Semantics_s.eval_operand))

:named typing_X64.Semantics_s.eval_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.eval_ocmp; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(269,4-269,13); use=X64.Semantics_s.fst(269,4-269,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.state)
(HasType @x1
X64.Semantics_s.ocmp))
(HasType (X64.Semantics_s.eval_ocmp @x0
@x1)
Prims.bool))
 

:pattern ((X64.Semantics_s.eval_ocmp @x0
@x1))
:qid typing_X64.Semantics_s.eval_ocmp))

:named typing_X64.Semantics_s.eval_ocmp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.eval_maddr; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(79,4-79,14); use=X64.Semantics_s.fst(79,4-79,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.maddr)
(HasType @x1
X64.Semantics_s.state))
(HasType (X64.Semantics_s.eval_maddr @x0
@x1)
Prims.int))
 

:pattern ((X64.Semantics_s.eval_maddr @x0
@x1))
:qid typing_X64.Semantics_s.eval_maddr))

:named typing_X64.Semantics_s.eval_maddr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,2-68,6); use=X64.Semantics_s.fst(68,2-68,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.state)
(HasType (X64.Semantics_s.__proj__Mkstate__item__regs @x0)
(FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg
Tm_abs_2da3d120bd5ce08465191535a1915477)))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__regs @x0))
:qid typing_X64.Semantics_s.__proj__Mkstate__item__regs))

:named typing_X64.Semantics_s.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__mem; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(70,2-70,5); use=X64.Semantics_s.fst(70,2-70,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.state)
(HasType (X64.Semantics_s.__proj__Mkstate__item__mem @x0)
X64.Semantics_s.mem))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__mem @x0))
:qid typing_X64.Semantics_s.__proj__Mkstate__item__mem))

:named typing_X64.Semantics_s.__proj__Mkstate__item__mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.valid_dst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(65,4-65,13); use=X64.Machine_s.fst(65,4-65,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.valid_dst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.valid_dst @x0))
:qid typing_X64.Machine_s.valid_dst))

:named typing_X64.Machine_s.valid_dst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_Rsp; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.reg)
(HasType (X64.Machine_s.uu___is_Rsp @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_Rsp @x0))
:qid typing_X64.Machine_s.uu___is_Rsp))

:named typing_X64.Machine_s.uu___is_Rsp))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OReg @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OReg @x0))
:qid typing_X64.Machine_s.uu___is_OReg))

:named typing_X64.Machine_s.uu___is_OReg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OMem @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OMem @x0))
:qid typing_X64.Machine_s.uu___is_OMem))

:named typing_X64.Machine_s.uu___is_OMem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_OConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.operand)
(HasType (X64.Machine_s.uu___is_OConst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_OConst @x0))
:qid typing_X64.Machine_s.uu___is_OConst))

:named typing_X64.Machine_s.uu___is_OConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MReg @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MReg @x0))
:qid typing_X64.Machine_s.uu___is_MReg))

:named typing_X64.Machine_s.uu___is_MReg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MIndex @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MIndex @x0))
:qid typing_X64.Machine_s.uu___is_MIndex))

:named typing_X64.Machine_s.uu___is_MIndex))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.uu___is_MConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Machine_s.maddr)
(HasType (X64.Machine_s.uu___is_MConst @x0)
Prims.bool))
 

:pattern ((X64.Machine_s.uu___is_MConst @x0))
:qid typing_X64.Machine_s.uu___is_MConst))

:named typing_X64.Machine_s.uu___is_MConst))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,10-56,11); use=X64.Machine_s.fst(56,10-56,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
(HasType (X64.Machine_s.__proj__OReg__item__r @x0)
X64.Machine_s.reg))
 

:pattern ((X64.Machine_s.__proj__OReg__item__r @x0))
:qid typing_X64.Machine_s.__proj__OReg__item__r))

:named typing_X64.Machine_s.__proj__OReg__item__r))
;;;;;;;;;;;;;;;;typing_Tm_abs_bde726dfeb2837d96e43a155f7c873f5
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType Tm_abs_bde726dfeb2837d96e43a155f7c873f5
Tm_arrow_73862e447730cb7be03c891c89cb5703)
:named typing_Tm_abs_bde726dfeb2837d96e43a155f7c873f5))
;;;;;;;;;;;;;;;;typing_Tm_abs_2da3d120bd5ce08465191535a1915477
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! (HasType Tm_abs_2da3d120bd5ce08465191535a1915477
Tm_arrow_73862e447730cb7be03c891c89cb5703)
:named typing_Tm_abs_2da3d120bd5ce08465191535a1915477))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.squash @x0)
Tm_type))
 

:pattern ((Prims.squash @x0))
:qid typing_Prims.squash))

:named typing_Prims.squash))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (Prims.pure_post_ @x0
@x1)
Tm_type))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid typing_Prims.pure_post_))

:named typing_Prims.pure_post_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.pure_post @x0)
Tm_type))
 

:pattern ((Prims.pure_post @x0))
:qid typing_Prims.pure_post))

:named typing_Prims.pure_post))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named typing_Prims.l_True))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.v; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(54,4-54,5); use=FStar.UInt64.fsti(54,4-54,5)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType (FStar.UInt64.v @x0)
(FStar.UInt.uint_t (BoxInt 64))))
 

:pattern ((FStar.UInt64.v @x0))
:qid typing_FStar.UInt64.v))

:named typing_FStar.UInt64.v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,4-58,13); use=FStar.UInt64.fsti(58,4-58,13)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 64)))
(HasType (FStar.UInt64.uint_to_t @x0)
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)))
 

:pattern ((FStar.UInt64.uint_to_t @x0))
:qid typing_FStar.UInt64.uint_to_t))

:named typing_FStar.UInt64.uint_to_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(50,8-50,9); use=FStar.UInt64.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (HasType (FStar.UInt64.t @u0)
Prims.eqtype)
 

:pattern ((FStar.UInt64.t @u0))
:qid typing_FStar.UInt64.t))

:named typing_FStar.UInt64.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.lte; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(235,4-235,7); use=FStar.UInt64.fsti(235,4-235,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.lte @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt64.lte @x0
@x1))
:qid typing_FStar.UInt64.lte))

:named typing_FStar.UInt64.lte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.lt; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(232,4-232,6); use=FStar.UInt64.fsti(232,4-232,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.lt @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt64.lt @x0
@x1))
:qid typing_FStar.UInt64.lt))

:named typing_FStar.UInt64.lt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.gte; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(229,4-229,7); use=FStar.UInt64.fsti(229,4-229,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.gte @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt64.gte @x0
@x1))
:qid typing_FStar.UInt64.gte))

:named typing_FStar.UInt64.gte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.gt; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(226,4-226,6); use=FStar.UInt64.fsti(226,4-226,6)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.gt @x0
@x1)
Prims.bool))
 

:pattern ((FStar.UInt64.gt @x0
@x1))
:qid typing_FStar.UInt64.gt))

:named typing_FStar.UInt64.gt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.uint_t @x0)
Tm_type))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid typing_FStar.UInt.uint_t))

:named typing_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.lte; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(170,4-170,7); use=FStar.UInt.fsti(170,4-170,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.lte @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.UInt.lte @x0
@x1
@x2))
:qid typing_FStar.UInt.lte))

:named typing_FStar.UInt.lte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.lt; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(169,4-169,6); use=FStar.UInt.fsti(169,4-169,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.lt @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.UInt.lt @x0
@x1
@x2))
:qid typing_FStar.UInt.lt))

:named typing_FStar.UInt.lt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.gte; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(168,4-168,7); use=FStar.UInt.fsti(168,4-168,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.gte @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.UInt.gte @x0
@x1
@x2))
:qid typing_FStar.UInt.gte))

:named typing_FStar.UInt.gte))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.gt; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(167,4-167,6); use=FStar.UInt.fsti(167,4-167,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.gt @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.UInt.gt @x0
@x1
@x2))
:qid typing_FStar.UInt.gt))

:named typing_FStar.UInt.gt))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.t; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(35,4-35,5); use=FStar.Map.fsti(35,4-35,5)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type))
(HasType (FStar.Map.t @x0
@x1)
Tm_type))
 

:pattern ((FStar.Map.t @x0
@x1))
:qid typing_FStar.Map.t))

:named typing_FStar.Map.t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.sel; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(39,4-39,7); use=FStar.Map.fsti(39,4-39,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Map.sel @x0
@x1
@x2
@x3)
@x1))
 

:pattern ((FStar.Map.sel @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.sel))

:named typing_FStar.Map.sel))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,4-102,16); use=FStar.FunctionalExtensionality.fsti(102,4-102,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)))
(HasType (FStar.FunctionalExtensionality.restricted_t @x0
@x1)
Tm_type))
 

:pattern ((FStar.FunctionalExtensionality.restricted_t @x0
@x1))
:qid typing_FStar.FunctionalExtensionality.restricted_t))

:named typing_FStar.FunctionalExtensionality.restricted_t))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.on_domain; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(74,4-74,13); use=FStar.FunctionalExtensionality.fsti(74,4-74,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
:qid typing_FStar.FunctionalExtensionality.on_domain))

:named typing_FStar.FunctionalExtensionality.on_domain))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.is_restricted; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(94,4-94,17); use=FStar.FunctionalExtensionality.fsti(94,4-94,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2)
Prims.logical))
 

:pattern ((FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2))
:qid typing_FStar.FunctionalExtensionality.is_restricted))

:named typing_FStar.FunctionalExtensionality.is_restricted))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(HasType (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.logical))
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid typing_FStar.FunctionalExtensionality.feq))

:named typing_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;True interpretation
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (Valid Prims.l_True)
:named true_interp))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (= (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x0)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x0))
 

:pattern ((ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x0))
:qid token_correspondence_X64.Vale.State_i.__proj__Mkstate__item__regs))

:named token_correspondence_X64.Vale.State_i.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,2-68,6); use=X64.Semantics_s.fst(68,2-68,6)
(forall ((@x0 Term))
 (! (= (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x0)
(X64.Semantics_s.__proj__Mkstate__item__regs @x0))
 

:pattern ((ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x0))
:qid token_correspondence_X64.Semantics_s.__proj__Mkstate__item__regs))

:named token_correspondence_X64.Semantics_s.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
:qid subterm_ordering_X64.Vale.State_i.Mkstate))

:named subterm_ordering_X64.Vale.State_i.Mkstate))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.ONe @x1
@x2)
X64.Semantics_s.ocmp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.ONe @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.ONe @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.ONe @x1
@x2)
X64.Semantics_s.ocmp))
:qid subterm_ordering_X64.Semantics_s.ONe))

:named subterm_ordering_X64.Semantics_s.ONe))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLt @x1
@x2)
X64.Semantics_s.ocmp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.OLt @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.OLt @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLt @x1
@x2)
X64.Semantics_s.ocmp))
:qid subterm_ordering_X64.Semantics_s.OLt))

:named subterm_ordering_X64.Semantics_s.OLt))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLe @x1
@x2)
X64.Semantics_s.ocmp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.OLe @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.OLe @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLe @x1
@x2)
X64.Semantics_s.ocmp))
:qid subterm_ordering_X64.Semantics_s.OLe))

:named subterm_ordering_X64.Semantics_s.OLe))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGt @x1
@x2)
X64.Semantics_s.ocmp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.OGt @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.OGt @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGt @x1
@x2)
X64.Semantics_s.ocmp))
:qid subterm_ordering_X64.Semantics_s.OGt))

:named subterm_ordering_X64.Semantics_s.OGt))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGe @x1
@x2)
X64.Semantics_s.ocmp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.OGe @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.OGe @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGe @x1
@x2)
X64.Semantics_s.ocmp))
:qid subterm_ordering_X64.Semantics_s.OGe))

:named subterm_ordering_X64.Semantics_s.OGe))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OEq @x1
@x2)
X64.Semantics_s.ocmp)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.OEq @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.OEq @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OEq @x1
@x2)
X64.Semantics_s.ocmp))
:qid subterm_ordering_X64.Semantics_s.OEq))

:named subterm_ordering_X64.Semantics_s.OEq))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)
X64.Semantics_s.state)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)
X64.Semantics_s.state))
:qid subterm_ordering_X64.Semantics_s.Mkstate))

:named subterm_ordering_X64.Semantics_s.Mkstate))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OReg @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OReg))

:named subterm_ordering_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OMem @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OMem))

:named subterm_ordering_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.OConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid subterm_ordering_X64.Machine_s.OConst))

:named subterm_ordering_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MReg @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Machine_s.MReg @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MReg))

:named subterm_ordering_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MIndex))

:named subterm_ordering_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Machine_s.MConst @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid subterm_ordering_X64.Machine_s.MConst))

:named subterm_ordering_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__OGe__item__o1; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e
Tm_type)
:named refinement_kinding_Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_kinding_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_e85c4468bd6fa895770a44e5ae1526dc
Tm_type)
:named refinement_kinding_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__OLt__item__o1; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_e3f7ed102fdc0dee07045511829455f8
Tm_type)
:named refinement_kinding_Tm_refine_e3f7ed102fdc0dee07045511829455f8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_ad649c559db000bf1dd08bb4e261413e
Tm_type)
:named refinement_kinding_Tm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.div; Namespace FStar.UInt64
(assert (! (HasType Tm_refine_94d25b6e0041d543efd58300424ecc37
Tm_type)
:named refinement_kinding_Tm_refine_94d25b6e0041d543efd58300424ecc37))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_kinding_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.zero; Namespace FStar.UInt64
(assert (! (HasType Tm_refine_89584a9c9cf094f470969adafcc43f12
Tm_type)
:named refinement_kinding_Tm_refine_89584a9c9cf094f470969adafcc43f12))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8
Tm_type)
:named refinement_kinding_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,46-102,78); use=FStar.FunctionalExtensionality.fsti(102,46-102,78)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))

:named refinement_kinding_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_7c9e5bdb9582a858897946d48f9f4d58
Tm_type)
:named refinement_kinding_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__OLe__item__o1; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_57f9b3587a37875d37de2b8ee309c52c
Tm_type)
:named refinement_kinding_Tm_refine_57f9b3587a37875d37de2b8ee309c52c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_49b6b7afc081bac09ce40febdab68891
Tm_type)
:named refinement_kinding_Tm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__OEq__item__o1; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_495233c1b3965f79901632003c360db5
Tm_type)
:named refinement_kinding_Tm_refine_495233c1b3965f79901632003c360db5))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__ONe__item__o1; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_48e1a980bff417eb8ecda8fd755a7052
Tm_type)
:named refinement_kinding_Tm_refine_48e1a980bff417eb8ecda8fd755a7052))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,34-58,35); use=FStar.UInt64.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))

:named refinement_kinding_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_kinding_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.one; Namespace FStar.UInt64
(assert (! (HasType Tm_refine_248426d47c73436882d5ff4a2d4f3cf0
Tm_type)
:named refinement_kinding_Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6
Tm_type)
:named refinement_kinding_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! (HasType Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125
Tm_type)
:named refinement_kinding_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__OGt__item__o1; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_078a14331436c956e0be06364feefcd5
Tm_type)
:named refinement_kinding_Tm_refine_078a14331436c956e0be06364feefcd5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__OGe__item__o1; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ocmp)

;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_OGe @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e))
:qid refinement_interpretation_Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e))

:named refinement_interpretation_Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2))
(and (HasTypeFuel @u0
@x1
Prims.int)

;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(Valid 
;; def=FStar.UInt.fsti(54,28-54,36); use=FStar.UInt.fsti(54,28-54,36)
(FStar.UInt.size @x1
@x2)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x2)))
:qid refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))

:named refinement_interpretation_Tm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(68,14-68,36); use=X64.Machine_s.fst(68,14-68,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(68,24-68,35); use=X64.Machine_s.fst(68,24-68,35)
(BoxBool_proj_0 (X64.Machine_s.valid_dst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
:qid refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))

:named refinement_interpretation_Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__OLt__item__o1; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e3f7ed102fdc0dee07045511829455f8)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ocmp)

;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_OLt @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e3f7ed102fdc0dee07045511829455f8))
:qid refinement_interpretation_Tm_refine_e3f7ed102fdc0dee07045511829455f8))

:named refinement_interpretation_Tm_refine_e3f7ed102fdc0dee07045511829455f8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_ad649c559db000bf1dd08bb4e261413e)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_ad649c559db000bf1dd08bb4e261413e))
:qid refinement_interpretation_Tm_refine_ad649c559db000bf1dd08bb4e261413e))

:named refinement_interpretation_Tm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.div; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(168,14-168,29); use=FStar.UInt64.fsti(168,14-168,29)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_94d25b6e0041d543efd58300424ecc37)
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(168,19-168,27); use=FStar.UInt64.fsti(168,19-168,27)
(not (= (FStar.UInt64.v @x1)
(BoxInt 0)))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_94d25b6e0041d543efd58300424ecc37))
:qid refinement_interpretation_Tm_refine_94d25b6e0041d543efd58300424ecc37))

:named refinement_interpretation_Tm_refine_94d25b6e0041d543efd58300424ecc37))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3))
(and (HasTypeFuel @u0
@x1
@x2)

;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
(Valid 
;; def=Prims.fst(315,18-315,21); use=Prims.fst(315,36-315,39)
@x3
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named refinement_interpretation_Tm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.zero; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(78,11-78,23); use=FStar.UInt64.fsti(78,11-78,23)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_89584a9c9cf094f470969adafcc43f12)
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(78,15-78,22); use=FStar.UInt64.fsti(78,15-78,22)
(= (FStar.UInt64.v @x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_89584a9c9cf094f470969adafcc43f12))
:qid refinement_interpretation_Tm_refine_89584a9c9cf094f470969adafcc43f12))

:named refinement_interpretation_Tm_refine_89584a9c9cf094f470969adafcc43f12))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OConst @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
:qid refinement_interpretation_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))

:named refinement_interpretation_Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,46-102,78); use=FStar.FunctionalExtensionality.fsti(102,46-102,78)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x2
@x3))
(and (HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x3
@x2))

;; def=FStar.FunctionalExtensionality.fsti(102,60-102,77); use=FStar.FunctionalExtensionality.fsti(102,60-102,77)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(102,60-102,77); use=FStar.FunctionalExtensionality.fsti(102,60-102,77)
(FStar.FunctionalExtensionality.is_restricted @x2
@x3
@x1)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x2
@x3)))
:qid refinement_interpretation_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))

:named refinement_interpretation_Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
:qid refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))

:named refinement_interpretation_Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__OLe__item__o1; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_57f9b3587a37875d37de2b8ee309c52c)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ocmp)

;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_OLe @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_57f9b3587a37875d37de2b8ee309c52c))
:qid refinement_interpretation_Tm_refine_57f9b3587a37875d37de2b8ee309c52c))

:named refinement_interpretation_Tm_refine_57f9b3587a37875d37de2b8ee309c52c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_49b6b7afc081bac09ce40febdab68891)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MReg @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_49b6b7afc081bac09ce40febdab68891))
:qid refinement_interpretation_Tm_refine_49b6b7afc081bac09ce40febdab68891))

:named refinement_interpretation_Tm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__OEq__item__o1; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_495233c1b3965f79901632003c360db5)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ocmp)

;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_OEq @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_495233c1b3965f79901632003c360db5))
:qid refinement_interpretation_Tm_refine_495233c1b3965f79901632003c360db5))

:named refinement_interpretation_Tm_refine_495233c1b3965f79901632003c360db5))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__ONe__item__o1; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_48e1a980bff417eb8ecda8fd755a7052)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ocmp)

;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_ONe @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_48e1a980bff417eb8ecda8fd755a7052))
:qid refinement_interpretation_Tm_refine_48e1a980bff417eb8ecda8fd755a7052))

:named refinement_interpretation_Tm_refine_48e1a980bff417eb8ecda8fd755a7052))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,34-58,35); use=FStar.UInt64.fsti(58,34-58,35)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(60,21-60,28); use=FStar.UInt64.fsti(60,21-60,28)
(= (FStar.UInt64.v @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x2)))
:qid refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))

:named refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2))
(and (HasTypeFuel @u0
@x1
Prims.unit)

;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
(Valid 
;; def=Prims.fst(117,13-117,14); use=Prims.fst(117,40-117,41)
@x2
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x2)))
:qid refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named refinement_interpretation_Tm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.one; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(80,10-80,22); use=FStar.UInt64.fsti(80,10-80,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_248426d47c73436882d5ff4a2d4f3cf0)
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(80,14-80,21); use=FStar.UInt64.fsti(80,14-80,21)
(= (FStar.UInt64.v @x1)
(BoxInt 1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
:qid refinement_interpretation_Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))

:named refinement_interpretation_Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)

;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(BoxBool_proj_0 (X64.Machine_s.uu___is_OMem @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
:qid refinement_interpretation_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))

:named refinement_interpretation_Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)

;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(BoxBool_proj_0 (X64.Machine_s.uu___is_MIndex @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
:qid refinement_interpretation_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))

:named refinement_interpretation_Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__OGt__item__o1; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_078a14331436c956e0be06364feefcd5)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ocmp)

;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_OGt @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_078a14331436c956e0be06364feefcd5))
:qid refinement_interpretation_Tm_refine_078a14331436c956e0be06364feefcd5))

:named refinement_interpretation_Tm_refine_078a14331436c956e0be06364feefcd5))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_regs (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_regs))

:named projection_inverse_X64.Vale.State_i.Mkstate_regs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_ok (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_ok))

:named projection_inverse_X64.Vale.State_i.Mkstate_ok))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_mem (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_mem))

:named projection_inverse_X64.Vale.State_i.Mkstate_mem))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Vale.State_i.Mkstate_flags (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Vale.State_i.Mkstate_flags))

:named projection_inverse_X64.Vale.State_i.Mkstate_flags))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.ONe_o2 (X64.Semantics_s.ONe @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.ONe @x0
@x1))
:qid projection_inverse_X64.Semantics_s.ONe_o2))

:named projection_inverse_X64.Semantics_s.ONe_o2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.ONe_o1 (X64.Semantics_s.ONe @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.ONe @x0
@x1))
:qid projection_inverse_X64.Semantics_s.ONe_o1))

:named projection_inverse_X64.Semantics_s.ONe_o1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OLt_o2 (X64.Semantics_s.OLt @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.OLt @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OLt_o2))

:named projection_inverse_X64.Semantics_s.OLt_o2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OLt_o1 (X64.Semantics_s.OLt @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.OLt @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OLt_o1))

:named projection_inverse_X64.Semantics_s.OLt_o1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OLe_o2 (X64.Semantics_s.OLe @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.OLe @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OLe_o2))

:named projection_inverse_X64.Semantics_s.OLe_o2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OLe_o1 (X64.Semantics_s.OLe @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.OLe @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OLe_o1))

:named projection_inverse_X64.Semantics_s.OLe_o1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OGt_o2 (X64.Semantics_s.OGt @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.OGt @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OGt_o2))

:named projection_inverse_X64.Semantics_s.OGt_o2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OGt_o1 (X64.Semantics_s.OGt @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.OGt @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OGt_o1))

:named projection_inverse_X64.Semantics_s.OGt_o1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OGe_o2 (X64.Semantics_s.OGe @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.OGe @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OGe_o2))

:named projection_inverse_X64.Semantics_s.OGe_o2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OGe_o1 (X64.Semantics_s.OGe @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.OGe @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OGe_o1))

:named projection_inverse_X64.Semantics_s.OGe_o1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OEq_o2 (X64.Semantics_s.OEq @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.OEq @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OEq_o2))

:named projection_inverse_X64.Semantics_s.OEq_o2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.OEq_o1 (X64.Semantics_s.OEq @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.OEq @x0
@x1))
:qid projection_inverse_X64.Semantics_s.OEq_o1))

:named projection_inverse_X64.Semantics_s.OEq_o1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.Mkstate_regs (X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Semantics_s.Mkstate_regs))

:named projection_inverse_X64.Semantics_s.Mkstate_regs))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.Mkstate_ok (X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Semantics_s.Mkstate_ok))

:named projection_inverse_X64.Semantics_s.Mkstate_ok))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.Mkstate_mem (X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Semantics_s.Mkstate_mem))

:named projection_inverse_X64.Semantics_s.Mkstate_mem))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.Mkstate_flags (X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Semantics_s.Mkstate_flags))

:named projection_inverse_X64.Semantics_s.Mkstate_flags))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OReg_r (X64.Machine_s.OReg @x0))
@x0)
 

:pattern ((X64.Machine_s.OReg @x0))
:qid projection_inverse_X64.Machine_s.OReg_r))

:named projection_inverse_X64.Machine_s.OReg_r))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OMem_m (X64.Machine_s.OMem @x0))
@x0)
 

:pattern ((X64.Machine_s.OMem @x0))
:qid projection_inverse_X64.Machine_s.OMem_m))

:named projection_inverse_X64.Machine_s.OMem_m))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.OConst_n (X64.Machine_s.OConst @x0))
@x0)
 

:pattern ((X64.Machine_s.OConst @x0))
:qid projection_inverse_X64.Machine_s.OConst_n))

:named projection_inverse_X64.Machine_s.OConst_n))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Machine_s.MReg_r (X64.Machine_s.MReg @x0
@x1))
@x0)
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid projection_inverse_X64.Machine_s.MReg_r))

:named projection_inverse_X64.Machine_s.MReg_r))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Machine_s.MReg_offset (X64.Machine_s.MReg @x0
@x1))
@x1)
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid projection_inverse_X64.Machine_s.MReg_offset))

:named projection_inverse_X64.Machine_s.MReg_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_scale (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_scale))

:named projection_inverse_X64.Machine_s.MIndex_scale))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_offset (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_offset))

:named projection_inverse_X64.Machine_s.MIndex_offset))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_index (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_index))

:named projection_inverse_X64.Machine_s.MIndex_index))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.MIndex_base (X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.MIndex_base))

:named projection_inverse_X64.Machine_s.MIndex_base))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.MConst_n (X64.Machine_s.MConst @x0))
@x0)
 

:pattern ((X64.Machine_s.MConst @x0))
:qid projection_inverse_X64.Machine_s.MConst_n))

:named projection_inverse_X64.Machine_s.MConst_n))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__regs @x0)
(X64.Vale.State_i.Mkstate_regs @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__regs @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_regs))

:named proj_equation_X64.Vale.State_i.Mkstate_regs))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__mem; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(30,2-30,5); use=X64.Vale.State_i.fsti(30,2-30,5)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
(X64.Vale.State_i.Mkstate_mem @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__mem @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_mem))

:named proj_equation_X64.Vale.State_i.Mkstate_mem))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,2-68,6); use=X64.Semantics_s.fst(68,2-68,6)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.__proj__Mkstate__item__regs @x0)
(X64.Semantics_s.Mkstate_regs @x0))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__regs @x0))
:qid proj_equation_X64.Semantics_s.Mkstate_regs))

:named proj_equation_X64.Semantics_s.Mkstate_regs))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__mem; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(70,2-70,5); use=X64.Semantics_s.fst(70,2-70,5)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.__proj__Mkstate__item__mem @x0)
(X64.Semantics_s.Mkstate_mem @x0))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__mem @x0))
:qid proj_equation_X64.Semantics_s.Mkstate_mem))

:named proj_equation_X64.Semantics_s.Mkstate_mem))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,10-56,11); use=X64.Machine_s.fst(56,10-56,11)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.__proj__OReg__item__r @x0)
(X64.Machine_s.OReg_r @x0))
 

:pattern ((X64.Machine_s.__proj__OReg__item__r @x0))
:qid proj_equation_X64.Machine_s.OReg_r))

:named proj_equation_X64.Machine_s.OReg_r))
;;; Fact-ids: Name Prims.op_disEquality; Namespace Prims
(assert (! 
;; def=Prims.fst(594,4-594,18); use=Prims.fst(594,4-594,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_disEquality @x0
@x1
@x2)
(BoxBool (not (= @x1
@x2))))
 

:pattern ((Prims.op_disEquality @x0
@x1
@x2))
:qid primitive_Prims.op_disEquality))

:named primitive_Prims.op_disEquality))
;;; Fact-ids: Name Prims.op_Negation; Namespace Prims
(assert (! 
;; def=Prims.fst(534,4-534,15); use=Prims.fst(534,4-534,15)
(forall ((@x0 Term))
 (! (= (Prims.op_Negation @x0)
(BoxBool (not (BoxBool_proj_0 @x0))))
 

:pattern ((Prims.op_Negation @x0))
:qid primitive_Prims.op_Negation))

:named primitive_Prims.op_Negation))
;;; Fact-ids: Name Prims.op_GreaterThanOrEqual; Namespace Prims
(assert (! 
;; def=Prims.fst(576,4-576,25); use=Prims.fst(576,4-576,25)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThanOrEqual @x0
@x1)
(BoxBool (>= (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThanOrEqual @x0
@x1))
:qid primitive_Prims.op_GreaterThanOrEqual))

:named primitive_Prims.op_GreaterThanOrEqual))
;;; Fact-ids: Name Prims.op_GreaterThan; Namespace Prims
(assert (! 
;; def=Prims.fst(570,4-570,18); use=Prims.fst(570,4-570,18)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_GreaterThan @x0
@x1)
(BoxBool (> (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_GreaterThan @x0
@x1))
:qid primitive_Prims.op_GreaterThan))

:named primitive_Prims.op_GreaterThan))
;;; Fact-ids: Name Prims.op_Equality; Namespace Prims
(assert (! 
;; def=Prims.fst(588,4-588,15); use=Prims.fst(588,4-588,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.op_Equality @x0
@x1
@x2)
(BoxBool (= @x1
@x2)))
 

:pattern ((Prims.op_Equality @x0
@x1
@x2))
:qid primitive_Prims.op_Equality))

:named primitive_Prims.op_Equality))
;;; Fact-ids: Name Prims.op_BarBar; Namespace Prims
(assert (! 
;; def=Prims.fst(528,4-528,13); use=Prims.fst(528,4-528,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_BarBar @x0
@x1)
(BoxBool (or (BoxBool_proj_0 @x0)
(BoxBool_proj_0 @x1))))
 

:pattern ((Prims.op_BarBar @x0
@x1))
:qid primitive_Prims.op_BarBar))

:named primitive_Prims.op_BarBar))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.StateLemmas_i.lemma_to_reg
;;; Fact-ids: Name X64.Vale.StateLemmas_i.lemma_to_reg; Namespace X64.Vale.StateLemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.reg))

;; def=X64.Vale.StateLemmas_i.fsti(49,11-49,56); use=X64.Vale.StateLemmas_i.fsti(49,11-49,56)
(= (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x0)
@x1)
(FStar.UInt64.v (ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
(X64.Vale.StateLemmas_i.state_to_S @x0))
@x1)))
)
 

:pattern ((ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x0)
@x1))
:qid lemma_X64.Vale.StateLemmas_i.lemma_to_reg))
:named lemma_X64.Vale.StateLemmas_i.lemma_to_reg))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.StateLemmas_i.lemma_to_mem_sel
;;; Fact-ids: Name X64.Vale.StateLemmas_i.lemma_to_mem_sel; Namespace X64.Vale.StateLemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
Prims.int))

;; def=X64.Vale.StateLemmas_i.fsti(45,11-45,72); use=X64.Vale.StateLemmas_i.fsti(45,11-45,72)
(= (FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
@x1)
(FStar.UInt64.v (FStar.Map.sel Prims.int
(X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Vale.StateLemmas_i.state_to_S @x0))
@x1)))
)
 

:pattern ((FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
@x1))
:qid lemma_X64.Vale.StateLemmas_i.lemma_to_mem_sel))
:named lemma_X64.Vale.StateLemmas_i.lemma_to_mem_sel))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.StateLemmas_i.lemma_to_eval_operand
;;; Fact-ids: Name X64.Vale.StateLemmas_i.lemma_to_eval_operand; Namespace X64.Vale.StateLemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand))

;; def=X64.Vale.StateLemmas_i.fsti(53,11-53,73); use=X64.Vale.StateLemmas_i.fsti(53,11-53,73)
(= (X64.Vale.State_i.eval_operand @x1
@x0)
(FStar.UInt64.v (X64.Semantics_s.eval_operand @x1
(X64.Vale.StateLemmas_i.state_to_S @x0))))
)
 

:pattern ((X64.Vale.State_i.eval_operand @x1
@x0))
:qid lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand))
:named lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt64.vu_inv
;;; Fact-ids: Name FStar.UInt64.vu_inv; Namespace FStar.UInt64
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt.uint_t (BoxInt 64)))

;; def=FStar.UInt64.fsti(69,11-69,33); use=FStar.UInt64.fsti(69,11-69,33)
(= (FStar.UInt64.v (FStar.UInt64.uint_to_t @x0))
@x0)
)
 

:pattern ((FStar.UInt64.uint_to_t @x0))
:qid lemma_FStar.UInt64.vu_inv))
:named lemma_FStar.UInt64.vu_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt64.uv_inv
;;; Fact-ids: Name FStar.UInt64.uv_inv; Namespace FStar.UInt64
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(64,11-64,33); use=FStar.UInt64.fsti(64,11-64,33)
(= (FStar.UInt64.uint_to_t (FStar.UInt64.v @x0))
@x0)
)
 

:pattern ((FStar.UInt64.v @x0))
:qid lemma_FStar.UInt64.uv_inv))
:named lemma_FStar.UInt64.uv_inv))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.idempotence_on_domain
;;; Fact-ids: Name FStar.FunctionalExtensionality.idempotence_on_domain; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(84,12-84,58); use=FStar.FunctionalExtensionality.fsti(84,12-84,58)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
)
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)))
:qid lemma_FStar.FunctionalExtensionality.idempotence_on_domain))
:named lemma_FStar.FunctionalExtensionality.idempotence_on_domain))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.feq_on_domain
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq_on_domain; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(80,12-80,35); use=FStar.FunctionalExtensionality.fsti(80,12-80,35)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(80,12-80,35); use=FStar.FunctionalExtensionality.fsti(80,12-80,35)
(FStar.FunctionalExtensionality.feq @x0
@x1
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
@x2)
)
)
 

:pattern ((FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2))
:qid lemma_FStar.FunctionalExtensionality.feq_on_domain))
:named lemma_FStar.FunctionalExtensionality.feq_on_domain))
;;;;;;;;;;;;;;;;Lemma: FStar.FunctionalExtensionality.extensionality
;;; Fact-ids: Name FStar.FunctionalExtensionality.extensionality; Namespace FStar.FunctionalExtensionality
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))

;; def=FStar.FunctionalExtensionality.fsti(133,21-133,72); use=FStar.FunctionalExtensionality.fsti(133,21-133,72)
(iff 
;; def=FStar.FunctionalExtensionality.fsti(133,22-133,35); use=FStar.FunctionalExtensionality.fsti(133,22-133,35)
(Valid 
;; def=FStar.FunctionalExtensionality.fsti(133,22-133,35); use=FStar.FunctionalExtensionality.fsti(133,22-133,35)
(FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
)


;; def=FStar.FunctionalExtensionality.fsti(133,41-133,71); use=FStar.FunctionalExtensionality.fsti(133,41-133,71)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
(FStar.FunctionalExtensionality.on_domain @x0
@x1
@x3))
)
)
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid lemma_FStar.FunctionalExtensionality.extensionality))
:named lemma_FStar.FunctionalExtensionality.extensionality))
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! (HasType X64.Vale.State_i.state
Tm_type)
:named kinding_X64.Vale.State_i.state@tok))
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.state
Tm_type)
:named kinding_X64.Semantics_s.state@tok))
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.ocmp
Tm_type)
:named kinding_X64.Semantics_s.ocmp@tok))
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.reg
Tm_type)
:named kinding_X64.Machine_s.reg@tok))
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.operand
Tm_type)
:named kinding_X64.Machine_s.operand@tok))
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.maddr
Tm_type)
:named kinding_X64.Machine_s.maddr@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named kinding_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x0
@x1)
Tm_type))
:qid kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named kinding_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! (HasType Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee
Tm_type)
:named kinding_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_73862e447730cb7be03c891c89cb5703
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_73862e447730cb7be03c891c89cb5703
Tm_type)
:named kinding_Tm_arrow_73862e447730cb7be03c891c89cb5703))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0)
Tm_type))
:qid kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named kinding_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_193bd525e26cb6146836f2ec97504c13
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_193bd525e26cb6146836f2ec97504c13
Tm_type)
:named kinding_Tm_arrow_193bd525e26cb6146836f2ec97504c13))
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (HasType Prims.trivial
Tm_type)
:named kinding_Prims.trivial@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! 
;; def=X64.Vale.Regs_i.fsti(23,38-23,43); use=X64.Vale.Regs_i.fsti(23,38-23,43)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_bde726dfeb2837d96e43a155f7c873f5
@x0)
X64.Machine_s.nat64)
 

:pattern ((ApplyTT Tm_abs_bde726dfeb2837d96e43a155f7c873f5
@x0))
:qid interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5))

:named interpretation_Tm_abs_bde726dfeb2837d96e43a155f7c873f5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_2da3d120bd5ce08465191535a1915477
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,37-68,43); use=X64.Semantics_s.fst(68,37-68,43)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_2da3d120bd5ce08465191535a1915477
@x0)
(X64.Semantics_s.uint64 Dummy_value))
 

:pattern ((ApplyTT Tm_abs_2da3d120bd5ce08465191535a1915477
@x0))
:qid interpretation_Tm_abs_2da3d120bd5ce08465191535a1915477))

:named interpretation_Tm_abs_2da3d120bd5ce08465191535a1915477))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e
;;; Fact-ids: Name X64.Semantics_s.__proj__OGe__item__o1; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e))
(Valid (Prims.hasEq X64.Semantics_s.ocmp)))
:named haseqTm_refine_f22bf0e89c9043ddb9367ea1bd90ba6e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f13070840248fced9d9d60d77bdae3ec
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,22-54,37); use=FStar.UInt.fsti(54,22-54,37)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0)))
(Valid (Prims.hasEq Prims.int)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))))
:qid haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))

:named haseqTm_refine_f13070840248fced9d9d60d77bdae3ec))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e85c4468bd6fa895770a44e5ae1526dc
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e85c4468bd6fa895770a44e5ae1526dc))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_e85c4468bd6fa895770a44e5ae1526dc))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e3f7ed102fdc0dee07045511829455f8
;;; Fact-ids: Name X64.Semantics_s.__proj__OLt__item__o1; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e3f7ed102fdc0dee07045511829455f8))
(Valid (Prims.hasEq X64.Semantics_s.ocmp)))
:named haseqTm_refine_e3f7ed102fdc0dee07045511829455f8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ad649c559db000bf1dd08bb4e261413e
;;; Fact-ids: Name X64.Machine_s.__proj__MConst__item__n; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_ad649c559db000bf1dd08bb4e261413e))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_ad649c559db000bf1dd08bb4e261413e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_94d25b6e0041d543efd58300424ecc37
;;; Fact-ids: Name FStar.UInt64.div; Namespace FStar.UInt64
(assert (! (iff (Valid (Prims.hasEq Tm_refine_94d25b6e0041d543efd58300424ecc37))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
:named haseqTm_refine_94d25b6e0041d543efd58300424ecc37))
;;;;;;;;;;;;;;;;haseq for Tm_refine_8d65e998a07dd53ec478e27017d9dba5
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,40); use=Prims.fst(315,31-315,40)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1)))
(Valid (Prims.hasEq @x0)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x0
@x1))))
:qid haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))

:named haseqTm_refine_8d65e998a07dd53ec478e27017d9dba5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_89584a9c9cf094f470969adafcc43f12
;;; Fact-ids: Name FStar.UInt64.zero; Namespace FStar.UInt64
(assert (! (iff (Valid (Prims.hasEq Tm_refine_89584a9c9cf094f470969adafcc43f12))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
:named haseqTm_refine_89584a9c9cf094f470969adafcc43f12))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8
;;; Fact-ids: Name X64.Machine_s.__proj__OConst__item__n; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_7efc3fb0a0ebacf4e999ae215f7b60a8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,46-102,78); use=FStar.FunctionalExtensionality.fsti(102,46-102,78)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1)))
(Valid (Prims.hasEq (Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1))))
:qid haseqTm_refine_7e4a6c5999db731b5d17d0418dfeea3e))

:named haseqTm_refine_7e4a6c5999db731b5d17d0418dfeea3e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7c9e5bdb9582a858897946d48f9f4d58
;;; Fact-ids: Name X64.Machine_s.__proj__OReg__item__r; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_7c9e5bdb9582a858897946d48f9f4d58))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_7c9e5bdb9582a858897946d48f9f4d58))
;;;;;;;;;;;;;;;;haseq for Tm_refine_57f9b3587a37875d37de2b8ee309c52c
;;; Fact-ids: Name X64.Semantics_s.__proj__OLe__item__o1; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_57f9b3587a37875d37de2b8ee309c52c))
(Valid (Prims.hasEq X64.Semantics_s.ocmp)))
:named haseqTm_refine_57f9b3587a37875d37de2b8ee309c52c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_49b6b7afc081bac09ce40febdab68891
;;; Fact-ids: Name X64.Machine_s.__proj__MReg__item__r; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_49b6b7afc081bac09ce40febdab68891))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_49b6b7afc081bac09ce40febdab68891))
;;;;;;;;;;;;;;;;haseq for Tm_refine_495233c1b3965f79901632003c360db5
;;; Fact-ids: Name X64.Semantics_s.__proj__OEq__item__o1; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_495233c1b3965f79901632003c360db5))
(Valid (Prims.hasEq X64.Semantics_s.ocmp)))
:named haseqTm_refine_495233c1b3965f79901632003c360db5))
;;;;;;;;;;;;;;;;haseq for Tm_refine_48e1a980bff417eb8ecda8fd755a7052
;;; Fact-ids: Name X64.Semantics_s.__proj__ONe__item__o1; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_48e1a980bff417eb8ecda8fd755a7052))
(Valid (Prims.hasEq X64.Semantics_s.ocmp)))
:named haseqTm_refine_48e1a980bff417eb8ecda8fd755a7052))
;;;;;;;;;;;;;;;;haseq for Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4
;;; Fact-ids: Name FStar.UInt64.uint_to_t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(58,34-58,35); use=FStar.UInt64.fsti(58,34-58,35)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4 @x0))))
:qid haseqTm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))

:named haseqTm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2de20c066034c13bf76e9c0b94f4806c
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,32-117,42); use=Prims.fst(117,32-117,42)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0)))
(Valid (Prims.hasEq Prims.unit)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))))
:qid haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))

:named haseqTm_refine_2de20c066034c13bf76e9c0b94f4806c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_248426d47c73436882d5ff4a2d4f3cf0
;;; Fact-ids: Name FStar.UInt64.one; Namespace FStar.UInt64
(assert (! (iff (Valid (Prims.hasEq Tm_refine_248426d47c73436882d5ff4a2d4f3cf0))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
:named haseqTm_refine_248426d47c73436882d5ff4a2d4f3cf0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6
;;; Fact-ids: Name X64.Machine_s.__proj__OMem__item__m; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
(Valid (Prims.hasEq X64.Machine_s.operand)))
:named haseqTm_refine_1ffc672b65f59d0fc5f2be00bff120b6))
;;;;;;;;;;;;;;;;haseq for Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125
;;; Fact-ids: Name X64.Machine_s.__proj__MIndex__item__base; Namespace X64.Machine_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
(Valid (Prims.hasEq X64.Machine_s.maddr)))
:named haseqTm_refine_0c01fa907bf3fbb9b7c15b0e05d45125))
;;;;;;;;;;;;;;;;haseq for Tm_refine_078a14331436c956e0be06364feefcd5
;;; Fact-ids: Name X64.Semantics_s.__proj__OGt__item__o1; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_078a14331436c956e0be06364feefcd5))
(Valid (Prims.hasEq X64.Semantics_s.ocmp)))
:named haseqTm_refine_078a14331436c956e0be06364feefcd5))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Vale.State_i.__proj__Mkstate__item__regs@tok
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))

;; def=X64.Vale.State_i.fsti(28,2-28,6); use=X64.Vale.State_i.fsti(28,2-28,6)
(forall ((@x1 Term))
 (! (= (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Vale.State_i.__proj__Mkstate__item__regs @x1))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__regs @x1))
:qid function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs.1))
)
 

:pattern ((ApplyTT @x0
X64.Vale.State_i.__proj__Mkstate__item__regs@tok))
:qid function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs))

:named function_token_typing_X64.Vale.State_i.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (HasType X64.Vale.Regs_i.t
Tm_type)
:named function_token_typing_X64.Vale.Regs_i.t))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.mem; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.mem
Tm_type)
:named function_token_typing_X64.Semantics_s.mem))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,2-68,6); use=X64.Semantics_s.fst(68,2-68,6)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Semantics_s.__proj__Mkstate__item__regs@tok
Tm_arrow_193bd525e26cb6146836f2ec97504c13))

;; def=X64.Semantics_s.fst(68,2-68,6); use=X64.Semantics_s.fst(68,2-68,6)
(forall ((@x1 Term))
 (! (= (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
(X64.Semantics_s.__proj__Mkstate__item__regs @x1))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__regs @x1))
:qid function_token_typing_X64.Semantics_s.__proj__Mkstate__item__regs.1))
)
 

:pattern ((ApplyTT @x0
X64.Semantics_s.__proj__Mkstate__item__regs@tok))
:qid function_token_typing_X64.Semantics_s.__proj__Mkstate__item__regs))

:named function_token_typing_X64.Semantics_s.__proj__Mkstate__item__regs))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (HasType Prims.l_True
Prims.logical)
:named function_token_typing_Prims.l_True))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Vale.State_i.state)
(is-X64.Vale.State_i.Mkstate @x1))
 

:pattern ((HasTypeFuel @u0
@x1
X64.Vale.State_i.state))
:qid fuel_guarded_inversion_X64.Vale.State_i.state))

:named fuel_guarded_inversion_X64.Vale.State_i.state))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Semantics_s.state)
(is-X64.Semantics_s.Mkstate @x1))
 

:pattern ((HasTypeFuel @u0
@x1
X64.Semantics_s.state))
:qid fuel_guarded_inversion_X64.Semantics_s.state))

:named fuel_guarded_inversion_X64.Semantics_s.state))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(49,5-49,9); use=X64.Semantics_s.fst(49,5-49,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Semantics_s.ocmp)
(or (is-X64.Semantics_s.OEq @x1)
(is-X64.Semantics_s.ONe @x1)
(is-X64.Semantics_s.OLe @x1)
(is-X64.Semantics_s.OGe @x1)
(is-X64.Semantics_s.OLt @x1)
(is-X64.Semantics_s.OGt @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Semantics_s.ocmp))
:qid fuel_guarded_inversion_X64.Semantics_s.ocmp))

:named fuel_guarded_inversion_X64.Semantics_s.ocmp))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(31,5-31,8); use=X64.Machine_s.fst(31,5-31,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.reg)
(or (is-X64.Machine_s.Rax @x1)
(is-X64.Machine_s.Rbx @x1)
(is-X64.Machine_s.Rcx @x1)
(is-X64.Machine_s.Rdx @x1)
(is-X64.Machine_s.Rsi @x1)
(is-X64.Machine_s.Rdi @x1)
(is-X64.Machine_s.Rbp @x1)
(is-X64.Machine_s.Rsp @x1)
(is-X64.Machine_s.R8 @x1)
(is-X64.Machine_s.R9 @x1)
(is-X64.Machine_s.R10 @x1)
(is-X64.Machine_s.R11 @x1)
(is-X64.Machine_s.R12 @x1)
(is-X64.Machine_s.R13 @x1)
(is-X64.Machine_s.R14 @x1)
(is-X64.Machine_s.R15 @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.reg))
:qid fuel_guarded_inversion_X64.Machine_s.reg))

:named fuel_guarded_inversion_X64.Machine_s.reg))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(54,5-54,12); use=X64.Machine_s.fst(54,5-54,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.operand)
(or (is-X64.Machine_s.OConst @x1)
(is-X64.Machine_s.OReg @x1)
(is-X64.Machine_s.OMem @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.operand))
:qid fuel_guarded_inversion_X64.Machine_s.operand))

:named fuel_guarded_inversion_X64.Machine_s.operand))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(49,5-49,10); use=X64.Machine_s.fst(49,5-49,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.maddr)
(or (is-X64.Machine_s.MConst @x1)
(is-X64.Machine_s.MReg @x1)
(is-X64.Machine_s.MIndex @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Machine_s.maddr))
:qid fuel_guarded_inversion_X64.Machine_s.maddr))

:named fuel_guarded_inversion_X64.Machine_s.maddr))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.trivial)
(is-Prims.T @x1))
 

:pattern ((HasTypeFuel @u0
@x1
Prims.trivial))
:qid fuel_guarded_inversion_Prims.trivial))

:named fuel_guarded_inversion_Prims.trivial))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.eval_operand
;;; Fact-ids: Name X64.Vale.State_i.eval_operand; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(62,4-62,16); use=X64.Vale.State_i.fsti(62,4-62,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.eval_operand @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(X64.Machine_s.int_to_nat64 (X64.Machine_s.OConst_n @lb2))
(ite (is-X64.Machine_s.OReg @lb2)
(ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r @lb2))
(ite (is-X64.Machine_s.OMem @lb2)
(FStar.Map.sel Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x1)
(X64.Vale.State_i.eval_maddr (X64.Machine_s.OMem_m @lb2)
@x1))
Tm_unit)))))
 

:pattern ((X64.Vale.State_i.eval_operand @x0
@x1))
:qid equation_X64.Vale.State_i.eval_operand))

:named equation_X64.Vale.State_i.eval_operand))
;;;;;;;;;;;;;;;;Equation for X64.Vale.State_i.eval_maddr
;;; Fact-ids: Name X64.Vale.State_i.eval_maddr; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(55,4-55,14); use=X64.Vale.State_i.fsti(55,4-55,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.State_i.eval_maddr @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.MConst @lb2)
(X64.Machine_s.MConst_n @lb2)
(ite (is-X64.Machine_s.MReg @lb2)
(BoxInt (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MReg_r @lb2)))
(BoxInt_proj_0 (X64.Machine_s.MReg_offset @lb2))))
(ite (is-X64.Machine_s.MIndex @lb2)
(BoxInt (+ (+ (BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MIndex_base @lb2)))
(_mul (BoxInt_proj_0 (X64.Machine_s.MIndex_scale @lb2))
(BoxInt_proj_0 (ApplyTT (ApplyTT X64.Vale.State_i.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MIndex_index @lb2)))))
(BoxInt_proj_0 (X64.Machine_s.MIndex_offset @lb2))))
Tm_unit)))))
 

:pattern ((X64.Vale.State_i.eval_maddr @x0
@x1))
:qid equation_X64.Vale.State_i.eval_maddr))

:named equation_X64.Vale.State_i.eval_maddr))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Regs_i.t
;;; Fact-ids: Name X64.Vale.Regs_i.t; Namespace X64.Vale.Regs_i
(assert (! (= X64.Vale.Regs_i.t
(FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg
Tm_abs_bde726dfeb2837d96e43a155f7c873f5))
:named equation_X64.Vale.Regs_i.t))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Lemmas_i.eval_ocmp
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_ocmp; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fsti(34,4-34,13); use=X64.Vale.Lemmas_i.fsti(34,4-34,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Vale.Lemmas_i.eval_ocmp @x0
@x1)
(X64.Semantics_s.eval_ocmp (X64.Vale.StateLemmas_i.state_to_S @x0)
@x1))
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
@x1))
:qid equation_X64.Vale.Lemmas_i.eval_ocmp))

:named equation_X64.Vale.Lemmas_i.eval_ocmp))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.uint64
;;; Fact-ids: Name X64.Semantics_s.uint64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(25,5-25,11); use=X64.Semantics_s.fst(25,5-25,11)
(forall ((@u0 Dummy_sort))
 (! (= 
;; def=X64.Semantics_s.fst(25,5-25,11); use=X64.Semantics_s.fst(25,5-25,11)
(X64.Semantics_s.uint64 @u0)

(FStar.UInt64.t Dummy_value))
 

:pattern (
;; def=X64.Semantics_s.fst(25,5-25,11); use=X64.Semantics_s.fst(25,5-25,11)
(X64.Semantics_s.uint64 @u0)
)
:qid equation_X64.Semantics_s.uint64))

:named equation_X64.Semantics_s.uint64))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.u
;;; Fact-ids: Name X64.Semantics_s.u; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(73,4-73,5); use=X64.Semantics_s.fst(73,4-73,5)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.u @x0)
(FStar.UInt64.uint_to_t @x0))
 

:pattern ((X64.Semantics_s.u @x0))
:qid equation_X64.Semantics_s.u))

:named equation_X64.Semantics_s.u))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.mem
;;; Fact-ids: Name X64.Semantics_s.mem; Namespace X64.Semantics_s
(assert (! (= X64.Semantics_s.mem
(X64.Semantics_s.map Prims.int
(X64.Semantics_s.uint64 Dummy_value)))
:named equation_X64.Semantics_s.mem))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.map
;;; Fact-ids: Name X64.Semantics_s.map; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(27,4-27,7); use=X64.Semantics_s.fst(27,4-27,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.map @x0
@x1)
(FStar.Map.t @x0
@x1))
 

:pattern ((X64.Semantics_s.map @x0
@x1))
:qid equation_X64.Semantics_s.map))

:named equation_X64.Semantics_s.map))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.eval_operand
;;; Fact-ids: Name X64.Semantics_s.eval_operand; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(87,4-87,16); use=X64.Semantics_s.fst(87,4-87,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.eval_operand @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(X64.Semantics_s.u (X64.Machine_s.int_to_nat64 (X64.Machine_s.OConst_n @lb2)))
(ite (is-X64.Machine_s.OReg @lb2)
(ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.OReg_r @lb2))
(ite (is-X64.Machine_s.OMem @lb2)
(FStar.Map.sel Prims.int
(X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.__proj__Mkstate__item__mem @x1)
(X64.Semantics_s.eval_maddr (X64.Machine_s.OMem_m @lb2)
@x1))
Tm_unit)))))
 

:pattern ((X64.Semantics_s.eval_operand @x0
@x1))
:qid equation_X64.Semantics_s.eval_operand))

:named equation_X64.Semantics_s.eval_operand))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.eval_ocmp
;;; Fact-ids: Name X64.Semantics_s.eval_ocmp; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(269,4-269,13); use=X64.Semantics_s.fst(269,4-269,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.eval_ocmp @x0
@x1)
(let ((@lb2 @x1))
(ite (is-X64.Semantics_s.OEq @lb2)
(Prims.op_Equality (X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.eval_operand (X64.Semantics_s.OEq_o1 @lb2)
@x0)
(X64.Semantics_s.eval_operand (X64.Semantics_s.OEq_o2 @lb2)
@x0))
(ite (is-X64.Semantics_s.ONe @lb2)
(Prims.op_disEquality (X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.eval_operand (X64.Semantics_s.ONe_o1 @lb2)
@x0)
(X64.Semantics_s.eval_operand (X64.Semantics_s.ONe_o2 @lb2)
@x0))
(ite (is-X64.Semantics_s.OLe @lb2)
(FStar.UInt64.lte (X64.Semantics_s.eval_operand (X64.Semantics_s.OLe_o1 @lb2)
@x0)
(X64.Semantics_s.eval_operand (X64.Semantics_s.OLe_o2 @lb2)
@x0))
(ite (is-X64.Semantics_s.OGe @lb2)
(FStar.UInt64.gte (X64.Semantics_s.eval_operand (X64.Semantics_s.OGe_o1 @lb2)
@x0)
(X64.Semantics_s.eval_operand (X64.Semantics_s.OGe_o2 @lb2)
@x0))
(ite (is-X64.Semantics_s.OLt @lb2)
(FStar.UInt64.lt (X64.Semantics_s.eval_operand (X64.Semantics_s.OLt_o1 @lb2)
@x0)
(X64.Semantics_s.eval_operand (X64.Semantics_s.OLt_o2 @lb2)
@x0))
(ite (is-X64.Semantics_s.OGt @lb2)
(FStar.UInt64.gt (X64.Semantics_s.eval_operand (X64.Semantics_s.OGt_o1 @lb2)
@x0)
(X64.Semantics_s.eval_operand (X64.Semantics_s.OGt_o2 @lb2)
@x0))
Tm_unit))))))))
 

:pattern ((X64.Semantics_s.eval_ocmp @x0
@x1))
:qid equation_X64.Semantics_s.eval_ocmp))

:named equation_X64.Semantics_s.eval_ocmp))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.eval_maddr
;;; Fact-ids: Name X64.Semantics_s.eval_maddr; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(79,4-79,14); use=X64.Semantics_s.fst(79,4-79,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.eval_maddr @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.MConst @lb2)
(X64.Machine_s.MConst_n @lb2)
(ite (is-X64.Machine_s.MReg @lb2)
(BoxInt (+ (BoxInt_proj_0 (FStar.UInt64.v (ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MReg_r @lb2))))
(BoxInt_proj_0 (X64.Machine_s.MReg_offset @lb2))))
(ite (is-X64.Machine_s.MIndex @lb2)
(BoxInt (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MIndex_base @lb2))))
(_mul (BoxInt_proj_0 (X64.Machine_s.MIndex_scale @lb2))
(BoxInt_proj_0 (FStar.UInt64.v (ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
(X64.Machine_s.MIndex_index @lb2))))))
(BoxInt_proj_0 (X64.Machine_s.MIndex_offset @lb2))))
Tm_unit)))))
 

:pattern ((X64.Semantics_s.eval_maddr @x0
@x1))
:qid equation_X64.Semantics_s.eval_maddr))

:named equation_X64.Semantics_s.eval_maddr))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.valid_dst
;;; Fact-ids: Name X64.Machine_s.valid_dst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(65,4-65,13); use=X64.Machine_s.fst(65,4-65,13)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.valid_dst @x0)
(Prims.op_Negation (Prims.op_BarBar (X64.Machine_s.uu___is_OConst @x0)
(Prims.op_AmpAmp (X64.Machine_s.uu___is_OReg @x0)
(X64.Machine_s.uu___is_Rsp (X64.Machine_s.__proj__OReg__item__r @x0))))))
 

:pattern ((X64.Machine_s.valid_dst @x0))
:qid equation_X64.Machine_s.valid_dst))

:named equation_X64.Machine_s.valid_dst))
;;;;;;;;;;;;;;;;Equation for Prims.squash
;;; Fact-ids: Name Prims.squash; Namespace Prims
(assert (! 
;; def=Prims.fst(117,5-117,11); use=Prims.fst(117,5-117,11)
(forall ((@x0 Term))
 (! (= (Prims.squash @x0)
(Tm_refine_2de20c066034c13bf76e9c0b94f4806c @x0))
 

:pattern ((Prims.squash @x0))
:qid equation_Prims.squash))

:named equation_Prims.squash))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post'
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,4-315,14); use=Prims.fst(315,4-315,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.pure_post_ @x0
@x1)
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x0))
 

:pattern ((Prims.pure_post_ @x0
@x1))
:qid equation_Prims.pure_post_))

:named equation_Prims.pure_post_))
;;;;;;;;;;;;;;;;Equation for Prims.pure_post
;;; Fact-ids: Name Prims.pure_post; Namespace Prims
(assert (! 
;; def=Prims.fst(316,4-316,13); use=Prims.fst(316,4-316,13)
(forall ((@x0 Term))
 (! (= (Prims.pure_post @x0)
(Prims.pure_post_ @x0
Prims.l_True))
 

:pattern ((Prims.pure_post @x0))
:qid equation_Prims.pure_post))

:named equation_Prims.pure_post))
;;;;;;;;;;;;;;;;Equation for Prims.l_True
;;; Fact-ids: Name Prims.l_True; Namespace Prims
(assert (! (= Prims.l_True
(Prims.squash Prims.trivial))
:named equation_Prims.l_True))
;;;;;;;;;;;;;;;;Equation for FStar.UInt64.lte
;;; Fact-ids: Name FStar.UInt64.lte; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(235,4-235,7); use=FStar.UInt64.fsti(235,4-235,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt64.lte @x0
@x1)
(FStar.UInt.lte (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt64.v @x1)))
 

:pattern ((FStar.UInt64.lte @x0
@x1))
:qid equation_FStar.UInt64.lte))

:named equation_FStar.UInt64.lte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt64.lt
;;; Fact-ids: Name FStar.UInt64.lt; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(232,4-232,6); use=FStar.UInt64.fsti(232,4-232,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt64.lt @x0
@x1)
(FStar.UInt.lt (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt64.v @x1)))
 

:pattern ((FStar.UInt64.lt @x0
@x1))
:qid equation_FStar.UInt64.lt))

:named equation_FStar.UInt64.lt))
;;;;;;;;;;;;;;;;Equation for FStar.UInt64.gte
;;; Fact-ids: Name FStar.UInt64.gte; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(229,4-229,7); use=FStar.UInt64.fsti(229,4-229,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt64.gte @x0
@x1)
(FStar.UInt.gte (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt64.v @x1)))
 

:pattern ((FStar.UInt64.gte @x0
@x1))
:qid equation_FStar.UInt64.gte))

:named equation_FStar.UInt64.gte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt64.gt
;;; Fact-ids: Name FStar.UInt64.gt; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(226,4-226,6); use=FStar.UInt64.fsti(226,4-226,6)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt64.gt @x0
@x1)
(FStar.UInt.gt (BoxInt 64)
(FStar.UInt64.v @x0)
(FStar.UInt64.v @x1)))
 

:pattern ((FStar.UInt64.gt @x0
@x1))
:qid equation_FStar.UInt64.gt))

:named equation_FStar.UInt64.gt))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.uint_t
;;; Fact-ids: Name FStar.UInt.uint_t; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(54,5-54,11); use=FStar.UInt.fsti(54,5-54,11)
(forall ((@x0 Term))
 (! (= (FStar.UInt.uint_t @x0)
(Tm_refine_f13070840248fced9d9d60d77bdae3ec @x0))
 

:pattern ((FStar.UInt.uint_t @x0))
:qid equation_FStar.UInt.uint_t))

:named equation_FStar.UInt.uint_t))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.lte
;;; Fact-ids: Name FStar.UInt.lte; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(170,4-170,7); use=FStar.UInt.fsti(170,4-170,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.lte @x0
@x1
@x2)
(Prims.op_LessThanOrEqual @x1
@x2))
 

:pattern ((FStar.UInt.lte @x0
@x1
@x2))
:qid equation_FStar.UInt.lte))

:named equation_FStar.UInt.lte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.lt
;;; Fact-ids: Name FStar.UInt.lt; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(169,4-169,6); use=FStar.UInt.fsti(169,4-169,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.lt @x0
@x1
@x2)
(Prims.op_LessThan @x1
@x2))
 

:pattern ((FStar.UInt.lt @x0
@x1
@x2))
:qid equation_FStar.UInt.lt))

:named equation_FStar.UInt.lt))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.gte
;;; Fact-ids: Name FStar.UInt.gte; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(168,4-168,7); use=FStar.UInt.fsti(168,4-168,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.gte @x0
@x1
@x2)
(Prims.op_GreaterThanOrEqual @x1
@x2))
 

:pattern ((FStar.UInt.gte @x0
@x1
@x2))
:qid equation_FStar.UInt.gte))

:named equation_FStar.UInt.gte))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.gt
;;; Fact-ids: Name FStar.UInt.gt; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(167,4-167,6); use=FStar.UInt.fsti(167,4-167,6)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.gt @x0
@x1
@x2)
(Prims.op_GreaterThan @x1
@x2))
 

:pattern ((FStar.UInt.gt @x0
@x1
@x2))
:qid equation_FStar.UInt.gt))

:named equation_FStar.UInt.gt))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.restricted_t
;;; Fact-ids: Name FStar.FunctionalExtensionality.restricted_t; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(102,4-102,16); use=FStar.FunctionalExtensionality.fsti(102,4-102,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.FunctionalExtensionality.restricted_t @x0
@x1)
(Tm_refine_7e4a6c5999db731b5d17d0418dfeea3e @x0
@x1))
 

:pattern ((FStar.FunctionalExtensionality.restricted_t @x0
@x1))
:qid equation_FStar.FunctionalExtensionality.restricted_t))

:named equation_FStar.FunctionalExtensionality.restricted_t))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.is_restricted
;;; Fact-ids: Name FStar.FunctionalExtensionality.is_restricted; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(94,4-94,17); use=FStar.FunctionalExtensionality.fsti(94,4-94,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2))

;; def=FStar.FunctionalExtensionality.fsti(94,63-94,81); use=FStar.FunctionalExtensionality.fsti(94,63-94,81)
(= (FStar.FunctionalExtensionality.on_domain @x0
@x1
@x2)
@x2)
)
 

:pattern ((FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2))
:qid equation_FStar.FunctionalExtensionality.is_restricted))

:named equation_FStar.FunctionalExtensionality.is_restricted))
;;;;;;;;;;;;;;;;Equation for FStar.FunctionalExtensionality.feq
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (Valid (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))

;; def=FStar.FunctionalExtensionality.fsti(48,56-48,100); use=FStar.FunctionalExtensionality.fsti(48,56-48,100)
(forall ((@x4 Term))
 (! (implies (HasType @x4
@x0)

;; def=FStar.FunctionalExtensionality.fsti(48,90-48,100); use=FStar.FunctionalExtensionality.fsti(48,90-48,100)
(= (ApplyTT @x2
@x4)
(ApplyTT @x3
@x4))
)
 

:pattern ((ApplyTT @x2
@x4))

:pattern ((ApplyTT @x3
@x4))
:qid equation_FStar.FunctionalExtensionality.feq.1))
)
 

:pattern ((FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3))
:qid equation_FStar.FunctionalExtensionality.feq))

:named equation_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rsp@tok
X64.Machine_s.Rsp)
:named equality_tok_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rsi@tok
X64.Machine_s.Rsi)
:named equality_tok_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rdx@tok
X64.Machine_s.Rdx)
:named equality_tok_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rdi@tok
X64.Machine_s.Rdi)
:named equality_tok_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rcx@tok
X64.Machine_s.Rcx)
:named equality_tok_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rbx@tok
X64.Machine_s.Rbx)
:named equality_tok_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rbp@tok
X64.Machine_s.Rbp)
:named equality_tok_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.Rax@tok
X64.Machine_s.Rax)
:named equality_tok_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R9@tok
X64.Machine_s.R9)
:named equality_tok_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R8@tok
X64.Machine_s.R8)
:named equality_tok_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R15@tok
X64.Machine_s.R15)
:named equality_tok_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R14@tok
X64.Machine_s.R14)
:named equality_tok_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R13@tok
X64.Machine_s.R13)
:named equality_tok_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R12@tok
X64.Machine_s.R12)
:named equality_tok_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R11@tok
X64.Machine_s.R11)
:named equality_tok_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.R10@tok
X64.Machine_s.R10)
:named equality_tok_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;equality for proxy
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= Prims.T@tok
Prims.T)
:named equality_tok_Prims.T@tok))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_ONe; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_ONe @x0)
(BoxBool (is-X64.Semantics_s.ONe @x0)))
 

:pattern ((X64.Semantics_s.uu___is_ONe @x0))
:qid disc_equation_X64.Semantics_s.ONe))

:named disc_equation_X64.Semantics_s.ONe))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_OLt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_OLt @x0)
(BoxBool (is-X64.Semantics_s.OLt @x0)))
 

:pattern ((X64.Semantics_s.uu___is_OLt @x0))
:qid disc_equation_X64.Semantics_s.OLt))

:named disc_equation_X64.Semantics_s.OLt))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_OLe; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_OLe @x0)
(BoxBool (is-X64.Semantics_s.OLe @x0)))
 

:pattern ((X64.Semantics_s.uu___is_OLe @x0))
:qid disc_equation_X64.Semantics_s.OLe))

:named disc_equation_X64.Semantics_s.OLe))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_OGt @x0)
(BoxBool (is-X64.Semantics_s.OGt @x0)))
 

:pattern ((X64.Semantics_s.uu___is_OGt @x0))
:qid disc_equation_X64.Semantics_s.OGt))

:named disc_equation_X64.Semantics_s.OGt))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_OGe; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_OGe @x0)
(BoxBool (is-X64.Semantics_s.OGe @x0)))
 

:pattern ((X64.Semantics_s.uu___is_OGe @x0))
:qid disc_equation_X64.Semantics_s.OGe))

:named disc_equation_X64.Semantics_s.OGe))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_OEq; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_OEq @x0)
(BoxBool (is-X64.Semantics_s.OEq @x0)))
 

:pattern ((X64.Semantics_s.uu___is_OEq @x0))
:qid disc_equation_X64.Semantics_s.OEq))

:named disc_equation_X64.Semantics_s.OEq))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_Rsp; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_Rsp @x0)
(BoxBool (is-X64.Machine_s.Rsp @x0)))
 

:pattern ((X64.Machine_s.uu___is_Rsp @x0))
:qid disc_equation_X64.Machine_s.Rsp))

:named disc_equation_X64.Machine_s.Rsp))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OReg @x0)
(BoxBool (is-X64.Machine_s.OReg @x0)))
 

:pattern ((X64.Machine_s.uu___is_OReg @x0))
:qid disc_equation_X64.Machine_s.OReg))

:named disc_equation_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OMem @x0)
(BoxBool (is-X64.Machine_s.OMem @x0)))
 

:pattern ((X64.Machine_s.uu___is_OMem @x0))
:qid disc_equation_X64.Machine_s.OMem))

:named disc_equation_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_OConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_OConst @x0)
(BoxBool (is-X64.Machine_s.OConst @x0)))
 

:pattern ((X64.Machine_s.uu___is_OConst @x0))
:qid disc_equation_X64.Machine_s.OConst))

:named disc_equation_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MReg; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MReg @x0)
(BoxBool (is-X64.Machine_s.MReg @x0)))
 

:pattern ((X64.Machine_s.uu___is_MReg @x0))
:qid disc_equation_X64.Machine_s.MReg))

:named disc_equation_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MIndex @x0)
(BoxBool (is-X64.Machine_s.MIndex @x0)))
 

:pattern ((X64.Machine_s.uu___is_MIndex @x0))
:qid disc_equation_X64.Machine_s.MIndex))

:named disc_equation_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Machine_s.uu___is_MConst; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= (X64.Machine_s.uu___is_MConst @x0)
(BoxBool (is-X64.Machine_s.MConst @x0)))
 

:pattern ((X64.Machine_s.uu___is_MConst @x0))
:qid disc_equation_X64.Machine_s.MConst))

:named disc_equation_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Prop-typing for FStar.FunctionalExtensionality.is_restricted
;;; Fact-ids: Name FStar.FunctionalExtensionality.is_restricted; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(94,4-94,17); use=FStar.FunctionalExtensionality.fsti(94,4-94,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(Valid (Prims.subtype_of (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.FunctionalExtensionality.is_restricted @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_FStar.FunctionalExtensionality.is_restricted))

:named defn_equation_FStar.FunctionalExtensionality.is_restricted))
;;;;;;;;;;;;;;;;Prop-typing for FStar.FunctionalExtensionality.feq
;;; Fact-ids: Name FStar.FunctionalExtensionality.feq; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(48,4-48,7); use=FStar.FunctionalExtensionality.fsti(48,4-48,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x0))
(HasType @x2
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0))
(HasType @x3
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x0)))
(Valid (Prims.subtype_of (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.unit)))
 

:pattern ((Prims.subtype_of (FStar.FunctionalExtensionality.feq @x0
@x1
@x2
@x3)
Prims.unit))
:qid defn_equation_FStar.FunctionalExtensionality.feq))

:named defn_equation_FStar.FunctionalExtensionality.feq))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
X64.Vale.Regs_i.t)
(HasTypeFuel @u0
@x3
X64.Machine_s.nat64)
(HasTypeFuel @u0
@x4
(FStar.Map.t Prims.int
X64.Machine_s.nat64)))
(HasTypeFuel @u0
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
 

:pattern ((HasTypeFuel @u0
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
:qid data_typing_intro_X64.Vale.State_i.Mkstate@tok))

:named data_typing_intro_X64.Vale.State_i.Mkstate@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.ONe @x1
@x2)
X64.Semantics_s.ocmp))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.ONe @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_typing_intro_X64.Semantics_s.ONe@tok))

:named data_typing_intro_X64.Semantics_s.ONe@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.OLt @x1
@x2)
X64.Semantics_s.ocmp))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.OLt @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_typing_intro_X64.Semantics_s.OLt@tok))

:named data_typing_intro_X64.Semantics_s.OLt@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.OLe @x1
@x2)
X64.Semantics_s.ocmp))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.OLe @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_typing_intro_X64.Semantics_s.OLe@tok))

:named data_typing_intro_X64.Semantics_s.OLe@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.OGt @x1
@x2)
X64.Semantics_s.ocmp))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.OGt @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_typing_intro_X64.Semantics_s.OGt@tok))

:named data_typing_intro_X64.Semantics_s.OGt@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.OGe @x1
@x2)
X64.Semantics_s.ocmp))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.OGe @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_typing_intro_X64.Semantics_s.OGe@tok))

:named data_typing_intro_X64.Semantics_s.OGe@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.OEq @x1
@x2)
X64.Semantics_s.ocmp))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.OEq @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_typing_intro_X64.Semantics_s.OEq@tok))

:named data_typing_intro_X64.Semantics_s.OEq@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg
Tm_abs_2da3d120bd5ce08465191535a1915477))
(HasTypeFuel @u0
@x3
(X64.Semantics_s.uint64 Dummy_value))
(HasTypeFuel @u0
@x4
X64.Semantics_s.mem))
(HasTypeFuel @u0
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)
X64.Semantics_s.state))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)
X64.Semantics_s.state))
:qid data_typing_intro_X64.Semantics_s.Mkstate@tok))

:named data_typing_intro_X64.Semantics_s.Mkstate@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(39,4-39,7); use=X64.Machine_s.fst(39,4-39,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rsp
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rsp
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rsp@tok))

:named data_typing_intro_X64.Machine_s.Rsp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(36,4-36,7); use=X64.Machine_s.fst(36,4-36,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rsi
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rsi
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rsi@tok))

:named data_typing_intro_X64.Machine_s.Rsi@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(35,4-35,7); use=X64.Machine_s.fst(35,4-35,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rdx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rdx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rdx@tok))

:named data_typing_intro_X64.Machine_s.Rdx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(37,4-37,7); use=X64.Machine_s.fst(37,4-37,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rdi
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rdi
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rdi@tok))

:named data_typing_intro_X64.Machine_s.Rdi@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(34,4-34,7); use=X64.Machine_s.fst(34,4-34,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rcx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rcx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rcx@tok))

:named data_typing_intro_X64.Machine_s.Rcx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(33,4-33,7); use=X64.Machine_s.fst(33,4-33,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rbx
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rbx
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rbx@tok))

:named data_typing_intro_X64.Machine_s.Rbx@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(38,4-38,7); use=X64.Machine_s.fst(38,4-38,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rbp
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rbp
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rbp@tok))

:named data_typing_intro_X64.Machine_s.Rbp@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(32,4-32,7); use=X64.Machine_s.fst(32,4-32,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.Rax
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.Rax
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.Rax@tok))

:named data_typing_intro_X64.Machine_s.Rax@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(41,4-41,6); use=X64.Machine_s.fst(41,4-41,6)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R9
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R9
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R9@tok))

:named data_typing_intro_X64.Machine_s.R9@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(40,4-40,6); use=X64.Machine_s.fst(40,4-40,6)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R8
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R8
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R8@tok))

:named data_typing_intro_X64.Machine_s.R8@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(47,4-47,7); use=X64.Machine_s.fst(47,4-47,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R15
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R15
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R15@tok))

:named data_typing_intro_X64.Machine_s.R15@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(46,4-46,7); use=X64.Machine_s.fst(46,4-46,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R14
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R14
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R14@tok))

:named data_typing_intro_X64.Machine_s.R14@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(45,4-45,7); use=X64.Machine_s.fst(45,4-45,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R13
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R13
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R13@tok))

:named data_typing_intro_X64.Machine_s.R13@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(44,4-44,7); use=X64.Machine_s.fst(44,4-44,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R12
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R12
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R12@tok))

:named data_typing_intro_X64.Machine_s.R12@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(43,4-43,7); use=X64.Machine_s.fst(43,4-43,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R11
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R11
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R11@tok))

:named data_typing_intro_X64.Machine_s.R11@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(42,4-42,7); use=X64.Machine_s.fst(42,4-42,7)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
X64.Machine_s.R10
X64.Machine_s.reg)
 

:pattern ((HasTypeFuel @u0
X64.Machine_s.R10
X64.Machine_s.reg))
:qid data_typing_intro_X64.Machine_s.R10@tok))

:named data_typing_intro_X64.Machine_s.R10@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OReg@tok))

:named data_typing_intro_X64.Machine_s.OReg@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.maddr)
(HasTypeFuel @u0
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OMem@tok))

:named data_typing_intro_X64.Machine_s.OMem@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid data_typing_intro_X64.Machine_s.OConst@tok))

:named data_typing_intro_X64.Machine_s.OConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int))
(HasTypeFuel @u0
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MReg@tok))

:named data_typing_intro_X64.Machine_s.MReg@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)
(HasTypeFuel @u0
@x3
X64.Machine_s.reg)
(HasTypeFuel @u0
@x4
Prims.int))
(HasTypeFuel @u0
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MIndex@tok))

:named data_typing_intro_X64.Machine_s.MIndex@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Prims.int)
(HasTypeFuel @u0
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid data_typing_intro_X64.Machine_s.MConst@tok))

:named data_typing_intro_X64.Machine_s.MConst@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,17-91,18); use=Prims.fst(91,17-91,18)
(forall ((@u0 Fuel))
 (! (HasTypeFuel @u0
Prims.T
Prims.trivial)
 

:pattern ((HasTypeFuel @u0
Prims.T
Prims.trivial))
:qid data_typing_intro_Prims.T@tok))

:named data_typing_intro_Prims.T@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state)
(and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
X64.Vale.Regs_i.t)
(HasTypeFuel @u0
@x3
X64.Machine_s.nat64)
(HasTypeFuel @u0
@x4
(FStar.Map.t Prims.int
X64.Machine_s.nat64))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Vale.State_i.Mkstate @x1
@x2
@x3
@x4)
X64.Vale.State_i.state))
:qid data_elim_X64.Vale.State_i.Mkstate))

:named data_elim_X64.Vale.State_i.Mkstate))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.ONe @x1
@x2)
X64.Semantics_s.ocmp)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.ONe @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_elim_X64.Semantics_s.ONe))

:named data_elim_X64.Semantics_s.ONe))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLt @x1
@x2)
X64.Semantics_s.ocmp)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLt @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_elim_X64.Semantics_s.OLt))

:named data_elim_X64.Semantics_s.OLt))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLe @x1
@x2)
X64.Semantics_s.ocmp)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OLe @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_elim_X64.Semantics_s.OLe))

:named data_elim_X64.Semantics_s.OLe))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGt @x1
@x2)
X64.Semantics_s.ocmp)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGt @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_elim_X64.Semantics_s.OGt))

:named data_elim_X64.Semantics_s.OGt))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGe @x1
@x2)
X64.Semantics_s.ocmp)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OGe @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_elim_X64.Semantics_s.OGe))

:named data_elim_X64.Semantics_s.OGe))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OEq @x1
@x2)
X64.Semantics_s.ocmp)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.OEq @x1
@x2)
X64.Semantics_s.ocmp))
:qid data_elim_X64.Semantics_s.OEq))

:named data_elim_X64.Semantics_s.OEq))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)
X64.Semantics_s.state)
(and (HasTypeFuel @u0
@x1
Prims.bool)
(HasTypeFuel @u0
@x2
(FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg
Tm_abs_2da3d120bd5ce08465191535a1915477))
(HasTypeFuel @u0
@x3
(X64.Semantics_s.uint64 Dummy_value))
(HasTypeFuel @u0
@x4
X64.Semantics_s.mem)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mkstate @x1
@x2
@x3
@x4)
X64.Semantics_s.state))
:qid data_elim_X64.Semantics_s.Mkstate))

:named data_elim_X64.Semantics_s.Mkstate))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
X64.Machine_s.reg))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OReg @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OReg))

:named data_elim_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
X64.Machine_s.maddr))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OMem @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OMem))

:named data_elim_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.OConst @x1)
X64.Machine_s.operand))
:qid data_elim_X64.Machine_s.OConst))

:named data_elim_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MReg @x1
@x2)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MReg))

:named data_elim_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.reg)
(HasTypeFuel @u0
@x2
Prims.int)
(HasTypeFuel @u0
@x3
X64.Machine_s.reg)
(HasTypeFuel @u0
@x4
Prims.int)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MIndex @x1
@x2
@x3
@x4)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MIndex))

:named data_elim_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr)
(HasTypeFuel @u0
@x1
Prims.int))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.MConst @x1)
X64.Machine_s.maddr))
:qid data_elim_X64.Machine_s.MConst))

:named data_elim_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! (= 101
(Term_constr_id X64.Vale.State_i.state))
:named constructor_distinct_X64.Vale.State_i.state))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 107
(Term_constr_id (X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Vale.State_i.Mkstate @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Vale.State_i.Mkstate))

:named constructor_distinct_X64.Vale.State_i.Mkstate))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! (= 384
(Term_constr_id X64.Semantics_s.state))
:named constructor_distinct_X64.Semantics_s.state))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! (= 281
(Term_constr_id X64.Semantics_s.ocmp))
:named constructor_distinct_X64.Semantics_s.ocmp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(51,4-51,7); use=X64.Semantics_s.fst(51,4-51,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 292
(Term_constr_id (X64.Semantics_s.ONe @x0
@x1)))
 

:pattern ((X64.Semantics_s.ONe @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.ONe))

:named constructor_distinct_X64.Semantics_s.ONe))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(54,4-54,7); use=X64.Semantics_s.fst(54,4-54,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 307
(Term_constr_id (X64.Semantics_s.OLt @x0
@x1)))
 

:pattern ((X64.Semantics_s.OLt @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.OLt))

:named constructor_distinct_X64.Semantics_s.OLt))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(52,4-52,7); use=X64.Semantics_s.fst(52,4-52,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 297
(Term_constr_id (X64.Semantics_s.OLe @x0
@x1)))
 

:pattern ((X64.Semantics_s.OLe @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.OLe))

:named constructor_distinct_X64.Semantics_s.OLe))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(55,4-55,7); use=X64.Semantics_s.fst(55,4-55,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 312
(Term_constr_id (X64.Semantics_s.OGt @x0
@x1)))
 

:pattern ((X64.Semantics_s.OGt @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.OGt))

:named constructor_distinct_X64.Semantics_s.OGt))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(53,4-53,7); use=X64.Semantics_s.fst(53,4-53,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 302
(Term_constr_id (X64.Semantics_s.OGe @x0
@x1)))
 

:pattern ((X64.Semantics_s.OGe @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.OGe))

:named constructor_distinct_X64.Semantics_s.OGe))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(50,4-50,7); use=X64.Semantics_s.fst(50,4-50,7)
(forall ((@x0 Term) (@x1 Term))
 (! (= 287
(Term_constr_id (X64.Semantics_s.OEq @x0
@x1)))
 

:pattern ((X64.Semantics_s.OEq @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.OEq))

:named constructor_distinct_X64.Semantics_s.OEq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 392
(Term_constr_id (X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Semantics_s.Mkstate @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Semantics_s.Mkstate))

:named constructor_distinct_X64.Semantics_s.Mkstate))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 107
(Term_constr_id X64.Machine_s.reg))
:named constructor_distinct_X64.Machine_s.reg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! (= 230
(Term_constr_id X64.Machine_s.operand))
:named constructor_distinct_X64.Machine_s.operand))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! (= 176
(Term_constr_id X64.Machine_s.maddr))
:named constructor_distinct_X64.Machine_s.maddr))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 127
(Term_constr_id X64.Machine_s.Rsp))
:named constructor_distinct_X64.Machine_s.Rsp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 121
(Term_constr_id X64.Machine_s.Rsi))
:named constructor_distinct_X64.Machine_s.Rsi))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 119
(Term_constr_id X64.Machine_s.Rdx))
:named constructor_distinct_X64.Machine_s.Rdx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 123
(Term_constr_id X64.Machine_s.Rdi))
:named constructor_distinct_X64.Machine_s.Rdi))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 117
(Term_constr_id X64.Machine_s.Rcx))
:named constructor_distinct_X64.Machine_s.Rcx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 115
(Term_constr_id X64.Machine_s.Rbx))
:named constructor_distinct_X64.Machine_s.Rbx))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 125
(Term_constr_id X64.Machine_s.Rbp))
:named constructor_distinct_X64.Machine_s.Rbp))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 113
(Term_constr_id X64.Machine_s.Rax))
:named constructor_distinct_X64.Machine_s.Rax))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 131
(Term_constr_id X64.Machine_s.R9))
:named constructor_distinct_X64.Machine_s.R9))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 129
(Term_constr_id X64.Machine_s.R8))
:named constructor_distinct_X64.Machine_s.R8))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 143
(Term_constr_id X64.Machine_s.R15))
:named constructor_distinct_X64.Machine_s.R15))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 141
(Term_constr_id X64.Machine_s.R14))
:named constructor_distinct_X64.Machine_s.R14))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 139
(Term_constr_id X64.Machine_s.R13))
:named constructor_distinct_X64.Machine_s.R13))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 137
(Term_constr_id X64.Machine_s.R12))
:named constructor_distinct_X64.Machine_s.R12))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 135
(Term_constr_id X64.Machine_s.R11))
:named constructor_distinct_X64.Machine_s.R11))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! (= 133
(Term_constr_id X64.Machine_s.R10))
:named constructor_distinct_X64.Machine_s.R10))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(56,4-56,8); use=X64.Machine_s.fst(56,4-56,8)
(forall ((@x0 Term))
 (! (= 241
(Term_constr_id (X64.Machine_s.OReg @x0)))
 

:pattern ((X64.Machine_s.OReg @x0))
:qid constructor_distinct_X64.Machine_s.OReg))

:named constructor_distinct_X64.Machine_s.OReg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(57,4-57,8); use=X64.Machine_s.fst(57,4-57,8)
(forall ((@x0 Term))
 (! (= 246
(Term_constr_id (X64.Machine_s.OMem @x0)))
 

:pattern ((X64.Machine_s.OMem @x0))
:qid constructor_distinct_X64.Machine_s.OMem))

:named constructor_distinct_X64.Machine_s.OMem))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(55,4-55,10); use=X64.Machine_s.fst(55,4-55,10)
(forall ((@x0 Term))
 (! (= 236
(Term_constr_id (X64.Machine_s.OConst @x0)))
 

:pattern ((X64.Machine_s.OConst @x0))
:qid constructor_distinct_X64.Machine_s.OConst))

:named constructor_distinct_X64.Machine_s.OConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(51,4-51,8); use=X64.Machine_s.fst(51,4-51,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 187
(Term_constr_id (X64.Machine_s.MReg @x0
@x1)))
 

:pattern ((X64.Machine_s.MReg @x0
@x1))
:qid constructor_distinct_X64.Machine_s.MReg))

:named constructor_distinct_X64.Machine_s.MReg))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(52,4-52,10); use=X64.Machine_s.fst(52,4-52,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 192
(Term_constr_id (X64.Machine_s.MIndex @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Machine_s.MIndex @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Machine_s.MIndex))

:named constructor_distinct_X64.Machine_s.MIndex))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(50,4-50,10); use=X64.Machine_s.fst(50,4-50,10)
(forall ((@x0 Term))
 (! (= 182
(Term_constr_id (X64.Machine_s.MConst @x0)))
 

:pattern ((X64.Machine_s.MConst @x0))
:qid constructor_distinct_X64.Machine_s.MConst))

:named constructor_distinct_X64.Machine_s.MConst))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 116
(Term_constr_id Prims.trivial))
:named constructor_distinct_Prims.trivial))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! (= 122
(Term_constr_id Prims.T))
:named constructor_distinct_Prims.T))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.UInt64.t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(50,8-50,9); use=FStar.UInt64.fsti(50,8-50,9)
(forall ((@u0 Dummy_sort))
 (! (= 101
(Term_constr_id (FStar.UInt64.t @u0)))
 

:pattern ((FStar.UInt64.t @u0))
:qid constructor_distinct_FStar.UInt64.t))

:named constructor_distinct_FStar.UInt64.t))
;;;;;;;;;;;;;;;;Assumption: X64.Semantics_s.ocmp__uu___haseq
;;; Fact-ids: Name X64.Semantics_s.ocmp__uu___haseq; Namespace X64.Semantics_s
(assert (! (Valid (Prims.hasEq X64.Semantics_s.ocmp))
:named assumption_X64.Semantics_s.ocmp__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.reg__uu___haseq
;;; Fact-ids: Name X64.Machine_s.reg__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.reg))
:named assumption_X64.Machine_s.reg__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.operand__uu___haseq
;;; Fact-ids: Name X64.Machine_s.operand__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.operand))
:named assumption_X64.Machine_s.operand__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.maddr__uu___haseq
;;; Fact-ids: Name X64.Machine_s.maddr__uu___haseq; Namespace X64.Machine_s
(assert (! (Valid (Prims.hasEq X64.Machine_s.maddr))
:named assumption_X64.Machine_s.maddr__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Vale.State_i.state; Namespace X64.Vale.State_i; Name X64.Vale.State_i.Mkstate; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-26,15); use=X64.Vale.State_i.fsti(26,10-26,15)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Vale.State_i.state)
(= X64.Vale.State_i.state
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Vale.State_i.state))
:qid X64.Vale.State_i_pretyping_de52c7fd4c52e1942aeef9a9143c43bf))

:named X64.Vale.State_i_pretyping_de52c7fd4c52e1942aeef9a9143c43bf))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-28,16); use=X64.Vale.State_i.fsti(26,10-28,16)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
:qid X64.Vale.State_i_pre_typing_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))

:named X64.Vale.State_i_pre_typing_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__regs; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(26,10-28,16); use=X64.Vale.State_i.fsti(26,10-28,16)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee)
(and 
;; def=X64.Vale.State_i.fsti(26,10-28,16); use=X64.Vale.State_i.fsti(26,10-28,16)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Vale.State_i.state)
(HasType (ApplyTT @x0
@x1)
X64.Vale.Regs_i.t))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
:qid X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))

:named X64.Vale.State_i_interpretation_Tm_arrow_76f16c4ba6b1cb416c6c6aa8cade2cee))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Semantics_s.ocmp; Namespace X64.Semantics_s; Name X64.Semantics_s.OEq; Namespace X64.Semantics_s; Name X64.Semantics_s.ONe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLe; Namespace X64.Semantics_s; Name X64.Semantics_s.OGe; Namespace X64.Semantics_s; Name X64.Semantics_s.OLt; Namespace X64.Semantics_s; Name X64.Semantics_s.OGt; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(49,5-49,9); use=X64.Semantics_s.fst(49,5-49,9)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Semantics_s.ocmp)
(= X64.Semantics_s.ocmp
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Semantics_s.ocmp))
:qid X64.Semantics_s_pretyping_2a81ad8d1eb2e61e03519aaf20bc2afb))

:named X64.Semantics_s_pretyping_2a81ad8d1eb2e61e03519aaf20bc2afb))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-66,15); use=X64.Semantics_s.fst(66,10-66,15)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Semantics_s.state)
(= X64.Semantics_s.state
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Semantics_s.state))
:qid X64.Semantics_s_pretyping_1bfb2cbff190c322cb7761c350e1ede4))

:named X64.Semantics_s_pretyping_1bfb2cbff190c322cb7761c350e1ede4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,23-68,26); use=X64.Semantics_s.fst(68,10-68,22)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_73862e447730cb7be03c891c89cb5703)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_73862e447730cb7be03c891c89cb5703))
:qid X64.Semantics_s_pre_typing_Tm_arrow_73862e447730cb7be03c891c89cb5703))

:named X64.Semantics_s_pre_typing_Tm_arrow_73862e447730cb7be03c891c89cb5703))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-68,44); use=X64.Semantics_s.fst(66,10-68,44)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_193bd525e26cb6146836f2ec97504c13)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_193bd525e26cb6146836f2ec97504c13))
:qid X64.Semantics_s_pre_typing_Tm_arrow_193bd525e26cb6146836f2ec97504c13))

:named X64.Semantics_s_pre_typing_Tm_arrow_193bd525e26cb6146836f2ec97504c13))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703
;;; Fact-ids: Name X64.Semantics_s.state; Namespace X64.Semantics_s; Name X64.Semantics_s.Mkstate; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(68,23-68,26); use=X64.Semantics_s.fst(68,10-68,22)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_73862e447730cb7be03c891c89cb5703)
(and 
;; def=X64.Semantics_s.fst(68,23-68,26); use=X64.Semantics_s.fst(68,10-68,22)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)
(HasType (ApplyTT @x0
@x1)
Tm_type))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_73862e447730cb7be03c891c89cb5703))
:qid X64.Semantics_s_interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703))

:named X64.Semantics_s_interpretation_Tm_arrow_73862e447730cb7be03c891c89cb5703))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_193bd525e26cb6146836f2ec97504c13
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__regs; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(66,10-68,44); use=X64.Semantics_s.fst(66,10-68,44)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_193bd525e26cb6146836f2ec97504c13)
(and 
;; def=X64.Semantics_s.fst(66,10-68,44); use=X64.Semantics_s.fst(66,10-68,44)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Semantics_s.state)
(HasType (ApplyTT @x0
@x1)
(FStar.FunctionalExtensionality.restricted_t X64.Machine_s.reg
Tm_abs_2da3d120bd5ce08465191535a1915477)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_193bd525e26cb6146836f2ec97504c13.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_193bd525e26cb6146836f2ec97504c13))
:qid X64.Semantics_s_interpretation_Tm_arrow_193bd525e26cb6146836f2ec97504c13))

:named X64.Semantics_s_interpretation_Tm_arrow_193bd525e26cb6146836f2ec97504c13))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.reg; Namespace X64.Machine_s; Name X64.Machine_s.Rax; Namespace X64.Machine_s; Name X64.Machine_s.Rbx; Namespace X64.Machine_s; Name X64.Machine_s.Rcx; Namespace X64.Machine_s; Name X64.Machine_s.Rdx; Namespace X64.Machine_s; Name X64.Machine_s.Rsi; Namespace X64.Machine_s; Name X64.Machine_s.Rdi; Namespace X64.Machine_s; Name X64.Machine_s.Rbp; Namespace X64.Machine_s; Name X64.Machine_s.Rsp; Namespace X64.Machine_s; Name X64.Machine_s.R8; Namespace X64.Machine_s; Name X64.Machine_s.R9; Namespace X64.Machine_s; Name X64.Machine_s.R10; Namespace X64.Machine_s; Name X64.Machine_s.R11; Namespace X64.Machine_s; Name X64.Machine_s.R12; Namespace X64.Machine_s; Name X64.Machine_s.R13; Namespace X64.Machine_s; Name X64.Machine_s.R14; Namespace X64.Machine_s; Name X64.Machine_s.R15; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(31,5-31,8); use=X64.Machine_s.fst(31,5-31,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.reg)
(= X64.Machine_s.reg
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.reg))
:qid X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7))

:named X64.Machine_s_pretyping_b7c45855ed90996ceceb34aa61de24e7))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.maddr; Namespace X64.Machine_s; Name X64.Machine_s.MConst; Namespace X64.Machine_s; Name X64.Machine_s.MReg; Namespace X64.Machine_s; Name X64.Machine_s.MIndex; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(49,5-49,10); use=X64.Machine_s.fst(49,5-49,10)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.maddr)
(= X64.Machine_s.maddr
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.maddr))
:qid X64.Machine_s_pretyping_a2ddd26f94eaa436cfe753563bf0547b))

:named X64.Machine_s_pretyping_a2ddd26f94eaa436cfe753563bf0547b))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.operand; Namespace X64.Machine_s; Name X64.Machine_s.OConst; Namespace X64.Machine_s; Name X64.Machine_s.OReg; Namespace X64.Machine_s; Name X64.Machine_s.OMem; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(54,5-54,12); use=X64.Machine_s.fst(54,5-54,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Machine_s.operand)
(= X64.Machine_s.operand
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Machine_s.operand))
:qid X64.Machine_s_pretyping_644ad5cdcea42fa4e9e52bbdd5021fb9))

:named X64.Machine_s_pretyping_644ad5cdcea42fa4e9e52bbdd5021fb9))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.trivial; Namespace Prims; Name Prims.T; Namespace Prims
(assert (! 
;; def=Prims.fst(91,5-91,12); use=Prims.fst(91,5-91,12)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
Prims.trivial)
(= Prims.trivial
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
Prims.trivial))
:qid Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))

:named Prims_pretyping_e8ffb7d227a1bbf69407a8d2ad2c4c83))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x2
@x3)))
:qid Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_pre_typing_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x2)))
:qid Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_pre_typing_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3
;;; Fact-ids: Name Prims.pure_post'; Namespace Prims
(assert (! 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2))
(and 
;; def=Prims.fst(315,31-315,54); use=Prims.fst(315,31-315,54)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_8d65e998a07dd53ec478e27017d9dba5 @x2
@x1))
(HasType (ApplyTT @x0
@x3)
Tm_type))
 

:pattern ((ApplyTT @x0
@x3))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3 @x1
@x2)))
:qid Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))

:named Prims_interpretation_Tm_arrow_92458cff82f9ffee1f6e26a1c0c579f3))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da
;;; Fact-ids: Name Prims.l_Forall; Namespace Prims
(assert (! 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1))
(and 
;; def=Prims.fst(286,16-286,45); use=Prims.fst(286,30-286,45)
(forall ((@x2 Term))
 (! (implies (HasType @x2
@x1)
(HasType (ApplyTT @x0
@x2)
Tm_type))
 

:pattern ((ApplyTT @x0
@x2))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da @x1)))
:qid Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))

:named Prims_interpretation_Tm_arrow_2eaa01e78f73e9bab5d0955fc1a662da))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.UInt64.t; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(50,8-50,9); use=FStar.UInt64.fsti(50,8-50,9)
(forall ((@x0 Term) (@u1 Fuel) (@u2 Dummy_sort))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.UInt64.t @u2))
(= (FStar.UInt64.t @u2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.UInt64.t @u2)))
:qid FStar.UInt64_pretyping_0a6d0526dc068d94bc7967094b2dd513))

:named FStar.UInt64_pretyping_0a6d0526dc068d94bc7967094b2dd513))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x2
@x3))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x2
@x3)))
:qid FStar.FunctionalExtensionality_pre_typing_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named FStar.FunctionalExtensionality_pre_typing_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a
;;; Fact-ids: Name FStar.FunctionalExtensionality.arrow; Namespace FStar.FunctionalExtensionality
(assert (! 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x2))
(and 
;; def=FStar.FunctionalExtensionality.fsti(41,11-41,56); use=FStar.FunctionalExtensionality.fsti(41,42-41,56)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x2)
(HasType (ApplyTT @x0
@x3)
(ApplyTT @x1
@x3)))
 

:pattern ((ApplyTT @x0
@x3))
:qid FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_a7d5cc170be69663c495e8582d2bc62a @x1
@x2)))
:qid FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))

:named FStar.FunctionalExtensionality_interpretation_Tm_arrow_a7d5cc170be69663c495e8582d2bc62a))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Semantics_s.eval_reg; Namespace X64.Semantics_s
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Semantics_s.__proj__Mkstate__item__regs@tok))
:named @kick_partial_app_a93aad825a42aed064e51daa3b56fa86))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Vale.State_i.eval_reg; Namespace X64.Vale.State_i
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Vale.State_i.__proj__Mkstate__item__regs@tok))
:named @kick_partial_app_7a990ce42f78ee59b9dfc170e4013f79))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(26,27-26,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: X64.Vale.State_i.state) (o1: X64.Machine_s.operand) (o2: X64.Machine_s.operand).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.Lemmas_i.eval_ocmp s (X64.Semantics_s.OEq o1 o2) <==>
;           X64.Vale.State_i.eval_operand o1 s == X64.Vale.State_i.eval_operand o2 s) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_cmp_eq`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=X64.Vale.Lemmas_i.fsti(37,11-37,80); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(37,11-37,80); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(37,11-37,36); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OEq @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(37,42-37,80); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(= (X64.Vale.State_i.eval_operand @x1
@x0)
(X64.Vale.State_i.eval_operand @x2
@x0))
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(26,27-26,29)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_eq, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_X64.Semantics_s.OEq, equation_X64.Semantics_s.eval_ocmp, equation_X64.Semantics_s.eval_operand, equation_X64.Semantics_s.uint64, equation_X64.Vale.Lemmas_i.eval_ocmp, fuel_guarded_inversion_X64.Vale.State_i.state, lemma_FStar.UInt64.uv_inv, lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand, primitive_Prims.op_Equality, projection_inverse_BoxBool_proj_0, projection_inverse_X64.Semantics_s.OEq_o1, projection_inverse_X64.Semantics_s.OEq_o2, typing_X64.Semantics_s.eval_operand, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_cmp_eq


; <Start encoding let lemma_cmp_eq>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_eq (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_eq@tok () Term)

; </end encoding let lemma_cmp_eq>

(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fsti(40,0-42,38)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9 () Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! (HasType Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
Tm_type)
:named refinement_kinding_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=X64.Vale.Lemmas_i.fsti(40,58-42,38); use=X64.Vale.Lemmas_i.fsti(40,58-40,63)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9)
(HasTypeFuel @u0
@x1
Prims.unit))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
:qid refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

:named refinement_interpretation_Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9
;;; Fact-ids: 
(assert (! (iff (Valid (Prims.hasEq Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))
(Valid (Prims.hasEq Prims.unit)))
:named haseqTm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

; Encoding query formula : forall (s: X64.Vale.State_i.state)
;   (o1: X64.Machine_s.operand)
;   (o2: X64.Machine_s.operand)
;   (_: Prims.squash Prims.l_True).
;   (*  - Could not prove post-condition
; *) Prims.hasEq X64.Machine_s.nat64


; Context: While encoding a query
; While typechecking the top-level declaration `val X64.Vale.Lemmas_i.lemma_cmp_ne`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=X64.Vale.Lemmas_i.fsti(40,0-42,38)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand)
(HasType @x3
Tm_refine_4fe5a88d1a1dcab567f82d246dbcb5b9))

;; def=Prims.fst(73,23-73,30); use=X64.Vale.Lemmas_i.fsti(41,42-41,54)
(or label_1

;; def=Prims.fst(73,23-73,30); use=X64.Vale.Lemmas_i.fsti(41,42-41,54)
(Valid 
;; def=Prims.fst(73,23-73,30); use=X64.Vale.Lemmas_i.fsti(41,42-41,54)
(Prims.hasEq X64.Machine_s.nat64)
)
)
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_ne, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, equation_Prims.eqtype, equation_Prims.nat, equation_X64.Machine_s.nat64, haseqTm_refine_542f9d4f129664613f2483a6c88bc7c2, haseqTm_refine_a608a89bbc0a207d5920d37d906f7f40, refinement_interpretation_Tm_refine_414d0a9f578ab0048252f8c8f552b99f, typing_Prims.int

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt val X64.Vale.Lemmas_i.lemma_cmp_ne


; <Skipped val X64.Vale.Lemmas_i.lemma_cmp_ne/>

;;;;;;;;;;;;;;;;Lemma: X64.Vale.Lemmas_i.lemma_cmp_eq
;;; Fact-ids: Name X64.Vale.Lemmas_i.lemma_cmp_eq; Namespace X64.Vale.Lemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=X64.Vale.Lemmas_i.fsti(37,11-37,80); use=X64.Vale.Lemmas_i.fst(26,4-26,16)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(37,11-37,36); use=X64.Vale.Lemmas_i.fst(26,4-26,16)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OEq @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(37,42-37,80); use=X64.Vale.Lemmas_i.fst(26,4-26,16)
(= (X64.Vale.State_i.eval_operand @x1
@x0)
(X64.Vale.State_i.eval_operand @x2
@x0))
)
)
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OEq @x1
@x2)))
:qid lemma_X64.Vale.Lemmas_i.lemma_cmp_eq))
:named lemma_X64.Vale.Lemmas_i.lemma_cmp_eq))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(27,27-27,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: X64.Vale.State_i.state) (o1: X64.Machine_s.operand) (o2: X64.Machine_s.operand).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.Lemmas_i.eval_ocmp s (X64.Semantics_s.ONe o1 o2) <==>
;           X64.Vale.State_i.eval_operand o1 s <> X64.Vale.State_i.eval_operand o2 s) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_cmp_ne`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=X64.Vale.Lemmas_i.fsti(41,11-41,80); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(41,11-41,80); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(41,11-41,36); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.ONe @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(41,42-41,80); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(not (= (X64.Vale.State_i.eval_operand @x1
@x0)
(X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(27,27-27,29)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_ne, 2)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_X64.Semantics_s.ONe, equation_X64.Semantics_s.eval_ocmp, equation_X64.Semantics_s.eval_operand, equation_X64.Semantics_s.uint64, equation_X64.Vale.Lemmas_i.eval_ocmp, fuel_guarded_inversion_X64.Vale.State_i.state, lemma_FStar.UInt64.uv_inv, lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand, primitive_Prims.op_disEquality, projection_inverse_BoxBool_proj_0, projection_inverse_X64.Semantics_s.ONe_o1, projection_inverse_X64.Semantics_s.ONe_o2, typing_X64.Semantics_s.eval_operand, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_cmp_ne


; <Start encoding let lemma_cmp_ne>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_ne (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_ne@tok () Term)

; </end encoding let lemma_cmp_ne>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_cmp_le


; <Skipped val X64.Vale.Lemmas_i.lemma_cmp_le/>

;;;;;;;;;;;;;;;;Lemma: X64.Vale.Lemmas_i.lemma_cmp_ne
;;; Fact-ids: Name X64.Vale.Lemmas_i.lemma_cmp_ne; Namespace X64.Vale.Lemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=X64.Vale.Lemmas_i.fsti(41,11-41,80); use=X64.Vale.Lemmas_i.fst(27,4-27,16)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(41,11-41,36); use=X64.Vale.Lemmas_i.fst(27,4-27,16)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.ONe @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(41,42-41,80); use=X64.Vale.Lemmas_i.fst(27,4-27,16)
(not (= (X64.Vale.State_i.eval_operand @x1
@x0)
(X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.ONe @x1
@x2)))
:qid lemma_X64.Vale.Lemmas_i.lemma_cmp_ne))
:named lemma_X64.Vale.Lemmas_i.lemma_cmp_ne))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(28,27-28,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: X64.Vale.State_i.state) (o1: X64.Machine_s.operand) (o2: X64.Machine_s.operand).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.Lemmas_i.eval_ocmp s (X64.Semantics_s.OLe o1 o2) <==>
;           X64.Vale.State_i.eval_operand o1 s <= X64.Vale.State_i.eval_operand o2 s) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_cmp_le`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=X64.Vale.Lemmas_i.fsti(45,11-45,80); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(45,11-45,80); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(45,11-45,36); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OLe @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(45,42-45,80); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(<= (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(28,27-28,29)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_le, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_X64.Semantics_s.OLe, equation_FStar.UInt.lte, equation_FStar.UInt64.lte, equation_X64.Semantics_s.eval_ocmp, equation_X64.Semantics_s.eval_operand, equation_X64.Semantics_s.uint64, equation_X64.Vale.Lemmas_i.eval_ocmp, equation_X64.Vale.State_i.eval_operand, fuel_guarded_inversion_X64.Vale.State_i.state, lemma_FStar.UInt64.uv_inv, lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand, primitive_Prims.op_LessThanOrEqual, projection_inverse_BoxBool_proj_0, projection_inverse_X64.Semantics_s.OLe_o1, projection_inverse_X64.Semantics_s.OLe_o2, refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4, typing_FStar.UInt64.uint_to_t, typing_FStar.UInt64.v, typing_X64.Semantics_s.eval_operand, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_cmp_le


; <Start encoding let lemma_cmp_le>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_le (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_le@tok () Term)

; </end encoding let lemma_cmp_le>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_cmp_ge


; <Skipped val X64.Vale.Lemmas_i.lemma_cmp_ge/>

;;;;;;;;;;;;;;;;Lemma: X64.Vale.Lemmas_i.lemma_cmp_le
;;; Fact-ids: Name X64.Vale.Lemmas_i.lemma_cmp_le; Namespace X64.Vale.Lemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=X64.Vale.Lemmas_i.fsti(45,11-45,80); use=X64.Vale.Lemmas_i.fst(28,4-28,16)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(45,11-45,36); use=X64.Vale.Lemmas_i.fst(28,4-28,16)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OLe @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(45,42-45,80); use=X64.Vale.Lemmas_i.fst(28,4-28,16)
(<= (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OLe @x1
@x2)))
:qid lemma_X64.Vale.Lemmas_i.lemma_cmp_le))
:named lemma_X64.Vale.Lemmas_i.lemma_cmp_le))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(29,27-29,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: X64.Vale.State_i.state) (o1: X64.Machine_s.operand) (o2: X64.Machine_s.operand).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.Lemmas_i.eval_ocmp s (X64.Semantics_s.OGe o1 o2) <==>
;           X64.Vale.State_i.eval_operand o1 s >= X64.Vale.State_i.eval_operand o2 s) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_cmp_ge`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=X64.Vale.Lemmas_i.fsti(49,11-49,80); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(49,11-49,80); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(49,11-49,36); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OGe @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(49,42-49,80); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(>= (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(29,27-29,29)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_ge, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_X64.Semantics_s.OGe, equation_FStar.UInt.gte, equation_FStar.UInt64.gte, equation_X64.Semantics_s.eval_ocmp, equation_X64.Semantics_s.eval_operand, equation_X64.Semantics_s.uint64, equation_X64.Vale.Lemmas_i.eval_ocmp, equation_X64.Vale.State_i.eval_operand, fuel_guarded_inversion_X64.Vale.State_i.state, lemma_FStar.UInt64.uv_inv, lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand, primitive_Prims.op_GreaterThanOrEqual, projection_inverse_BoxBool_proj_0, projection_inverse_X64.Semantics_s.OGe_o1, projection_inverse_X64.Semantics_s.OGe_o2, refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4, typing_FStar.UInt64.uint_to_t, typing_FStar.UInt64.v, typing_X64.Semantics_s.eval_operand, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_cmp_ge


; <Start encoding let lemma_cmp_ge>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_ge (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_ge@tok () Term)

; </end encoding let lemma_cmp_ge>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_cmp_lt


; <Skipped val X64.Vale.Lemmas_i.lemma_cmp_lt/>

;;;;;;;;;;;;;;;;Lemma: X64.Vale.Lemmas_i.lemma_cmp_ge
;;; Fact-ids: Name X64.Vale.Lemmas_i.lemma_cmp_ge; Namespace X64.Vale.Lemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=X64.Vale.Lemmas_i.fsti(49,11-49,80); use=X64.Vale.Lemmas_i.fst(29,4-29,16)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(49,11-49,36); use=X64.Vale.Lemmas_i.fst(29,4-29,16)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OGe @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(49,42-49,80); use=X64.Vale.Lemmas_i.fst(29,4-29,16)
(>= (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OGe @x1
@x2)))
:qid lemma_X64.Vale.Lemmas_i.lemma_cmp_ge))
:named lemma_X64.Vale.Lemmas_i.lemma_cmp_ge))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(30,27-30,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: X64.Vale.State_i.state) (o1: X64.Machine_s.operand) (o2: X64.Machine_s.operand).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.Lemmas_i.eval_ocmp s (X64.Semantics_s.OLt o1 o2) <==>
;           X64.Vale.State_i.eval_operand o1 s < X64.Vale.State_i.eval_operand o2 s) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_cmp_lt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=X64.Vale.Lemmas_i.fsti(53,11-53,79); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(53,11-53,79); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(53,11-53,36); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OLt @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(53,42-53,79); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(< (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(30,27-30,29)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_lt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_X64.Semantics_s.OLt, equation_FStar.UInt.lt, equation_FStar.UInt64.lt, equation_X64.Semantics_s.eval_ocmp, equation_X64.Semantics_s.eval_operand, equation_X64.Semantics_s.uint64, equation_X64.Vale.Lemmas_i.eval_ocmp, equation_X64.Vale.State_i.eval_operand, fuel_guarded_inversion_X64.Vale.State_i.state, lemma_FStar.UInt64.uv_inv, lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand, primitive_Prims.op_LessThan, projection_inverse_BoxBool_proj_0, projection_inverse_X64.Semantics_s.OLt_o1, projection_inverse_X64.Semantics_s.OLt_o2, refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4, typing_FStar.UInt64.uint_to_t, typing_FStar.UInt64.v, typing_X64.Semantics_s.eval_operand, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_cmp_lt


; <Start encoding let lemma_cmp_lt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_lt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_lt@tok () Term)

; </end encoding let lemma_cmp_lt>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_cmp_gt


; <Skipped val X64.Vale.Lemmas_i.lemma_cmp_gt/>

;;;;;;;;;;;;;;;;Lemma: X64.Vale.Lemmas_i.lemma_cmp_lt
;;; Fact-ids: Name X64.Vale.Lemmas_i.lemma_cmp_lt; Namespace X64.Vale.Lemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=X64.Vale.Lemmas_i.fsti(53,11-53,79); use=X64.Vale.Lemmas_i.fst(30,4-30,16)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(53,11-53,36); use=X64.Vale.Lemmas_i.fst(30,4-30,16)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OLt @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(53,42-53,79); use=X64.Vale.Lemmas_i.fst(30,4-30,16)
(< (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OLt @x1
@x2)))
:qid lemma_X64.Vale.Lemmas_i.lemma_cmp_lt))
:named lemma_X64.Vale.Lemmas_i.lemma_cmp_lt))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(31,27-31,29)

(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (s: X64.Vale.State_i.state) (o1: X64.Machine_s.operand) (o2: X64.Machine_s.operand).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post Prims.unit).
;     (forall (pure_result: Prims.unit).
;         (X64.Vale.Lemmas_i.eval_ocmp s (X64.Semantics_s.OGt o1 o2) <==>
;           X64.Vale.State_i.eval_operand o1 s > X64.Vale.State_i.eval_operand o2 s) ==>
;         p pure_result) ==>
;     (forall (any_result: Prims.unit). p any_result)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_cmp_gt`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post Prims.unit))

;; def=Prims.fst(441,36-441,97); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
Prims.unit))

;; def=X64.Vale.Lemmas_i.fsti(57,11-57,79); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(57,11-57,79); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(57,11-57,36); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OGt @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(57,42-57,79); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(> (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
)

;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(Valid 
;; def=Prims.fst(441,83-441,96); use=X64.Vale.Lemmas_i.fst(31,27-31,29)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))
)

;; def=Prims.fst(451,66-451,102); use=Prims.fst(454,31-454,44)
(forall ((@x4 Term))
 (! (implies (HasType @x4
Prims.unit)

;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(Valid 
;; def=Prims.fst(451,90-451,102); use=Prims.fst(454,31-454,44)
(ApplyTT @x3
@x4)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_cmp_gt, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxIFuel_assumption, @query, constructor_distinct_X64.Semantics_s.OGt, equation_FStar.UInt.gt, equation_FStar.UInt64.gt, equation_X64.Semantics_s.eval_ocmp, equation_X64.Semantics_s.eval_operand, equation_X64.Semantics_s.uint64, equation_X64.Vale.Lemmas_i.eval_ocmp, equation_X64.Vale.State_i.eval_operand, fuel_guarded_inversion_X64.Vale.State_i.state, lemma_FStar.UInt64.uv_inv, lemma_X64.Vale.StateLemmas_i.lemma_to_eval_operand, primitive_Prims.op_GreaterThan, projection_inverse_BoxBool_proj_0, projection_inverse_X64.Semantics_s.OGt_o1, projection_inverse_X64.Semantics_s.OGt_o2, refinement_interpretation_Tm_refine_48c1b5b4c02ad49f0760911a9d4b1fb4, typing_FStar.UInt64.uint_to_t, typing_FStar.UInt64.v, typing_X64.Semantics_s.eval_operand, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_cmp_gt


; <Start encoding let lemma_cmp_gt>

;;;;;;;;;;;;;;;;Uninterpreted function symbol for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_gt (Term Term Term) Term)
;;;;;;;;;;;;;;;;Uninterpreted name for impure function
(declare-fun X64.Vale.Lemmas_i.lemma_cmp_gt@tok () Term)

; </end encoding let lemma_cmp_gt>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_block


; <Skipped val X64.Vale.Lemmas_i.lemma_block/>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_code; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fsti(28,4-28,13); use=X64.Vale.Lemmas_i.fsti(28,4-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.code)
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))
(HasType (X64.Vale.Lemmas_i.eval_code @x0
@x1
@x2)
Tm_type))
 

:pattern ((X64.Vale.Lemmas_i.eval_code @x0
@x1
@x2))
:qid typing_X64.Vale.Lemmas_i.eval_code))

:named typing_X64.Vale.Lemmas_i.eval_code))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.valid_operand; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(101,4-101,17); use=X64.Semantics_s.fst(101,4-101,17)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.operand)
(HasType @x1
X64.Semantics_s.state))
(HasType (X64.Semantics_s.valid_operand @x0
@x1)
Prims.bool))
 

:pattern ((X64.Semantics_s.valid_operand @x0
@x1))
:qid typing_X64.Semantics_s.valid_operand))

:named typing_X64.Semantics_s.valid_operand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.valid_maddr; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(98,4-98,15); use=X64.Semantics_s.fst(98,4-98,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.maddr)
(HasType @x1
X64.Semantics_s.state))
(HasType (X64.Semantics_s.valid_maddr @x0
@x1)
Prims.bool))
 

:pattern ((X64.Semantics_s.valid_maddr @x0
@x1))
:qid typing_X64.Semantics_s.valid_maddr))

:named typing_X64.Semantics_s.valid_maddr))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Xor64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Xor64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Xor64 @x0))
:qid typing_X64.Semantics_s.uu___is_Xor64))

:named typing_X64.Semantics_s.uu___is_Xor64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Sub64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Sub64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Sub64 @x0))
:qid typing_X64.Semantics_s.uu___is_Sub64))

:named typing_X64.Semantics_s.uu___is_Sub64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Shr64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Shr64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Shr64 @x0))
:qid typing_X64.Semantics_s.uu___is_Shr64))

:named typing_X64.Semantics_s.uu___is_Shr64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Shl64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Shl64 @x0))
:qid typing_X64.Semantics_s.uu___is_Shl64))

:named typing_X64.Semantics_s.uu___is_Shl64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Mul64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Mul64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Mul64 @x0))
:qid typing_X64.Semantics_s.uu___is_Mul64))

:named typing_X64.Semantics_s.uu___is_Mul64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Mov64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Mov64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Mov64 @x0))
:qid typing_X64.Semantics_s.uu___is_Mov64))

:named typing_X64.Semantics_s.uu___is_Mov64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_IMul64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_IMul64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_IMul64 @x0))
:qid typing_X64.Semantics_s.uu___is_IMul64))

:named typing_X64.Semantics_s.uu___is_IMul64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_And64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_And64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_And64 @x0))
:qid typing_X64.Semantics_s.uu___is_And64))

:named typing_X64.Semantics_s.uu___is_And64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_AddLea64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_AddLea64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_AddLea64 @x0))
:qid typing_X64.Semantics_s.uu___is_AddLea64))

:named typing_X64.Semantics_s.uu___is_AddLea64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_AddCarry64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_AddCarry64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_AddCarry64 @x0))
:qid typing_X64.Semantics_s.uu___is_AddCarry64))

:named typing_X64.Semantics_s.uu___is_AddCarry64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.uu___is_Add64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.uu___is_Add64 @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.uu___is_Add64 @x0))
:qid typing_X64.Semantics_s.uu___is_Add64))

:named typing_X64.Semantics_s.uu___is_Add64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(93,4-93,15); use=X64.Semantics_s.fst(93,4-93,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.reg)
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x2
X64.Semantics_s.state))
(HasType (X64.Semantics_s.update_reg_ @x0
@x1
@x2)
X64.Semantics_s.state))
 

:pattern ((X64.Semantics_s.update_reg_ @x0
@x1
@x2))
:qid typing_X64.Semantics_s.update_reg_))

:named typing_X64.Semantics_s.update_reg_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(193,4-193,14); use=X64.Semantics_s.fst(193,4-193,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.reg)
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value)))
(HasType (X64.Semantics_s.update_reg @x0
@x1)
(X64.Semantics_s.st Prims.unit)))
 

:pattern ((X64.Semantics_s.update_reg @x0
@x1))
:qid typing_X64.Semantics_s.update_reg))

:named typing_X64.Semantics_s.update_reg))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_operand_preserve_flags'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(107,4-107,34); use=X64.Semantics_s.fst(107,4-107,34)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x2
X64.Semantics_s.state))
(HasType (X64.Semantics_s.update_operand_preserve_flags_ @x0
@x1
@x2)
X64.Semantics_s.state))
 

:pattern ((X64.Semantics_s.update_operand_preserve_flags_ @x0
@x1
@x2))
:qid typing_X64.Semantics_s.update_operand_preserve_flags_))

:named typing_X64.Semantics_s.update_operand_preserve_flags_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_operand'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(112,4-112,19); use=X64.Semantics_s.fst(112,4-112,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
X64.Machine_s.dst_op)
(HasType @x1
X64.Semantics_s.ins)
(HasType @x2
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x3
X64.Semantics_s.state))
(HasType (X64.Semantics_s.update_operand_ @x0
@x1
@x2
@x3)
X64.Semantics_s.state))
 

:pattern ((X64.Semantics_s.update_operand_ @x0
@x1
@x2
@x3))
:qid typing_X64.Semantics_s.update_operand_))

:named typing_X64.Semantics_s.update_operand_))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_mem; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(96,4-96,14); use=X64.Semantics_s.fst(96,4-96,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x2
X64.Semantics_s.state))
(HasType (X64.Semantics_s.update_mem @x0
@x1
@x2)
X64.Semantics_s.state))
 

:pattern ((X64.Semantics_s.update_mem @x0
@x1
@x2))
:qid typing_X64.Semantics_s.update_mem))

:named typing_X64.Semantics_s.update_mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(197,4-197,16); use=X64.Semantics_s.fst(197,4-197,16)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType (X64.Semantics_s.update_flags @x0)
(X64.Semantics_s.st Prims.unit)))
 

:pattern ((X64.Semantics_s.update_flags @x0))
:qid typing_X64.Semantics_s.update_flags))

:named typing_X64.Semantics_s.update_flags))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.update_cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(121,4-121,13); use=X64.Semantics_s.fst(121,4-121,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x1
Prims.bool))
(HasType (X64.Semantics_s.update_cf @x0
@x1)
(Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x1)))
 

:pattern ((X64.Semantics_s.update_cf @x0
@x1))
:qid typing_X64.Semantics_s.update_cf))

:named typing_X64.Semantics_s.update_cf))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.sub_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(290,4-290,13); use=X64.Semantics_s.fst(290,4-290,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value)))
(HasType (X64.Semantics_s.sub_mod64 @x0
@x1)
(Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x0
@x1)))
 

:pattern ((X64.Semantics_s.sub_mod64 @x0
@x1))
:qid typing_X64.Semantics_s.sub_mod64))

:named typing_X64.Semantics_s.sub_mod64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.st; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,4-135,6); use=X64.Semantics_s.fst(135,4-135,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (X64.Semantics_s.st @x0)
Tm_type))
 

:pattern ((X64.Semantics_s.st @x0))
:qid typing_X64.Semantics_s.st))

:named typing_X64.Semantics_s.st))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.shift_right; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(240,4-240,15); use=X64.Semantics_s.fst(240,4-240,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (X64.Semantics_s.shift_right @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Semantics_s.shift_right @x0
@x1))
:qid typing_X64.Semantics_s.shift_right))

:named typing_X64.Semantics_s.shift_right))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.shift_left; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(255,4-255,14); use=X64.Semantics_s.fst(255,4-255,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (X64.Semantics_s.shift_left @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Semantics_s.shift_left @x0
@x1))
:qid typing_X64.Semantics_s.shift_left))

:named typing_X64.Semantics_s.shift_left))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.mul_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(295,4-295,13); use=X64.Semantics_s.fst(295,4-295,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value)))
(HasType (X64.Semantics_s.mul_mod64 @x0
@x1)
(Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x0
@x1)))
 

:pattern ((X64.Semantics_s.mul_mod64 @x0
@x1))
:qid typing_X64.Semantics_s.mul_mod64))

:named typing_X64.Semantics_s.mul_mod64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.mul_div64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(301,4-301,13); use=X64.Semantics_s.fst(301,4-301,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value)))
(HasType (X64.Semantics_s.mul_div64 @x0
@x1)
(Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x0
@x1)))
 

:pattern ((X64.Semantics_s.mul_div64 @x0
@x1))
:qid typing_X64.Semantics_s.mul_div64))

:named typing_X64.Semantics_s.mul_div64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.logxor; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(212,4-212,10); use=X64.Semantics_s.fst(212,4-212,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (X64.Semantics_s.logxor @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Semantics_s.logxor @x0
@x1))
:qid typing_X64.Semantics_s.logxor))

:named typing_X64.Semantics_s.logxor))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.logand; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(226,4-226,10); use=X64.Semantics_s.fst(226,4-226,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int))
(HasType (X64.Semantics_s.logand @x0
@x1)
X64.Machine_s.nat64))
 

:pattern ((X64.Semantics_s.logand @x0
@x1))
:qid typing_X64.Semantics_s.logand))

:named typing_X64.Semantics_s.logand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.havoc; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(74,11-74,16); use=X64.Semantics_s.fst(74,11-74,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.state)
(HasType @x1
X64.Semantics_s.ins))
(HasType (X64.Semantics_s.havoc @x0
@x1)
(X64.Semantics_s.uint64 Dummy_value)))
 

:pattern ((X64.Semantics_s.havoc @x0
@x1))
:qid typing_X64.Semantics_s.havoc))

:named typing_X64.Semantics_s.havoc))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(303,4-303,12); use=X64.Semantics_s.fst(303,4-303,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.ins)
(HasType (X64.Semantics_s.eval_ins @x0)
(X64.Semantics_s.st Prims.unit)))
 

:pattern ((X64.Semantics_s.eval_ins @x0))
:qid typing_X64.Semantics_s.eval_ins))

:named typing_X64.Semantics_s.eval_ins))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(374,8-374,17); use=X64.Semantics_s.fst(374,8-374,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.code)
(HasType @x1
Prims.nat)
(HasType @x2
X64.Semantics_s.state))
(HasType (X64.Semantics_s.eval_code @x0
@x1
@x2)
(FStar.Pervasives.Native.option X64.Semantics_s.state)))
 

:pattern ((X64.Semantics_s.eval_code @x0
@x1
@x2))
:qid typing_X64.Semantics_s.eval_code))

:named typing_X64.Semantics_s.eval_code))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.codes; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.codes
Tm_type)
:named typing_X64.Semantics_s.codes))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.code; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.code
Tm_type)
:named typing_X64.Semantics_s.code))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(118,4-118,6); use=X64.Semantics_s.fst(118,4-118,6)
(forall ((@x0 Term))
 (! (implies (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType (X64.Semantics_s.cf @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.cf @x0))
:qid typing_X64.Semantics_s.cf))

:named typing_X64.Semantics_s.cf))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.add_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(285,4-285,13); use=X64.Semantics_s.fst(285,4-285,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(X64.Semantics_s.uint64 Dummy_value))
(HasType @x1
(X64.Semantics_s.uint64 Dummy_value)))
(HasType (X64.Semantics_s.add_mod64 @x0
@x1)
(Tm_refine_541d8b5bedd79f842c043b0167c0294d @x0
@x1)))
 

:pattern ((X64.Semantics_s.add_mod64 @x0
@x1))
:qid typing_X64.Semantics_s.add_mod64))

:named typing_X64.Semantics_s.add_mod64))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__ok; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(67,2-67,4); use=X64.Semantics_s.fst(67,2-67,4)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.state)
(HasType (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
Prims.bool))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__ok @x0))
:qid typing_X64.Semantics_s.__proj__Mkstate__item__ok))

:named typing_X64.Semantics_s.__proj__Mkstate__item__ok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(69,2-69,7); use=X64.Semantics_s.fst(69,2-69,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Semantics_s.state)
(HasType (X64.Semantics_s.__proj__Mkstate__item__flags @x0)
(X64.Semantics_s.uint64 Dummy_value)))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__flags @x0))
:qid typing_X64.Semantics_s.__proj__Mkstate__item__flags))

:named typing_X64.Semantics_s.__proj__Mkstate__item__flags))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.dst_op
Tm_type)
:named typing_X64.Machine_s.dst_op))
;;;;;;;;;;;;;;;;typing_Tm_abs_f0959d9e8c38aa2643c83552fbc44802
;;; Fact-ids: Name X64.Semantics_s.check; Namespace X64.Semantics_s
(assert (! (HasType Tm_abs_f0959d9e8c38aa2643c83552fbc44802
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
:named typing_Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
;;;;;;;;;;;;;;;;typing_Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(344,29-344,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0 @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0 @x0
@x1
@x2))
:qid typing_Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0))

:named typing_Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0))
;;;;;;;;;;;;;;;;typing_Tm_abs_ea7cecc32baf46388a93622b2a6ebd75
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(94,42-94,73); use=X64.Semantics_s.fst(94,42-94,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_ea7cecc32baf46388a93622b2a6ebd75 @x0
@x1
@x2)
Tm_arrow_645426269fc615b2b182027e55cc5771)
 

:pattern ((Tm_abs_ea7cecc32baf46388a93622b2a6ebd75 @x0
@x1
@x2))
:qid typing_Tm_abs_ea7cecc32baf46388a93622b2a6ebd75))

:named typing_Tm_abs_ea7cecc32baf46388a93622b2a6ebd75))
;;;;;;;;;;;;;;;;typing_Tm_abs_e79b8a999a7f57f0040921f533b269ce
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(352,29-352,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_e79b8a999a7f57f0040921f533b269ce @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_e79b8a999a7f57f0040921f533b269ce @x0
@x1
@x2))
:qid typing_Tm_abs_e79b8a999a7f57f0040921f533b269ce))

:named typing_Tm_abs_e79b8a999a7f57f0040921f533b269ce))
;;;;;;;;;;;;;;;;typing_Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(189,27-189,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c @x0
@x1
@x2))
:qid typing_Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c))

:named typing_Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c))
;;;;;;;;;;;;;;;;typing_Tm_abs_e208dc70abce4505afd7c75d2e94a8a4
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(338,29-338,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_e208dc70abce4505afd7c75d2e94a8a4 @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_e208dc70abce4505afd7c75d2e94a8a4 @x0
@x1
@x2))
:qid typing_Tm_abs_e208dc70abce4505afd7c75d2e94a8a4))

:named typing_Tm_abs_e208dc70abce4505afd7c75d2e94a8a4))
;;;;;;;;;;;;;;;;typing_Tm_abs_da887bd33a5a6c5a992d65f196996f0a
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(319,30-319,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_da887bd33a5a6c5a992d65f196996f0a @x0
@x1)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_da887bd33a5a6c5a992d65f196996f0a @x0
@x1))
:qid typing_Tm_abs_da887bd33a5a6c5a992d65f196996f0a))

:named typing_Tm_abs_da887bd33a5a6c5a992d65f196996f0a))
;;;;;;;;;;;;;;;;typing_Tm_abs_bb6aff5b98a517373530d9e388c5f89b
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(332,29-332,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_bb6aff5b98a517373530d9e388c5f89b @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_bb6aff5b98a517373530d9e388c5f89b @x0
@x1
@x2))
:qid typing_Tm_abs_bb6aff5b98a517373530d9e388c5f89b))

:named typing_Tm_abs_bb6aff5b98a517373530d9e388c5f89b))
;;;;;;;;;;;;;;;;typing_Tm_abs_9308350a750cd3e48424d434c40f4e9f
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(194,2-194,3)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_9308350a750cd3e48424d434c40f4e9f @x0
@x1)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_9308350a750cd3e48424d434c40f4e9f @x0
@x1))
:qid typing_Tm_abs_9308350a750cd3e48424d434c40f4e9f))

:named typing_Tm_abs_9308350a750cd3e48424d434c40f4e9f))
;;;;;;;;;;;;;;;;typing_Tm_abs_724242e80027e2a267145da56a098c8b
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(348,29-348,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_724242e80027e2a267145da56a098c8b @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_724242e80027e2a267145da56a098c8b @x0
@x1
@x2))
:qid typing_Tm_abs_724242e80027e2a267145da56a098c8b))

:named typing_Tm_abs_724242e80027e2a267145da56a098c8b))
;;;;;;;;;;;;;;;;typing_Tm_abs_613dc199a18050b65a16a60fdb912f4f
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(327,29-327,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_613dc199a18050b65a16a60fdb912f4f @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_613dc199a18050b65a16a60fdb912f4f @x0
@x1
@x2))
:qid typing_Tm_abs_613dc199a18050b65a16a60fdb912f4f))

:named typing_Tm_abs_613dc199a18050b65a16a60fdb912f4f))
;;;;;;;;;;;;;;;;typing_Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(314,29-314,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b @x0
@x1
@x2))
:qid typing_Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b))

:named typing_Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b))
;;;;;;;;;;;;;;;;typing_Tm_abs_2c81f4a4818392ccafc16cff9167306e
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(198,2-198,3)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_2c81f4a4818392ccafc16cff9167306e @x0)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_2c81f4a4818392ccafc16cff9167306e @x0))
:qid typing_Tm_abs_2c81f4a4818392ccafc16cff9167306e))

:named typing_Tm_abs_2c81f4a4818392ccafc16cff9167306e))
;;;;;;;;;;;;;;;;typing_Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(308,29-308,31)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5 @x0
@x1)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5 @x0
@x1))
:qid typing_Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5))

:named typing_Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5))
;;;;;;;;;;;;;;;;typing_Tm_abs_10261c42e10a9394c7f8c711bf81e6e4
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(305,2-305,3)
(forall ((@x0 Term))
 (! (HasType (Tm_abs_10261c42e10a9394c7f8c711bf81e6e4 @x0)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_10261c42e10a9394c7f8c711bf81e6e4 @x0))
:qid typing_Tm_abs_10261c42e10a9394c7f8c711bf81e6e4))

:named typing_Tm_abs_10261c42e10a9394c7f8c711bf81e6e4))
;;;;;;;;;;;;;;;;typing_Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
;;; Fact-ids: Name X64.Semantics_s.check; Namespace X64.Semantics_s
(assert (! (HasType Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
:named typing_Tm_abs_081baac0dab8f4468ac989ea2ddf99a3))
;;;;;;;;;;;;;;;;typing_Tm_abs_06436ba00a5bd9a8083ce074f3a147a1
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(189,27-189,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_abs_06436ba00a5bd9a8083ce074f3a147a1 @x0
@x1
@x2)
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
 

:pattern ((Tm_abs_06436ba00a5bd9a8083ce074f3a147a1 @x0
@x1
@x2))
:qid typing_Tm_abs_06436ba00a5bd9a8083ce074f3a147a1))

:named typing_Tm_abs_06436ba00a5bd9a8083ce074f3a147a1))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Prims.list @x0)))
(HasType (Prims.uu___is_Cons @x0
@x1)
Prims.bool))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid typing_Prims.uu___is_Cons))

:named typing_Prims.uu___is_Cons))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named typing_Prims.prop))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.sub_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(133,4-133,11); use=FStar.UInt64.fsti(133,4-133,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.sub_mod @x0
@x1)
(Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x0
@x1)))
 

:pattern ((FStar.UInt64.sub_mod @x0
@x1))
:qid typing_FStar.UInt64.sub_mod))

:named typing_FStar.UInt64.sub_mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,4-116,7); use=FStar.UInt64.fsti(116,4-116,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt64.fsti(117,12-117,32); use=FStar.UInt64.fsti(117,12-117,32)
(Valid 
;; def=FStar.UInt64.fsti(117,12-117,32); use=FStar.UInt64.fsti(117,12-117,32)
(FStar.UInt.size (Prims.op_Subtraction (FStar.UInt64.v @x0)
(FStar.UInt64.v @x1))
(BoxInt 64))
)

(HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.sub @x0
@x1)
(Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)))
 

:pattern ((FStar.UInt64.sub @x0
@x1))
:qid typing_FStar.UInt64.sub))

:named typing_FStar.UInt64.sub))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.mul_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(161,4-161,11); use=FStar.UInt64.fsti(161,4-161,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.mul_mod @x0
@x1)
(Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x0
@x1)))
 

:pattern ((FStar.UInt64.mul_mod @x0
@x1))
:qid typing_FStar.UInt64.mul_mod))

:named typing_FStar.UInt64.mul_mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.add_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(105,4-105,11); use=FStar.UInt64.fsti(105,4-105,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.add_mod @x0
@x1)
(Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x0
@x1)))
 

:pattern ((FStar.UInt64.add_mod @x0
@x1))
:qid typing_FStar.UInt64.add_mod))

:named typing_FStar.UInt64.add_mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,4-88,7); use=FStar.UInt64.fsti(88,4-88,7)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and 
;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt64.fsti(89,12-89,32)
(Valid 
;; def=FStar.UInt64.fsti(89,12-89,32); use=FStar.UInt64.fsti(89,12-89,32)
(FStar.UInt.size (Prims.op_Addition (FStar.UInt64.v @x0)
(FStar.UInt64.v @x1))
(BoxInt 64))
)

(HasType @x0
(FStar.UInt64.t Dummy_value))
(HasType @x1
(FStar.UInt64.t Dummy_value)))
(HasType (FStar.UInt64.add @x0
@x1)
(Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)))
 

:pattern ((FStar.UInt64.add @x0
@x1))
:qid typing_FStar.UInt64.add))

:named typing_FStar.UInt64.add))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.zero; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(58,4-58,8); use=FStar.UInt.fsti(58,4-58,8)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.UInt.zero @x0)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.zero @x0))
:qid typing_FStar.UInt.zero))

:named typing_FStar.UInt.zero))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(181,8-181,14); use=FStar.UInt.fsti(181,8-181,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.to_vec @x0
@x1)
(FStar.BitVector.bv_t @x0)))
 

:pattern ((FStar.UInt.to_vec @x0
@x1))
:qid typing_FStar.UInt.to_vec))

:named typing_FStar.UInt.to_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.sub_mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(113,4-113,11); use=FStar.UInt.fsti(113,4-113,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.sub_mod @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.sub_mod @x0
@x1
@x2))
:qid typing_FStar.UInt.sub_mod))

:named typing_FStar.UInt.sub_mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.shift_right; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(451,4-451,15); use=FStar.UInt.fsti(451,4-451,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
Prims.nat))
(HasType (FStar.UInt.shift_right @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.shift_right @x0
@x1
@x2))
:qid typing_FStar.UInt.shift_right))

:named typing_FStar.UInt.shift_right))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.shift_left; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(448,4-448,14); use=FStar.UInt.fsti(448,4-448,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
Prims.nat))
(HasType (FStar.UInt.shift_left @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.shift_left @x0
@x1
@x2))
:qid typing_FStar.UInt.shift_left))

:named typing_FStar.UInt.shift_left))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.mul_mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(127,4-127,11); use=FStar.UInt.fsti(127,4-127,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.mul_mod @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.mul_mod @x0
@x1
@x2))
:qid typing_FStar.UInt.mul_mod))

:named typing_FStar.UInt.mul_mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.logxor; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(302,4-302,10); use=FStar.UInt.fsti(302,4-302,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.logxor @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.logxor @x0
@x1
@x2))
:qid typing_FStar.UInt.logxor))

:named typing_FStar.UInt.logxor))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.logand; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(299,4-299,10); use=FStar.UInt.fsti(299,4-299,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.logand @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.logand @x0
@x1
@x2))
:qid typing_FStar.UInt.logand))

:named typing_FStar.UInt.logand))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(185,8-185,16); use=FStar.UInt.fsti(185,8-185,16)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.BitVector.bv_t @x0)))
(HasType (FStar.UInt.from_vec @x0
@x1)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.from_vec @x0
@x1))
:qid typing_FStar.UInt.from_vec))

:named typing_FStar.UInt.from_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.UInt.add_mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(99,4-99,11); use=FStar.UInt.fsti(99,4-99,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
(FStar.UInt.uint_t @x0)))
(HasType (FStar.UInt.add_mod @x0
@x1
@x2)
(FStar.UInt.uint_t @x0)))
 

:pattern ((FStar.UInt.add_mod @x0
@x1
@x2))
:qid typing_FStar.UInt.add_mod))

:named typing_FStar.UInt.add_mod))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.union; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(40,4-40,9); use=FStar.Set.fsti(40,4-40,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.union @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.union @x0
@x1
@x2))
:qid typing_FStar.Set.union))

:named typing_FStar.Set.union))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.singleton; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(37,4-37,13); use=FStar.Set.fsti(37,4-37,13)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0))
(HasType (FStar.Set.singleton @x0
@x1)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Set.singleton @x0
@x1))
:qid typing_FStar.Set.singleton))

:named typing_FStar.Set.singleton))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.set; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(22,4-22,7); use=FStar.Set.fsti(22,4-22,7)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.eqtype)
(HasType (FStar.Set.set @x0)
Tm_type))
 

:pattern ((FStar.Set.set @x0))
:qid typing_FStar.Set.set))

:named typing_FStar.Set.set))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.mem; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(30,4-30,7); use=FStar.Set.fsti(30,4-30,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.mem @x0
@x1
@x2)
Prims.bool))
 

:pattern ((FStar.Set.mem @x0
@x1
@x2))
:qid typing_FStar.Set.mem))

:named typing_FStar.Set.mem))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Set.equal; Namespace FStar.Set
(assert (! 
;; def=FStar.Set.fsti(25,4-25,9); use=FStar.Set.fsti(25,4-25,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0)))
(HasType (FStar.Set.equal @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid typing_FStar.Set.equal))

:named typing_FStar.Set.equal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,4-64,9); use=FStar.Seq.Base.fsti(64,4-64,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x0
@x1)))
(HasType (FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.slice @x0
@x1
@x2
@x3))
:qid typing_FStar.Seq.Base.slice))

:named typing_FStar.Seq.Base.slice))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Seq.Base.seq @x0)
Tm_type))
 

:pattern ((FStar.Seq.Base.seq @x0))
:qid typing_FStar.Seq.Base.seq))

:named typing_FStar.Seq.Base.seq))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.length; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(26,4-26,10); use=FStar.Seq.Base.fsti(26,4-26,10)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.length @x0
@x1)
Prims.nat))
 

:pattern ((FStar.Seq.Base.length @x0
@x1))
:qid typing_FStar.Seq.Base.length))

:named typing_FStar.Seq.Base.length))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,4-32,9); use=FStar.Seq.Base.fsti(32,4-32,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))
(HasType (FStar.Seq.Base.index @x0
@x1
@x2)
@x0))
 

:pattern ((FStar.Seq.Base.index @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.index))

:named typing_FStar.Seq.Base.index))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.equal; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(166,4-166,9); use=FStar.Seq.Base.fsti(166,4-166,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.equal @x0
@x1
@x2)
Prims.prop))
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.equal))

:named typing_FStar.Seq.Base.equal))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,4-46,9); use=FStar.Seq.Base.fsti(46,4-46,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Seq.Base.empty @x0)
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)))
 

:pattern ((FStar.Seq.Base.empty @x0))
:qid typing_FStar.Seq.Base.empty))

:named typing_FStar.Seq.Base.empty))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.create; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(34,4-34,10); use=FStar.Seq.Base.fsti(34,4-34,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
@x0))
(HasType (FStar.Seq.Base.create @x0
@x1
@x2)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.create @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.create))

:named typing_FStar.Seq.Base.create))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Seq.Base.append; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(58,4-58,10); use=FStar.Seq.Base.fsti(58,4-58,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))
(HasType (FStar.Seq.Base.append @x0
@x1
@x2)
(FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.append @x0
@x1
@x2))
:qid typing_FStar.Seq.Base.append))

:named typing_FStar.Seq.Base.append))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_Some))

:named typing_FStar.Pervasives.Native.uu___is_Some))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Pervasives.Native.option @x0)))
(HasType (FStar.Pervasives.Native.uu___is_None @x0
@x1)
Prims.bool))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid typing_FStar.Pervasives.Native.uu___is_None))

:named typing_FStar.Pervasives.Native.uu___is_None))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(63,4-63,7); use=FStar.Pervasives.Native.fst(63,4-63,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.snd @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.snd))

:named typing_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(HasType (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
@x0))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid typing_FStar.Pervasives.Native.__proj__Some__item__v))

:named typing_FStar.Pervasives.Native.__proj__Some__item__v))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Pervasives.Native.tuple2 @x0
@x1)))
(HasType (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
@x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))

:named typing_FStar.Pervasives.Native.__proj__Mktuple2__item___2))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))
(HasType (FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
(FStar.Map.t @x0
@x1)))
 

:pattern ((FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
:qid typing_FStar.Map.upd))

:named typing_FStar.Map.upd))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.domain; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(48,4-48,10); use=FStar.Map.fsti(48,4-48,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1)))
(HasType (FStar.Map.domain @x0
@x1
@x2)
(FStar.Set.set @x0)))
 

:pattern ((FStar.Map.domain @x0
@x1
@x2))
:qid typing_FStar.Map.domain))

:named typing_FStar.Map.domain))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.Map.contains; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(51,4-51,12); use=FStar.Map.fsti(51,4-51,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))
(HasType (FStar.Map.contains @x0
@x1
@x2
@x3)
Prims.bool))
 

:pattern ((FStar.Map.contains @x0
@x1
@x2
@x3))
:qid typing_FStar.Map.contains))

:named typing_FStar.Map.contains))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.BitVector.zero_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(37,4-37,12); use=FStar.BitVector.fsti(37,4-37,12)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.pos)
(HasType (FStar.BitVector.zero_vec @x0)
(FStar.BitVector.bv_t @x0)))
 

:pattern ((FStar.BitVector.zero_vec @x0))
:qid typing_FStar.BitVector.zero_vec))

:named typing_FStar.BitVector.zero_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.BitVector.shift_right_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(147,4-147,19); use=FStar.BitVector.fsti(147,4-147,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
Prims.nat))
(HasType (FStar.BitVector.shift_right_vec @x0
@x1
@x2)
(FStar.BitVector.bv_t @x0)))
 

:pattern ((FStar.BitVector.shift_right_vec @x0
@x1
@x2))
:qid typing_FStar.BitVector.shift_right_vec))

:named typing_FStar.BitVector.shift_right_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.BitVector.shift_left_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(133,4-133,18); use=FStar.BitVector.fsti(133,4-133,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
Prims.nat))
(HasType (FStar.BitVector.shift_left_vec @x0
@x1
@x2)
(FStar.BitVector.bv_t @x0)))
 

:pattern ((FStar.BitVector.shift_left_vec @x0
@x1
@x2))
:qid typing_FStar.BitVector.shift_left_vec))

:named typing_FStar.BitVector.shift_left_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(57,8-57,18); use=FStar.BitVector.fsti(57,8-57,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
(FStar.BitVector.bv_t @x0)))
(HasType (FStar.BitVector.logxor_vec @x0
@x1
@x2)
(FStar.BitVector.bv_t @x0)))
 

:pattern ((FStar.BitVector.logxor_vec @x0
@x1
@x2))
:qid typing_FStar.BitVector.logxor_vec))

:named typing_FStar.BitVector.logxor_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(46,8-46,18); use=FStar.BitVector.fsti(46,8-46,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
(FStar.BitVector.bv_t @x0)))
(HasType (FStar.BitVector.logand_vec @x0
@x1
@x2)
(FStar.BitVector.bv_t @x0)))
 

:pattern ((FStar.BitVector.logand_vec @x0
@x1
@x2))
:qid typing_FStar.BitVector.logand_vec))

:named typing_FStar.BitVector.logand_vec))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name FStar.BitVector.bv_t; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(32,5-32,9); use=FStar.BitVector.fsti(32,5-32,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.nat)
(HasType (FStar.BitVector.bv_t @x0)
Tm_type))
 

:pattern ((FStar.BitVector.bv_t @x0))
:qid typing_FStar.BitVector.bv_t))

:named typing_FStar.BitVector.bv_t))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(193,4-193,14); use=X64.Semantics_s.fst(193,4-193,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT X64.Semantics_s.update_reg@tok
@x0)
@x1)
(X64.Semantics_s.update_reg @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT X64.Semantics_s.update_reg@tok
@x0)
@x1))
:qid token_correspondence_X64.Semantics_s.update_reg))

:named token_correspondence_X64.Semantics_s.update_reg))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(197,4-197,16); use=X64.Semantics_s.fst(197,4-197,16)
(forall ((@x0 Term))
 (! (= (ApplyTT X64.Semantics_s.update_flags@tok
@x0)
(X64.Semantics_s.update_flags @x0))
 

:pattern ((ApplyTT X64.Semantics_s.update_flags@tok
@x0))
:qid token_correspondence_X64.Semantics_s.update_flags))

:named token_correspondence_X64.Semantics_s.update_flags))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(388,4-388,14); use=X64.Semantics_s.fst(388,4-388,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
X64.Semantics_s.ocmp)
(HasType @x2
X64.Semantics_s.code)
(HasType @x3
Prims.nat)
(HasType @x4
X64.Semantics_s.state))
(HasType (X64.Semantics_s.eval_while.fuel_instrumented @u0
@x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.option X64.Semantics_s.state)))
 

:pattern ((X64.Semantics_s.eval_while.fuel_instrumented @u0
@x1
@x2
@x3
@x4))
:qid token_correspondence_X64.Semantics_s.eval_while.fuel_instrumented))

:named token_correspondence_X64.Semantics_s.eval_while.fuel_instrumented))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(303,4-303,12); use=X64.Semantics_s.fst(303,4-303,12)
(forall ((@x0 Term))
 (! (= (ApplyTT X64.Semantics_s.eval_ins@tok
@x0)
(X64.Semantics_s.eval_ins @x0))
 

:pattern ((ApplyTT X64.Semantics_s.eval_ins@tok
@x0))
:qid token_correspondence_X64.Semantics_s.eval_ins))

:named token_correspondence_X64.Semantics_s.eval_ins))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(381,4-381,14); use=X64.Semantics_s.fst(381,4-381,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
X64.Semantics_s.codes)
(HasType @x2
Prims.nat)
(HasType @x3
X64.Semantics_s.state))
(HasType (X64.Semantics_s.eval_codes.fuel_instrumented @u0
@x1
@x2
@x3)
(FStar.Pervasives.Native.option X64.Semantics_s.state)))
 

:pattern ((X64.Semantics_s.eval_codes.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_X64.Semantics_s.eval_codes.fuel_instrumented))

:named token_correspondence_X64.Semantics_s.eval_codes.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(374,8-374,17); use=X64.Semantics_s.fst(374,8-374,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
X64.Semantics_s.code)
(HasType @x2
Prims.nat)
(HasType @x3
X64.Semantics_s.state))
(HasType (X64.Semantics_s.eval_code.fuel_instrumented @u0
@x1
@x2
@x3)
(FStar.Pervasives.Native.option X64.Semantics_s.state)))
 

:pattern ((X64.Semantics_s.eval_code.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_X64.Semantics_s.eval_code.fuel_instrumented))

:named token_correspondence_X64.Semantics_s.eval_code.fuel_instrumented))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT X64.Machine_s.precode@tok
@x0)
@x1)
(X64.Machine_s.precode @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT X64.Machine_s.precode@tok
@x0)
@x1))

:pattern ((X64.Machine_s.precode @x0
@x1))
:qid token_correspondence_X64.Machine_s.precode@tok))

:named token_correspondence_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= (ApplyTT Prims.list@tok
@x0)
(Prims.list @x0))
 

:pattern ((ApplyTT Prims.list@tok
@x0))

:pattern ((Prims.list @x0))
:qid token_correspondence_Prims.list@tok))

:named token_correspondence_Prims.list@tok))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(181,8-181,14); use=FStar.UInt.fsti(181,8-181,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
(FStar.UInt.uint_t @x1)))
(HasType (FStar.UInt.to_vec.fuel_instrumented @u0
@x1
@x2)
(FStar.BitVector.bv_t @x1)))
 

:pattern ((FStar.UInt.to_vec.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.UInt.to_vec.fuel_instrumented))

:named token_correspondence_FStar.UInt.to_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(185,8-185,16); use=FStar.UInt.fsti(185,8-185,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
(FStar.BitVector.bv_t @x1)))
(HasType (FStar.UInt.from_vec.fuel_instrumented @u0
@x1
@x2)
(FStar.UInt.uint_t @x1)))
 

:pattern ((FStar.UInt.from_vec.fuel_instrumented @u0
@x1
@x2))
:qid token_correspondence_FStar.UInt.from_vec.fuel_instrumented))

:named token_correspondence_FStar.UInt.from_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2)
(FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1)
@x2))

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid token_correspondence_FStar.Pervasives.Native.tuple3@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1)
(FStar.Pervasives.Native.tuple2 @x0
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0)
@x1))

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid token_correspondence_FStar.Pervasives.Native.tuple2@tok))

:named token_correspondence_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;name-token correspondence
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= (ApplyTT FStar.Pervasives.Native.option@tok
@x0)
(FStar.Pervasives.Native.option @x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.option@tok
@x0))

:pattern ((FStar.Pervasives.Native.option @x0))
:qid token_correspondence_FStar.Pervasives.Native.option@tok))

:named token_correspondence_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Name-token correspondence
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Map.upd@tok
@x0)
@x1)
@x2)
@x3)
@x4)
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Map.upd@tok
@x0)
@x1)
@x2)
@x3)
@x4))
:qid token_correspondence_FStar.Map.upd))

:named token_correspondence_FStar.Map.upd))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(57,8-57,18); use=FStar.BitVector.fsti(57,8-57,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
(FStar.BitVector.bv_t @x1))
(HasType @x3
(FStar.BitVector.bv_t @x1)))
(HasType (FStar.BitVector.logxor_vec.fuel_instrumented @u0
@x1
@x2
@x3)
(FStar.BitVector.bv_t @x1)))
 

:pattern ((FStar.BitVector.logxor_vec.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))

:named token_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Typing correspondence of token to term
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(46,8-46,18); use=FStar.BitVector.fsti(46,8-46,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
(FStar.BitVector.bv_t @x1))
(HasType @x3
(FStar.BitVector.bv_t @x1)))
(HasType (FStar.BitVector.logand_vec.fuel_instrumented @u0
@x1
@x2
@x3)
(FStar.BitVector.bv_t @x1)))
 

:pattern ((FStar.BitVector.logand_vec.fuel_instrumented @u0
@x1
@x2
@x3))
:qid token_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))

:named token_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Xor64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Xor64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Xor64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Xor64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Xor64))

:named subterm_ordering_X64.Semantics_s.Xor64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Sub64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Sub64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Sub64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Sub64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Sub64))

:named subterm_ordering_X64.Semantics_s.Sub64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shr64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Shr64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Shr64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shr64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Shr64))

:named subterm_ordering_X64.Semantics_s.Shr64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shl64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Shl64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Shl64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shl64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Shl64))

:named subterm_ordering_X64.Semantics_s.Shl64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mul64 @x1)
X64.Semantics_s.ins)
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Mul64 @x1))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mul64 @x1)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Mul64))

:named subterm_ordering_X64.Semantics_s.Mul64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mov64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Mov64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Mov64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mov64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Mov64))

:named subterm_ordering_X64.Semantics_s.Mov64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.IMul64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.IMul64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.IMul64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.IMul64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.IMul64))

:named subterm_ordering_X64.Semantics_s.IMul64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.And64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.And64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.And64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.And64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.And64))

:named subterm_ordering_X64.Semantics_s.And64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.AddLea64))

:named subterm_ordering_X64.Semantics_s.AddLea64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddCarry64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.AddCarry64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.AddCarry64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddCarry64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.AddCarry64))

:named subterm_ordering_X64.Semantics_s.AddCarry64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Add64 @x1
@x2)
X64.Semantics_s.ins)
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x1
(X64.Semantics_s.Add64 @x1
@x2)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(X64.Semantics_s.Add64 @x1
@x2)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Add64 @x1
@x2)
X64.Semantics_s.ins))
:qid subterm_ordering_X64.Semantics_s.Add64))

:named subterm_ordering_X64.Semantics_s.Add64))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.While @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.While @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6)))
:qid subterm_ordering_X64.Machine_s.While))

:named subterm_ordering_X64.Machine_s.While))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.Ins @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid subterm_ordering_X64.Machine_s.Ins))

:named subterm_ordering_X64.Machine_s.Ins))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7)))
:qid subterm_ordering_X64.Machine_s.IfElse))

:named subterm_ordering_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(X64.Machine_s.Block @x1
@x2
@x3))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid subterm_ordering_X64.Machine_s.Block))

:named subterm_ordering_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(Prims.Cons @x1
@x2
@x3)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(Prims.Cons @x1
@x2
@x3)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid subterm_ordering_Prims.Cons))

:named subterm_ordering_Prims.Cons))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x2
(FStar.Pervasives.Native.Some @x1
@x2))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid subterm_ordering_FStar.Pervasives.Native.Some))

:named subterm_ordering_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x5
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x6
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple3))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;subterm ordering
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x3
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))
(Valid (Prims.precedes Prims.lex_t
Prims.lex_t
@x4
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid subterm_ordering_FStar.Pervasives.Native.Mktuple2))

:named subterm_ordering_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.mul_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(161,31-161,32); use=FStar.UInt64.fsti(161,31-161,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_fce3a2e2e29645212301d89fcebc4e29))

:named refinement_kinding_Tm_refine_fce3a2e2e29645212301d89fcebc4e29))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.mul_div64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(297,44-297,50); use=X64.Semantics_s.fst(301,4-301,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_f57897888b8e8a5df8c6b09df8b92b30))

:named refinement_kinding_Tm_refine_f57897888b8e8a5df8c6b09df8b92b30))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Mul64__item__src; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b
Tm_type)
:named refinement_kinding_Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_2; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(142,58-142,86); use=FStar.BitVector.fsti(142,58-142,86)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826))

:named refinement_kinding_Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Mov64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_e8de62b85869f7c1a1780736ed143295
Tm_type)
:named refinement_kinding_Tm_refine_e8de62b85869f7c1a1780736ed143295))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Shr64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_e31d0af1473307c26c9e917a73600ad0
Tm_type)
:named refinement_kinding_Tm_refine_e31d0af1473307c26c9e917a73600ad0))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.BitVector.bv_t; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(32,21-32,51); use=FStar.BitVector.fsti(32,21-32,51)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e))

:named refinement_kinding_Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__AddLea64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_e04f937679d9c74a6caf8aa7b9f98189
Tm_type)
:named refinement_kinding_Tm_refine_e04f937679d9c74a6caf8aa7b9f98189))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named refinement_kinding_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named refinement_kinding_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__And64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2
Tm_type)
:named refinement_kinding_Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.sub_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(133,31-133,32); use=FStar.UInt64.fsti(133,31-133,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_cb95789552ffa46c14f21af13ceaad6b))

:named refinement_kinding_Tm_refine_cb95789552ffa46c14f21af13ceaad6b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(36,41-36,57); use=FStar.Seq.Base.fsti(36,41-36,57)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named refinement_kinding_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_2; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(156,59-156,84); use=FStar.BitVector.fsti(156,59-156,84)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_c0ec47abc53a2509e744dad22ccf8191))

:named refinement_kinding_Tm_refine_c0ec47abc53a2509e744dad22ccf8191))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,27-88,28); use=FStar.UInt64.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_bc552b2c624e2add758b3ac761c0c563))

:named refinement_kinding_Tm_refine_bc552b2c624e2add758b3ac761c0c563))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_b913a3f691ca99086652e0a655e72f17))

:named refinement_kinding_Tm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Shl64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_b4ab27333df03bce36b56906586a3225
Tm_type)
:named refinement_kinding_Tm_refine_b4ab27333df03bce36b56906586a3225))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_ac201cf927190d39c033967b63cb957b))

:named refinement_kinding_Tm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.sub_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(287,44-287,50); use=X64.Semantics_s.fst(290,4-290,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f))

:named refinement_kinding_Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (HasType (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)
Tm_type)
 

:pattern ((HasType (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)
Tm_type))
:qid refinement_kinding_Tm_refine_81407705a0828c2c1b1976675443f647))

:named refinement_kinding_Tm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt.index_to_vec_ones; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(430,41-430,54); use=FStar.UInt.fsti(430,41-430,54)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))

:named refinement_kinding_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Add64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_6fab9340d0ab4fd98129eb512f268790
Tm_type)
:named refinement_kinding_Tm_refine_6fab9340d0ab4fd98129eb512f268790))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_1; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(137,58-137,87); use=FStar.BitVector.fsti(137,58-137,87)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_6ccf0869e6825997ab860bb25791c11f @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_6ccf0869e6825997ab860bb25791c11f @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_6ccf0869e6825997ab860bb25791c11f))

:named refinement_kinding_Tm_refine_6ccf0869e6825997ab860bb25791c11f))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.update_cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(121,45-121,87); use=X64.Semantics_s.fst(121,45-121,87)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_5e4248dc93a56d69a95eb5ac14851d39))

:named refinement_kinding_Tm_refine_5e4248dc93a56d69a95eb5ac14851d39))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.mul_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(292,44-292,50); use=X64.Semantics_s.fst(295,4-295,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1))

:named refinement_kinding_Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Sub64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_569023f890bbff681c285b9f9a216ade
Tm_type)
:named refinement_kinding_Tm_refine_569023f890bbff681c285b9f9a216ade))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.add_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(282,44-282,50); use=X64.Semantics_s.fst(285,4-285,13)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_541d8b5bedd79f842c043b0167c0294d @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_541d8b5bedd79f842c043b0167c0294d @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_541d8b5bedd79f842c043b0167c0294d))

:named refinement_kinding_Tm_refine_541d8b5bedd79f842c043b0167c0294d))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,27-116,28); use=FStar.UInt64.fsti(116,27-116,28)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))

:named refinement_kinding_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type)
 

:pattern ((HasType (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)
Tm_type))
:qid refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_kinding_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named refinement_kinding_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_1; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(151,59-151,83); use=FStar.BitVector.fsti(151,59-151,83)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_34425c23b534b8a294f8f063dd9faa4b))

:named refinement_kinding_Tm_refine_34425c23b534b8a294f8f063dd9faa4b))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name FStar.UInt64.add_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(105,31-105,32); use=FStar.UInt64.fsti(105,31-105,32)
(forall ((@x0 Term) (@x1 Term))
 (! (HasType (Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x0
@x1)
Tm_type)
 

:pattern ((HasType (Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x0
@x1)
Tm_type))
:qid refinement_kinding_Tm_refine_2d98f2f5de361516da3dbd9f556509e2))

:named refinement_kinding_Tm_refine_2d98f2f5de361516da3dbd9f556509e2))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__IMul64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e
Tm_type)
:named refinement_kinding_Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__Xor64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_1957040814f569aff4b252943fe77fdd
Tm_type)
:named refinement_kinding_Tm_refine_1957040814f569aff4b252943fe77fdd))
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: Name X64.Semantics_s.__proj__AddCarry64__item__dst; Namespace X64.Semantics_s
(assert (! (HasType Tm_refine_16a53ffd1bab892d408baed6f0393a33
Tm_type)
:named refinement_kinding_Tm_refine_16a53ffd1bab892d408baed6f0393a33))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.mul_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(161,31-161,32); use=FStar.UInt64.fsti(161,31-161,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(163,21-163,57); use=FStar.UInt64.fsti(163,21-163,57)
(= (FStar.UInt.mul_mod (BoxInt 64)
(FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_fce3a2e2e29645212301d89fcebc4e29))

:named refinement_interpretation_Tm_refine_fce3a2e2e29645212301d89fcebc4e29))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.mul_div64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(297,44-297,50); use=X64.Semantics_s.fst(301,4-301,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(X64.Semantics_s.uint64 Dummy_value))

;; def=X64.Semantics_s.fst(299,21-299,47); use=X64.Semantics_s.fst(301,4-301,13)
(>= (_mul (BoxInt_proj_0 (FStar.UInt64.v @x2))
(BoxInt_proj_0 (FStar.UInt64.v @x3)))
0)


;; def=X64.Semantics_s.fst(299,51-299,92); use=X64.Semantics_s.fst(301,4-301,13)
(= (BoxInt (_div (_mul (BoxInt_proj_0 (FStar.UInt64.v @x2))
(BoxInt_proj_0 (FStar.UInt64.v @x3)))
18446744073709551616))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_f57897888b8e8a5df8c6b09df8b92b30))

:named refinement_interpretation_Tm_refine_f57897888b8e8a5df8c6b09df8b92b30))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Mul64__item__src; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Mul64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b))
:qid refinement_interpretation_Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b))

:named refinement_interpretation_Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_2; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(142,58-142,86); use=FStar.BitVector.fsti(142,58-142,86)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThan @x1
@x2))
(BoxBool_proj_0 (Prims.op_LessThan @x1
(Prims.op_Subtraction @x2
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826))

:named refinement_interpretation_Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Mov64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e8de62b85869f7c1a1780736ed143295)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Mov64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e8de62b85869f7c1a1780736ed143295))
:qid refinement_interpretation_Tm_refine_e8de62b85869f7c1a1780736ed143295))

:named refinement_interpretation_Tm_refine_e8de62b85869f7c1a1780736ed143295))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Shr64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e31d0af1473307c26c9e917a73600ad0)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Shr64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e31d0af1473307c26c9e917a73600ad0))
:qid refinement_interpretation_Tm_refine_e31d0af1473307c26c9e917a73600ad0))

:named refinement_interpretation_Tm_refine_e31d0af1473307c26c9e917a73600ad0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.BitVector.bv_t; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(32,21-32,51); use=FStar.BitVector.fsti(32,21-32,51)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq Prims.bool))

;; def=FStar.BitVector.fsti(32,36-32,50); use=FStar.BitVector.fsti(32,36-32,50)
(= (FStar.Seq.Base.length Prims.bool
@x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x2)))
:qid refinement_interpretation_Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e))

:named refinement_interpretation_Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__AddLea64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_e04f937679d9c74a6caf8aa7b9f98189)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_AddLea64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_e04f937679d9c74a6caf8aa7b9f98189))
:qid refinement_interpretation_Tm_refine_e04f937679d9c74a6caf8aa7b9f98189))

:named refinement_interpretation_Tm_refine_e04f937679d9c74a6caf8aa7b9f98189))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(32,40-32,52); use=FStar.Seq.Base.fsti(32,40-32,52)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named refinement_interpretation_Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(158,60-158,66); use=FStar.Seq.Base.fsti(158,60-158,66)
(<= (BoxInt_proj_0 @x2)
(BoxInt_proj_0 @x1))


;; def=FStar.Seq.Base.fsti(158,70-158,83); use=FStar.Seq.Base.fsti(158,70-158,83)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (FStar.Seq.Base.length @x3
@x4)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named refinement_interpretation_Tm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__And64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_And64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2))
:qid refinement_interpretation_Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2))

:named refinement_interpretation_Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.sub_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(133,31-133,32); use=FStar.UInt64.fsti(133,31-133,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(135,21-135,57); use=FStar.UInt64.fsti(135,21-135,57)
(= (FStar.UInt.sub_mod (BoxInt 64)
(FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x2
@x3)))
:qid refinement_interpretation_Tm_refine_cb95789552ffa46c14f21af13ceaad6b))

:named refinement_interpretation_Tm_refine_cb95789552ffa46c14f21af13ceaad6b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(36,41-36,57); use=FStar.Seq.Base.fsti(36,41-36,57)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(36,48-36,55); use=FStar.Seq.Base.fsti(36,48-36,55)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x2)))
:qid refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named refinement_interpretation_Tm_refine_c1424615841f28cac7fc34e92b7ff33c))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_2; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(156,59-156,84); use=FStar.BitVector.fsti(156,59-156,84)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThan @x1
@x2))
(BoxBool_proj_0 (Prims.op_GreaterThanOrEqual @x1
@x3))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_c0ec47abc53a2509e744dad22ccf8191))

:named refinement_interpretation_Tm_refine_c0ec47abc53a2509e744dad22ccf8191))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,27-88,28); use=FStar.UInt64.fsti(88,27-88,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(90,21-90,36); use=FStar.UInt64.fsti(90,21-90,36)
(= (Prims.op_Addition (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_bc552b2c624e2add758b3ac761c0c563))

:named refinement_interpretation_Tm_refine_bc552b2c624e2add758b3ac761c0c563))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Seq.Base.seq @x2))

;; def=FStar.Seq.Base.fsti(46,37-46,47); use=FStar.Seq.Base.fsti(46,37-46,47)
(= (FStar.Seq.Base.length @x2
@x1)
(BoxInt 0))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_b913a3f691ca99086652e0a655e72f17 @x2)))
:qid refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17))

:named refinement_interpretation_Tm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Shl64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_b4ab27333df03bce36b56906586a3225)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Shl64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_b4ab27333df03bce36b56906586a3225))
:qid refinement_interpretation_Tm_refine_b4ab27333df03bce36b56906586a3225))

:named refinement_interpretation_Tm_refine_b4ab27333df03bce36b56906586a3225))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_ac201cf927190d39c033967b63cb957b @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(153,63-153,88); use=FStar.Seq.Base.fsti(153,63-153,88)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Addition (FStar.Seq.Base.length @x2
@x3)
(FStar.Seq.Base.length @x2
@x4))))


;; def=FStar.Seq.Base.fsti(153,92-153,106); use=FStar.Seq.Base.fsti(153,92-153,106)
(<= (BoxInt_proj_0 (FStar.Seq.Base.length @x2
@x3))
(BoxInt_proj_0 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_ac201cf927190d39c033967b63cb957b @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b))

:named refinement_interpretation_Tm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.sub_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(287,44-287,50); use=X64.Semantics_s.fst(290,4-290,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x2
@x3))
(and (HasTypeFuel @u0
@x1
(X64.Semantics_s.uint64 Dummy_value))

;; def=X64.Semantics_s.fst(289,21-289,50); use=X64.Semantics_s.fst(290,4-290,13)
(= (BoxInt (_mod (- (BoxInt_proj_0 (FStar.UInt64.v @x2))
(BoxInt_proj_0 (FStar.UInt64.v @x3)))
18446744073709551616))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x2
@x3)))
:qid refinement_interpretation_Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f))

:named refinement_interpretation_Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x3
@x4))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x2
@x1))
(BoxBool_proj_0 (Prims.op_LessThanOrEqual @x1
(FStar.Seq.Base.length @x3
@x4)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x3
@x4)))
:qid refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647))

:named refinement_interpretation_Tm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt.index_to_vec_ones; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(430,41-430,54); use=FStar.UInt.fsti(430,41-430,54)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x2))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.UInt.fsti(430,47-430,53); use=FStar.UInt.fsti(430,47-430,53)
(<= (BoxInt_proj_0 @x1)
(BoxInt_proj_0 @x2))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x2)))
:qid refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))

:named refinement_interpretation_Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Add64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_6fab9340d0ab4fd98129eb512f268790)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Add64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_6fab9340d0ab4fd98129eb512f268790))
:qid refinement_interpretation_Tm_refine_6fab9340d0ab4fd98129eb512f268790))

:named refinement_interpretation_Tm_refine_6fab9340d0ab4fd98129eb512f268790))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_1; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(137,58-137,87); use=FStar.BitVector.fsti(137,58-137,87)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_6ccf0869e6825997ab860bb25791c11f @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThan @x1
@x2))
(BoxBool_proj_0 (Prims.op_GreaterThanOrEqual @x1
(Prims.op_Subtraction @x2
@x3)))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_6ccf0869e6825997ab860bb25791c11f @x2
@x3)))
:qid refinement_interpretation_Tm_refine_6ccf0869e6825997ab860bb25791c11f))

:named refinement_interpretation_Tm_refine_6ccf0869e6825997ab860bb25791c11f))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.update_cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(121,45-121,87); use=X64.Semantics_s.fst(121,45-121,87)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x2))
(and (HasTypeFuel @u0
@x1
(X64.Semantics_s.uint64 Dummy_value))

;; def=X64.Semantics_s.fst(121,63-121,85); use=X64.Semantics_s.fst(121,63-121,85)
(= (X64.Semantics_s.cf @x1)
@x2)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x2)))
:qid refinement_interpretation_Tm_refine_5e4248dc93a56d69a95eb5ac14851d39))

:named refinement_interpretation_Tm_refine_5e4248dc93a56d69a95eb5ac14851d39))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.mul_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(292,44-292,50); use=X64.Semantics_s.fst(295,4-295,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(X64.Semantics_s.uint64 Dummy_value))

;; def=X64.Semantics_s.fst(294,21-294,62); use=X64.Semantics_s.fst(295,4-295,13)
(= (BoxInt (_mod (_mul (BoxInt_proj_0 (FStar.UInt64.v @x2))
(BoxInt_proj_0 (FStar.UInt64.v @x3)))
18446744073709551616))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1))

:named refinement_interpretation_Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Sub64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_569023f890bbff681c285b9f9a216ade)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Sub64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_569023f890bbff681c285b9f9a216ade))
:qid refinement_interpretation_Tm_refine_569023f890bbff681c285b9f9a216ade))

:named refinement_interpretation_Tm_refine_569023f890bbff681c285b9f9a216ade))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.add_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(282,44-282,50); use=X64.Semantics_s.fst(285,4-285,13)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_541d8b5bedd79f842c043b0167c0294d @x2
@x3))
(and (HasTypeFuel @u0
@x1
(X64.Semantics_s.uint64 Dummy_value))

;; def=X64.Semantics_s.fst(284,21-284,50); use=X64.Semantics_s.fst(285,4-285,13)
(= (BoxInt (_mod (+ (BoxInt_proj_0 (FStar.UInt64.v @x2))
(BoxInt_proj_0 (FStar.UInt64.v @x3)))
18446744073709551616))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_541d8b5bedd79f842c043b0167c0294d @x2
@x3)))
:qid refinement_interpretation_Tm_refine_541d8b5bedd79f842c043b0167c0294d))

:named refinement_interpretation_Tm_refine_541d8b5bedd79f842c043b0167c0294d))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,27-116,28); use=FStar.UInt64.fsti(116,27-116,28)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(118,21-118,36); use=FStar.UInt64.fsti(118,21-118,36)
(= (Prims.op_Subtraction (FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x2
@x3)))
:qid refinement_interpretation_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))

:named refinement_interpretation_Tm_refine_4db8ba22c4504a66577a2159dcc603cd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.option @x2))

;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x2
@x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x2)))
:qid refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named refinement_interpretation_Tm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)

;; def=FStar.Seq.Base.fsti(158,94-158,103); use=FStar.Seq.Base.fsti(158,94-158,103)
(< (BoxInt_proj_0 @x1)
(BoxInt_proj_0 (Prims.op_Subtraction @x2
@x3)))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named refinement_interpretation_Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_1; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(151,59-151,83); use=FStar.BitVector.fsti(151,59-151,83)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x2
@x3))
(and (HasTypeFuel @u0
@x1
Prims.nat)
(BoxBool_proj_0 (Prims.op_LessThan @x1
@x2))
(BoxBool_proj_0 (Prims.op_LessThan @x1
@x3))))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x2
@x3)))
:qid refinement_interpretation_Tm_refine_34425c23b534b8a294f8f063dd9faa4b))

:named refinement_interpretation_Tm_refine_34425c23b534b8a294f8f063dd9faa4b))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name FStar.UInt64.add_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(105,31-105,32); use=FStar.UInt64.fsti(105,31-105,32)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x2
@x3))
(and (HasTypeFuel @u0
@x1
(FStar.UInt64.t Dummy_value))

;; def=FStar.UInt64.fsti(107,21-107,57); use=FStar.UInt64.fsti(107,21-107,57)
(= (FStar.UInt.add_mod (BoxInt 64)
(FStar.UInt64.v @x2)
(FStar.UInt64.v @x3))
(FStar.UInt64.v @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x2
@x3)))
:qid refinement_interpretation_Tm_refine_2d98f2f5de361516da3dbd9f556509e2))

:named refinement_interpretation_Tm_refine_2d98f2f5de361516da3dbd9f556509e2))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__IMul64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_IMul64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e))
:qid refinement_interpretation_Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e))

:named refinement_interpretation_Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__Xor64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_1957040814f569aff4b252943fe77fdd)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_Xor64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_1957040814f569aff4b252943fe77fdd))
:qid refinement_interpretation_Tm_refine_1957040814f569aff4b252943fe77fdd))

:named refinement_interpretation_Tm_refine_1957040814f569aff4b252943fe77fdd))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: Name X64.Semantics_s.__proj__AddCarry64__item__dst; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@u0 Fuel) (@x1 Term))
 (! (iff (HasTypeFuel @u0
@x1
Tm_refine_16a53ffd1bab892d408baed6f0393a33)
(and (HasTypeFuel @u0
@x1
X64.Semantics_s.ins)

;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(BoxBool_proj_0 (X64.Semantics_s.uu___is_AddCarry64 @x1))
))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_refine_16a53ffd1bab892d408baed6f0393a33))
:qid refinement_interpretation_Tm_refine_16a53ffd1bab892d408baed6f0393a33))

:named refinement_interpretation_Tm_refine_16a53ffd1bab892d408baed6f0393a33))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Xor64_src (X64.Semantics_s.Xor64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.Xor64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Xor64_src))

:named projection_inverse_X64.Semantics_s.Xor64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Xor64_dst (X64.Semantics_s.Xor64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.Xor64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Xor64_dst))

:named projection_inverse_X64.Semantics_s.Xor64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Sub64_src (X64.Semantics_s.Sub64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.Sub64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Sub64_src))

:named projection_inverse_X64.Semantics_s.Sub64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Sub64_dst (X64.Semantics_s.Sub64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.Sub64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Sub64_dst))

:named projection_inverse_X64.Semantics_s.Sub64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Shr64_dst (X64.Semantics_s.Shr64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.Shr64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Shr64_dst))

:named projection_inverse_X64.Semantics_s.Shr64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Shr64_amt (X64.Semantics_s.Shr64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.Shr64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Shr64_amt))

:named projection_inverse_X64.Semantics_s.Shr64_amt))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Shl64_dst (X64.Semantics_s.Shl64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.Shl64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Shl64_dst))

:named projection_inverse_X64.Semantics_s.Shl64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Shl64_amt (X64.Semantics_s.Shl64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.Shl64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Shl64_amt))

:named projection_inverse_X64.Semantics_s.Shl64_amt))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.Mul64_src (X64.Semantics_s.Mul64 @x0))
@x0)
 

:pattern ((X64.Semantics_s.Mul64 @x0))
:qid projection_inverse_X64.Semantics_s.Mul64_src))

:named projection_inverse_X64.Semantics_s.Mul64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Mov64_src (X64.Semantics_s.Mov64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.Mov64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Mov64_src))

:named projection_inverse_X64.Semantics_s.Mov64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Mov64_dst (X64.Semantics_s.Mov64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.Mov64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Mov64_dst))

:named projection_inverse_X64.Semantics_s.Mov64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.IMul64_src (X64.Semantics_s.IMul64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.IMul64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.IMul64_src))

:named projection_inverse_X64.Semantics_s.IMul64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.IMul64_dst (X64.Semantics_s.IMul64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.IMul64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.IMul64_dst))

:named projection_inverse_X64.Semantics_s.IMul64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.And64_src (X64.Semantics_s.And64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.And64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.And64_src))

:named projection_inverse_X64.Semantics_s.And64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.And64_dst (X64.Semantics_s.And64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.And64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.And64_dst))

:named projection_inverse_X64.Semantics_s.And64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.AddLea64_src2 (X64.Semantics_s.AddLea64 @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Semantics_s.AddLea64 @x0
@x1
@x2))
:qid projection_inverse_X64.Semantics_s.AddLea64_src2))

:named projection_inverse_X64.Semantics_s.AddLea64_src2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.AddLea64_src1 (X64.Semantics_s.AddLea64 @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Semantics_s.AddLea64 @x0
@x1
@x2))
:qid projection_inverse_X64.Semantics_s.AddLea64_src1))

:named projection_inverse_X64.Semantics_s.AddLea64_src1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.AddLea64_dst (X64.Semantics_s.AddLea64 @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Semantics_s.AddLea64 @x0
@x1
@x2))
:qid projection_inverse_X64.Semantics_s.AddLea64_dst))

:named projection_inverse_X64.Semantics_s.AddLea64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.AddCarry64_src (X64.Semantics_s.AddCarry64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.AddCarry64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.AddCarry64_src))

:named projection_inverse_X64.Semantics_s.AddCarry64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.AddCarry64_dst (X64.Semantics_s.AddCarry64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.AddCarry64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.AddCarry64_dst))

:named projection_inverse_X64.Semantics_s.AddCarry64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Add64_src (X64.Semantics_s.Add64 @x0
@x1))
@x1)
 

:pattern ((X64.Semantics_s.Add64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Add64_src))

:named projection_inverse_X64.Semantics_s.Add64_src))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.Add64_dst (X64.Semantics_s.Add64 @x0
@x1))
@x0)
 

:pattern ((X64.Semantics_s.Add64 @x0
@x1))
:qid projection_inverse_X64.Semantics_s.Add64_dst))

:named projection_inverse_X64.Semantics_s.Add64_dst))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_whileCond (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_whileCond))

:named projection_inverse_X64.Machine_s.While_whileCond))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_whileBody (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_whileBody))

:named projection_inverse_X64.Machine_s.While_whileBody))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_t_ocmp (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_t_ocmp))

:named projection_inverse_X64.Machine_s.While_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Machine_s.While_t_ins (X64.Machine_s.While @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid projection_inverse_X64.Machine_s.While_t_ins))

:named projection_inverse_X64.Machine_s.While_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Ins_t_ocmp (X64.Machine_s.Ins @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Ins_t_ocmp))

:named projection_inverse_X64.Machine_s.Ins_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Ins_t_ins (X64.Machine_s.Ins @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Ins_t_ins))

:named projection_inverse_X64.Machine_s.Ins_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Ins_ins (X64.Machine_s.Ins @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Ins_ins))

:named projection_inverse_X64.Machine_s.Ins_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_t_ocmp (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x1)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_t_ocmp))

:named projection_inverse_X64.Machine_s.IfElse_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_t_ins (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x0)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_t_ins))

:named projection_inverse_X64.Machine_s.IfElse_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_ifTrue (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x3)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_ifTrue))

:named projection_inverse_X64.Machine_s.IfElse_ifTrue))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_ifFalse (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x4)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_ifFalse))

:named projection_inverse_X64.Machine_s.IfElse_ifFalse))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Machine_s.IfElse_ifCond (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
@x2)
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid projection_inverse_X64.Machine_s.IfElse_ifCond))

:named projection_inverse_X64.Machine_s.IfElse_ifCond))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Block_t_ocmp (X64.Machine_s.Block @x0
@x1
@x2))
@x1)
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Block_t_ocmp))

:named projection_inverse_X64.Machine_s.Block_t_ocmp))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Block_t_ins (X64.Machine_s.Block @x0
@x1
@x2))
@x0)
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Block_t_ins))

:named projection_inverse_X64.Machine_s.Block_t_ins))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Machine_s.Block_block (X64.Machine_s.Block @x0
@x1
@x2))
@x2)
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid projection_inverse_X64.Machine_s.Block_block))

:named projection_inverse_X64.Machine_s.Block_block))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= (Prims.Nil_a (Prims.Nil @x0))
@x0)
 

:pattern ((Prims.Nil @x0))
:qid projection_inverse_Prims.Nil_a))

:named projection_inverse_Prims.Nil_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_tl (Prims.Cons @x0
@x1
@x2))
@x2)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_tl))

:named projection_inverse_Prims.Cons_tl))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_hd (Prims.Cons @x0
@x1
@x2))
@x1)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_hd))

:named projection_inverse_Prims.Cons_hd))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Prims.Cons_a (Prims.Cons @x0
@x1
@x2))
@x0)
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid projection_inverse_Prims.Cons_a))

:named projection_inverse_Prims.Cons_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_v (FStar.Pervasives.Native.Some @x0
@x1))
@x1)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_v))

:named projection_inverse_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.Some_a (FStar.Pervasives.Native.Some @x0
@x1))
@x0)
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid projection_inverse_FStar.Pervasives.Native.Some_a))

:named projection_inverse_FStar.Pervasives.Native.Some_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= (FStar.Pervasives.Native.None_a (FStar.Pervasives.Native.None @x0))
@x0)
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid projection_inverse_FStar.Pervasives.Native.None_a))

:named projection_inverse_FStar.Pervasives.Native.None_a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__c (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__c))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__c))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__b (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__a (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__3 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x5)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__3))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__3))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__2 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x4)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (FStar.Pervasives.Native.Mktuple3__1 (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple3__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple3__1))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__b (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x1)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__b))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__b))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__a (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x0)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__a))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__a))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__2 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x3)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__2))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__2))
;;;;;;;;;;;;;;;;Projection inverse
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.Pervasives.Native.Mktuple2__1 (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
@x2)
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid projection_inverse_FStar.Pervasives.Native.Mktuple2__1))

:named projection_inverse_FStar.Pervasives.Native.Mktuple2__1))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__ok; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(67,2-67,4); use=X64.Semantics_s.fst(67,2-67,4)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.Mkstate_ok @x0))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__ok @x0))
:qid proj_equation_X64.Semantics_s.Mkstate_ok))

:named proj_equation_X64.Semantics_s.Mkstate_ok))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Semantics_s.__proj__Mkstate__item__flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(69,2-69,7); use=X64.Semantics_s.fst(69,2-69,7)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.__proj__Mkstate__item__flags @x0)
(X64.Semantics_s.Mkstate_flags @x0))
 

:pattern ((X64.Semantics_s.__proj__Mkstate__item__flags @x0))
:qid proj_equation_X64.Semantics_s.Mkstate_flags))

:named proj_equation_X64.Semantics_s.Mkstate_flags))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,11-33,12); use=FStar.Pervasives.Native.fst(33,11-33,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1)
(FStar.Pervasives.Native.Some_v @x1))
 

:pattern ((FStar.Pervasives.Native.__proj__Some__item__v @x0
@x1))
:qid proj_equation_FStar.Pervasives.Native.Some_v))

:named proj_equation_FStar.Pervasives.Native.Some_v))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Mktuple2__item___2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,43-59,45); use=FStar.Pervasives.Native.fst(59,43-59,45)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @x2))
 

:pattern ((FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
:qid proj_equation_FStar.Pervasives.Native.Mktuple2__2))

:named proj_equation_FStar.Pervasives.Native.Mktuple2__2))
;;; Fact-ids: Name Prims.op_Modulus; Namespace Prims
(assert (! 
;; def=Prims.fst(697,4-697,14); use=Prims.fst(697,4-697,14)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (not (= (BoxInt_proj_0 @x1)
0))
(= (Prims.op_Modulus @x0
@x1)
(BoxInt (mod (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))))
 

:pattern ((Prims.op_Modulus @x0
@x1))
:qid primitive_Prims.op_Modulus))

:named primitive_Prims.op_Modulus))
;;; Fact-ids: Name Prims.op_Division; Namespace Prims
(assert (! 
;; def=Prims.fst(703,4-703,15); use=Prims.fst(703,4-703,15)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (not (= (BoxInt_proj_0 @x1)
0))
(= (Prims.op_Division @x0
@x1)
(BoxInt (div (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1)))))
 

:pattern ((Prims.op_Division @x0
@x1))
:qid primitive_Prims.op_Division))

:named primitive_Prims.op_Division))
;;; Fact-ids: Name Prims.op_Addition; Namespace Prims
(assert (! 
;; def=Prims.fst(552,4-552,15); use=Prims.fst(552,4-552,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.op_Addition @x0
@x1)
(BoxInt (+ (BoxInt_proj_0 @x0)
(BoxInt_proj_0 @x1))))
 

:pattern ((Prims.op_Addition @x0
@x1))
:qid primitive_Prims.op_Addition))

:named primitive_Prims.op_Addition))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! (is-Tm_arrow (PreType X64.Machine_s.precode@tok))
:named pre_kinding_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (is-Tm_arrow (PreType Prims.list@tok))
:named pre_kinding_Prims.list@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple3@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.tuple2@tok))
:named pre_kinding_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;kinding
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (is-Tm_arrow (PreType FStar.Pervasives.Native.option@tok))
:named pre_kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Lemma: X64.Semantics_s.shift_right_uint64
;;; Fact-ids: Name X64.Semantics_s.shift_right_uint64; Namespace X64.Semantics_s
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int)

;; def=X64.Semantics_s.fst(247,20-247,40); use=X64.Semantics_s.fst(247,20-247,40)
(BoxBool_proj_0 (FStar.UInt.fits @x0
(BoxInt 64)))


;; def=X64.Semantics_s.fst(248,20-248,26); use=X64.Semantics_s.fst(248,20-248,26)
(<= 0
(BoxInt_proj_0 @x1))


;; def=X64.Semantics_s.fst(249,20-249,26); use=X64.Semantics_s.fst(249,20-249,26)
(< (BoxInt_proj_0 @x1)
64)
)

;; def=X64.Semantics_s.fst(250,20-250,68); use=X64.Semantics_s.fst(250,20-250,68)
(= (X64.Semantics_s.shift_right @x0
@x1)
(FStar.UInt.shift_right (BoxInt 64)
@x0
@x1))
)
 

:pattern ((X64.Semantics_s.shift_right @x0
@x1))
:qid lemma_X64.Semantics_s.shift_right_uint64))
:named lemma_X64.Semantics_s.shift_right_uint64))
;;;;;;;;;;;;;;;;Lemma: X64.Semantics_s.shift_left_uint64
;;; Fact-ids: Name X64.Semantics_s.shift_left_uint64; Namespace X64.Semantics_s
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int)

;; def=X64.Semantics_s.fst(262,20-262,40); use=X64.Semantics_s.fst(262,20-262,40)
(BoxBool_proj_0 (FStar.UInt.fits @x0
(BoxInt 64)))


;; def=X64.Semantics_s.fst(263,20-263,26); use=X64.Semantics_s.fst(263,20-263,26)
(<= 0
(BoxInt_proj_0 @x1))


;; def=X64.Semantics_s.fst(264,20-264,26); use=X64.Semantics_s.fst(264,20-264,26)
(< (BoxInt_proj_0 @x1)
64)
)

;; def=X64.Semantics_s.fst(265,20-265,66); use=X64.Semantics_s.fst(265,20-265,66)
(= (X64.Semantics_s.shift_left @x0
@x1)
(FStar.UInt.shift_left (BoxInt 64)
@x0
@x1))
)
 

:pattern ((X64.Semantics_s.shift_left @x0
@x1))
:qid lemma_X64.Semantics_s.shift_left_uint64))
:named lemma_X64.Semantics_s.shift_left_uint64))
;;;;;;;;;;;;;;;;Lemma: X64.Semantics_s.logxor_uint64
;;; Fact-ids: Name X64.Semantics_s.logxor_uint64; Namespace X64.Semantics_s
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int)

;; def=X64.Semantics_s.fst(219,20-219,40); use=X64.Semantics_s.fst(219,20-219,40)
(BoxBool_proj_0 (FStar.UInt.fits @x0
(BoxInt 64)))


;; def=X64.Semantics_s.fst(220,20-220,40); use=X64.Semantics_s.fst(220,20-220,40)
(BoxBool_proj_0 (FStar.UInt.fits @x1
(BoxInt 64)))
)

;; def=X64.Semantics_s.fst(221,20-221,58); use=X64.Semantics_s.fst(221,20-221,58)
(= (X64.Semantics_s.logxor @x0
@x1)
(FStar.UInt.logxor (BoxInt 64)
@x0
@x1))
)
 

:pattern ((X64.Semantics_s.logxor @x0
@x1))
:qid lemma_X64.Semantics_s.logxor_uint64))
:named lemma_X64.Semantics_s.logxor_uint64))
;;;;;;;;;;;;;;;;Lemma: X64.Semantics_s.logand_uint64
;;; Fact-ids: Name X64.Semantics_s.logand_uint64; Namespace X64.Semantics_s
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.int)
(HasType @x1
Prims.int)

;; def=X64.Semantics_s.fst(233,20-233,40); use=X64.Semantics_s.fst(233,20-233,40)
(BoxBool_proj_0 (FStar.UInt.fits @x0
(BoxInt 64)))


;; def=X64.Semantics_s.fst(234,20-234,40); use=X64.Semantics_s.fst(234,20-234,40)
(BoxBool_proj_0 (FStar.UInt.fits @x1
(BoxInt 64)))
)

;; def=X64.Semantics_s.fst(235,20-235,58); use=X64.Semantics_s.fst(235,20-235,58)
(= (X64.Semantics_s.logand @x0
@x1)
(FStar.UInt.logand (BoxInt 64)
@x0
@x1))
)
 

:pattern ((X64.Semantics_s.logand @x0
@x1))
:qid lemma_X64.Semantics_s.logand_uint64))
:named lemma_X64.Semantics_s.logand_uint64))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.zero_to_vec_lemma
;;; Fact-ids: Name FStar.UInt.zero_to_vec_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))

;; def=FStar.UInt.fsti(238,33-238,82); use=FStar.UInt.fsti(238,33-238,82)
(= (FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.zero @x0))
@x1)
(FStar.Seq.Base.index Prims.bool
(FStar.BitVector.zero_vec @x0)
@x1))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.zero @x0))
@x1))
:qid lemma_FStar.UInt.zero_to_vec_lemma))
:named lemma_FStar.UInt.zero_to_vec_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.zero_from_vec_lemma
;;; Fact-ids: Name FStar.UInt.zero_from_vec_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Prims.pos)

;; def=FStar.UInt.fsti(242,33-242,64); use=FStar.UInt.fsti(242,33-242,64)
(= (FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
(FStar.BitVector.zero_vec @x0))
(FStar.UInt.zero @x0))
)
 

:pattern ((FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
(FStar.BitVector.zero_vec @x0)))
:qid lemma_FStar.UInt.zero_from_vec_lemma))
:named lemma_FStar.UInt.zero_from_vec_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.shift_right_value_lemma
;;; Fact-ids: Name FStar.UInt.shift_right_value_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
Prims.nat))

;; def=FStar.UInt.fsti(533,17-533,48); use=FStar.UInt.fsti(533,17-533,48)
(= (FStar.UInt.shift_right @x0
@x1
@x2)
(Prims.op_Division @x1
(Prims.pow2.fuel_instrumented ZFuel
@x2)))
)
 

:pattern ((FStar.UInt.shift_right @x0
@x1
@x2))
:qid lemma_FStar.UInt.shift_right_value_lemma))
:named lemma_FStar.UInt.shift_right_value_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.shift_left_value_lemma
;;; Fact-ids: Name FStar.UInt.shift_left_value_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.UInt.uint_t @x0))
(HasType @x2
Prims.nat))

;; def=FStar.UInt.fsti(516,17-516,58); use=FStar.UInt.fsti(516,17-516,58)
(= (FStar.UInt.shift_left @x0
@x1
@x2)
(Prims.op_Modulus (Prims.op_Multiply @x1
(Prims.pow2.fuel_instrumented ZFuel
@x2))
(Prims.pow2.fuel_instrumented ZFuel
@x0)))
)
 

:pattern ((FStar.UInt.shift_left @x0
@x1
@x2))
:qid lemma_FStar.UInt.shift_left_value_lemma))
:named lemma_FStar.UInt.shift_left_value_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.inverse_vec_lemma
;;; Fact-ids: Name FStar.UInt.inverse_vec_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.BitVector.bv_t @x0)))

;; def=FStar.UInt.fsti(200,33-200,66); use=FStar.UInt.fsti(200,33-200,66)
(Valid 
;; def=FStar.UInt.fsti(200,33-200,66); use=FStar.UInt.fsti(200,33-200,66)
(FStar.Seq.Base.equal Prims.bool
@x1
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
@x1)))
)
)
 

:pattern ((FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
@x1)))
:qid lemma_FStar.UInt.inverse_vec_lemma))
:named lemma_FStar.UInt.inverse_vec_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.inverse_num_lemma
;;; Fact-ids: Name FStar.UInt.inverse_num_lemma; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.UInt.uint_t @x0)))

;; def=FStar.UInt.fsti(204,33-204,60); use=FStar.UInt.fsti(204,33-204,60)
(= @x1
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
@x1)))
)
 

:pattern ((FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
@x1)))
:qid lemma_FStar.UInt.inverse_num_lemma))
:named lemma_FStar.UInt.inverse_num_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.inverse_aux
;;; Fact-ids: Name FStar.UInt.inverse_aux; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.nat)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))

;; def=FStar.UInt.fsti(196,33-196,78); use=FStar.UInt.fsti(196,33-196,78)
(= (FStar.Seq.Base.index Prims.bool
@x1
@x2)
(FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
@x1))
@x2))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x0
@x1))
@x2))
:qid lemma_FStar.UInt.inverse_aux))
:named lemma_FStar.UInt.inverse_aux))
;;;;;;;;;;;;;;;;Lemma: FStar.UInt.index_to_vec_ones
;;; Fact-ids: Name FStar.UInt.index_to_vec_ones; Namespace FStar.UInt
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0))
(HasType @x2
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))

;; def=FStar.UInt.fsti(432,17-434,68); use=FStar.UInt.fsti(432,17-434,68)
(and 
;; def=FStar.UInt.fsti(432,18-432,34); use=FStar.UInt.fsti(432,18-432,34)
(<= (BoxInt_proj_0 (Prims.pow2.fuel_instrumented ZFuel
@x1))
(BoxInt_proj_0 (Prims.pow2.fuel_instrumented ZFuel
@x0)))


;; def=FStar.UInt.fsti(433,10-433,67); use=FStar.UInt.fsti(433,10-433,67)
(implies 
;; def=FStar.UInt.fsti(433,11-433,20); use=FStar.UInt.fsti(433,11-433,20)
(< (BoxInt_proj_0 @x2)
(BoxInt_proj_0 (Prims.op_Subtraction @x0
@x1)))


;; def=FStar.UInt.fsti(433,25-433,66); use=FStar.UInt.fsti(433,25-433,66)
(= (FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(Prims.op_Subtraction (Prims.pow2.fuel_instrumented ZFuel
@x1)
(BoxInt 1)))
@x2)
(BoxBool false))
)


;; def=FStar.UInt.fsti(434,10-434,67); use=FStar.UInt.fsti(434,10-434,67)
(implies 
;; def=FStar.UInt.fsti(434,11-434,21); use=FStar.UInt.fsti(434,11-434,21)
(<= (BoxInt_proj_0 (Prims.op_Subtraction @x0
@x1))
(BoxInt_proj_0 @x2))


;; def=FStar.UInt.fsti(434,26-434,66); use=FStar.UInt.fsti(434,26-434,66)
(= (FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(Prims.op_Subtraction (Prims.pow2.fuel_instrumented ZFuel
@x1)
(BoxInt 1)))
@x2)
(BoxBool true))
)
)
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x0
(Prims.op_Subtraction (Prims.pow2.fuel_instrumented ZFuel
@x1)
(BoxInt 1)))
@x2))
:qid lemma_FStar.UInt.index_to_vec_ones))
:named lemma_FStar.UInt.index_to_vec_ones))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_union
;;; Fact-ids: Name FStar.Set.mem_union; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
(FStar.Set.set @x0))
(HasType @x3
(FStar.Set.set @x0)))

;; def=FStar.Set.fsti(72,12-72,58); use=FStar.Set.fsti(72,12-72,58)
(= (FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3))
(Prims.op_BarBar (FStar.Set.mem @x0
@x1
@x2)
(FStar.Set.mem @x0
@x1
@x3)))
)
 

:pattern ((FStar.Set.mem @x0
@x1
(FStar.Set.union @x0
@x2
@x3)))
:qid lemma_FStar.Set.mem_union))
:named lemma_FStar.Set.mem_union))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.mem_singleton
;;; Fact-ids: Name FStar.Set.mem_singleton; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
@x0)
(HasType @x2
@x0))

;; def=FStar.Set.fsti(67,12-67,41); use=FStar.Set.fsti(67,12-67,41)
(= (FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1))
(Prims.op_Equality @x0
@x1
@x2))
)
 

:pattern ((FStar.Set.mem @x0
@x2
(FStar.Set.singleton @x0
@x1)))
:qid lemma_FStar.Set.mem_singleton))
:named lemma_FStar.Set.mem_singleton))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_refl
;;; Fact-ids: Name FStar.Set.lemma_equal_refl; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(111,14-111,24); use=FStar.Set.fsti(111,14-111,24)
(= @x1
@x2)
)

;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(Valid 
;; def=FStar.Set.fsti(112,14-112,27); use=FStar.Set.fsti(112,14-112,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_refl))
:named lemma_FStar.Set.lemma_equal_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_intro
;;; Fact-ids: Name FStar.Set.lemma_equal_intro; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(101,15-101,46); use=FStar.Set.fsti(101,15-101,46)
(forall ((@x3 Term))
 (! (implies (HasType @x3
@x0)

;; def=FStar.Set.fsti(101,26-101,45); use=FStar.Set.fsti(101,26-101,45)
(= (FStar.Set.mem @x0
@x3
@x1)
(FStar.Set.mem @x0
@x3
@x2))
)
 
;;no pats
:qid lemma_FStar.Set.lemma_equal_intro.1))
)

;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(Valid 
;; def=FStar.Set.fsti(102,13-102,26); use=FStar.Set.fsti(102,13-102,26)
(FStar.Set.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_intro))
:named lemma_FStar.Set.lemma_equal_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Set.lemma_equal_elim
;;; Fact-ids: Name FStar.Set.lemma_equal_elim; Namespace FStar.Set
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
(FStar.Set.set @x0))
(HasType @x2
(FStar.Set.set @x0))

;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(Valid 
;; def=FStar.Set.fsti(106,14-106,27); use=FStar.Set.fsti(106,14-106,27)
(FStar.Set.equal @x0
@x1
@x2)
)
)

;; def=FStar.Set.fsti(107,14-107,24); use=FStar.Set.fsti(107,14-107,24)
(= @x1
@x2)
)
 

:pattern ((FStar.Set.equal @x0
@x1
@x2))
:qid lemma_FStar.Set.lemma_equal_elim))
:named lemma_FStar.Set.lemma_equal_elim))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_len_slice
;;; Fact-ids: Name FStar.Seq.Base.lemma_len_slice; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_81407705a0828c2c1b1976675443f647 @x2
@x0
@x1)))

;; def=FStar.Seq.Base.fsti(129,11-129,41); use=FStar.Seq.Base.fsti(129,11-129,41)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3))
(Prims.op_Subtraction @x3
@x2))
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)))
:qid lemma_FStar.Seq.Base.lemma_len_slice))
:named lemma_FStar.Seq.Base.lemma_len_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_len_append
;;; Fact-ids: Name FStar.Seq.Base.lemma_len_append; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0)))

;; def=FStar.Seq.Base.fsti(124,11-124,58); use=FStar.Seq.Base.fsti(124,11-124,58)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2))
(Prims.op_Addition (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
@x2)))
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.append @x0
@x1
@x2)))
:qid lemma_FStar.Seq.Base.lemma_len_append))
:named lemma_FStar.Seq.Base.lemma_len_append))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_slice
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x2
@x0
@x1))
(HasType @x4
(Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x3
@x2)))

;; def=FStar.Seq.Base.fsti(160,11-160,53); use=FStar.Seq.Base.fsti(160,11-160,53)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4)
(FStar.Seq.Base.index @x0
@x1
(Prims.op_Addition @x4
@x2)))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.slice @x0
@x1
@x2
@x3)
@x4))
:qid lemma_FStar.Seq.Base.lemma_index_slice))
:named lemma_FStar.Seq.Base.lemma_index_slice))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_create
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_create; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
@x0)
(HasType @x3
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x1)))

;; def=FStar.Seq.Base.fsti(135,11-135,38); use=FStar.Seq.Base.fsti(135,11-135,38)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.create @x0
@x1
@x2)
@x3)
@x2)
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.create @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_create))
:named lemma_FStar.Seq.Base.lemma_index_create))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_app2
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))
(HasType @x3
(Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)))

;; def=FStar.Seq.Base.fsti(155,11-155,63); use=FStar.Seq.Base.fsti(155,11-155,63)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index @x0
@x2
(Prims.op_Subtraction @x3
(FStar.Seq.Base.length @x0
@x1))))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_app2))
:named lemma_FStar.Seq.Base.lemma_index_app2))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_index_app1
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app1; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))
(HasType @x3
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))

;; def=FStar.Seq.Base.fsti(150,11-150,49); use=FStar.Seq.Base.fsti(150,11-150,49)
(= (FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index @x0
@x1
@x3))
)
 

:pattern ((FStar.Seq.Base.index @x0
(FStar.Seq.Base.append @x0
@x1
@x2)
@x3))
:qid lemma_FStar.Seq.Base.lemma_index_app1))
:named lemma_FStar.Seq.Base.lemma_index_app1))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_refl
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_refl; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(183,15-183,25); use=FStar.Seq.Base.fsti(183,15-183,25)
(= @x1
@x2)
)

;; def=FStar.Seq.Base.fsti(184,14-184,27); use=FStar.Seq.Base.fsti(184,14-184,27)
(Valid 
;; def=FStar.Seq.Base.fsti(184,14-184,27); use=FStar.Seq.Base.fsti(184,14-184,27)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_refl))
:named lemma_FStar.Seq.Base.lemma_eq_refl))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_intro
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_intro; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(177,16-177,37); use=FStar.Seq.Base.fsti(177,16-177,37)
(= (FStar.Seq.Base.length @x0
@x1)
(FStar.Seq.Base.length @x0
@x2))


;; def=FStar.Seq.Base.fsti(178,18-178,114); use=FStar.Seq.Base.fsti(178,18-178,114)
(forall ((@x3 Term))
 (! (implies (HasType @x3
(Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1))

;; def=FStar.Seq.Base.fsti(178,87-178,113); use=FStar.Seq.Base.fsti(178,87-178,113)
(= (FStar.Seq.Base.index @x0
@x1
@x3)
(FStar.Seq.Base.index @x0
@x2
@x3))
)
 

:pattern ((FStar.Seq.Base.index @x0
@x1
@x3) (FStar.Seq.Base.index @x0
@x2
@x3))
:qid lemma_FStar.Seq.Base.lemma_eq_intro.1))
)

;; def=FStar.Seq.Base.fsti(179,14-179,27); use=FStar.Seq.Base.fsti(179,14-179,27)
(Valid 
;; def=FStar.Seq.Base.fsti(179,14-179,27); use=FStar.Seq.Base.fsti(179,14-179,27)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_intro))
:named lemma_FStar.Seq.Base.lemma_eq_intro))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_eq_elim
;;; Fact-ids: Name FStar.Seq.Base.lemma_eq_elim; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
(FStar.Seq.Base.seq @x0))
(HasType @x2
(FStar.Seq.Base.seq @x0))

;; def=FStar.Seq.Base.fsti(188,15-188,28); use=FStar.Seq.Base.fsti(188,15-188,28)
(Valid 
;; def=FStar.Seq.Base.fsti(188,15-188,28); use=FStar.Seq.Base.fsti(188,15-188,28)
(FStar.Seq.Base.equal @x0
@x1
@x2)
)
)

;; def=FStar.Seq.Base.fsti(189,14-189,22); use=FStar.Seq.Base.fsti(189,14-189,22)
(= @x1
@x2)
)
 

:pattern ((FStar.Seq.Base.equal @x0
@x1
@x2))
:qid lemma_FStar.Seq.Base.lemma_eq_elim))
:named lemma_FStar.Seq.Base.lemma_eq_elim))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.lemma_create_len
;;; Fact-ids: Name FStar.Seq.Base.lemma_create_len; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Prims.nat)
(HasType @x2
@x0))

;; def=FStar.Seq.Base.fsti(94,11-94,36); use=FStar.Seq.Base.fsti(94,11-94,36)
(= (FStar.Seq.Base.length @x0
(FStar.Seq.Base.create @x0
@x1
@x2))
@x1)
)
 

:pattern ((FStar.Seq.Base.length @x0
(FStar.Seq.Base.create @x0
@x1
@x2)))
:qid lemma_FStar.Seq.Base.lemma_create_len))
:named lemma_FStar.Seq.Base.lemma_create_len))
;;;;;;;;;;;;;;;;Lemma: FStar.Seq.Base.hasEq_lemma
;;; Fact-ids: Name FStar.Seq.Base.hasEq_lemma; Namespace FStar.Seq.Base
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)

;; def=FStar.Seq.Base.fsti(163,43-163,52); use=FStar.Seq.Base.fsti(163,43-163,52)
(Valid 
;; def=FStar.Seq.Base.fsti(163,43-163,52); use=FStar.Seq.Base.fsti(163,43-163,52)
(Prims.hasEq @x0)
)
)

;; def=FStar.Seq.Base.fsti(163,63-163,78); use=FStar.Seq.Base.fsti(163,63-163,78)
(Valid 
;; def=FStar.Seq.Base.fsti(163,63-163,78); use=FStar.Seq.Base.fsti(163,63-163,78)
(Prims.hasEq (FStar.Seq.Base.seq @x0))
)
)
 

:pattern ((Prims.hasEq (FStar.Seq.Base.seq @x0)))
:qid lemma_FStar.Seq.Base.hasEq_lemma))
:named lemma_FStar.Seq.Base.hasEq_lemma))
;;;;;;;;;;;;;;;;Lemma: FStar.Pervasives.invertOption
;;; Fact-ids: Name FStar.Pervasives.invertOption; Namespace FStar.Pervasives
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)

;; def=FStar.Pervasives.fsti(727,37-727,79); use=FStar.Pervasives.fsti(727,37-727,79)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(FStar.Pervasives.Native.option @x0))

;; def=FStar.Pervasives.fsti(727,60-727,78); use=FStar.Pervasives.fsti(727,60-727,78)
(or 
;; def=FStar.Pervasives.fsti(727,60-727,67); use=FStar.Pervasives.fsti(727,60-727,67)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_None @x0
@x1))


;; def=FStar.Pervasives.fsti(727,71-727,78); use=FStar.Pervasives.fsti(727,71-727,78)
(BoxBool_proj_0 (FStar.Pervasives.Native.uu___is_Some @x0
@x1))
)
)
 
;;no pats
:qid lemma_FStar.Pervasives.invertOption.1))
)
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid lemma_FStar.Pervasives.invertOption))
:named lemma_FStar.Pervasives.invertOption))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_UpdDomain
;;; Fact-ids: Name FStar.Map.lemma_UpdDomain; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))

;; def=FStar.Map.fsti(153,17-153,84); use=FStar.Map.fsti(153,17-153,84)
(Valid 
;; def=FStar.Map.fsti(153,17-153,84); use=FStar.Map.fsti(153,17-153,84)
(FStar.Set.equal @x0
(FStar.Map.domain @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4))
(FStar.Set.union @x0
(FStar.Map.domain @x0
@x1
@x2)
(FStar.Set.singleton @x0
@x3)))
)
)
 

:pattern ((FStar.Map.domain @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)))
:qid lemma_FStar.Map.lemma_UpdDomain))
:named lemma_FStar.Map.lemma_UpdDomain))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_SelUpd2
;;; Fact-ids: Name FStar.Map.lemma_SelUpd2; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1)

;; def=FStar.Map.fsti(100,51-100,58); use=FStar.Map.fsti(100,51-100,58)
(not 
;; def=FStar.Map.fsti(100,51-100,58); use=FStar.Map.fsti(100,51-100,58)
(= @x4
@x3)
)
)

;; def=FStar.Map.fsti(100,63-100,94); use=FStar.Map.fsti(100,63-100,94)
(= (FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3)
(FStar.Map.sel @x0
@x1
@x2
@x3))
)
 

:pattern ((FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3))
:qid lemma_FStar.Map.lemma_SelUpd2))
:named lemma_FStar.Map.lemma_SelUpd2))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_SelUpd1
;;; Fact-ids: Name FStar.Map.lemma_SelUpd1; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x1))

;; def=FStar.Map.fsti(96,50-96,74); use=FStar.Map.fsti(96,50-96,74)
(= (FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
@x3)
@x4)
)
 

:pattern ((FStar.Map.sel @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x4)
@x3))
:qid lemma_FStar.Map.lemma_SelUpd1))
:named lemma_FStar.Map.lemma_SelUpd1))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_InDomUpd2
;;; Fact-ids: Name FStar.Map.lemma_InDomUpd2; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1)

;; def=FStar.Map.fsti(128,53-128,60); use=FStar.Map.fsti(128,53-128,60)
(not 
;; def=FStar.Map.fsti(128,53-128,60); use=FStar.Map.fsti(128,53-128,60)
(= @x4
@x3)
)
)

;; def=FStar.Map.fsti(128,65-128,106); use=FStar.Map.fsti(128,65-128,106)
(= (FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3)
(FStar.Map.contains @x0
@x1
@x2
@x3))
)
 

:pattern ((FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x4
@x5)
@x3))
:qid lemma_FStar.Map.lemma_InDomUpd2))
:named lemma_FStar.Map.lemma_InDomUpd2))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_InDomUpd1
;;; Fact-ids: Name FStar.Map.lemma_InDomUpd1; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0)
(HasType @x4
@x0)
(HasType @x5
@x1))

;; def=FStar.Map.fsti(124,52-124,106); use=FStar.Map.fsti(124,52-124,106)
(= (FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x5)
@x4)
(Prims.op_BarBar (Prims.op_Equality @x0
@x3
@x4)
(FStar.Map.contains @x0
@x1
@x2
@x4)))
)
 

:pattern ((FStar.Map.contains @x0
@x1
(FStar.Map.upd @x0
@x1
@x2
@x3
@x5)
@x4))
:qid lemma_FStar.Map.lemma_InDomUpd1))
:named lemma_FStar.Map.lemma_InDomUpd1))
;;;;;;;;;;;;;;;;Lemma: FStar.Map.lemma_ContainsDom
;;; Fact-ids: Name FStar.Map.lemma_ContainsDom; Namespace FStar.Map
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.eqtype)
(HasType @x1
Tm_type)
(HasType @x2
(FStar.Map.t @x0
@x1))
(HasType @x3
@x0))

;; def=FStar.Map.fsti(148,33-148,68); use=FStar.Map.fsti(148,33-148,68)
(= (FStar.Map.contains @x0
@x1
@x2
@x3)
(FStar.Set.mem @x0
@x3
(FStar.Map.domain @x0
@x1
@x2)))
)
 

:pattern ((FStar.Map.contains @x0
@x1
@x2
@x3))

:pattern ((FStar.Set.mem @x0
@x3
(FStar.Map.domain @x0
@x1
@x2)))
:qid lemma_FStar.Map.lemma_ContainsDom))
:named lemma_FStar.Map.lemma_ContainsDom))
;;;;;;;;;;;;;;;;Lemma: FStar.BitVector.shift_right_vec_lemma_2
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_2; Namespace FStar.BitVector
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x0
@x2)))

;; def=FStar.BitVector.fsti(157,21-157,71); use=FStar.BitVector.fsti(157,21-157,71)
(= (FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_right_vec @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index Prims.bool
@x1
(Prims.op_Subtraction @x3
@x2)))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_right_vec @x0
@x1
@x2)
@x3))
:qid lemma_FStar.BitVector.shift_right_vec_lemma_2))
:named lemma_FStar.BitVector.shift_right_vec_lemma_2))
;;;;;;;;;;;;;;;;Lemma: FStar.BitVector.shift_right_vec_lemma_1
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_1; Namespace FStar.BitVector
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x0
@x2)))

;; def=FStar.BitVector.fsti(152,21-152,61); use=FStar.BitVector.fsti(152,21-152,61)
(= (FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_right_vec @x0
@x1
@x2)
@x3)
(BoxBool false))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_right_vec @x0
@x1
@x2)
@x3))
:qid lemma_FStar.BitVector.shift_right_vec_lemma_1))
:named lemma_FStar.BitVector.shift_right_vec_lemma_1))
;;;;;;;;;;;;;;;;Lemma: FStar.BitVector.shift_left_vec_lemma_2
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_2; Namespace FStar.BitVector
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x0
@x2)))

;; def=FStar.BitVector.fsti(143,21-143,70); use=FStar.BitVector.fsti(143,21-143,70)
(= (FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_left_vec @x0
@x1
@x2)
@x3)
(FStar.Seq.Base.index Prims.bool
@x1
(Prims.op_Addition @x3
@x2)))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_left_vec @x0
@x1
@x2)
@x3))
:qid lemma_FStar.BitVector.shift_left_vec_lemma_2))
:named lemma_FStar.BitVector.shift_left_vec_lemma_2))
;;;;;;;;;;;;;;;;Lemma: FStar.BitVector.shift_left_vec_lemma_1
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_1; Namespace FStar.BitVector
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
Prims.nat)
(HasType @x3
(Tm_refine_6ccf0869e6825997ab860bb25791c11f @x0
@x2)))

;; def=FStar.BitVector.fsti(138,21-138,60); use=FStar.BitVector.fsti(138,21-138,60)
(= (FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_left_vec @x0
@x1
@x2)
@x3)
(BoxBool false))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.BitVector.shift_left_vec @x0
@x1
@x2)
@x3))
:qid lemma_FStar.BitVector.shift_left_vec_lemma_1))
:named lemma_FStar.BitVector.shift_left_vec_lemma_1))
;;;;;;;;;;;;;;;;Lemma: FStar.BitVector.logxor_vec_definition
;;; Fact-ids: Name FStar.BitVector.logxor_vec_definition; Namespace FStar.BitVector
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
(FStar.BitVector.bv_t @x0))
(HasType @x3
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))

;; def=FStar.BitVector.fsti(64,21-64,75); use=FStar.BitVector.fsti(64,21-64,75)
(= (FStar.Seq.Base.index Prims.bool
(FStar.BitVector.logxor_vec.fuel_instrumented ZFuel
@x0
@x1
@x2)
@x3)
(Prims.op_disEquality Prims.bool
(FStar.Seq.Base.index Prims.bool
@x1
@x3)
(FStar.Seq.Base.index Prims.bool
@x2
@x3)))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.BitVector.logxor_vec.fuel_instrumented ZFuel
@x0
@x1
@x2)
@x3))
:qid lemma_FStar.BitVector.logxor_vec_definition))
:named lemma_FStar.BitVector.logxor_vec_definition))
;;;;;;;;;;;;;;;;Lemma: FStar.BitVector.logand_vec_definition
;;; Fact-ids: Name FStar.BitVector.logand_vec_definition; Namespace FStar.BitVector
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x0
Prims.pos)
(HasType @x1
(FStar.BitVector.bv_t @x0))
(HasType @x2
(FStar.BitVector.bv_t @x0))
(HasType @x3
(Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))

;; def=FStar.BitVector.fsti(53,21-53,75); use=FStar.BitVector.fsti(53,21-53,75)
(= (FStar.Seq.Base.index Prims.bool
(FStar.BitVector.logand_vec.fuel_instrumented ZFuel
@x0
@x1
@x2)
@x3)
(Prims.op_AmpAmp (FStar.Seq.Base.index Prims.bool
@x1
@x3)
(FStar.Seq.Base.index Prims.bool
@x2
@x3)))
)
 

:pattern ((FStar.Seq.Base.index Prims.bool
(FStar.BitVector.logand_vec.fuel_instrumented ZFuel
@x0
@x1
@x2)
@x3))
:qid lemma_FStar.BitVector.logand_vec_definition))
:named lemma_FStar.BitVector.logand_vec_definition))
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.ins
Tm_type)
:named kinding_X64.Semantics_s.ins@tok))
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! (and (IsTotFun X64.Machine_s.precode@tok)

;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT X64.Machine_s.precode@tok
@x0))
 

:pattern ((ApplyTT X64.Machine_s.precode@tok
@x0))
:qid kinding_X64.Machine_s.precode@tok))


;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (X64.Machine_s.precode @x0
@x1)
Tm_type))
 

:pattern ((X64.Machine_s.precode @x0
@x1))
:qid kinding_X64.Machine_s.precode@tok.1))
)
:named kinding_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd
Tm_type)
:named kinding_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_b19283e90b47034162373413c6a19933
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! (HasType Tm_arrow_b19283e90b47034162373413c6a19933
Tm_type)
:named kinding_Tm_arrow_b19283e90b47034162373413c6a19933))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_86a2ece66c8a4690fde39fd480d1a750
Tm_type)
:named kinding_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff
Tm_type)
:named kinding_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_645426269fc615b2b182027e55cc5771
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_645426269fc615b2b182027e55cc5771
Tm_type)
:named kinding_Tm_arrow_645426269fc615b2b182027e55cc5771))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4
;;; Fact-ids: Name X64.Semantics_s.st; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@x0 Term))
 (! (HasType (Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x0)
Tm_type)
 

:pattern ((HasType (Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x0)
Tm_type))
:qid kinding_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4))

:named kinding_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4))
;;;;;;;;;;;;;;;;kinding_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea
;;; Fact-ids: Name X64.Semantics_s.set; Namespace X64.Semantics_s
(assert (! (HasType Tm_arrow_025dbaceb4b862aa04a44e930c7828ea
Tm_type)
:named kinding_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (and (IsTotFun Prims.list@tok)

;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.list @x0)
Tm_type))
 

:pattern ((Prims.list @x0))
:qid kinding_Prims.list@tok))
)
:named kinding_Prims.list@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple3@tok)

;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple3@tok))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term))
 (! (IsTotFun (ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
 

:pattern ((ApplyTT (ApplyTT FStar.Pervasives.Native.tuple3@tok
@x0)
@x1))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.1))


;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type))
(HasType (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid kinding_FStar.Pervasives.Native.tuple3@tok.2))
)
:named kinding_FStar.Pervasives.Native.tuple3@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.tuple2@tok)

;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term))
 (! (IsTotFun (ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
 

:pattern ((ApplyTT FStar.Pervasives.Native.tuple2@tok
@x0))
:qid kinding_FStar.Pervasives.Native.tuple2@tok))


;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type))
(HasType (FStar.Pervasives.Native.tuple2 @x0
@x1)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid kinding_FStar.Pervasives.Native.tuple2@tok.1))
)
:named kinding_FStar.Pervasives.Native.tuple2@tok))
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (and (IsTotFun FStar.Pervasives.Native.option@tok)

;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (FStar.Pervasives.Native.option @x0)
Tm_type))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid kinding_FStar.Pervasives.Native.option@tok))
)
:named kinding_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_f0959d9e8c38aa2643c83552fbc44802
;;; Fact-ids: Name X64.Semantics_s.check; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(158,11-158,32); use=X64.Semantics_s.fst(166,4-166,8)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_f0959d9e8c38aa2643c83552fbc44802
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (BoxBool false)
(X64.Semantics_s.__proj__Mkstate__item__regs @x0)
(X64.Semantics_s.__proj__Mkstate__item__flags @x0)
(X64.Semantics_s.__proj__Mkstate__item__mem @x0))))
 

:pattern ((ApplyTT Tm_abs_f0959d9e8c38aa2643c83552fbc44802
@x0))
:qid interpretation_Tm_abs_f0959d9e8c38aa2643c83552fbc44802))

:named interpretation_Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(344,29-344,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0 @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.IMul64_src @x1)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.IMul64_dst @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.IMul64_dst @x1)
@x2
(X64.Semantics_s.mul_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.IMul64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0))

:named interpretation_Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_ea7cecc32baf46388a93622b2a6ebd75
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(94,42-94,73); use=X64.Semantics_s.fst(94,42-94,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_ea7cecc32baf46388a93622b2a6ebd75 @x1
@x2
@x3)
@x0)
(let ((@lb4 (Prims.op_Equality X64.Machine_s.reg
@x0
@x3)))
(ite (= @lb4
(BoxBool true))
@x1
(ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x2)
@x0))))
 

:pattern ((ApplyTT (Tm_abs_ea7cecc32baf46388a93622b2a6ebd75 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_ea7cecc32baf46388a93622b2a6ebd75))

:named interpretation_Tm_abs_ea7cecc32baf46388a93622b2a6ebd75))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e79b8a999a7f57f0040921f533b269ce
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(352,29-352,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_e79b8a999a7f57f0040921f533b269ce @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.And64_src @x1)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.And64_dst @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.And64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logand (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.And64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_e79b8a999a7f57f0040921f533b269ce @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_e79b8a999a7f57f0040921f533b269ce))

:named interpretation_Tm_abs_e79b8a999a7f57f0040921f533b269ce))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(189,27-189,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Shl64_dst @x1)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shl64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_left (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shl64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))))
 

:pattern ((ApplyTT (Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c))

:named interpretation_Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_e208dc70abce4505afd7c75d2e94a8a4
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(338,29-338,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_e208dc70abce4505afd7c75d2e94a8a4 @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Mul64_src @x3)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (ApplyTT (ApplyTT (ApplyTT X64.Semantics_s.update_reg@tok
X64.Machine_s.Rax@tok)
(X64.Semantics_s.mul_mod64 (ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
X64.Machine_s.Rax@tok)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mul64_src @x3)
@x1)))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(let ((@lb6 (let ((@lb6 (ApplyTT (ApplyTT (ApplyTT X64.Semantics_s.update_reg@tok
X64.Machine_s.Rdx@tok)
(X64.Semantics_s.mul_div64 (ApplyTT (ApplyTT X64.Semantics_s.__proj__Mkstate__item__regs@tok
@x1)
X64.Machine_s.Rax@tok)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mul64_src @x3)
@x1)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(let ((@lb7 (ApplyTT (ApplyTT X64.Semantics_s.update_flags@tok
(X64.Semantics_s.havoc @x1
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb6))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb7)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb7)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb7))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb7))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb6)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb6))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_e208dc70abce4505afd7c75d2e94a8a4 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_e208dc70abce4505afd7c75d2e94a8a4))

:named interpretation_Tm_abs_e208dc70abce4505afd7c75d2e94a8a4))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_da887bd33a5a6c5a992d65f196996f0a
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(319,30-319,32)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_da887bd33a5a6c5a992d65f196996f0a @x1
@x2)
@x0)
(let ((@lb3 (let ((@lb3 (ApplyTT (let ((@lb3 (X64.Semantics_s.valid_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x0)))
(ite (= @lb3
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb3)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb3)))))))
(let ((@lb4 (let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.AddLea64_src2 @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb3))))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb3))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.AddLea64_dst @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.AddLea64_dst @x1)
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src1 @x1)
@x2)
(X64.Semantics_s.eval_operand (X64.Semantics_s.AddLea64_src2 @x1)
@x2))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
 

:pattern ((ApplyTT (Tm_abs_da887bd33a5a6c5a992d65f196996f0a @x1
@x2)
@x0))
:qid interpretation_Tm_abs_da887bd33a5a6c5a992d65f196996f0a))

:named interpretation_Tm_abs_da887bd33a5a6c5a992d65f196996f0a))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_bb6aff5b98a517373530d9e388c5f89b
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(332,29-332,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_bb6aff5b98a517373530d9e388c5f89b @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Sub64_src @x1)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.Sub64_dst @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Sub64_dst @x1)
@x2
(X64.Semantics_s.sub_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_dst @x1)
@x3)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Sub64_src @x1)
@x3))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_bb6aff5b98a517373530d9e388c5f89b @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_bb6aff5b98a517373530d9e388c5f89b))

:named interpretation_Tm_abs_bb6aff5b98a517373530d9e388c5f89b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_9308350a750cd3e48424d434c40f4e9f
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(194,2-194,3)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_9308350a750cd3e48424d434c40f4e9f @x1
@x2)
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_reg_ @x1
@x2
@x0)))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_reg_ @x1
@x2
@x0))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_reg_ @x1
@x2
@x0))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_reg_ @x1
@x2
@x0)))))
 

:pattern ((ApplyTT (Tm_abs_9308350a750cd3e48424d434c40f4e9f @x1
@x2)
@x0))
:qid interpretation_Tm_abs_9308350a750cd3e48424d434c40f4e9f))

:named interpretation_Tm_abs_9308350a750cd3e48424d434c40f4e9f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_724242e80027e2a267145da56a098c8b
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(348,29-348,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_724242e80027e2a267145da56a098c8b @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Xor64_src @x1)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.Xor64_dst @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Xor64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.logxor (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Xor64_src @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_724242e80027e2a267145da56a098c8b @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_724242e80027e2a267145da56a098c8b))

:named interpretation_Tm_abs_724242e80027e2a267145da56a098c8b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_613dc199a18050b65a16a60fdb912f4f
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(327,29-327,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_613dc199a18050b65a16a60fdb912f4f @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.AddCarry64_src @x2)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.AddCarry64_dst @x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.AddCarry64_dst @x2)
@x3
(FStar.UInt64.uint_to_t (BoxInt (_mod (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0)))))
18446744073709551616)))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(let ((@lb6 (ApplyTT (ApplyTT X64.Semantics_s.update_flags@tok
(X64.Semantics_s.update_cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1)
(Prims.op_GreaterThanOrEqual (BoxInt (+ (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.AddCarry64_src @x2)
@x1))))
(BoxInt_proj_0 (let ((@lb6 (X64.Semantics_s.cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1))))
(ite (= @lb6
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))))
(BoxInt 18446744073709551616))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb6)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb6))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_613dc199a18050b65a16a60fdb912f4f @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_613dc199a18050b65a16a60fdb912f4f))

:named interpretation_Tm_abs_613dc199a18050b65a16a60fdb912f4f))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(314,29-314,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Add64_src @x2)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(let ((@lb5 (let ((@lb5 (let ((@lb5 (let ((@lb5 (ApplyTT (let ((@lb5 (X64.Semantics_s.valid_operand (X64.Semantics_s.Add64_dst @x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(ite (= @lb5
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Add64_dst @x2)
@x3
(X64.Semantics_s.add_mod64 (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))))))))
(let ((@lb6 (ApplyTT (ApplyTT X64.Semantics_s.update_flags@tok
(X64.Semantics_s.update_cf (X64.Semantics_s.__proj__Mkstate__item__flags @x1)
(Prims.op_GreaterThanOrEqual (BoxInt (+ (BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_dst @x2)
@x1)))
(BoxInt_proj_0 (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Add64_src @x2)
@x1)))))
(BoxInt 18446744073709551616))))
(FStar.Pervasives.Native.Mktuple2__2 @lb5))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb6)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb6)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb6))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb6))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb5)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb5)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb5))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb5)))))))
 

:pattern ((ApplyTT (Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b))

:named interpretation_Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_2c81f4a4818392ccafc16cff9167306e
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(198,2-198,3)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_2c81f4a4818392ccafc16cff9167306e @x1)
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__regs @x0)
@x1
(X64.Semantics_s.__proj__Mkstate__item__mem @x0))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__regs @x0)
@x1
(X64.Semantics_s.__proj__Mkstate__item__mem @x0)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__regs @x0)
@x1
(X64.Semantics_s.__proj__Mkstate__item__mem @x0)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__regs @x0)
@x1
(X64.Semantics_s.__proj__Mkstate__item__mem @x0))))))
 

:pattern ((ApplyTT (Tm_abs_2c81f4a4818392ccafc16cff9167306e @x1)
@x0))
:qid interpretation_Tm_abs_2c81f4a4818392ccafc16cff9167306e))

:named interpretation_Tm_abs_2c81f4a4818392ccafc16cff9167306e))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(308,29-308,31)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (ApplyTT (Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5 @x1
@x2)
@x0)
(let ((@lb3 (let ((@lb3 (ApplyTT (let ((@lb3 (X64.Semantics_s.valid_operand (X64.Semantics_s.Mov64_src @x1)
@x0)))
(ite (= @lb3
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb3)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb3)))))))
(let ((@lb4 (let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Mov64_dst @x1)
(FStar.Pervasives.Native.Mktuple2__2 @lb3))))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
(FStar.Pervasives.Native.Mktuple2__2 @lb3))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ (X64.Semantics_s.Mov64_dst @x1)
(X64.Semantics_s.eval_operand (X64.Semantics_s.Mov64_src @x1)
@x2)
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb3)))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
 

:pattern ((ApplyTT (Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5 @x1
@x2)
@x0))
:qid interpretation_Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5))

:named interpretation_Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_10261c42e10a9394c7f8c711bf81e6e4
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(305,2-305,3)
(forall ((@x0 Term) (@x1 Term))
 (! (= (ApplyTT (Tm_abs_10261c42e10a9394c7f8c711bf81e6e4 @x1)
@x0)
(let ((@lb2 (ApplyTT (let ((@lb2 @x1))
(ite (is-X64.Semantics_s.Mov64 @lb2)
(Tm_abs_1a46cd7a0bd7922d113274c37c2fe3d5 @lb2
@x0)
(ite (is-X64.Semantics_s.Add64 @lb2)
(Tm_abs_4913b90bcf1c33b400aafdd4cec55f1b @x0
@lb2
@x1)
(ite (is-X64.Semantics_s.AddLea64 @lb2)
(Tm_abs_da887bd33a5a6c5a992d65f196996f0a @lb2
@x0)
(ite (is-X64.Semantics_s.AddCarry64 @lb2)
(Tm_abs_613dc199a18050b65a16a60fdb912f4f @x0
@lb2
@x1)
(ite (is-X64.Semantics_s.Sub64 @lb2)
(Tm_abs_bb6aff5b98a517373530d9e388c5f89b @lb2
@x1
@x0)
(ite (is-X64.Semantics_s.Mul64 @lb2)
(Tm_abs_e208dc70abce4505afd7c75d2e94a8a4 @x0
@x1
@lb2)
(ite (is-X64.Semantics_s.IMul64 @lb2)
(Tm_abs_efd9e8f8b7c98c9b586f4897a855bab0 @lb2
@x1
@x0)
(ite (is-X64.Semantics_s.Xor64 @lb2)
(Tm_abs_724242e80027e2a267145da56a098c8b @lb2
@x1
@x0)
(ite (is-X64.Semantics_s.And64 @lb2)
(Tm_abs_e79b8a999a7f57f0040921f533b269ce @lb2
@x1
@x0)
(ite (is-X64.Semantics_s.Shr64 @lb2)
(Tm_abs_06436ba00a5bd9a8083ce074f3a147a1 @lb2
@x1
@x0)
(ite (is-X64.Semantics_s.Shl64 @lb2)
(Tm_abs_e41ff8e98891b6dd8546d7c0ea20848c @lb2
@x1
@x0)
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))))))))))))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb2)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb2)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb2))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb2))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb2))))))
 

:pattern ((ApplyTT (Tm_abs_10261c42e10a9394c7f8c711bf81e6e4 @x1)
@x0))
:qid interpretation_Tm_abs_10261c42e10a9394c7f8c711bf81e6e4))

:named interpretation_Tm_abs_10261c42e10a9394c7f8c711bf81e6e4))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
;;; Fact-ids: Name X64.Semantics_s.check; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(139,11-139,15); use=X64.Semantics_s.fst(164,4-164,10)
(forall ((@x0 Term))
 (! (= (ApplyTT Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
@x0)
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
@x0))
 

:pattern ((ApplyTT Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
@x0))
:qid interpretation_Tm_abs_081baac0dab8f4468ac989ea2ddf99a3))

:named interpretation_Tm_abs_081baac0dab8f4468ac989ea2ddf99a3))
;;;;;;;;;;;;;;;;interpretation_Tm_abs_06436ba00a5bd9a8083ce074f3a147a1
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(143,9-146,41); use=X64.Semantics_s.fst(189,27-189,29)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (ApplyTT (Tm_abs_06436ba00a5bd9a8083ce074f3a147a1 @x1
@x2
@x3)
@x0)
(let ((@lb4 (let ((@lb4 (ApplyTT (let ((@lb4 (X64.Semantics_s.valid_operand (X64.Semantics_s.Shr64_dst @x1)
@x0)))
(ite (= @lb4
(BoxBool true))
Tm_abs_081baac0dab8f4468ac989ea2ddf99a3
Tm_abs_f0959d9e8c38aa2643c83552fbc44802))
@x0)))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
(FStar.Pervasives.Native.Mktuple2__1 @lb4)
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok @x0))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__regs (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__flags (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__mem (FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))
(FStar.Pervasives.Native.Mktuple2 Prims.unit
X64.Semantics_s.state
Tm_unit
(X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.Mkstate (Prims.op_AmpAmp (Prims.op_AmpAmp (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4))
(X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4))))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__flags (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_ (X64.Semantics_s.Shr64_dst @x1)
@x2
(X64.Semantics_s.u (X64.Semantics_s.shift_right (FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_dst @x1)
@x3))
(FStar.UInt64.v (X64.Semantics_s.eval_operand (X64.Semantics_s.Shr64_amt @x1)
@x3))))
(FStar.Pervasives.Native.Mktuple2__2 @lb4)))))))))
 

:pattern ((ApplyTT (Tm_abs_06436ba00a5bd9a8083ce074f3a147a1 @x1
@x2
@x3)
@x0))
:qid interpretation_Tm_abs_06436ba00a5bd9a8083ce074f3a147a1))

:named interpretation_Tm_abs_06436ba00a5bd9a8083ce074f3a147a1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_fce3a2e2e29645212301d89fcebc4e29
;;; Fact-ids: Name FStar.UInt64.mul_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(161,31-161,32); use=FStar.UInt64.fsti(161,31-161,32)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_fce3a2e2e29645212301d89fcebc4e29 @x0
@x1))))
:qid haseqTm_refine_fce3a2e2e29645212301d89fcebc4e29))

:named haseqTm_refine_fce3a2e2e29645212301d89fcebc4e29))
;;;;;;;;;;;;;;;;haseq for Tm_refine_f57897888b8e8a5df8c6b09df8b92b30
;;; Fact-ids: Name X64.Semantics_s.mul_div64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(297,44-297,50); use=X64.Semantics_s.fst(301,4-301,13)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x0
@x1)))
(Valid (Prims.hasEq (X64.Semantics_s.uint64 Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_f57897888b8e8a5df8c6b09df8b92b30 @x0
@x1))))
:qid haseqTm_refine_f57897888b8e8a5df8c6b09df8b92b30))

:named haseqTm_refine_f57897888b8e8a5df8c6b09df8b92b30))
;;;;;;;;;;;;;;;;haseq for Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b
;;; Fact-ids: Name X64.Semantics_s.__proj__Mul64__item__src; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_eb9d1a68ff54ae6cb27769ecbf49ba9b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_2; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(142,58-142,86); use=FStar.BitVector.fsti(142,58-142,86)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826 @x0
@x1))))
:qid haseqTm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826))

:named haseqTm_refine_e8e1ad4b2203cd724d5b8b2dba0a5826))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e8de62b85869f7c1a1780736ed143295
;;; Fact-ids: Name X64.Semantics_s.__proj__Mov64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e8de62b85869f7c1a1780736ed143295))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_e8de62b85869f7c1a1780736ed143295))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e31d0af1473307c26c9e917a73600ad0
;;; Fact-ids: Name X64.Semantics_s.__proj__Shr64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e31d0af1473307c26c9e917a73600ad0))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_e31d0af1473307c26c9e917a73600ad0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e
;;; Fact-ids: Name FStar.BitVector.bv_t; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(32,21-32,51); use=FStar.BitVector.fsti(32,21-32,51)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x0)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq Prims.bool))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x0))))
:qid haseqTm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e))

:named haseqTm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_e04f937679d9c74a6caf8aa7b9f98189
;;; Fact-ids: Name X64.Semantics_s.__proj__AddLea64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_e04f937679d9c74a6caf8aa7b9f98189))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_e04f937679d9c74a6caf8aa7b9f98189))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55
;;; Fact-ids: Name FStar.Seq.Base.index; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(32,34-32,53); use=FStar.Seq.Base.fsti(32,34-32,53)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55 @x0
@x1))))
:qid haseqTm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))

:named haseqTm_refine_d83f8da8ef6c1cb9f71d1465c1bb1c55))
;;;;;;;;;;;;;;;;haseq for Tm_refine_d3d07693cd71377864ef84dc97d10ec1
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,54-158,84); use=FStar.Seq.Base.fsti(158,54-158,84)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_d3d07693cd71377864ef84dc97d10ec1 @x0
@x1
@x2))))
:qid haseqTm_refine_d3d07693cd71377864ef84dc97d10ec1))

:named haseqTm_refine_d3d07693cd71377864ef84dc97d10ec1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2
;;; Fact-ids: Name X64.Semantics_s.__proj__And64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_cebe7e9690dfac8d7c9475e4922b0da2))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_cebe7e9690dfac8d7c9475e4922b0da2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_cb95789552ffa46c14f21af13ceaad6b
;;; Fact-ids: Name FStar.UInt64.sub_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(133,31-133,32); use=FStar.UInt64.fsti(133,31-133,32)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_cb95789552ffa46c14f21af13ceaad6b @x0
@x1))))
:qid haseqTm_refine_cb95789552ffa46c14f21af13ceaad6b))

:named haseqTm_refine_cb95789552ffa46c14f21af13ceaad6b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c1424615841f28cac7fc34e92b7ff33c
;;; Fact-ids: Name FStar.Seq.Base.init_aux; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(36,41-36,57); use=FStar.Seq.Base.fsti(36,41-36,57)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c1424615841f28cac7fc34e92b7ff33c @x0))))
:qid haseqTm_refine_c1424615841f28cac7fc34e92b7ff33c))

:named haseqTm_refine_c1424615841f28cac7fc34e92b7ff33c))
;;;;;;;;;;;;;;;;haseq for Tm_refine_c0ec47abc53a2509e744dad22ccf8191
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_2; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(156,59-156,84); use=FStar.BitVector.fsti(156,59-156,84)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_c0ec47abc53a2509e744dad22ccf8191 @x0
@x1))))
:qid haseqTm_refine_c0ec47abc53a2509e744dad22ccf8191))

:named haseqTm_refine_c0ec47abc53a2509e744dad22ccf8191))
;;;;;;;;;;;;;;;;haseq for Tm_refine_bc552b2c624e2add758b3ac761c0c563
;;; Fact-ids: Name FStar.UInt64.add; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(88,27-88,28); use=FStar.UInt64.fsti(88,27-88,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_bc552b2c624e2add758b3ac761c0c563 @x0
@x1))))
:qid haseqTm_refine_bc552b2c624e2add758b3ac761c0c563))

:named haseqTm_refine_bc552b2c624e2add758b3ac761c0c563))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b913a3f691ca99086652e0a655e72f17
;;; Fact-ids: Name FStar.Seq.Base.empty; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(46,26-46,49); use=FStar.Seq.Base.fsti(46,26-46,49)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0)))
(Valid (Prims.hasEq (FStar.Seq.Base.seq @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_b913a3f691ca99086652e0a655e72f17 @x0))))
:qid haseqTm_refine_b913a3f691ca99086652e0a655e72f17))

:named haseqTm_refine_b913a3f691ca99086652e0a655e72f17))
;;;;;;;;;;;;;;;;haseq for Tm_refine_b4ab27333df03bce36b56906586a3225
;;; Fact-ids: Name X64.Semantics_s.__proj__Shl64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_b4ab27333df03bce36b56906586a3225))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_b4ab27333df03bce36b56906586a3225))
;;;;;;;;;;;;;;;;haseq for Tm_refine_ac201cf927190d39c033967b63cb957b
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_app2; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(153,57-153,107); use=FStar.Seq.Base.fsti(153,57-153,107)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_ac201cf927190d39c033967b63cb957b @x0
@x1
@x2))))
:qid haseqTm_refine_ac201cf927190d39c033967b63cb957b))

:named haseqTm_refine_ac201cf927190d39c033967b63cb957b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f
;;; Fact-ids: Name X64.Semantics_s.sub_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(287,44-287,50); use=X64.Semantics_s.fst(290,4-290,13)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x0
@x1)))
(Valid (Prims.hasEq (X64.Semantics_s.uint64 Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f @x0
@x1))))
:qid haseqTm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f))

:named haseqTm_refine_9047fa206eb79fbe3b02e2e3d1bcaa4f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_81407705a0828c2c1b1976675443f647
;;; Fact-ids: Name FStar.Seq.Base.slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(64,43-64,73); use=FStar.Seq.Base.fsti(64,43-64,73)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_81407705a0828c2c1b1976675443f647 @x0
@x1
@x2))))
:qid haseqTm_refine_81407705a0828c2c1b1976675443f647))

:named haseqTm_refine_81407705a0828c2c1b1976675443f647))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d
;;; Fact-ids: Name FStar.UInt.index_to_vec_ones; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(430,41-430,54); use=FStar.UInt.fsti(430,41-430,54)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7e0b9b2dbca36eab00de093c1b701c6d @x0))))
:qid haseqTm_refine_7e0b9b2dbca36eab00de093c1b701c6d))

:named haseqTm_refine_7e0b9b2dbca36eab00de093c1b701c6d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6fab9340d0ab4fd98129eb512f268790
;;; Fact-ids: Name X64.Semantics_s.__proj__Add64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_6fab9340d0ab4fd98129eb512f268790))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_6fab9340d0ab4fd98129eb512f268790))
;;;;;;;;;;;;;;;;haseq for Tm_refine_6ccf0869e6825997ab860bb25791c11f
;;; Fact-ids: Name FStar.BitVector.shift_left_vec_lemma_1; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(137,58-137,87); use=FStar.BitVector.fsti(137,58-137,87)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_6ccf0869e6825997ab860bb25791c11f @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_6ccf0869e6825997ab860bb25791c11f @x0
@x1))))
:qid haseqTm_refine_6ccf0869e6825997ab860bb25791c11f))

:named haseqTm_refine_6ccf0869e6825997ab860bb25791c11f))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5e4248dc93a56d69a95eb5ac14851d39
;;; Fact-ids: Name X64.Semantics_s.update_cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(121,45-121,87); use=X64.Semantics_s.fst(121,45-121,87)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x0)))
(Valid (Prims.hasEq (X64.Semantics_s.uint64 Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5e4248dc93a56d69a95eb5ac14851d39 @x0))))
:qid haseqTm_refine_5e4248dc93a56d69a95eb5ac14851d39))

:named haseqTm_refine_5e4248dc93a56d69a95eb5ac14851d39))
;;;;;;;;;;;;;;;;haseq for Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1
;;; Fact-ids: Name X64.Semantics_s.mul_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(292,44-292,50); use=X64.Semantics_s.fst(295,4-295,13)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x0
@x1)))
(Valid (Prims.hasEq (X64.Semantics_s.uint64 Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_5e0b55f391f0d80e17a86a98e20c6bf1 @x0
@x1))))
:qid haseqTm_refine_5e0b55f391f0d80e17a86a98e20c6bf1))

:named haseqTm_refine_5e0b55f391f0d80e17a86a98e20c6bf1))
;;;;;;;;;;;;;;;;haseq for Tm_refine_569023f890bbff681c285b9f9a216ade
;;; Fact-ids: Name X64.Semantics_s.__proj__Sub64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_569023f890bbff681c285b9f9a216ade))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_569023f890bbff681c285b9f9a216ade))
;;;;;;;;;;;;;;;;haseq for Tm_refine_541d8b5bedd79f842c043b0167c0294d
;;; Fact-ids: Name X64.Semantics_s.add_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(282,44-282,50); use=X64.Semantics_s.fst(285,4-285,13)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_541d8b5bedd79f842c043b0167c0294d @x0
@x1)))
(Valid (Prims.hasEq (X64.Semantics_s.uint64 Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_541d8b5bedd79f842c043b0167c0294d @x0
@x1))))
:qid haseqTm_refine_541d8b5bedd79f842c043b0167c0294d))

:named haseqTm_refine_541d8b5bedd79f842c043b0167c0294d))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4db8ba22c4504a66577a2159dcc603cd
;;; Fact-ids: Name FStar.UInt64.sub; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(116,27-116,28); use=FStar.UInt64.fsti(116,27-116,28)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4db8ba22c4504a66577a2159dcc603cd @x0
@x1))))
:qid haseqTm_refine_4db8ba22c4504a66577a2159dcc603cd))

:named haseqTm_refine_4db8ba22c4504a66577a2159dcc603cd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_4d5241eb6fe198666a8101195bbd4a2a
;;; Fact-ids: Name FStar.Pervasives.Native.__proj__Some__item__v; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_4d5241eb6fe198666a8101195bbd4a2a @x0))))
:qid haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))

:named haseqTm_refine_4d5241eb6fe198666a8101195bbd4a2a))
;;;;;;;;;;;;;;;;haseq for Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8
;;; Fact-ids: Name FStar.Seq.Base.lemma_index_slice; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(158,88-158,104); use=FStar.Seq.Base.fsti(158,88-158,104)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_35a0739c434508f48d0bb1d5cd5df9e8 @x0
@x1))))
:qid haseqTm_refine_35a0739c434508f48d0bb1d5cd5df9e8))

:named haseqTm_refine_35a0739c434508f48d0bb1d5cd5df9e8))
;;;;;;;;;;;;;;;;haseq for Tm_refine_34425c23b534b8a294f8f063dd9faa4b
;;; Fact-ids: Name FStar.BitVector.shift_right_vec_lemma_1; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(151,59-151,83); use=FStar.BitVector.fsti(151,59-151,83)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x0
@x1)))
(Valid (Prims.hasEq Prims.nat)))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_34425c23b534b8a294f8f063dd9faa4b @x0
@x1))))
:qid haseqTm_refine_34425c23b534b8a294f8f063dd9faa4b))

:named haseqTm_refine_34425c23b534b8a294f8f063dd9faa4b))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2d98f2f5de361516da3dbd9f556509e2
;;; Fact-ids: Name FStar.UInt64.add_mod; Namespace FStar.UInt64
(assert (! 
;; def=FStar.UInt64.fsti(105,31-105,32); use=FStar.UInt64.fsti(105,31-105,32)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x0
@x1)))
(Valid (Prims.hasEq (FStar.UInt64.t Dummy_value))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_2d98f2f5de361516da3dbd9f556509e2 @x0
@x1))))
:qid haseqTm_refine_2d98f2f5de361516da3dbd9f556509e2))

:named haseqTm_refine_2d98f2f5de361516da3dbd9f556509e2))
;;;;;;;;;;;;;;;;haseq for Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e
;;; Fact-ids: Name X64.Semantics_s.__proj__IMul64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_2b0bbeefece73e6f59fc38828ce1e64e))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_2b0bbeefece73e6f59fc38828ce1e64e))
;;;;;;;;;;;;;;;;haseq for Tm_refine_1957040814f569aff4b252943fe77fdd
;;; Fact-ids: Name X64.Semantics_s.__proj__Xor64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_1957040814f569aff4b252943fe77fdd))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_1957040814f569aff4b252943fe77fdd))
;;;;;;;;;;;;;;;;haseq for Tm_refine_16a53ffd1bab892d408baed6f0393a33
;;; Fact-ids: Name X64.Semantics_s.__proj__AddCarry64__item__dst; Namespace X64.Semantics_s
(assert (! (iff (Valid (Prims.hasEq Tm_refine_16a53ffd1bab892d408baed6f0393a33))
(Valid (Prims.hasEq X64.Semantics_s.ins)))
:named haseqTm_refine_16a53ffd1bab892d408baed6f0393a33))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(193,4-193,14); use=X64.Semantics_s.fst(193,4-193,14)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Semantics_s.update_reg@tok
Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))

;; def=X64.Semantics_s.fst(193,4-193,14); use=X64.Semantics_s.fst(193,4-193,14)
(forall ((@x1 Term) (@x2 Term))
 (! (= (ApplyTT (ApplyTT X64.Semantics_s.update_reg@tok
@x1)
@x2)
(X64.Semantics_s.update_reg @x1
@x2))
 

:pattern ((X64.Semantics_s.update_reg @x1
@x2))
:qid function_token_typing_X64.Semantics_s.update_reg.1))
)
 

:pattern ((ApplyTT @x0
X64.Semantics_s.update_reg@tok))
:qid function_token_typing_X64.Semantics_s.update_reg))

:named function_token_typing_X64.Semantics_s.update_reg))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(197,4-197,16); use=X64.Semantics_s.fst(197,4-197,16)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Semantics_s.update_flags@tok
Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))

;; def=X64.Semantics_s.fst(197,4-197,16); use=X64.Semantics_s.fst(197,4-197,16)
(forall ((@x1 Term))
 (! (= (ApplyTT X64.Semantics_s.update_flags@tok
@x1)
(X64.Semantics_s.update_flags @x1))
 

:pattern ((X64.Semantics_s.update_flags @x1))
:qid function_token_typing_X64.Semantics_s.update_flags.1))
)
 

:pattern ((ApplyTT @x0
X64.Semantics_s.update_flags@tok))
:qid function_token_typing_X64.Semantics_s.update_flags))

:named function_token_typing_X64.Semantics_s.update_flags))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(303,4-303,12); use=X64.Semantics_s.fst(303,4-303,12)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType X64.Semantics_s.eval_ins@tok
Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))

;; def=X64.Semantics_s.fst(303,4-303,12); use=X64.Semantics_s.fst(303,4-303,12)
(forall ((@x1 Term))
 (! (= (ApplyTT X64.Semantics_s.eval_ins@tok
@x1)
(X64.Semantics_s.eval_ins @x1))
 

:pattern ((X64.Semantics_s.eval_ins @x1))
:qid function_token_typing_X64.Semantics_s.eval_ins.1))
)
 

:pattern ((ApplyTT @x0
X64.Semantics_s.eval_ins@tok))
:qid function_token_typing_X64.Semantics_s.eval_ins))

:named function_token_typing_X64.Semantics_s.eval_ins))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.codes; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.codes
Tm_type)
:named function_token_typing_X64.Semantics_s.codes))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Semantics_s.code; Namespace X64.Semantics_s
(assert (! (HasType X64.Semantics_s.code
Tm_type)
:named function_token_typing_X64.Semantics_s.code))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (HasType X64.Machine_s.dst_op
Tm_type)
:named function_token_typing_X64.Machine_s.dst_op))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (HasType Prims.prop
Tm_type)
:named function_token_typing_Prims.prop))
;;;;;;;;;;;;;;;;function token typing
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x0 Term))
 (! (and (NoHoist @x0
(HasType FStar.Map.upd@tok
Tm_arrow_b19283e90b47034162373413c6a19933))

;; def=FStar.Map.fsti(42,4-42,7); use=FStar.Map.fsti(42,4-42,7)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT FStar.Map.upd@tok
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Map.upd @x1
@x2
@x3
@x4
@x5))
 

:pattern ((FStar.Map.upd @x1
@x2
@x3
@x4
@x5))
:qid function_token_typing_FStar.Map.upd.1))
)
 

:pattern ((ApplyTT @x0
FStar.Map.upd@tok))
:qid function_token_typing_FStar.Map.upd))

:named function_token_typing_FStar.Map.upd))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(36,5-36,8); use=X64.Semantics_s.fst(36,5-36,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
X64.Semantics_s.ins)
(or (is-X64.Semantics_s.Mov64 @x1)
(is-X64.Semantics_s.Add64 @x1)
(is-X64.Semantics_s.AddLea64 @x1)
(is-X64.Semantics_s.AddCarry64 @x1)
(is-X64.Semantics_s.Sub64 @x1)
(is-X64.Semantics_s.Mul64 @x1)
(is-X64.Semantics_s.IMul64 @x1)
(is-X64.Semantics_s.Xor64 @x1)
(is-X64.Semantics_s.And64 @x1)
(is-X64.Semantics_s.Shr64 @x1)
(is-X64.Semantics_s.Shl64 @x1)))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
X64.Semantics_s.ins))
:qid fuel_guarded_inversion_X64.Semantics_s.ins))

:named fuel_guarded_inversion_X64.Semantics_s.ins))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(X64.Machine_s.precode @x2
@x3))
(or (and (is-X64.Machine_s.Ins @x1)
(= @x2
(X64.Machine_s.Ins_t_ins @x1))
(= @x3
(X64.Machine_s.Ins_t_ocmp @x1)))
(and (is-X64.Machine_s.Block @x1)
(= @x2
(X64.Machine_s.Block_t_ins @x1))
(= @x3
(X64.Machine_s.Block_t_ocmp @x1)))
(and (is-X64.Machine_s.IfElse @x1)
(= @x2
(X64.Machine_s.IfElse_t_ins @x1))
(= @x3
(X64.Machine_s.IfElse_t_ocmp @x1)))
(and (is-X64.Machine_s.While @x1)
(= @x2
(X64.Machine_s.While_t_ins @x1))
(= @x3
(X64.Machine_s.While_t_ocmp @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(X64.Machine_s.precode @x2
@x3)))
:qid fuel_guarded_inversion_X64.Machine_s.precode))

:named fuel_guarded_inversion_X64.Machine_s.precode))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2))
(or (and (is-Prims.Nil @x1)
(= @x2
(Prims.Nil_a @x1)))
(and (is-Prims.Cons @x1)
(= @x2
(Prims.Cons_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(Prims.list @x2)))
:qid fuel_guarded_inversion_Prims.list))

:named fuel_guarded_inversion_Prims.list))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(and (is-FStar.Pervasives.Native.Mktuple3 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple3__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple3__b @x1))
(= @x4
(FStar.Pervasives.Native.Mktuple3__c @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(and (is-FStar.Pervasives.Native.Mktuple2 @x1)
(= @x2
(FStar.Pervasives.Native.Mktuple2__a @x1))
(= @x3
(FStar.Pervasives.Native.Mktuple2__b @x1))))
 

:pattern ((HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))

:named fuel_guarded_inversion_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;inversion axiom
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2))
(or (and (is-FStar.Pervasives.Native.None @x1)
(= @x2
(FStar.Pervasives.Native.None_a @x1)))
(and (is-FStar.Pervasives.Native.Some @x1)
(= @x2
(FStar.Pervasives.Native.Some_a @x1)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
@x1
(FStar.Pervasives.Native.option @x2)))
:qid fuel_guarded_inversion_FStar.Pervasives.Native.option))

:named fuel_guarded_inversion_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! (= 269
(Term_constr_id X64.Machine_s.precode@tok))
:named fresh_token_X64.Machine_s.precode@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! (= 319
(Term_constr_id Prims.list@tok))
:named fresh_token_Prims.list@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! (= 147
(Term_constr_id FStar.Pervasives.Native.tuple3@tok))
:named fresh_token_FStar.Pervasives.Native.tuple3@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! (= 126
(Term_constr_id FStar.Pervasives.Native.tuple2@tok))
:named fresh_token_FStar.Pervasives.Native.tuple2@tok))
;;;;;;;;;;;;;;;;fresh token
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! (= 102
(Term_constr_id FStar.Pervasives.Native.option@tok))
:named fresh_token_FStar.Pervasives.Native.option@tok))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: X64.Semantics_s.eval_while
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(388,4-388,14); use=X64.Semantics_s.fst(388,4-388,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
X64.Semantics_s.ocmp)
(HasType @x2
X64.Semantics_s.code)
(HasType @x3
Prims.nat)
(HasType @x4
X64.Semantics_s.state))
(= (X64.Semantics_s.eval_while.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(let ((@lb5 (Prims.op_Equality Prims.int
@x3
(BoxInt 0))))
(ite (= @lb5
(BoxBool true))
(FStar.Pervasives.Native.None X64.Semantics_s.state)
(let ((@lb6 (Prims.op_Negation (X64.Semantics_s.eval_ocmp @x4
@x1))))
(ite (= @lb6
(BoxBool true))
(FStar.Pervasives.Native.Some X64.Semantics_s.state
@x4)
(let ((@lb7 (X64.Semantics_s.eval_code.fuel_instrumented @u0
@x2
(BoxInt (- (BoxInt_proj_0 @x3)
1))
@x4)))
(ite (is-FStar.Pervasives.Native.None @lb7)
(FStar.Pervasives.Native.None X64.Semantics_s.state)
(ite (is-FStar.Pervasives.Native.Some @lb7)
(let ((@lb8 (X64.Semantics_s.__proj__Mkstate__item__ok (FStar.Pervasives.Native.Some_v @lb7))))
(ite (= @lb8
(BoxBool true))
(X64.Semantics_s.eval_while.fuel_instrumented @u0
@x1
@x2
(BoxInt (- (BoxInt_proj_0 @x3)
1))
(FStar.Pervasives.Native.Some_v @lb7))
(FStar.Pervasives.Native.Some X64.Semantics_s.state
(FStar.Pervasives.Native.Some_v @lb7))))
Tm_unit)))))))))
 :weight 0


:pattern ((X64.Semantics_s.eval_while.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid equation_with_fuel_X64.Semantics_s.eval_while.fuel_instrumented))

:named equation_with_fuel_X64.Semantics_s.eval_while.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: X64.Semantics_s.eval_codes
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(381,4-381,14); use=X64.Semantics_s.fst(381,4-381,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
X64.Semantics_s.codes)
(HasType @x2
Prims.nat)
(HasType @x3
X64.Semantics_s.state))
(= (X64.Semantics_s.eval_codes.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x1))
(ite (is-Prims.Nil @lb4)
(FStar.Pervasives.Native.Some X64.Semantics_s.state
@x3)
(ite (is-Prims.Cons @lb4)
(let ((@lb5 (FStar.Pervasives.Native.uu___is_None X64.Semantics_s.state
(X64.Semantics_s.eval_code.fuel_instrumented @u0
(Prims.Cons_hd @lb4)
@x2
@x3))))
(ite (= @lb5
(BoxBool true))
(FStar.Pervasives.Native.None X64.Semantics_s.state)
(X64.Semantics_s.eval_codes.fuel_instrumented @u0
(Prims.Cons_tl @lb4)
@x2
(FStar.Pervasives.Native.__proj__Some__item__v X64.Semantics_s.state
(X64.Semantics_s.eval_code.fuel_instrumented @u0
(Prims.Cons_hd @lb4)
@x2
@x3)))))
Tm_unit)))))
 :weight 0


:pattern ((X64.Semantics_s.eval_codes.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_X64.Semantics_s.eval_codes.fuel_instrumented))

:named equation_with_fuel_X64.Semantics_s.eval_codes.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: X64.Semantics_s.eval_code
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(374,8-374,17); use=X64.Semantics_s.fst(374,8-374,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
X64.Semantics_s.code)
(HasType @x2
Prims.nat)
(HasType @x3
X64.Semantics_s.state))
(= (X64.Semantics_s.eval_code.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 @x1))
(ite (is-X64.Machine_s.Ins @lb4)
(FStar.Pervasives.Native.Some X64.Semantics_s.state
(FStar.Pervasives.Native.snd Prims.unit
X64.Semantics_s.state
(ApplyTT (ApplyTT X64.Semantics_s.eval_ins@tok
(X64.Machine_s.Ins_ins @lb4))
@x3)))
(ite (is-X64.Machine_s.Block @lb4)
(X64.Semantics_s.eval_codes.fuel_instrumented @u0
(X64.Machine_s.Block_block @lb4)
@x2
@x3)
(ite (is-X64.Machine_s.IfElse @lb4)
(let ((@lb5 (X64.Semantics_s.eval_ocmp @x3
(X64.Machine_s.IfElse_ifCond @lb4))))
(ite (= @lb5
(BoxBool true))
(X64.Semantics_s.eval_code.fuel_instrumented @u0
(X64.Machine_s.IfElse_ifTrue @lb4)
@x2
@x3)
(X64.Semantics_s.eval_code.fuel_instrumented @u0
(X64.Machine_s.IfElse_ifFalse @lb4)
@x2
@x3)))
(ite (is-X64.Machine_s.While @lb4)
(X64.Semantics_s.eval_while.fuel_instrumented @u0
(X64.Machine_s.While_whileCond @lb4)
(X64.Machine_s.While_whileBody @lb4)
@x2
@x3)
Tm_unit)))))))
 :weight 0


:pattern ((X64.Semantics_s.eval_code.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_X64.Semantics_s.eval_code.fuel_instrumented))

:named equation_with_fuel_X64.Semantics_s.eval_code.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.UInt.to_vec
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(181,8-181,14); use=FStar.UInt.fsti(181,8-181,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
(FStar.UInt.uint_t @x1)))
(= (FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 (Prims.op_Equality Prims.int
@x1
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
(FStar.Seq.Base.empty Prims.bool)
(FStar.Seq.Base.append Prims.bool
(FStar.UInt.to_vec.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(Prims.op_Division @x2
(BoxInt 2)))
(FStar.Seq.Base.create Prims.bool
(BoxInt 1)
(Prims.op_Equality Prims.int
(Prims.op_Modulus @x2
(BoxInt 2))
(BoxInt 1))))))))
 :weight 0


:pattern ((FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.UInt.to_vec.fuel_instrumented))

:named equation_with_fuel_FStar.UInt.to_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.UInt.from_vec
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(185,8-185,16); use=FStar.UInt.fsti(185,8-185,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.nat)
(HasType @x2
(FStar.BitVector.bv_t @x1)))
(= (FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(let ((@lb3 (Prims.op_Equality Prims.int
@x1
(BoxInt 0))))
(ite (= @lb3
(BoxBool true))
(BoxInt 0)
(Prims.op_Addition (Prims.op_Multiply (BoxInt 2)
(FStar.UInt.from_vec.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(FStar.Seq.Base.slice Prims.bool
@x2
(BoxInt 0)
(Prims.op_Subtraction @x1
(BoxInt 1)))))
(let ((@lb4 (FStar.Seq.Base.index Prims.bool
@x2
(Prims.op_Subtraction @x1
(BoxInt 1)))))
(ite (= @lb4
(BoxBool true))
(BoxInt 1)
(BoxInt 0))))))))
 :weight 0


:pattern ((FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid equation_with_fuel_FStar.UInt.from_vec.fuel_instrumented))

:named equation_with_fuel_FStar.UInt.from_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.BitVector.logxor_vec
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(57,8-57,18); use=FStar.BitVector.fsti(57,8-57,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
(FStar.BitVector.bv_t @x1))
(HasType @x3
(FStar.BitVector.bv_t @x1)))
(= (FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 (Prims.op_Equality Prims.int
@x1
(BoxInt 1))))
(ite (= @lb4
(BoxBool true))
(FStar.Seq.Base.create Prims.bool
(BoxInt 1)
(Prims.op_disEquality Prims.bool
(FStar.Seq.Base.index Prims.bool
@x2
(BoxInt 0))
(FStar.Seq.Base.index Prims.bool
@x3
(BoxInt 0))))
(FStar.Seq.Base.append Prims.bool
(FStar.Seq.Base.create Prims.bool
(BoxInt 1)
(Prims.op_disEquality Prims.bool
(FStar.Seq.Base.index Prims.bool
@x2
(BoxInt 0))
(FStar.Seq.Base.index Prims.bool
@x3
(BoxInt 0))))
(FStar.BitVector.logxor_vec.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(FStar.Seq.Base.slice Prims.bool
@x2
(BoxInt 1)
@x1)
(FStar.Seq.Base.slice Prims.bool
@x3
(BoxInt 1)
@x1)))))))
 :weight 0


:pattern ((FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_FStar.BitVector.logxor_vec.fuel_instrumented))

:named equation_with_fuel_FStar.BitVector.logxor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for fuel-instrumented recursive function: FStar.BitVector.logand_vec
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(46,8-46,18); use=FStar.BitVector.fsti(46,8-46,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.pos)
(HasType @x2
(FStar.BitVector.bv_t @x1))
(HasType @x3
(FStar.BitVector.bv_t @x1)))
(= (FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(let ((@lb4 (Prims.op_Equality Prims.int
@x1
(BoxInt 1))))
(ite (= @lb4
(BoxBool true))
(FStar.Seq.Base.create Prims.bool
(BoxInt 1)
(Prims.op_AmpAmp (FStar.Seq.Base.index Prims.bool
@x2
(BoxInt 0))
(FStar.Seq.Base.index Prims.bool
@x3
(BoxInt 0))))
(FStar.Seq.Base.append Prims.bool
(FStar.Seq.Base.create Prims.bool
(BoxInt 1)
(Prims.op_AmpAmp (FStar.Seq.Base.index Prims.bool
@x2
(BoxInt 0))
(FStar.Seq.Base.index Prims.bool
@x3
(BoxInt 0))))
(FStar.BitVector.logand_vec.fuel_instrumented @u0
(Prims.op_Subtraction @x1
(BoxInt 1))
(FStar.Seq.Base.slice Prims.bool
@x2
(BoxInt 1)
@x1)
(FStar.Seq.Base.slice Prims.bool
@x3
(BoxInt 1)
@x1)))))))
 :weight 0


:pattern ((FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid equation_with_fuel_FStar.BitVector.logand_vec.fuel_instrumented))

:named equation_with_fuel_FStar.BitVector.logand_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Lemmas_i.eval_code
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_code; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fsti(28,4-28,13); use=X64.Vale.Lemmas_i.fsti(28,4-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (Valid (X64.Vale.Lemmas_i.eval_code @x0
@x1
@x2))

;; def=X64.Vale.Lemmas_i.fsti(29,2-30,62); use=X64.Vale.Lemmas_i.fsti(29,2-30,62)
(exists ((@x3 Term))
 (! (and (HasType @x3
Prims.nat)

;; def=X64.Vale.Lemmas_i.fsti(30,4-30,62); use=X64.Vale.Lemmas_i.fsti(30,4-30,62)
(= (FStar.Pervasives.Native.Some X64.Semantics_s.state
(X64.Vale.StateLemmas_i.state_to_S @x2))
(X64.Semantics_s.eval_code @x0
@x3
(X64.Vale.StateLemmas_i.state_to_S @x1)))
)
 

:pattern ((X64.Semantics_s.eval_code.fuel_instrumented ZFuel
@x0
@x3
(X64.Vale.StateLemmas_i.state_to_S @x1)))
:qid equation_X64.Vale.Lemmas_i.eval_code.1))
)
 

:pattern ((X64.Vale.Lemmas_i.eval_code @x0
@x1
@x2))
:qid equation_X64.Vale.Lemmas_i.eval_code))

:named equation_X64.Vale.Lemmas_i.eval_code))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.valid_operand
;;; Fact-ids: Name X64.Semantics_s.valid_operand; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(101,4-101,17); use=X64.Semantics_s.fst(101,4-101,17)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.valid_operand @x0
@x1)
(let ((@lb2 @x0))
(ite (is-X64.Machine_s.OConst @lb2)
(BoxBool true)
(ite (is-X64.Machine_s.OReg @lb2)
(BoxBool true)
(ite (is-X64.Machine_s.OMem @lb2)
(X64.Semantics_s.valid_maddr (X64.Machine_s.OMem_m @lb2)
@x1)
Tm_unit)))))
 

:pattern ((X64.Semantics_s.valid_operand @x0
@x1))
:qid equation_X64.Semantics_s.valid_operand))

:named equation_X64.Semantics_s.valid_operand))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.valid_maddr
;;; Fact-ids: Name X64.Semantics_s.valid_maddr; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(98,4-98,15); use=X64.Semantics_s.fst(98,4-98,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.valid_maddr @x0
@x1)
(FStar.Map.contains Prims.int
(X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.__proj__Mkstate__item__mem @x1)
(X64.Semantics_s.eval_maddr @x0
@x1)))
 

:pattern ((X64.Semantics_s.valid_maddr @x0
@x1))
:qid equation_X64.Semantics_s.valid_maddr))

:named equation_X64.Semantics_s.valid_maddr))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_reg'
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(93,4-93,15); use=X64.Semantics_s.fst(93,4-93,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.update_reg_ @x0
@x1
@x2)
(X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok @x2)
(FStar.FunctionalExtensionality.on_domain X64.Machine_s.reg
Tm_abs_2da3d120bd5ce08465191535a1915477
(Tm_abs_ea7cecc32baf46388a93622b2a6ebd75 @x1
@x2
@x0))
(X64.Semantics_s.__proj__Mkstate__item__flags @x2)
(X64.Semantics_s.__proj__Mkstate__item__mem @x2)))
 

:pattern ((X64.Semantics_s.update_reg_ @x0
@x1
@x2))
:qid equation_X64.Semantics_s.update_reg_))

:named equation_X64.Semantics_s.update_reg_))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_reg
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(193,4-193,14); use=X64.Semantics_s.fst(193,4-193,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.update_reg @x0
@x1)
(Tm_abs_9308350a750cd3e48424d434c40f4e9f @x0
@x1))
 

:pattern ((X64.Semantics_s.update_reg @x0
@x1))
:qid equation_X64.Semantics_s.update_reg))

:named equation_X64.Semantics_s.update_reg))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_operand_preserve_flags'
;;; Fact-ids: Name X64.Semantics_s.update_operand_preserve_flags'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(107,4-107,34); use=X64.Semantics_s.fst(107,4-107,34)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.update_operand_preserve_flags_ @x0
@x1
@x2)
(let ((@lb3 @x0))
(ite (is-X64.Machine_s.OReg @lb3)
(X64.Semantics_s.update_reg_ (X64.Machine_s.OReg_r @lb3)
@x1
@x2)
(ite (is-X64.Machine_s.OMem @lb3)
(X64.Semantics_s.update_mem (X64.Semantics_s.eval_maddr (X64.Machine_s.OMem_m @lb3)
@x2)
@x1
@x2)
Tm_unit))))
 

:pattern ((X64.Semantics_s.update_operand_preserve_flags_ @x0
@x1
@x2))
:qid equation_X64.Semantics_s.update_operand_preserve_flags_))

:named equation_X64.Semantics_s.update_operand_preserve_flags_))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_operand'
;;; Fact-ids: Name X64.Semantics_s.update_operand'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(112,4-112,19); use=X64.Semantics_s.fst(112,4-112,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.update_operand_ @x0
@x1
@x2
@x3)
(X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok (X64.Semantics_s.update_operand_preserve_flags_ @x0
@x2
@x3))
(X64.Semantics_s.__proj__Mkstate__item__regs (X64.Semantics_s.update_operand_preserve_flags_ @x0
@x2
@x3))
(X64.Semantics_s.havoc @x3
@x1)
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Semantics_s.update_operand_preserve_flags_ @x0
@x2
@x3))))
 

:pattern ((X64.Semantics_s.update_operand_ @x0
@x1
@x2
@x3))
:qid equation_X64.Semantics_s.update_operand_))

:named equation_X64.Semantics_s.update_operand_))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_mem
;;; Fact-ids: Name X64.Semantics_s.update_mem; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(96,4-96,14); use=X64.Semantics_s.fst(96,4-96,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.update_mem @x0
@x1
@x2)
(X64.Semantics_s.Mkstate (X64.Semantics_s.__proj__Mkstate__item__ok @x2)
(X64.Semantics_s.__proj__Mkstate__item__regs @x2)
(X64.Semantics_s.__proj__Mkstate__item__flags @x2)
(FStar.Map.upd Prims.int
(X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.__proj__Mkstate__item__mem @x2)
@x0
@x1)))
 

:pattern ((X64.Semantics_s.update_mem @x0
@x1
@x2))
:qid equation_X64.Semantics_s.update_mem))

:named equation_X64.Semantics_s.update_mem))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_flags
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(197,4-197,16); use=X64.Semantics_s.fst(197,4-197,16)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.update_flags @x0)
(Tm_abs_2c81f4a4818392ccafc16cff9167306e @x0))
 

:pattern ((X64.Semantics_s.update_flags @x0))
:qid equation_X64.Semantics_s.update_flags))

:named equation_X64.Semantics_s.update_flags))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.update_cf
;;; Fact-ids: Name X64.Semantics_s.update_cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(121,4-121,13); use=X64.Semantics_s.fst(121,4-121,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.update_cf @x0
@x1)
(let ((@lb2 @x1))
(ite (= @lb2
(BoxBool true))
(let ((@lb3 (Prims.op_Negation (X64.Semantics_s.cf @x0))))
(ite (= @lb3
(BoxBool true))
(FStar.UInt64.add @x0
(FStar.UInt64.uint_to_t (BoxInt 1)))
@x0))
(let ((@lb3 (X64.Semantics_s.cf @x0)))
(ite (= @lb3
(BoxBool true))
(FStar.UInt64.sub @x0
(FStar.UInt64.uint_to_t (BoxInt 1)))
@x0)))))
 

:pattern ((X64.Semantics_s.update_cf @x0
@x1))
:qid equation_X64.Semantics_s.update_cf))

:named equation_X64.Semantics_s.update_cf))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.sub_mod64
;;; Fact-ids: Name X64.Semantics_s.sub_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(290,4-290,13); use=X64.Semantics_s.fst(290,4-290,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.sub_mod64 @x0
@x1)
(FStar.UInt64.sub_mod @x0
@x1))
 

:pattern ((X64.Semantics_s.sub_mod64 @x0
@x1))
:qid equation_X64.Semantics_s.sub_mod64))

:named equation_X64.Semantics_s.sub_mod64))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.st
;;; Fact-ids: Name X64.Semantics_s.st; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,4-135,6); use=X64.Semantics_s.fst(135,4-135,6)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.st @x0)
(Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x0))
 

:pattern ((X64.Semantics_s.st @x0))
:qid equation_X64.Semantics_s.st))

:named equation_X64.Semantics_s.st))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.shift_right
;;; Fact-ids: Name X64.Semantics_s.shift_right; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(240,4-240,15); use=X64.Semantics_s.fst(240,4-240,15)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.shift_right @x0
@x1)
(let ((@lb2 (Prims.op_AmpAmp (FStar.UInt.fits @x0
(BoxInt 64))
(Prims.op_GreaterThanOrEqual @x1
(BoxInt 0)))))
(ite (= @lb2
(BoxBool true))
(FStar.UInt.shift_right (BoxInt 64)
@x0
@x1)
(BoxInt 0))))
 

:pattern ((X64.Semantics_s.shift_right @x0
@x1))
:qid equation_X64.Semantics_s.shift_right))

:named equation_X64.Semantics_s.shift_right))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.shift_left
;;; Fact-ids: Name X64.Semantics_s.shift_left; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(255,4-255,14); use=X64.Semantics_s.fst(255,4-255,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.shift_left @x0
@x1)
(let ((@lb2 (Prims.op_AmpAmp (FStar.UInt.fits @x0
(BoxInt 64))
(Prims.op_GreaterThanOrEqual @x1
(BoxInt 0)))))
(ite (= @lb2
(BoxBool true))
(FStar.UInt.shift_left (BoxInt 64)
@x0
@x1)
(BoxInt 0))))
 

:pattern ((X64.Semantics_s.shift_left @x0
@x1))
:qid equation_X64.Semantics_s.shift_left))

:named equation_X64.Semantics_s.shift_left))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.mul_mod64
;;; Fact-ids: Name X64.Semantics_s.mul_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(295,4-295,13); use=X64.Semantics_s.fst(295,4-295,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.mul_mod64 @x0
@x1)
(FStar.UInt64.mul_mod @x0
@x1))
 

:pattern ((X64.Semantics_s.mul_mod64 @x0
@x1))
:qid equation_X64.Semantics_s.mul_mod64))

:named equation_X64.Semantics_s.mul_mod64))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.mul_div64
;;; Fact-ids: Name X64.Semantics_s.mul_div64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(301,4-301,13); use=X64.Semantics_s.fst(301,4-301,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.mul_div64 @x0
@x1)
(Prims.admit (X64.Semantics_s.uint64 Dummy_value)
Tm_unit))
 

:pattern ((X64.Semantics_s.mul_div64 @x0
@x1))
:qid equation_X64.Semantics_s.mul_div64))

:named equation_X64.Semantics_s.mul_div64))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.logxor
;;; Fact-ids: Name X64.Semantics_s.logxor; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(212,4-212,10); use=X64.Semantics_s.fst(212,4-212,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.logxor @x0
@x1)
(let ((@lb2 (Prims.op_AmpAmp (FStar.UInt.fits @x0
(BoxInt 64))
(FStar.UInt.fits @x1
(BoxInt 64)))))
(ite (= @lb2
(BoxBool true))
(FStar.UInt.logxor (BoxInt 64)
@x0
@x1)
(BoxInt 0))))
 

:pattern ((X64.Semantics_s.logxor @x0
@x1))
:qid equation_X64.Semantics_s.logxor))

:named equation_X64.Semantics_s.logxor))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.logand
;;; Fact-ids: Name X64.Semantics_s.logand; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(226,4-226,10); use=X64.Semantics_s.fst(226,4-226,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.logand @x0
@x1)
(let ((@lb2 (Prims.op_AmpAmp (FStar.UInt.fits @x0
(BoxInt 64))
(FStar.UInt.fits @x1
(BoxInt 64)))))
(ite (= @lb2
(BoxBool true))
(FStar.UInt.logand (BoxInt 64)
@x0
@x1)
(BoxInt 0))))
 

:pattern ((X64.Semantics_s.logand @x0
@x1))
:qid equation_X64.Semantics_s.logand))

:named equation_X64.Semantics_s.logand))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.eval_ins
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(303,4-303,12); use=X64.Semantics_s.fst(303,4-303,12)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.eval_ins @x0)
(Tm_abs_10261c42e10a9394c7f8c711bf81e6e4 @x0))
 

:pattern ((X64.Semantics_s.eval_ins @x0))
:qid equation_X64.Semantics_s.eval_ins))

:named equation_X64.Semantics_s.eval_ins))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.codes
;;; Fact-ids: Name X64.Semantics_s.codes; Namespace X64.Semantics_s
(assert (! (= X64.Semantics_s.codes
(Prims.list X64.Semantics_s.code))
:named equation_X64.Semantics_s.codes))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.code
;;; Fact-ids: Name X64.Semantics_s.code; Namespace X64.Semantics_s
(assert (! (= X64.Semantics_s.code
(X64.Machine_s.precode X64.Semantics_s.ins
X64.Semantics_s.ocmp))
:named equation_X64.Semantics_s.code))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.cf
;;; Fact-ids: Name X64.Semantics_s.cf; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(118,4-118,6); use=X64.Semantics_s.fst(118,4-118,6)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.cf @x0)
(Prims.op_Equality Prims.int
(BoxInt (_mod (BoxInt_proj_0 (FStar.UInt64.v @x0))
2))
(BoxInt 1)))
 

:pattern ((X64.Semantics_s.cf @x0))
:qid equation_X64.Semantics_s.cf))

:named equation_X64.Semantics_s.cf))
;;;;;;;;;;;;;;;;Equation for X64.Semantics_s.add_mod64
;;; Fact-ids: Name X64.Semantics_s.add_mod64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(285,4-285,13); use=X64.Semantics_s.fst(285,4-285,13)
(forall ((@x0 Term) (@x1 Term))
 (! (= (X64.Semantics_s.add_mod64 @x0
@x1)
(FStar.UInt64.add_mod @x0
@x1))
 

:pattern ((X64.Semantics_s.add_mod64 @x0
@x1))
:qid equation_X64.Semantics_s.add_mod64))

:named equation_X64.Semantics_s.add_mod64))
;;;;;;;;;;;;;;;;Equation for X64.Machine_s.dst_op
;;; Fact-ids: Name X64.Machine_s.dst_op; Namespace X64.Machine_s
(assert (! (= X64.Machine_s.dst_op
Tm_refine_e85c4468bd6fa895770a44e5ae1526dc)
:named equation_X64.Machine_s.dst_op))
;;;;;;;;;;;;;;;;Equation for Prims.prop
;;; Fact-ids: Name Prims.prop; Namespace Prims
(assert (! (= Prims.prop
Tm_refine_73f210ca6e0061ed4a3150f69b8f33bf)
:named equation_Prims.prop))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.zero
;;; Fact-ids: Name FStar.UInt.zero; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(58,4-58,8); use=FStar.UInt.fsti(58,4-58,8)
(forall ((@x0 Term))
 (! (= (FStar.UInt.zero @x0)
(BoxInt 0))
 

:pattern ((FStar.UInt.zero @x0))
:qid equation_FStar.UInt.zero))

:named equation_FStar.UInt.zero))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.sub_mod
;;; Fact-ids: Name FStar.UInt.sub_mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(113,4-113,11); use=FStar.UInt.fsti(113,4-113,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.sub_mod @x0
@x1
@x2)
(Prims.op_Modulus (Prims.op_Subtraction @x1
@x2)
(Prims.pow2 @x0)))
 

:pattern ((FStar.UInt.sub_mod @x0
@x1
@x2))
:qid equation_FStar.UInt.sub_mod))

:named equation_FStar.UInt.sub_mod))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.shift_right
;;; Fact-ids: Name FStar.UInt.shift_right; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(451,4-451,15); use=FStar.UInt.fsti(451,4-451,15)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.shift_right @x0
@x1
@x2)
(FStar.UInt.from_vec @x0
(FStar.BitVector.shift_right_vec @x0
(FStar.UInt.to_vec @x0
@x1)
@x2)))
 

:pattern ((FStar.UInt.shift_right @x0
@x1
@x2))
:qid equation_FStar.UInt.shift_right))

:named equation_FStar.UInt.shift_right))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.shift_left
;;; Fact-ids: Name FStar.UInt.shift_left; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(448,4-448,14); use=FStar.UInt.fsti(448,4-448,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.shift_left @x0
@x1
@x2)
(FStar.UInt.from_vec @x0
(FStar.BitVector.shift_left_vec @x0
(FStar.UInt.to_vec @x0
@x1)
@x2)))
 

:pattern ((FStar.UInt.shift_left @x0
@x1
@x2))
:qid equation_FStar.UInt.shift_left))

:named equation_FStar.UInt.shift_left))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.mul_mod
;;; Fact-ids: Name FStar.UInt.mul_mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(127,4-127,11); use=FStar.UInt.fsti(127,4-127,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.mul_mod @x0
@x1
@x2)
(Prims.op_Modulus (Prims.op_Multiply @x1
@x2)
(Prims.pow2 @x0)))
 

:pattern ((FStar.UInt.mul_mod @x0
@x1
@x2))
:qid equation_FStar.UInt.mul_mod))

:named equation_FStar.UInt.mul_mod))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.logxor
;;; Fact-ids: Name FStar.UInt.logxor; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(302,4-302,10); use=FStar.UInt.fsti(302,4-302,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.logxor @x0
@x1
@x2)
(FStar.UInt.from_vec @x0
(FStar.BitVector.logxor_vec @x0
(FStar.UInt.to_vec @x0
@x1)
(FStar.UInt.to_vec @x0
@x2))))
 

:pattern ((FStar.UInt.logxor @x0
@x1
@x2))
:qid equation_FStar.UInt.logxor))

:named equation_FStar.UInt.logxor))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.logand
;;; Fact-ids: Name FStar.UInt.logand; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(299,4-299,10); use=FStar.UInt.fsti(299,4-299,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.logand @x0
@x1
@x2)
(FStar.UInt.from_vec @x0
(FStar.BitVector.logand_vec @x0
(FStar.UInt.to_vec @x0
@x1)
(FStar.UInt.to_vec @x0
@x2))))
 

:pattern ((FStar.UInt.logand @x0
@x1
@x2))
:qid equation_FStar.UInt.logand))

:named equation_FStar.UInt.logand))
;;;;;;;;;;;;;;;;Equation for FStar.UInt.add_mod
;;; Fact-ids: Name FStar.UInt.add_mod; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(99,4-99,11); use=FStar.UInt.fsti(99,4-99,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.add_mod @x0
@x1
@x2)
(Prims.op_Modulus (Prims.op_Addition @x1
@x2)
(Prims.pow2 @x0)))
 

:pattern ((FStar.UInt.add_mod @x0
@x1
@x2))
:qid equation_FStar.UInt.add_mod))

:named equation_FStar.UInt.add_mod))
;;;;;;;;;;;;;;;;Equation for FStar.Pervasives.Native.snd
;;; Fact-ids: Name FStar.Pervasives.Native.snd; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(63,4-63,7); use=FStar.Pervasives.Native.fst(63,4-63,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.Pervasives.Native.snd @x0
@x1
@x2)
(FStar.Pervasives.Native.__proj__Mktuple2__item___2 @x0
@x1
@x2))
 

:pattern ((FStar.Pervasives.Native.snd @x0
@x1
@x2))
:qid equation_FStar.Pervasives.Native.snd))

:named equation_FStar.Pervasives.Native.snd))
;;;;;;;;;;;;;;;;Equation for FStar.BitVector.zero_vec
;;; Fact-ids: Name FStar.BitVector.zero_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(37,4-37,12); use=FStar.BitVector.fsti(37,4-37,12)
(forall ((@x0 Term))
 (! (= (FStar.BitVector.zero_vec @x0)
(FStar.Seq.Base.create Prims.bool
@x0
(BoxBool false)))
 

:pattern ((FStar.BitVector.zero_vec @x0))
:qid equation_FStar.BitVector.zero_vec))

:named equation_FStar.BitVector.zero_vec))
;;;;;;;;;;;;;;;;Equation for FStar.BitVector.shift_right_vec
;;; Fact-ids: Name FStar.BitVector.shift_right_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(147,4-147,19); use=FStar.BitVector.fsti(147,4-147,19)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.shift_right_vec @x0
@x1
@x2)
(let ((@lb3 (Prims.op_GreaterThanOrEqual @x2
@x0)))
(ite (= @lb3
(BoxBool true))
(FStar.BitVector.zero_vec @x0)
(let ((@lb4 (Prims.op_Equality Prims.int
@x2
(BoxInt 0))))
(ite (= @lb4
(BoxBool true))
@x1
(FStar.Seq.Base.append Prims.bool
(FStar.BitVector.zero_vec @x2)
(FStar.Seq.Base.slice Prims.bool
@x1
(BoxInt 0)
(Prims.op_Subtraction @x0
@x2))))))))
 

:pattern ((FStar.BitVector.shift_right_vec @x0
@x1
@x2))
:qid equation_FStar.BitVector.shift_right_vec))

:named equation_FStar.BitVector.shift_right_vec))
;;;;;;;;;;;;;;;;Equation for FStar.BitVector.shift_left_vec
;;; Fact-ids: Name FStar.BitVector.shift_left_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(133,4-133,18); use=FStar.BitVector.fsti(133,4-133,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.shift_left_vec @x0
@x1
@x2)
(let ((@lb3 (Prims.op_GreaterThanOrEqual @x2
@x0)))
(ite (= @lb3
(BoxBool true))
(FStar.BitVector.zero_vec @x0)
(let ((@lb4 (Prims.op_Equality Prims.int
@x2
(BoxInt 0))))
(ite (= @lb4
(BoxBool true))
@x1
(FStar.Seq.Base.append Prims.bool
(FStar.Seq.Base.slice Prims.bool
@x1
@x2
@x0)
(FStar.BitVector.zero_vec @x2)))))))
 

:pattern ((FStar.BitVector.shift_left_vec @x0
@x1
@x2))
:qid equation_FStar.BitVector.shift_left_vec))

:named equation_FStar.BitVector.shift_left_vec))
;;;;;;;;;;;;;;;;Equation for FStar.BitVector.bv_t
;;; Fact-ids: Name FStar.BitVector.bv_t; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(32,5-32,9); use=FStar.BitVector.fsti(32,5-32,9)
(forall ((@x0 Term))
 (! (= (FStar.BitVector.bv_t @x0)
(Tm_refine_e2d5d62a90ceed8a6faf9d20615f4e1e @x0))
 

:pattern ((FStar.BitVector.bv_t @x0))
:qid equation_FStar.BitVector.bv_t))

:named equation_FStar.BitVector.bv_t))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Xor64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Xor64 @x0)
(BoxBool (is-X64.Semantics_s.Xor64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Xor64 @x0))
:qid disc_equation_X64.Semantics_s.Xor64))

:named disc_equation_X64.Semantics_s.Xor64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Sub64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Sub64 @x0)
(BoxBool (is-X64.Semantics_s.Sub64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Sub64 @x0))
:qid disc_equation_X64.Semantics_s.Sub64))

:named disc_equation_X64.Semantics_s.Sub64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Shr64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Shr64 @x0)
(BoxBool (is-X64.Semantics_s.Shr64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Shr64 @x0))
:qid disc_equation_X64.Semantics_s.Shr64))

:named disc_equation_X64.Semantics_s.Shr64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Shl64 @x0)
(BoxBool (is-X64.Semantics_s.Shl64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Shl64 @x0))
:qid disc_equation_X64.Semantics_s.Shl64))

:named disc_equation_X64.Semantics_s.Shl64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Mul64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Mul64 @x0)
(BoxBool (is-X64.Semantics_s.Mul64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Mul64 @x0))
:qid disc_equation_X64.Semantics_s.Mul64))

:named disc_equation_X64.Semantics_s.Mul64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Mov64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Mov64 @x0)
(BoxBool (is-X64.Semantics_s.Mov64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Mov64 @x0))
:qid disc_equation_X64.Semantics_s.Mov64))

:named disc_equation_X64.Semantics_s.Mov64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_IMul64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_IMul64 @x0)
(BoxBool (is-X64.Semantics_s.IMul64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_IMul64 @x0))
:qid disc_equation_X64.Semantics_s.IMul64))

:named disc_equation_X64.Semantics_s.IMul64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_And64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_And64 @x0)
(BoxBool (is-X64.Semantics_s.And64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_And64 @x0))
:qid disc_equation_X64.Semantics_s.And64))

:named disc_equation_X64.Semantics_s.And64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_AddLea64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_AddLea64 @x0)
(BoxBool (is-X64.Semantics_s.AddLea64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_AddLea64 @x0))
:qid disc_equation_X64.Semantics_s.AddLea64))

:named disc_equation_X64.Semantics_s.AddLea64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_AddCarry64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_AddCarry64 @x0)
(BoxBool (is-X64.Semantics_s.AddCarry64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_AddCarry64 @x0))
:qid disc_equation_X64.Semantics_s.AddCarry64))

:named disc_equation_X64.Semantics_s.AddCarry64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name X64.Semantics_s.uu___is_Add64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@x0 Term))
 (! (= (X64.Semantics_s.uu___is_Add64 @x0)
(BoxBool (is-X64.Semantics_s.Add64 @x0)))
 

:pattern ((X64.Semantics_s.uu___is_Add64 @x0))
:qid disc_equation_X64.Semantics_s.Add64))

:named disc_equation_X64.Semantics_s.Add64))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name Prims.uu___is_Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (Prims.uu___is_Cons @x0
@x1)
(BoxBool (is-Prims.Cons @x1)))
 

:pattern ((Prims.uu___is_Cons @x0
@x1))
:qid disc_equation_Prims.Cons))

:named disc_equation_Prims.Cons))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_Some @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.Some @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_Some @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.Some))

:named disc_equation_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Discriminator equation
;;; Fact-ids: Name FStar.Pervasives.Native.uu___is_None; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.Pervasives.Native.uu___is_None @x0
@x1)
(BoxBool (is-FStar.Pervasives.Native.None @x1)))
 

:pattern ((FStar.Pervasives.Native.uu___is_None @x0
@x1))
:qid disc_equation_FStar.Pervasives.Native.None))

:named disc_equation_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Prop-typing for X64.Vale.Lemmas_i.eval_code
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_code; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fsti(28,4-28,13); use=X64.Vale.Lemmas_i.fsti(28,4-28,13)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.code)
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))
(Valid (Prims.subtype_of (X64.Vale.Lemmas_i.eval_code @x0
@x1
@x2)
Prims.unit)))
 

:pattern ((Prims.subtype_of (X64.Vale.Lemmas_i.eval_code @x0
@x1
@x2)
Prims.unit))
:qid defn_equation_X64.Vale.Lemmas_i.eval_code))

:named defn_equation_X64.Vale.Lemmas_i.eval_code))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.Xor64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Xor64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Xor64@tok))

:named data_typing_intro_X64.Semantics_s.Xor64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.Sub64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Sub64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Sub64@tok))

:named data_typing_intro_X64.Semantics_s.Sub64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.Shr64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Shr64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Shr64@tok))

:named data_typing_intro_X64.Semantics_s.Shr64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.Shl64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Shl64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Shl64@tok))

:named data_typing_intro_X64.Semantics_s.Shl64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
X64.Machine_s.operand)
(HasTypeFuel @u0
(X64.Semantics_s.Mul64 @x1)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Mul64 @x1)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Mul64@tok))

:named data_typing_intro_X64.Semantics_s.Mul64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.Mov64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Mov64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Mov64@tok))

:named data_typing_intro_X64.Semantics_s.Mov64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.IMul64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.IMul64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.IMul64@tok))

:named data_typing_intro_X64.Semantics_s.IMul64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.And64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.And64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.And64@tok))

:named data_typing_intro_X64.Semantics_s.And64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.AddLea64@tok))

:named data_typing_intro_X64.Semantics_s.AddLea64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.AddCarry64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.AddCarry64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.AddCarry64@tok))

:named data_typing_intro_X64.Semantics_s.AddCarry64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand))
(HasTypeFuel @u0
(X64.Semantics_s.Add64 @x1
@x2)
X64.Semantics_s.ins))
 

:pattern ((HasTypeFuel @u0
(X64.Semantics_s.Add64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_typing_intro_X64.Semantics_s.Add64@tok))

:named data_typing_intro_X64.Semantics_s.Add64@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x1
@x2)))
(HasTypeFuel @u0
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.While@tok))

:named data_typing_intro_X64.Machine_s.While@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1))
(HasTypeFuel @u0
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.Ins@tok))

:named data_typing_intro_X64.Machine_s.Ins@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x2)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x1
@x2))
(HasTypeFuel @u0
@x5
(X64.Machine_s.precode @x1
@x2)))
(HasTypeFuel @u0
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.IfElse@tok))

:named data_typing_intro_X64.Machine_s.IfElse@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
(Prims.list (X64.Machine_s.precode @x1
@x2))))
(HasTypeFuel @u0
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x1
@x2)))
:qid data_typing_intro_X64.Machine_s.Block@tok))

:named data_typing_intro_X64.Machine_s.Block@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Nil @x1)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Nil@tok))

:named data_typing_intro_Prims.Nil@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1)
(HasTypeFuel @u0
@x3
(Prims.list @x1)))
(HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
 

:pattern ((HasTypeFuel @u0
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x1)))
:qid data_typing_intro_Prims.Cons@tok))

:named data_typing_intro_Prims.Cons@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
@x1))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.Some@tok))

:named data_typing_intro_FStar.Pervasives.Native.Some@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x1)))
:qid data_typing_intro_FStar.Pervasives.Native.None@tok))

:named data_typing_intro_FStar.Pervasives.Native.None@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x4
@x1)
(HasTypeFuel @u0
@x5
@x2)
(HasTypeFuel @u0
@x6
@x3))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x1
@x2
@x3)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple3@tok))
;;;;;;;;;;;;;;;;data constructor typing intro
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasTypeFuel @u0
@x1
Tm_type)
(HasTypeFuel @u0
@x2
Tm_type)
(HasTypeFuel @u0
@x3
@x1)
(HasTypeFuel @u0
@x4
@x2))
(HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
 

:pattern ((HasTypeFuel @u0
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x1
@x2)))
:qid data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))

:named data_typing_intro_FStar.Pervasives.Native.Mktuple2@tok))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Xor64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Xor64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Xor64))

:named data_elim_X64.Semantics_s.Xor64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Sub64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Sub64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Sub64))

:named data_elim_X64.Semantics_s.Sub64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shr64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shr64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Shr64))

:named data_elim_X64.Semantics_s.Shr64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shl64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Shl64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Shl64))

:named data_elim_X64.Semantics_s.Shl64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mul64 @x1)
X64.Semantics_s.ins)
(HasTypeFuel @u0
@x1
X64.Machine_s.operand))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mul64 @x1)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Mul64))

:named data_elim_X64.Semantics_s.Mul64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mov64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Mov64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Mov64))

:named data_elim_X64.Semantics_s.Mov64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.IMul64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.IMul64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.IMul64))

:named data_elim_X64.Semantics_s.IMul64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.And64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.And64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.And64))

:named data_elim_X64.Semantics_s.And64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)
(HasTypeFuel @u0
@x3
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddLea64 @x1
@x2
@x3)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.AddLea64))

:named data_elim_X64.Semantics_s.AddLea64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddCarry64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.AddCarry64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.AddCarry64))

:named data_elim_X64.Semantics_s.AddCarry64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Add64 @x1
@x2)
X64.Semantics_s.ins)
(and (HasTypeFuel @u0
@x1
X64.Machine_s.dst_op)
(HasTypeFuel @u0
@x2
X64.Machine_s.operand)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Semantics_s.Add64 @x1
@x2)
X64.Semantics_s.ins))
:qid data_elim_X64.Semantics_s.Add64))

:named data_elim_X64.Semantics_s.Add64))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x6)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x5
@x6))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.While @x1
@x2
@x3
@x4)
(X64.Machine_s.precode @x5
@x6)))
:qid data_elim_X64.Machine_s.While))

:named data_elim_X64.Machine_s.While))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
@x4)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Ins @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid data_elim_X64.Machine_s.Ins))

:named data_elim_X64.Machine_s.Ins))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7))
(and (HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x3
@x7)
(HasTypeFuel @u0
@x4
(X64.Machine_s.precode @x6
@x7))
(HasTypeFuel @u0
@x5
(X64.Machine_s.precode @x6
@x7))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.IfElse @x1
@x2
@x3
@x4
@x5)
(X64.Machine_s.precode @x6
@x7)))
:qid data_elim_X64.Machine_s.IfElse))

:named data_elim_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x3
(Prims.list (X64.Machine_s.precode @x4
@x5)))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(X64.Machine_s.Block @x1
@x2
@x3)
(X64.Machine_s.precode @x4
@x5)))
:qid data_elim_X64.Machine_s.Block))

:named data_elim_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Nil @x1)
(Prims.list @x2)))
:qid data_elim_Prims.Nil))

:named data_elim_Prims.Nil))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4))
(and (HasTypeFuel @u0
@x4
Tm_type)
(HasTypeFuel @u0
@x2
@x4)
(HasTypeFuel @u0
@x3
(Prims.list @x4))))
 

:pattern ((HasTypeFuel (SFuel @u0)
(Prims.Cons @x1
@x2
@x3)
(Prims.list @x4)))
:qid data_elim_Prims.Cons))

:named data_elim_Prims.Cons))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3))
(and (HasTypeFuel @u0
@x3
Tm_type)
(HasTypeFuel @u0
@x2
@x3)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Some @x1
@x2)
(FStar.Pervasives.Native.option @x3)))
:qid data_elim_FStar.Pervasives.Native.Some))

:named data_elim_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2))
(HasTypeFuel @u0
@x2
Tm_type))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.None @x1)
(FStar.Pervasives.Native.option @x2)))
:qid data_elim_FStar.Pervasives.Native.None))

:named data_elim_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term) (@x7 Term) (@x8 Term) (@x9 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9))
(and (HasTypeFuel @u0
@x7
Tm_type)
(HasTypeFuel @u0
@x8
Tm_type)
(HasTypeFuel @u0
@x9
Tm_type)
(HasTypeFuel @u0
@x4
@x7)
(HasTypeFuel @u0
@x5
@x8)
(HasTypeFuel @u0
@x6
@x9)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple3 @x1
@x2
@x3
@x4
@x5
@x6)
(FStar.Pervasives.Native.tuple3 @x7
@x8
@x9)))
:qid data_elim_FStar.Pervasives.Native.Mktuple3))

:named data_elim_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;data constructor typing elim
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (implies (HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6))
(and (HasTypeFuel @u0
@x5
Tm_type)
(HasTypeFuel @u0
@x6
Tm_type)
(HasTypeFuel @u0
@x3
@x5)
(HasTypeFuel @u0
@x4
@x6)))
 

:pattern ((HasTypeFuel (SFuel @u0)
(FStar.Pervasives.Native.Mktuple2 @x1
@x2
@x3
@x4)
(FStar.Pervasives.Native.tuple2 @x5
@x6)))
:qid data_elim_FStar.Pervasives.Native.Mktuple2))

:named data_elim_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! (= 111
(Term_constr_id X64.Semantics_s.ins))
:named constructor_distinct_X64.Semantics_s.ins))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(44,4-44,9); use=X64.Semantics_s.fst(44,4-44,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 152
(Term_constr_id (X64.Semantics_s.Xor64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.Xor64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.Xor64))

:named constructor_distinct_X64.Semantics_s.Xor64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(41,4-41,9); use=X64.Semantics_s.fst(41,4-41,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 137
(Term_constr_id (X64.Semantics_s.Sub64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.Sub64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.Sub64))

:named constructor_distinct_X64.Semantics_s.Sub64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(46,4-46,9); use=X64.Semantics_s.fst(46,4-46,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 162
(Term_constr_id (X64.Semantics_s.Shr64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.Shr64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.Shr64))

:named constructor_distinct_X64.Semantics_s.Shr64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(47,4-47,9); use=X64.Semantics_s.fst(47,4-47,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 167
(Term_constr_id (X64.Semantics_s.Shl64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.Shl64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.Shl64))

:named constructor_distinct_X64.Semantics_s.Shl64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(42,4-42,9); use=X64.Semantics_s.fst(42,4-42,9)
(forall ((@x0 Term))
 (! (= 142
(Term_constr_id (X64.Semantics_s.Mul64 @x0)))
 

:pattern ((X64.Semantics_s.Mul64 @x0))
:qid constructor_distinct_X64.Semantics_s.Mul64))

:named constructor_distinct_X64.Semantics_s.Mul64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(37,4-37,9); use=X64.Semantics_s.fst(37,4-37,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 117
(Term_constr_id (X64.Semantics_s.Mov64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.Mov64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.Mov64))

:named constructor_distinct_X64.Semantics_s.Mov64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(43,4-43,10); use=X64.Semantics_s.fst(43,4-43,10)
(forall ((@x0 Term) (@x1 Term))
 (! (= 147
(Term_constr_id (X64.Semantics_s.IMul64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.IMul64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.IMul64))

:named constructor_distinct_X64.Semantics_s.IMul64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(45,4-45,9); use=X64.Semantics_s.fst(45,4-45,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 157
(Term_constr_id (X64.Semantics_s.And64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.And64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.And64))

:named constructor_distinct_X64.Semantics_s.And64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(39,4-39,12); use=X64.Semantics_s.fst(39,4-39,12)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 127
(Term_constr_id (X64.Semantics_s.AddLea64 @x0
@x1
@x2)))
 

:pattern ((X64.Semantics_s.AddLea64 @x0
@x1
@x2))
:qid constructor_distinct_X64.Semantics_s.AddLea64))

:named constructor_distinct_X64.Semantics_s.AddLea64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(40,4-40,14); use=X64.Semantics_s.fst(40,4-40,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= 132
(Term_constr_id (X64.Semantics_s.AddCarry64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.AddCarry64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.AddCarry64))

:named constructor_distinct_X64.Semantics_s.AddCarry64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(38,4-38,9); use=X64.Semantics_s.fst(38,4-38,9)
(forall ((@x0 Term) (@x1 Term))
 (! (= 122
(Term_constr_id (X64.Semantics_s.Add64 @x0
@x1)))
 

:pattern ((X64.Semantics_s.Add64 @x0
@x1))
:qid constructor_distinct_X64.Semantics_s.Add64))

:named constructor_distinct_X64.Semantics_s.Add64))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@x1 Term))
 (! (= 268
(Term_constr_id (X64.Machine_s.precode @x0
@x1)))
 

:pattern ((X64.Machine_s.precode @x0
@x1))
:qid constructor_distinct_X64.Machine_s.precode))

:named constructor_distinct_X64.Machine_s.precode))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(63,4-63,9); use=X64.Machine_s.fst(63,4-63,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 290
(Term_constr_id (X64.Machine_s.While @x0
@x1
@x2
@x3)))
 

:pattern ((X64.Machine_s.While @x0
@x1
@x2
@x3))
:qid constructor_distinct_X64.Machine_s.While))

:named constructor_distinct_X64.Machine_s.While))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(60,4-60,7); use=X64.Machine_s.fst(60,4-60,7)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 275
(Term_constr_id (X64.Machine_s.Ins @x0
@x1
@x2)))
 

:pattern ((X64.Machine_s.Ins @x0
@x1
@x2))
:qid constructor_distinct_X64.Machine_s.Ins))

:named constructor_distinct_X64.Machine_s.Ins))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(62,4-62,10); use=X64.Machine_s.fst(62,4-62,10)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= 285
(Term_constr_id (X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4)))
 

:pattern ((X64.Machine_s.IfElse @x0
@x1
@x2
@x3
@x4))
:qid constructor_distinct_X64.Machine_s.IfElse))

:named constructor_distinct_X64.Machine_s.IfElse))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(61,4-61,9); use=X64.Machine_s.fst(61,4-61,9)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 280
(Term_constr_id (X64.Machine_s.Block @x0
@x1
@x2)))
 

:pattern ((X64.Machine_s.Block @x0
@x1
@x2))
:qid constructor_distinct_X64.Machine_s.Block))

:named constructor_distinct_X64.Machine_s.Block))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term))
 (! (= 318
(Term_constr_id (Prims.list @x0)))
 

:pattern ((Prims.list @x0))
:qid constructor_distinct_Prims.list))

:named constructor_distinct_Prims.list))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(615,4-615,7); use=Prims.fst(615,4-615,7)
(forall ((@x0 Term))
 (! (= 325
(Term_constr_id (Prims.Nil @x0)))
 

:pattern ((Prims.Nil @x0))
:qid constructor_distinct_Prims.Nil))

:named constructor_distinct_Prims.Nil))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(616,4-616,8); use=Prims.fst(616,4-616,8)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 330
(Term_constr_id (Prims.Cons @x0
@x1
@x2)))
 

:pattern ((Prims.Cons @x0
@x1
@x2))
:qid constructor_distinct_Prims.Cons))

:named constructor_distinct_Prims.Cons))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term))
 (! (= 103
(Term_constr_id (FStar.Seq.Base.seq @x0)))
 

:pattern ((FStar.Seq.Base.seq @x0))
:qid constructor_distinct_FStar.Seq.Base.seq))

:named constructor_distinct_FStar.Seq.Base.seq))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= 146
(Term_constr_id (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
 

:pattern ((FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))
:qid constructor_distinct_FStar.Pervasives.Native.tuple3))

:named constructor_distinct_FStar.Pervasives.Native.tuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@x1 Term))
 (! (= 125
(Term_constr_id (FStar.Pervasives.Native.tuple2 @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.tuple2 @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.tuple2))

:named constructor_distinct_FStar.Pervasives.Native.tuple2))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term))
 (! (= 101
(Term_constr_id (FStar.Pervasives.Native.option @x0)))
 

:pattern ((FStar.Pervasives.Native.option @x0))
:qid constructor_distinct_FStar.Pervasives.Native.option))

:named constructor_distinct_FStar.Pervasives.Native.option))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(33,4-33,8); use=FStar.Pervasives.Native.fst(33,4-33,8)
(forall ((@x0 Term) (@x1 Term))
 (! (= 113
(Term_constr_id (FStar.Pervasives.Native.Some @x0
@x1)))
 

:pattern ((FStar.Pervasives.Native.Some @x0
@x1))
:qid constructor_distinct_FStar.Pervasives.Native.Some))

:named constructor_distinct_FStar.Pervasives.Native.Some))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(32,4-32,8); use=FStar.Pervasives.Native.fst(32,4-32,8)
(forall ((@x0 Term))
 (! (= 108
(Term_constr_id (FStar.Pervasives.Native.None @x0)))
 

:pattern ((FStar.Pervasives.Native.None @x0))
:qid constructor_distinct_FStar.Pervasives.Native.None))

:named constructor_distinct_FStar.Pervasives.Native.None))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,25-65,33); use=FStar.Pervasives.Native.fst(65,25-65,33)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (= 153
(Term_constr_id (FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5)))
 

:pattern ((FStar.Pervasives.Native.Mktuple3 @x0
@x1
@x2
@x3
@x4
@x5))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple3))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple3))
;;;;;;;;;;;;;;;;Constructor distinct
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,22-59,30); use=FStar.Pervasives.Native.fst(59,22-59,30)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= 132
(Term_constr_id (FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3)))
 

:pattern ((FStar.Pervasives.Native.Mktuple2 @x0
@x1
@x2
@x3))
:qid constructor_distinct_FStar.Pervasives.Native.Mktuple2))

:named constructor_distinct_FStar.Pervasives.Native.Mktuple2))
;;;;;;;;;;;;;;;;Assumption: X64.Semantics_s.ins__uu___haseq
;;; Fact-ids: Name X64.Semantics_s.ins__uu___haseq; Namespace X64.Semantics_s
(assert (! (Valid (Prims.hasEq X64.Semantics_s.ins))
:named assumption_X64.Semantics_s.ins__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: X64.Machine_s.precode__uu___haseq
;;; Fact-ids: Name X64.Machine_s.precode__uu___haseq; Namespace X64.Machine_s
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (X64.Machine_s.precode @x0
@x1))))
 

:pattern ((Prims.hasEq (X64.Machine_s.precode @x0
@x1)))
:qid assumption_X64.Machine_s.precode__uu___haseq))
:named assumption_X64.Machine_s.precode__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: Prims.list__uu___haseq
;;; Fact-ids: Name Prims.list__uu___haseq; Namespace Prims
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (Prims.list @x0))))
 

:pattern ((Prims.hasEq (Prims.list @x0)))
:qid assumption_Prims.list__uu___haseq))
:named assumption_Prims.list__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple3__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(HasType @x2
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1))
(Valid (Prims.hasEq @x2)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple3 @x0
@x1
@x2)))
:qid assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple3__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.tuple2__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
Tm_type)
(HasType @x1
Tm_type)
(Valid (Prims.hasEq @x0))
(Valid (Prims.hasEq @x1)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.tuple2 @x0
@x1)))
:qid assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
:named assumption_FStar.Pervasives.Native.tuple2__uu___haseq))
;;;;;;;;;;;;;;;;Assumption: FStar.Pervasives.Native.option__uu___haseq
;;; Fact-ids: Name FStar.Pervasives.Native.option__uu___haseq; Namespace FStar.Pervasives.Native
(assert (! (forall ((@x0 Term))
 (! (implies (and (HasType @x0
Tm_type)
(Valid (Prims.hasEq @x0)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.option @x0))))
 

:pattern ((Prims.hasEq (FStar.Pervasives.Native.option @x0)))
:qid assumption_FStar.Pervasives.Native.option__uu___haseq))
:named assumption_FStar.Pervasives.Native.option__uu___haseq))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Semantics_s.ins; Namespace X64.Semantics_s; Name X64.Semantics_s.Mov64; Namespace X64.Semantics_s; Name X64.Semantics_s.Add64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddLea64; Namespace X64.Semantics_s; Name X64.Semantics_s.AddCarry64; Namespace X64.Semantics_s; Name X64.Semantics_s.Sub64; Namespace X64.Semantics_s; Name X64.Semantics_s.Mul64; Namespace X64.Semantics_s; Name X64.Semantics_s.IMul64; Namespace X64.Semantics_s; Name X64.Semantics_s.Xor64; Namespace X64.Semantics_s; Name X64.Semantics_s.And64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shr64; Namespace X64.Semantics_s; Name X64.Semantics_s.Shl64; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(36,5-36,8); use=X64.Semantics_s.fst(36,5-36,8)
(forall ((@x0 Term) (@u1 Fuel))
 (! (implies (HasTypeFuel @u1
@x0
X64.Semantics_s.ins)
(= X64.Semantics_s.ins
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
X64.Semantics_s.ins))
:qid X64.Semantics_s_pretyping_79122f818494439bdd891d4bc4253119))

:named X64.Semantics_s_pretyping_79122f818494439bdd891d4bc4253119))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(197,28-197,44); use=X64.Semantics_s.fst(197,28-197,44)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))
:qid X64.Semantics_s_pre_typing_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))

:named X64.Semantics_s_pre_typing_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(193,18-193,42); use=X64.Semantics_s.fst(193,18-193,42)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_86a2ece66c8a4690fde39fd480d1a750)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))
:qid X64.Semantics_s_pre_typing_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))

:named X64.Semantics_s_pre_typing_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(303,18-303,32); use=X64.Semantics_s.fst(303,18-303,32)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))
:qid X64.Semantics_s_pre_typing_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))

:named X64.Semantics_s_pre_typing_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(94,27-94,30); use=X64.Semantics_s.fst(94,20-94,26)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_645426269fc615b2b182027e55cc5771)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_645426269fc615b2b182027e55cc5771))
:qid X64.Semantics_s_pre_typing_Tm_arrow_645426269fc615b2b182027e55cc5771))

:named X64.Semantics_s_pre_typing_Tm_arrow_645426269fc615b2b182027e55cc5771))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.st; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (implies (HasTypeFuel @u0
@x1
(Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x2))
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x2)))
:qid X64.Semantics_s_pre_typing_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4))

:named X64.Semantics_s_pre_typing_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name X64.Semantics_s.set; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))
:qid X64.Semantics_s_pre_typing_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))

:named X64.Semantics_s_pre_typing_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd
;;; Fact-ids: Name X64.Semantics_s.update_flags; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(197,28-197,44); use=X64.Semantics_s.fst(197,28-197,44)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd)
(and 
;; def=X64.Semantics_s.fst(197,28-197,44); use=X64.Semantics_s.fst(197,28-197,44)
(forall ((@x1 Term))
 (! (implies (HasType @x1
(X64.Semantics_s.uint64 Dummy_value))
(HasType (ApplyTT @x0
@x1)
(X64.Semantics_s.st Prims.unit)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))
:qid X64.Semantics_s_interpretation_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))

:named X64.Semantics_s_interpretation_Tm_arrow_d55005f5e4c98dc2a582b0cbb5a803fd))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750
;;; Fact-ids: Name X64.Semantics_s.update_reg; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(193,18-193,42); use=X64.Semantics_s.fst(193,18-193,42)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_86a2ece66c8a4690fde39fd480d1a750)
(and 
;; def=X64.Semantics_s.fst(193,18-193,42); use=X64.Semantics_s.fst(193,18-193,42)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
X64.Machine_s.reg)
(HasType @x2
(X64.Semantics_s.uint64 Dummy_value)))
(HasType (ApplyTT (ApplyTT @x0
@x1)
@x2)
(X64.Semantics_s.st Prims.unit)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid X64.Semantics_s_interpretation_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750.1))

(IsTotFun @x0)

;; def=X64.Semantics_s.fst(193,18-193,42); use=X64.Semantics_s.fst(193,18-193,42)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750.2))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))
:qid X64.Semantics_s_interpretation_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))

:named X64.Semantics_s_interpretation_Tm_arrow_86a2ece66c8a4690fde39fd480d1a750))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(303,18-303,32); use=X64.Semantics_s.fst(303,18-303,32)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff)
(and 
;; def=X64.Semantics_s.fst(303,18-303,32); use=X64.Semantics_s.fst(303,18-303,32)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Semantics_s.ins)
(HasType (ApplyTT @x0
@x1)
(X64.Semantics_s.st Prims.unit)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))
:qid X64.Semantics_s_interpretation_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))

:named X64.Semantics_s_interpretation_Tm_arrow_6a8707fb618f4f9581d4d2aaf34223ff))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_645426269fc615b2b182027e55cc5771
;;; Fact-ids: Name X64.Semantics_s.update_reg'; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(94,27-94,30); use=X64.Semantics_s.fst(94,20-94,26)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_645426269fc615b2b182027e55cc5771)
(and 
;; def=X64.Semantics_s.fst(94,27-94,30); use=X64.Semantics_s.fst(94,20-94,26)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Machine_s.reg)
(HasType (ApplyTT @x0
@x1)
(X64.Semantics_s.uint64 Dummy_value)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_645426269fc615b2b182027e55cc5771.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_645426269fc615b2b182027e55cc5771))
:qid X64.Semantics_s_interpretation_Tm_arrow_645426269fc615b2b182027e55cc5771))

:named X64.Semantics_s_interpretation_Tm_arrow_645426269fc615b2b182027e55cc5771))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4
;;; Fact-ids: Name X64.Semantics_s.st; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@x0 Term) (@x1 Term))
 (! (iff (HasTypeZ @x0
(Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x1))
(and 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@x2 Term))
 (! (implies (HasType @x2
X64.Semantics_s.state)
(HasType (ApplyTT @x0
@x2)
(FStar.Pervasives.Native.tuple2 @x1
X64.Semantics_s.state)))
 

:pattern ((ApplyTT @x0
@x2))
:qid X64.Semantics_s_interpretation_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
(Tm_arrow_609ab49ade451d3e7b1162e976ede8d4 @x1)))
:qid X64.Semantics_s_interpretation_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4))

:named X64.Semantics_s_interpretation_Tm_arrow_609ab49ade451d3e7b1162e976ede8d4))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea
;;; Fact-ids: Name X64.Semantics_s.set; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea)
(and 
;; def=X64.Semantics_s.fst(135,18-135,36); use=X64.Semantics_s.fst(135,18-135,36)
(forall ((@x1 Term))
 (! (implies (HasType @x1
X64.Semantics_s.state)
(HasType (ApplyTT @x0
@x1)
(FStar.Pervasives.Native.tuple2 Prims.unit
X64.Semantics_s.state)))
 

:pattern ((ApplyTT @x0
@x1))
:qid X64.Semantics_s_interpretation_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea.1))

(IsTotFun @x0)))
 

:pattern ((HasTypeZ @x0
Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))
:qid X64.Semantics_s_interpretation_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))

:named X64.Semantics_s_interpretation_Tm_arrow_025dbaceb4b862aa04a44e930c7828ea))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name X64.Machine_s.precode; Namespace X64.Machine_s; Name X64.Machine_s.Ins; Namespace X64.Machine_s; Name X64.Machine_s.Block; Namespace X64.Machine_s; Name X64.Machine_s.IfElse; Namespace X64.Machine_s; Name X64.Machine_s.While; Namespace X64.Machine_s
(assert (! 
;; def=X64.Machine_s.fst(59,5-59,12); use=X64.Machine_s.fst(59,5-59,12)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(X64.Machine_s.precode @x2
@x3))
(= (X64.Machine_s.precode @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(X64.Machine_s.precode @x2
@x3)))
:qid X64.Machine_s_pretyping_4fe0207725d630b675b9df5323836271))

:named X64.Machine_s_pretyping_4fe0207725d630b675b9df5323836271))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name Prims.list; Namespace Prims; Name Prims.Nil; Namespace Prims; Name Prims.Cons; Namespace Prims
(assert (! 
;; def=Prims.fst(614,5-614,9); use=Prims.fst(614,5-614,9)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(Prims.list @x2))
(= (Prims.list @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(Prims.list @x2)))
:qid Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))

:named Prims_pretyping_3862c4e8ff39bfc3871b6a47e7ff5b2e))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Seq.Base.seq; Namespace FStar.Seq.Base
(assert (! 
;; def=FStar.Seq.Base.fsti(23,8-23,11); use=FStar.Seq.Base.fsti(23,8-23,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Seq.Base.seq @x2))
(= (FStar.Seq.Base.seq @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Seq.Base.seq @x2)))
:qid FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4))

:named FStar.Seq.Base_pretyping_7efa52b424e80c83ad68a652aa3561e4))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.option; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.None; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Some; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(31,5-31,11); use=FStar.Pervasives.Native.fst(31,5-31,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2))
(= (FStar.Pervasives.Native.option @x2)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.option @x2)))
:qid FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))

:named FStar.Pervasives.Native_pretyping_b53dbd183c526bc5d0f20d7b966ae125))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple2; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple2; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(59,5-59,11); use=FStar.Pervasives.Native.fst(59,5-59,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3))
(= (FStar.Pervasives.Native.tuple2 @x2
@x3)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple2 @x2
@x3)))
:qid FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))

:named FStar.Pervasives.Native_pretyping_4894c30cf477acf9a27e7a844279eb08))
;;;;;;;;;;;;;;;;pretyping
;;; Fact-ids: Name FStar.Pervasives.Native.tuple3; Namespace FStar.Pervasives.Native; Name FStar.Pervasives.Native.Mktuple3; Namespace FStar.Pervasives.Native
(assert (! 
;; def=FStar.Pervasives.Native.fst(65,5-65,11); use=FStar.Pervasives.Native.fst(65,5-65,11)
(forall ((@x0 Term) (@u1 Fuel) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4))
(= (FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)
(PreType @x0)))
 

:pattern ((HasTypeFuel @u1
@x0
(FStar.Pervasives.Native.tuple3 @x2
@x3
@x4)))
:qid FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))

:named FStar.Pervasives.Native_pretyping_3c3cf72e1bf7b1d6f8b0873a4feb6ec5))
;;;;;;;;;;;;;;;;pre-typing for functions
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@u0 Fuel) (@x1 Term))
 (! (implies (HasTypeFuel @u0
@x1
Tm_arrow_b19283e90b47034162373413c6a19933)
(is-Tm_arrow (PreType @x1)))
 

:pattern ((HasTypeFuel @u0
@x1
Tm_arrow_b19283e90b47034162373413c6a19933))
:qid FStar.Map_pre_typing_Tm_arrow_b19283e90b47034162373413c6a19933))

:named FStar.Map_pre_typing_Tm_arrow_b19283e90b47034162373413c6a19933))
;;;;;;;;;;;;;;;;interpretation_Tm_arrow_b19283e90b47034162373413c6a19933
;;; Fact-ids: Name FStar.Map.upd; Namespace FStar.Map
(assert (! 
;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x0 Term))
 (! (iff (HasTypeZ @x0
Tm_arrow_b19283e90b47034162373413c6a19933)
(and 
;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Map.t @x1
@x2))
(HasType @x4
@x1)
(HasType @x5
@x2))
(HasType (ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5)
(FStar.Map.t @x1
@x2)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)
@x5))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.1))

(IsTotFun @x0)

;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term))
 (! (implies (HasType @x1
Prims.eqtype)
(IsTotFun (ApplyTT @x0
@x1)))
 

:pattern ((ApplyTT @x0
@x1))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.2))


;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type))
(IsTotFun (ApplyTT (ApplyTT @x0
@x1)
@x2)))
 

:pattern ((ApplyTT (ApplyTT @x0
@x1)
@x2))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.3))


;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term) (@x3 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Map.t @x1
@x2)))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.4))


;; def=FStar.Map.fsti(42,10-42,87); use=FStar.Map.fsti(42,14-42,87)
(forall ((@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x1
Prims.eqtype)
(HasType @x2
Tm_type)
(HasType @x3
(FStar.Map.t @x1
@x2))
(HasType @x4
@x1))
(IsTotFun (ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4)))
 

:pattern ((ApplyTT (ApplyTT (ApplyTT (ApplyTT @x0
@x1)
@x2)
@x3)
@x4))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933.5))
))
 

:pattern ((HasTypeZ @x0
Tm_arrow_b19283e90b47034162373413c6a19933))
:qid FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933))

:named FStar.Map_interpretation_Tm_arrow_b19283e90b47034162373413c6a19933))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Semantics_s.eval_ins@tok))
:named @kick_partial_app_d4046149528f7da00dff8e30d4cdada2))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Semantics_s.op_String_Assignment; Namespace X64.Semantics_s
(assert (! (Valid (ApplyTT __uu__PartialApp
FStar.Map.upd@tok))
:named @kick_partial_app_8a7f7b4aae27e82e9b0c2aa043fb2952))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Semantics_s.update_reg@tok))
:named @kick_partial_app_55b250462a534483b5d502eff53326b1))
;;;;;;;;;;;;;;;;kick_partial_app
;;; Fact-ids: Name X64.Semantics_s.eval_ins; Namespace X64.Semantics_s
(assert (! (Valid (ApplyTT __uu__PartialApp
X64.Semantics_s.update_flags@tok))
:named @kick_partial_app_1acf135a72825c205532fe0ac6dc1346))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(388,4-388,14); use=X64.Semantics_s.fst(388,4-388,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Semantics_s.eval_while.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4)
(X64.Semantics_s.eval_while.fuel_instrumented ZFuel
@x1
@x2
@x3
@x4))
 

:pattern ((X64.Semantics_s.eval_while.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3
@x4))
:qid @fuel_irrelevance_X64.Semantics_s.eval_while.fuel_instrumented))

:named @fuel_irrelevance_X64.Semantics_s.eval_while.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(381,4-381,14); use=X64.Semantics_s.fst(381,4-381,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.eval_codes.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(X64.Semantics_s.eval_codes.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((X64.Semantics_s.eval_codes.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_X64.Semantics_s.eval_codes.fuel_instrumented))

:named @fuel_irrelevance_X64.Semantics_s.eval_codes.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(374,8-374,17); use=X64.Semantics_s.fst(374,8-374,17)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (X64.Semantics_s.eval_code.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(X64.Semantics_s.eval_code.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((X64.Semantics_s.eval_code.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_X64.Semantics_s.eval_code.fuel_instrumented))

:named @fuel_irrelevance_X64.Semantics_s.eval_code.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(181,8-181,14); use=FStar.UInt.fsti(181,8-181,14)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.UInt.to_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.UInt.to_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.UInt.to_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.UInt.to_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(185,8-185,16); use=FStar.UInt.fsti(185,8-185,16)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term))
 (! (= (FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2)
(FStar.UInt.from_vec.fuel_instrumented ZFuel
@x1
@x2))
 

:pattern ((FStar.UInt.from_vec.fuel_instrumented (SFuel @u0)
@x1
@x2))
:qid @fuel_irrelevance_FStar.UInt.from_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.UInt.from_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(57,8-57,18); use=FStar.BitVector.fsti(57,8-57,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logxor_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logxor_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logxor_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logxor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Fuel irrelevance
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(46,8-46,18); use=FStar.BitVector.fsti(46,8-46,18)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term))
 (! (= (FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3)
(FStar.BitVector.logand_vec.fuel_instrumented ZFuel
@x1
@x2
@x3))
 

:pattern ((FStar.BitVector.logand_vec.fuel_instrumented (SFuel @u0)
@x1
@x2
@x3))
:qid @fuel_irrelevance_FStar.BitVector.logand_vec.fuel_instrumented))

:named @fuel_irrelevance_FStar.BitVector.logand_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name X64.Semantics_s.eval_code; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_codes; Namespace X64.Semantics_s; Name X64.Semantics_s.eval_while; Namespace X64.Semantics_s
(assert (! 
;; def=X64.Semantics_s.fst(374,8-374,17); use=X64.Semantics_s.fst(374,8-374,17)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (X64.Semantics_s.eval_code @x0
@x1
@x2)
(X64.Semantics_s.eval_code.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((X64.Semantics_s.eval_code @x0
@x1
@x2))
:qid @fuel_correspondence_X64.Semantics_s.eval_code.fuel_instrumented))

:named @fuel_correspondence_X64.Semantics_s.eval_code.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.UInt.to_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(181,8-181,14); use=FStar.UInt.fsti(181,8-181,14)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.to_vec @x0
@x1)
(FStar.UInt.to_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.UInt.to_vec @x0
@x1))
:qid @fuel_correspondence_FStar.UInt.to_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.UInt.to_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.UInt.from_vec; Namespace FStar.UInt
(assert (! 
;; def=FStar.UInt.fsti(185,8-185,16); use=FStar.UInt.fsti(185,8-185,16)
(forall ((@x0 Term) (@x1 Term))
 (! (= (FStar.UInt.from_vec @x0
@x1)
(FStar.UInt.from_vec.fuel_instrumented MaxFuel
@x0
@x1))
 

:pattern ((FStar.UInt.from_vec @x0
@x1))
:qid @fuel_correspondence_FStar.UInt.from_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.UInt.from_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logxor_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(57,8-57,18); use=FStar.BitVector.fsti(57,8-57,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logxor_vec @x0
@x1
@x2)
(FStar.BitVector.logxor_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logxor_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logxor_vec.fuel_instrumented))
;;;;;;;;;;;;;;;;Correspondence of recursive function to instrumented version
;;; Fact-ids: Name FStar.BitVector.logand_vec; Namespace FStar.BitVector
(assert (! 
;; def=FStar.BitVector.fsti(46,8-46,18); use=FStar.BitVector.fsti(46,8-46,18)
(forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (= (FStar.BitVector.logand_vec @x0
@x1
@x2)
(FStar.BitVector.logand_vec.fuel_instrumented MaxFuel
@x0
@x1
@x2))
 

:pattern ((FStar.BitVector.logand_vec @x0
@x1
@x2))
:qid @fuel_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))

:named @fuel_correspondence_FStar.BitVector.logand_vec.fuel_instrumented))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(33,50-39,10)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (b0: X64.Semantics_s.codes) (s0: X64.Vale.State_i.state) (sN: X64.Vale.State_i.state).
;   (*  - Could not prove post-condition
; *)
;   forall (p:
;     Prims.pure_post (X64.Vale.State_i.state & X64.Semantics_s.code & X64.Semantics_s.codes)).
;     Cons? b0 /\ X64.Vale.Lemmas_i.eval_code (X64.Machine_s.Block b0) s0 sN /\
;     (forall (ghost_result: X64.Vale.State_i.state & X64.Semantics_s.code & X64.Semantics_s.codes).
;         (let s1, c1, b1 = ghost_result in
;           b0 == c1 :: b1 /\ X64.Vale.Lemmas_i.eval_code c1 s0 s1 /\
;           X64.Vale.Lemmas_i.eval_code (X64.Machine_s.Block b1) s1 sN) ==>
;         p ghost_result) ==>
;     ~(Cons? b0) ==> Prims.l_False


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_block`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.codes)
(HasType @x1
X64.Vale.State_i.state)
(HasType @x2
X64.Vale.State_i.state))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x3 Term))
 (! (implies (and (HasType @x3
(Prims.pure_post (FStar.Pervasives.Native.tuple3 X64.Vale.State_i.state
X64.Semantics_s.code
X64.Semantics_s.codes)))

;; def=X64.Vale.Lemmas_i.fsti(62,13-62,21); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(BoxBool_proj_0 (Prims.uu___is_Cons X64.Semantics_s.code
@x0))


;; def=X64.Vale.Lemmas_i.fsti(62,25-62,51); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(62,25-62,51); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(X64.Vale.Lemmas_i.eval_code (X64.Machine_s.Block X64.Semantics_s.ins
X64.Semantics_s.ocmp
@x0)
@x1
@x2)
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(forall ((@x4 Term))
 (! (implies (and (or label_1
(HasType @x4
(FStar.Pervasives.Native.tuple3 X64.Vale.State_i.state
X64.Semantics_s.code
X64.Semantics_s.codes)))
(let ((@lb5 @x4))

;; def=X64.Vale.Lemmas_i.fsti(64,4-66,30); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(and 
;; def=X64.Vale.Lemmas_i.fsti(64,4-64,16); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(64,4-64,16); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(= @x0
(Prims.Cons X64.Semantics_s.code
(FStar.Pervasives.Native.Mktuple3__2 @lb5)
(FStar.Pervasives.Native.Mktuple3__3 @lb5)))
)


;; def=X64.Vale.Lemmas_i.fsti(65,4-65,22); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(or label_3

;; def=X64.Vale.Lemmas_i.fsti(65,4-65,22); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(65,4-65,22); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(X64.Vale.Lemmas_i.eval_code (FStar.Pervasives.Native.Mktuple3__2 @lb5)
@x1
(FStar.Pervasives.Native.Mktuple3__1 @lb5))
)
)


;; def=X64.Vale.Lemmas_i.fsti(66,4-66,30); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(or label_4

;; def=X64.Vale.Lemmas_i.fsti(66,4-66,30); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(66,4-66,30); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(X64.Vale.Lemmas_i.eval_code (X64.Machine_s.Block X64.Semantics_s.ins
X64.Semantics_s.ocmp
(FStar.Pervasives.Native.Mktuple3__3 @lb5))
(FStar.Pervasives.Native.Mktuple3__1 @lb5)
@x2)
)
)
)
))

;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(Valid 
;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(ApplyTT @x3
@x4)
)
)
 

:pattern (
;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(Valid 
;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(33,50-39,10)
(ApplyTT @x3
@x4)
)
)
:qid @query.2))


;; def=X64.Vale.Lemmas_i.fst(34,6-34,12); use=X64.Vale.Lemmas_i.fst(34,6-34,12)
(not 
;; def=X64.Vale.Lemmas_i.fst(34,6-34,12); use=X64.Vale.Lemmas_i.fst(34,6-34,12)
(BoxBool_proj_0 (Prims.uu___is_Cons X64.Semantics_s.code
@x0))
)
)
label_5)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_block, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_block


; <Start encoding let lemma_block>

(declare-fun X64.Vale.Lemmas_i.lemma_block (Term Term Term) Term)
(declare-fun Tm_refine_ec0e014fbc4d93e822b7bab1a60d71ce (Term Term Term) Term)
;;;;;;;;;;;;;;;;b0: X64.Semantics_s.codes -> s0: X64.Vale.State_i.state -> sN: X64.Vale.State_i.state   -> Prims.Ghost (X64.Vale.State_i.state & X64.Semantics_s.code & X64.Semantics_s.codes)
(declare-fun Tm_ghost_arrow_e5549eb2cedc0b2bdb062b3ee5f94469 () Term)
(declare-fun X64.Vale.Lemmas_i.lemma_block@tok () Term)


; </end encoding let lemma_block>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_empty


; <Skipped val X64.Vale.Lemmas_i.lemma_empty/>


; encoding sigelt let lemma_empty


; <Start encoding let lemma_empty>

(declare-fun X64.Vale.Lemmas_i.lemma_empty (Term Term) Term)
(declare-fun Tm_refine_1a123a18a9fbec3f8aaf12e23c99cf3e (Term Term) Term)
;;;;;;;;;;;;;;;;s0: X64.Vale.State_i.state -> sN: X64.Vale.State_i.state -> Prims.Ghost X64.Vale.State_i.state
(declare-fun Tm_ghost_arrow_8ac43c40294e5968e50d9cff9a539d9d () Term)
(declare-fun X64.Vale.Lemmas_i.lemma_empty@tok () Term)


; </end encoding let lemma_empty>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_ifElse


; <Skipped val X64.Vale.Lemmas_i.lemma_ifElse/>

;;;;;;;;;;;;;;;;Lemma: X64.Vale.StateLemmas_i.lemma_to_mem_contains
;;; Fact-ids: Name X64.Vale.StateLemmas_i.lemma_to_mem_contains; Namespace X64.Vale.StateLemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
Prims.int))

;; def=X64.Vale.StateLemmas_i.fsti(41,11-41,70); use=X64.Vale.StateLemmas_i.fsti(41,11-41,70)
(= (FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
@x1)
(FStar.Map.contains Prims.int
(X64.Semantics_s.uint64 Dummy_value)
(X64.Semantics_s.__proj__Mkstate__item__mem (X64.Vale.StateLemmas_i.state_to_S @x0))
@x1))
)
 

:pattern ((FStar.Map.contains Prims.int
X64.Machine_s.nat64
(X64.Vale.State_i.__proj__Mkstate__item__mem @x0)
@x1))
:qid lemma_X64.Vale.StateLemmas_i.lemma_to_mem_contains))
:named lemma_X64.Vale.StateLemmas_i.lemma_to_mem_contains))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.Lemmas_i.lemma_cmp_gt
;;; Fact-ids: Name X64.Vale.Lemmas_i.lemma_cmp_gt; Namespace X64.Vale.Lemmas_i
(assert (! (forall ((@x0 Term) (@x1 Term) (@x2 Term))
 (! (implies (and (HasType @x0
X64.Vale.State_i.state)
(HasType @x1
X64.Machine_s.operand)
(HasType @x2
X64.Machine_s.operand))

;; def=X64.Vale.Lemmas_i.fsti(57,11-57,79); use=X64.Vale.Lemmas_i.fst(31,4-31,16)
(iff 
;; def=X64.Vale.Lemmas_i.fsti(57,11-57,36); use=X64.Vale.Lemmas_i.fst(31,4-31,16)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OGt @x1
@x2)))


;; def=X64.Vale.Lemmas_i.fsti(57,42-57,79); use=X64.Vale.Lemmas_i.fst(31,4-31,16)
(> (BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x1
@x0))
(BoxInt_proj_0 (X64.Vale.State_i.eval_operand @x2
@x0)))
)
)
 

:pattern ((X64.Vale.Lemmas_i.eval_ocmp @x0
(X64.Semantics_s.OGt @x1
@x2)))
:qid lemma_X64.Vale.Lemmas_i.lemma_cmp_gt))
:named lemma_X64.Vale.Lemmas_i.lemma_cmp_gt))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fst(46,2-46,24)

(declare-fun label_5 () Bool)
(declare-fun label_4 () Bool)
(declare-fun label_3 () Bool)
(declare-fun label_2 () Bool)
(declare-fun label_1 () Bool)

; Encoding query formula : forall (ifb: X64.Semantics_s.ocmp)
;   (ct: X64.Semantics_s.code)
;   (cf: X64.Semantics_s.code)
;   (s0: X64.Vale.State_i.state)
;   (sN: X64.Vale.State_i.state).
;   (*  - Could not prove post-condition
; *)
;   forall (p: Prims.pure_post (Prims.bool & X64.Vale.State_i.state)).
;     X64.Vale.Lemmas_i.eval_code (X64.Machine_s.IfElse ifb ct cf) s0 sN /\
;     (forall (ghost_result: Prims.bool & X64.Vale.State_i.state).
;         (let cond, sM = ghost_result in
;           cond == X64.Vale.Lemmas_i.eval_ocmp s0 ifb /\ sM == s0 /\
;           (match cond with
;             | true -> X64.Vale.Lemmas_i.eval_code ct sM sN
;             | _ -> X64.Vale.Lemmas_i.eval_code cf sM sN)) ==>
;         p ghost_result) ==>
;     (forall (return_val: Prims.bool & X64.Vale.State_i.state).
;         return_val == (X64.Vale.Lemmas_i.eval_ocmp s0 ifb, s0) ==> p return_val)


; Context: While encoding a query
; While typechecking the top-level declaration `let lemma_ifElse`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not (forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.ocmp)
(HasType @x1
X64.Semantics_s.code)
(HasType @x2
X64.Semantics_s.code)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
X64.Vale.State_i.state))

;; def=Prims.fst(406,51-406,91); use=Prims.fst(430,19-430,32)
(forall ((@x5 Term))
 (! (implies (and (HasType @x5
(Prims.pure_post (FStar.Pervasives.Native.tuple2 Prims.bool
X64.Vale.State_i.state)))

;; def=X64.Vale.Lemmas_i.fsti(73,12-73,48); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(73,12-73,48); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(X64.Vale.Lemmas_i.eval_code (X64.Machine_s.IfElse X64.Semantics_s.ins
X64.Semantics_s.ocmp
@x0
@x1
@x2)
@x3
@x4)
)


;; def=Prims.fst(485,36-485,100); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(forall ((@x6 Term))
 (! (implies (and (or label_1
(HasType @x6
(FStar.Pervasives.Native.tuple2 Prims.bool
X64.Vale.State_i.state)))
(let ((@lb7 @x6))

;; def=X64.Vale.Lemmas_i.fsti(75,4-77,61); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(and 
;; def=X64.Vale.Lemmas_i.fsti(75,4-75,28); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(or label_2

;; def=X64.Vale.Lemmas_i.fsti(75,4-75,28); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(= (FStar.Pervasives.Native.Mktuple2__1 @lb7)
(X64.Vale.Lemmas_i.eval_ocmp @x3
@x0))
)


;; def=X64.Vale.Lemmas_i.fsti(76,4-76,12); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(or label_3

;; def=X64.Vale.Lemmas_i.fsti(76,4-76,12); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(= (FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x3)
)

(let ((@lb8 (FStar.Pervasives.Native.Mktuple2__1 @lb7)))
(ite (= @lb8
(BoxBool true))

;; def=X64.Vale.Lemmas_i.fsti(77,18-77,36); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(or label_4

;; def=X64.Vale.Lemmas_i.fsti(77,18-77,36); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(77,18-77,36); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(X64.Vale.Lemmas_i.eval_code @x1
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)
)


;; def=X64.Vale.Lemmas_i.fsti(77,42-77,60); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(or label_5

;; def=X64.Vale.Lemmas_i.fsti(77,42-77,60); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(77,42-77,60); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(X64.Vale.Lemmas_i.eval_code @x2
(FStar.Pervasives.Native.Mktuple2__2 @lb7)
@x4)
)
)
)))
))

;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(Valid 
;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(ApplyTT @x5
@x6)
)
)
 

:pattern (
;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(Valid 
;; def=Prims.fst(485,85-485,99); use=X64.Vale.Lemmas_i.fst(46,2-46,24)
(ApplyTT @x5
@x6)
)
)
:qid @query.2))
)

;; def=Prims.fst(356,2-356,58); use=Prims.fst(426,19-426,31)
(forall ((@x6 Term))
 (! (implies (and (HasType @x6
(FStar.Pervasives.Native.tuple2 Prims.bool
X64.Vale.State_i.state))

;; def=Prims.fst(356,26-356,41); use=Prims.fst(426,19-426,31)
(= @x6
(FStar.Pervasives.Native.Mktuple2 Prims.bool
X64.Vale.State_i.state
(X64.Vale.Lemmas_i.eval_ocmp @x3
@x0)
@x3))
)

;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(Valid 
;; def=Prims.fst(356,46-356,58); use=Prims.fst(426,19-426,31)
(ApplyTT @x5
@x6)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query)))
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_5")
(eval label_5)
(echo "label_4")
(eval label_4)
(echo "label_3")
(eval label_3)
(echo "label_2")
(eval label_2)
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_ifElse, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @MaxFuel_assumption, @MaxIFuel_assumption, @fuel_correspondence_X64.Semantics_s.eval_code.fuel_instrumented, @fuel_irrelevance_X64.Semantics_s.eval_code.fuel_instrumented, @query, constructor_distinct_X64.Machine_s.IfElse, data_typing_intro_X64.Machine_s.IfElse@tok, equation_Prims.nat, equation_X64.Semantics_s.code, equation_X64.Vale.Lemmas_i.eval_code, equation_X64.Vale.Lemmas_i.eval_ocmp, equation_with_fuel_X64.Semantics_s.eval_code.fuel_instrumented, fuel_guarded_inversion_X64.Semantics_s.state, fuel_guarded_inversion_X64.Vale.State_i.state, int_inversion, kinding_X64.Semantics_s.ins@tok, kinding_X64.Semantics_s.ocmp@tok, projection_inverse_FStar.Pervasives.Native.Mktuple2__1, projection_inverse_FStar.Pervasives.Native.Mktuple2__2, projection_inverse_X64.Machine_s.IfElse_ifCond, projection_inverse_X64.Machine_s.IfElse_ifFalse, projection_inverse_X64.Machine_s.IfElse_ifTrue, projection_inverse_X64.Machine_s.IfElse_t_ins, projection_inverse_X64.Machine_s.IfElse_t_ocmp, refinement_interpretation_Tm_refine_542f9d4f129664613f2483a6c88bc7c2, typing_X64.Vale.StateLemmas_i.state_to_S

; Z3 invocation started by F*
; F* version: 2024.12.03~dev -- commit hash: a3be6122b76ec0ca29030e1ff72576dceeede19d
; Z3 version (according to F*): 4.12.1

(pop) ;; 2}pop

; encoding sigelt let lemma_ifElse


; <Start encoding let lemma_ifElse>

(declare-fun X64.Vale.Lemmas_i.lemma_ifElse (Term Term Term Term Term) Term)
(declare-fun Tm_refine_888cb1733b22127f63eee621a74e68db (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;ifb: X64.Semantics_s.ocmp ->     ct: X64.Semantics_s.code ->     cf: X64.Semantics_s.code ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost (Prims.bool & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_7cfc4af8db6b8f375f195346cf7fd978 () Term)
(declare-fun X64.Vale.Lemmas_i.lemma_ifElse@tok () Term)


; </end encoding let lemma_ifElse>


; encoding sigelt val X64.Vale.Lemmas_i.lemma_while


; <Skipped val X64.Vale.Lemmas_i.lemma_while/>


; encoding sigelt let lemma_while


; <Start encoding let lemma_while>

(declare-fun X64.Vale.Lemmas_i.lemma_while (Term Term Term Term) Term)
(declare-fun Tm_refine_9cf895b0a039eba851f96470cf9d02fd (Term Term Term Term) Term)
;;;;;;;;;;;;;;;;b: X64.Semantics_s.ocmp ->     c: X64.Semantics_s.code ->     s0: X64.Vale.State_i.state ->     sN: X64.Vale.State_i.state   -> Prims.Ghost (Prims.nat & X64.Vale.State_i.state)
(declare-fun Tm_ghost_arrow_41d90e4eb538ca1c8cd43daf782f0a1c () Term)
(declare-fun X64.Vale.Lemmas_i.lemma_while@tok () Term)


; </end encoding let lemma_while>

;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__ok; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(27,2-27,4); use=X64.Vale.State_i.fsti(27,2-27,4)
(forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)
(HasType (X64.Vale.State_i.__proj__Mkstate__item__ok @x0)
Prims.bool))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__ok @x0))
:qid typing_X64.Vale.State_i.__proj__Mkstate__item__ok))

:named typing_X64.Vale.State_i.__proj__Mkstate__item__ok))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_while; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fst(24,4-24,14); use=X64.Vale.Lemmas_i.fst(24,4-24,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.ocmp)
(HasType @x1
X64.Semantics_s.code)
(HasType @x2
Prims.nat)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
X64.Vale.State_i.state))
(HasType (X64.Vale.Lemmas_i.eval_while @x0
@x1
@x2
@x3
@x4)
Tm_type))
 

:pattern ((X64.Vale.Lemmas_i.eval_while @x0
@x1
@x2
@x3
@x4))
:qid typing_X64.Vale.Lemmas_i.eval_while))

:named typing_X64.Vale.Lemmas_i.eval_while))
;;;;;;;;;;;;;;;;free var typing
;;; Fact-ids: Name Prims.guard_free; Namespace Prims
(assert (! 
;; def=Prims.fst(346,5-346,15); use=Prims.fst(346,5-346,15)
(forall ((@x0 Term))
 (! (implies (HasType @x0
Tm_type)
(HasType (Prims.guard_free @x0)
Tm_type))
 

:pattern ((Prims.guard_free @x0))
:qid typing_Prims.guard_free))

:named typing_Prims.guard_free))
;;;;;;;;;;;;;;;;Projector equation
;;; Fact-ids: Name X64.Vale.State_i.__proj__Mkstate__item__ok; Namespace X64.Vale.State_i
(assert (! 
;; def=X64.Vale.State_i.fsti(27,2-27,4); use=X64.Vale.State_i.fsti(27,2-27,4)
(forall ((@x0 Term))
 (! (= (X64.Vale.State_i.__proj__Mkstate__item__ok @x0)
(X64.Vale.State_i.Mkstate_ok @x0))
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__ok @x0))
:qid proj_equation_X64.Vale.State_i.Mkstate_ok))

:named proj_equation_X64.Vale.State_i.Mkstate_ok))
;;;;;;;;;;;;;;;;Lemma: X64.Vale.StateLemmas_i.lemma_to_ok
;;; Fact-ids: Name X64.Vale.StateLemmas_i.lemma_to_ok; Namespace X64.Vale.StateLemmas_i
(assert (! (forall ((@x0 Term))
 (! (implies (HasType @x0
X64.Vale.State_i.state)

;; def=X64.Vale.StateLemmas_i.fsti(33,11-33,37); use=X64.Vale.StateLemmas_i.fsti(33,11-33,37)
(= (X64.Vale.State_i.__proj__Mkstate__item__ok @x0)
(X64.Semantics_s.__proj__Mkstate__item__ok (X64.Vale.StateLemmas_i.state_to_S @x0)))
)
 

:pattern ((X64.Vale.State_i.__proj__Mkstate__item__ok @x0))
:qid lemma_X64.Vale.StateLemmas_i.lemma_to_ok))
:named lemma_X64.Vale.StateLemmas_i.lemma_to_ok))
;;;;;;;;;;;;;;;;Equation for X64.Vale.Lemmas_i.eval_while
;;; Fact-ids: Name X64.Vale.Lemmas_i.eval_while; Namespace X64.Vale.Lemmas_i
(assert (! 
;; def=X64.Vale.Lemmas_i.fst(24,4-24,14); use=X64.Vale.Lemmas_i.fst(24,4-24,14)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (= (X64.Vale.Lemmas_i.eval_while @x0
@x1
@x2
@x3
@x4)
(Prims.admit Tm_type
Tm_unit))
 

:pattern ((X64.Vale.Lemmas_i.eval_while @x0
@x1
@x2
@x3
@x4))
:qid equation_X64.Vale.Lemmas_i.eval_while))

:named equation_X64.Vale.Lemmas_i.eval_while))
(push) ;; push{2

; Starting query at X64.Vale.Lemmas_i.fsti(86,0-97,4)

(declare-fun label_1 () Bool)
(declare-fun Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 (Term Term Term Term Term) Term)
;;;;;;;;;;;;;;;;refinement kinding
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (HasType (Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x0
@x1
@x2
@x3
@x4)
Tm_type)
 

:pattern ((HasType (Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x0
@x1
@x2
@x3
@x4)
Tm_type))
:qid refinement_kinding_Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0))

:named refinement_kinding_Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0))
;;;;;;;;;;;;;;;;refinement_interpretation
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@u0 Fuel) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term) (@x6 Term))
 (! (iff (HasTypeFuel @u0
@x1
(Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x2
@x3
@x4
@x5
@x6))
(and (HasTypeFuel @u0
@x1
(FStar.Pervasives.Native.tuple2 X64.Vale.State_i.state
X64.Vale.State_i.state))

;; def=X64.Vale.Lemmas_i.fsti(88,4-88,9); use=X64.Vale.Lemmas_i.fsti(86,77-86,82)
(> (BoxInt_proj_0 @x2)
0)


;; def=X64.Vale.Lemmas_i.fsti(89,4-89,26); use=X64.Vale.Lemmas_i.fsti(86,77-86,82)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(89,4-89,26); use=X64.Vale.Lemmas_i.fsti(86,77-86,82)
(X64.Vale.Lemmas_i.eval_while @x3
@x4
@x2
@x5
@x6)
)
))
 

:pattern ((HasTypeFuel @u0
@x1
(Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x2
@x3
@x4
@x5
@x6)))
:qid refinement_interpretation_Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0))

:named refinement_interpretation_Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0))
;;;;;;;;;;;;;;;;haseq for Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0
;;; Fact-ids: 
(assert (! 
;; def=Prims.fst(315,31-315,40); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term))
 (! (iff (Valid (Prims.hasEq (Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x0
@x1
@x2
@x3
@x4)))
(Valid (Prims.hasEq (FStar.Pervasives.Native.tuple2 X64.Vale.State_i.state
X64.Vale.State_i.state))))
 

:pattern ((Valid (Prims.hasEq (Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x0
@x1
@x2
@x3
@x4))))
:qid haseqTm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0))

:named haseqTm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0))

; Encoding query formula : forall (b: X64.Semantics_s.ocmp)
;   (c: X64.Semantics_s.code)
;   (n: Prims.nat)
;   (s0: X64.Vale.State_i.state)
;   (sN: X64.Vale.State_i.state)
;   (_:
;   _:
;   (X64.Vale.State_i.state & X64.Vale.State_i.state)
;     {n > 0 /\ X64.Vale.Lemmas_i.eval_while b c n s0 sN}).
;   (*  - Could not prove post-condition
; *)
;   forall (b: X64.Vale.State_i.state) (b: X64.Vale.State_i.state).
;     _ == (b, b) ==>
;     n > 0 /\ b == s0 /\ X64.Vale.Lemmas_i.eval_ocmp s0 b /\ X64.Vale.Lemmas_i.eval_code c b b ==>
;     (forall (k: Prims.pure_post Prims.logical).
;         (forall (x: Prims.logical). {:pattern Prims.guard_free (k x)} Prims.auto_squash (k x)) ==>
;         b.ok == true ==> n - 1 >= 0)


; Context: While encoding a query
; While typechecking the top-level declaration `val X64.Vale.Lemmas_i.lemma_whileTrue`

(push) ;; push{0

; <fuel='2' ifuel='1'>

;;; Fact-ids: 
(assert (! (= MaxFuel
(SFuel (SFuel ZFuel)))
:named @MaxFuel_assumption))
;;; Fact-ids: 
(assert (! (= MaxIFuel
(SFuel ZFuel))
:named @MaxIFuel_assumption))
;;;;;;;;;;;;;;;;query
;;; Fact-ids: 
(assert (! (not 
;; def=dummy(0,0-0,0); use=X64.Vale.Lemmas_i.fsti(86,0-97,4)
(forall ((@x0 Term) (@x1 Term) (@x2 Term) (@x3 Term) (@x4 Term) (@x5 Term))
 (! (implies (and (HasType @x0
X64.Semantics_s.ocmp)
(HasType @x1
X64.Semantics_s.code)
(HasType @x2
Prims.nat)
(HasType @x3
X64.Vale.State_i.state)
(HasType @x4
X64.Vale.State_i.state)
(HasType @x5
(Tm_refine_7fa7a41c1e20c3dff0ea3ced22f336d0 @x2
@x0
@x1
@x3
@x4)))

;; def=Prims.fst(413,99-413,120); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@x6 Term))
 (! (implies (HasType @x6
X64.Vale.State_i.state)

;; def=Prims.fst(413,99-413,120); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@x7 Term))
 (! (implies (and (HasType @x7
X64.Vale.State_i.state)

;; def=X64.Vale.Lemmas_i.fsti(91,17-91,24); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(= @x5
(FStar.Pervasives.Native.Mktuple2 X64.Vale.State_i.state
X64.Vale.State_i.state
@x6
@x7))


;; def=X64.Vale.Lemmas_i.fsti(92,4-92,9); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(> (BoxInt_proj_0 @x2)
0)


;; def=X64.Vale.Lemmas_i.fsti(93,4-93,13); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(= @x6
@x3)


;; def=X64.Vale.Lemmas_i.fsti(94,4-94,18); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(BoxBool_proj_0 (X64.Vale.Lemmas_i.eval_ocmp @x3
@x0))


;; def=X64.Vale.Lemmas_i.fsti(95,4-95,22); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(Valid 
;; def=X64.Vale.Lemmas_i.fsti(95,4-95,22); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(X64.Vale.Lemmas_i.eval_code @x1
@x6
@x7)
)
)

;; def=dummy(0,0-0,0); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@x8 Term))
 (! (implies (and (HasType @x8
(Prims.pure_post Prims.logical))

;; def=Prims.fst(402,27-402,88); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(forall ((@x9 Term))
 (! 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(Valid 
;; def=Prims.fst(402,84-402,87); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(ApplyTT @x8
@x9)
)

 

:pattern ((ApplyTT @x8
@x9))
:qid @query.4))


;; def=X64.Vale.Lemmas_i.fsti(96,8-96,13); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(= (X64.Vale.State_i.__proj__Mkstate__item__ok @x7)
(BoxBool true))
)

;; def=Prims.fst(680,18-680,24); use=X64.Vale.Lemmas_i.fsti(96,34-96,41)
(or label_1

;; def=Prims.fst(680,18-680,24); use=X64.Vale.Lemmas_i.fsti(86,24-86,98)
(>= (- (BoxInt_proj_0 @x2)
1)
0)
)
)
 
;;no pats
:qid @query.3))
)
 
;;no pats
:qid @query.2))
)
 
;;no pats
:qid @query.1))
)
 
;;no pats
:qid @query))
)
:named @query))
(set-option :rlimit 2723280)
(echo "<result>")
(check-sat)
(echo "</result>")
(set-option :rlimit 0)
(echo "<reason-unknown>")
(get-info :reason-unknown)
(echo "</reason-unknown>")
(echo "<unsat-core>")
(get-unsat-core)
(echo "</unsat-core>")
(echo "<labels>")
(echo "label_1")
(eval label_1)
(echo "</labels>")
(echo "Done!")
(pop) ;; 0}pop
; QUERY ID: (X64.Vale.Lemmas_i.lemma_whileTrue, 1)
; STATUS: unsat
; UNSAT CORE GENERATED: @query
